(self["webpackChunkgulp_scss_starter"] = self["webpackChunkgulp_scss_starter"] || []).push([["vendor"],{

    /***/ "./node_modules/@fancyapps/ui/dist/fancybox.esm.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@fancyapps/ui/dist/fancybox.esm.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Carousel": () => (/* binding */ y),
            /* harmony export */   "Fancybox": () => (/* binding */ R),
            /* harmony export */   "Panzoom": () => (/* binding */ d)
            /* harmony export */ });
// @fancyapps/ui/Fancybox v4.0.31
        const t=t=>"object"==typeof t&&null!==t&&t.constructor===Object&&"[object Object]"===Object.prototype.toString.call(t),e=(...i)=>{let s=!1;"boolean"==typeof i[0]&&(s=i.shift());let o=i[0];if(!o||"object"!=typeof o)throw new Error("extendee must be an object");const n=i.slice(1),a=n.length;for(let i=0;i<a;i++){const a=n[i];for(let i in a)if(a.hasOwnProperty(i)){const n=a[i];if(s&&(Array.isArray(n)||t(n))){const t=Array.isArray(n)?[]:{};o[i]=e(!0,o.hasOwnProperty(i)?o[i]:t,n)}else o[i]=n}}return o},i=(t,e=1e4)=>(t=parseFloat(t)||0,Math.round((t+Number.EPSILON)*e)/e),s=function(t){return!!(t&&"object"==typeof t&&t instanceof Element&&t!==document.body)&&(!t.__Panzoom&&(function(t){const e=getComputedStyle(t)["overflow-y"],i=getComputedStyle(t)["overflow-x"],s=("scroll"===e||"auto"===e)&&Math.abs(t.scrollHeight-t.clientHeight)>1,o=("scroll"===i||"auto"===i)&&Math.abs(t.scrollWidth-t.clientWidth)>1;return s||o}(t)?t:s(t.parentNode)))},o="undefined"!=typeof window&&window.ResizeObserver||class{constructor(t){this.observables=[],this.boundCheck=this.check.bind(this),this.boundCheck(),this.callback=t}observe(t){if(this.observables.some((e=>e.el===t)))return;const e={el:t,size:{height:t.clientHeight,width:t.clientWidth}};this.observables.push(e)}unobserve(t){this.observables=this.observables.filter((e=>e.el!==t))}disconnect(){this.observables=[]}check(){const t=this.observables.filter((t=>{const e=t.el.clientHeight,i=t.el.clientWidth;if(t.size.height!==e||t.size.width!==i)return t.size.height=e,t.size.width=i,!0})).map((t=>t.el));t.length>0&&this.callback(t),window.requestAnimationFrame(this.boundCheck)}};class n{constructor(t){this.id=self.Touch&&t instanceof Touch?t.identifier:-1,this.pageX=t.pageX,this.pageY=t.pageY,this.clientX=t.clientX,this.clientY=t.clientY}}const a=(t,e)=>e?Math.sqrt((e.clientX-t.clientX)**2+(e.clientY-t.clientY)**2):0,r=(t,e)=>e?{clientX:(t.clientX+e.clientX)/2,clientY:(t.clientY+e.clientY)/2}:t;class h{constructor(t,{start:e=(()=>!0),move:i=(()=>{}),end:s=(()=>{})}={}){this._element=t,this.startPointers=[],this.currentPointers=[],this._pointerStart=t=>{if(t.buttons>0&&0!==t.button)return;const e=new n(t);this.currentPointers.some((t=>t.id===e.id))||this._triggerPointerStart(e,t)&&(window.addEventListener("mousemove",this._move),window.addEventListener("mouseup",this._pointerEnd))},this._touchStart=t=>{for(const e of Array.from(t.changedTouches||[]))this._triggerPointerStart(new n(e),t)},this._move=t=>{const e=this.currentPointers.slice(),i=(t=>"changedTouches"in t)(t)?Array.from(t.changedTouches).map((t=>new n(t))):[new n(t)];for(const t of i){const e=this.currentPointers.findIndex((e=>e.id===t.id));e<0||(this.currentPointers[e]=t)}this._moveCallback(e,this.currentPointers.slice(),t)},this._triggerPointerEnd=(t,e)=>{const i=this.currentPointers.findIndex((e=>e.id===t.id));return!(i<0)&&(this.currentPointers.splice(i,1),this.startPointers.splice(i,1),this._endCallback(t,e),!0)},this._pointerEnd=t=>{t.buttons>0&&0!==t.button||this._triggerPointerEnd(new n(t),t)&&(window.removeEventListener("mousemove",this._move,{passive:!1}),window.removeEventListener("mouseup",this._pointerEnd,{passive:!1}))},this._touchEnd=t=>{for(const e of Array.from(t.changedTouches||[]))this._triggerPointerEnd(new n(e),t)},this._startCallback=e,this._moveCallback=i,this._endCallback=s,this._element.addEventListener("mousedown",this._pointerStart,{passive:!1}),this._element.addEventListener("touchstart",this._touchStart,{passive:!1}),this._element.addEventListener("touchmove",this._move,{passive:!1}),this._element.addEventListener("touchend",this._touchEnd),this._element.addEventListener("touchcancel",this._touchEnd)}stop(){this._element.removeEventListener("mousedown",this._pointerStart,{passive:!1}),this._element.removeEventListener("touchstart",this._touchStart,{passive:!1}),this._element.removeEventListener("touchmove",this._move,{passive:!1}),this._element.removeEventListener("touchend",this._touchEnd),this._element.removeEventListener("touchcancel",this._touchEnd),window.removeEventListener("mousemove",this._move),window.removeEventListener("mouseup",this._pointerEnd)}_triggerPointerStart(t,e){return!!this._startCallback(t,e)&&(this.currentPointers.push(t),this.startPointers.push(t),!0)}}class l{constructor(t={}){this.options=e(!0,{},t),this.plugins=[],this.events={};for(const t of["on","once"])for(const e of Object.entries(this.options[t]||{}))this[t](...e)}option(t,e,...i){t=String(t);let s=(o=t,n=this.options,o.split(".").reduce((function(t,e){return t&&t[e]}),n));var o,n;return"function"==typeof s&&(s=s.call(this,this,...i)),void 0===s?e:s}localize(t,e=[]){return t=(t=String(t).replace(/\{\{(\w+).?(\w+)?\}\}/g,((t,i,s)=>{let o="";s?o=this.option(`${i[0]+i.toLowerCase().substring(1)}.l10n.${s}`):i&&(o=this.option(`l10n.${i}`)),o||(o=t);for(let t=0;t<e.length;t++)o=o.split(e[t][0]).join(e[t][1]);return o}))).replace(/\{\{(.*)\}\}/,((t,e)=>e))}on(e,i){if(t(e)){for(const t of Object.entries(e))this.on(...t);return this}return String(e).split(" ").forEach((t=>{const e=this.events[t]=this.events[t]||[];-1==e.indexOf(i)&&e.push(i)})),this}once(e,i){if(t(e)){for(const t of Object.entries(e))this.once(...t);return this}return String(e).split(" ").forEach((t=>{const e=(...s)=>{this.off(t,e),i.call(this,this,...s)};e._=i,this.on(t,e)})),this}off(e,i){if(!t(e))return e.split(" ").forEach((t=>{const e=this.events[t];if(!e||!e.length)return this;let s=-1;for(let t=0,o=e.length;t<o;t++){const o=e[t];if(o&&(o===i||o._===i)){s=t;break}}-1!=s&&e.splice(s,1)})),this;for(const t of Object.entries(e))this.off(...t)}trigger(t,...e){for(const i of[...this.events[t]||[]].slice())if(i&&!1===i.call(this,this,...e))return!1;for(const i of[...this.events["*"]||[]].slice())if(i&&!1===i.call(this,t,this,...e))return!1;return!0}attachPlugins(t){const i={};for(const[s,o]of Object.entries(t||{}))!1===this.options[s]||this.plugins[s]||(this.options[s]=e({},o.defaults||{},this.options[s]),i[s]=new o(this));for(const[t,e]of Object.entries(i))e.attach(this);return this.plugins=Object.assign({},this.plugins,i),this}detachPlugins(){for(const t in this.plugins){let e;(e=this.plugins[t])&&"function"==typeof e.detach&&e.detach(this)}return this.plugins={},this}}const c={touch:!0,zoom:!0,pinchToZoom:!0,panOnlyZoomed:!1,lockAxis:!1,friction:.64,decelFriction:.88,zoomFriction:.74,bounceForce:.2,baseScale:1,minScale:1,maxScale:2,step:.5,textSelection:!1,click:"toggleZoom",wheel:"zoom",wheelFactor:42,wheelLimit:5,draggableClass:"is-draggable",draggingClass:"is-dragging",ratio:1};class d extends l{constructor(t,i={}){super(e(!0,{},c,i)),this.state="init",this.$container=t;for(const t of["onLoad","onWheel","onClick"])this[t]=this[t].bind(this);this.initLayout(),this.resetValues(),this.attachPlugins(d.Plugins),this.trigger("init"),this.updateMetrics(),this.attachEvents(),this.trigger("ready"),!1===this.option("centerOnStart")?this.state="ready":this.panTo({friction:0}),t.__Panzoom=this}initLayout(){const t=this.$container;if(!(t instanceof HTMLElement))throw new Error("Panzoom: Container not found");const e=this.option("content")||t.querySelector(".panzoom__content");if(!e)throw new Error("Panzoom: Content not found");this.$content=e;let i=this.option("viewport")||t.querySelector(".panzoom__viewport");i||!1===this.option("wrapInner")||(i=document.createElement("div"),i.classList.add("panzoom__viewport"),i.append(...t.childNodes),t.appendChild(i)),this.$viewport=i||e.parentNode}resetValues(){this.updateRate=this.option("updateRate",/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)?250:24),this.container={width:0,height:0},this.viewport={width:0,height:0},this.content={origWidth:0,origHeight:0,width:0,height:0,x:this.option("x",0),y:this.option("y",0),scale:this.option("baseScale")},this.transform={x:0,y:0,scale:1},this.resetDragPosition()}onLoad(t){this.updateMetrics(),this.panTo({scale:this.option("baseScale"),friction:0}),this.trigger("load",t)}onClick(t){if(t.defaultPrevented)return;if(document.activeElement&&document.activeElement.closest("[contenteditable]"))return;if(this.option("textSelection")&&window.getSelection().toString().length&&(!t.target||!t.target.hasAttribute("data-fancybox-close")))return void t.stopPropagation();const e=this.$content.getClientRects()[0];if("ready"!==this.state&&(this.dragPosition.midPoint||Math.abs(e.top-this.dragStart.rect.top)>1||Math.abs(e.left-this.dragStart.rect.left)>1))return t.preventDefault(),void t.stopPropagation();!1!==this.trigger("click",t)&&this.option("zoom")&&"toggleZoom"===this.option("click")&&(t.preventDefault(),t.stopPropagation(),this.zoomWithClick(t))}onWheel(t){!1!==this.trigger("wheel",t)&&this.option("zoom")&&this.option("wheel")&&this.zoomWithWheel(t)}zoomWithWheel(t){void 0===this.changedDelta&&(this.changedDelta=0);const e=Math.max(-1,Math.min(1,-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)),i=this.content.scale;let s=i*(100+e*this.option("wheelFactor"))/100;if(e<0&&Math.abs(i-this.option("minScale"))<.01||e>0&&Math.abs(i-this.option("maxScale"))<.01?(this.changedDelta+=Math.abs(e),s=i):(this.changedDelta=0,s=Math.max(Math.min(s,this.option("maxScale")),this.option("minScale"))),this.changedDelta>this.option("wheelLimit"))return;if(t.preventDefault(),s===i)return;const o=this.$content.getBoundingClientRect(),n=t.clientX-o.left,a=t.clientY-o.top;this.zoomTo(s,{x:n,y:a})}zoomWithClick(t){const e=this.$content.getClientRects()[0],i=t.clientX-e.left,s=t.clientY-e.top;this.toggleZoom({x:i,y:s})}attachEvents(){this.$content.addEventListener("load",this.onLoad),this.$container.addEventListener("wheel",this.onWheel,{passive:!1}),this.$container.addEventListener("click",this.onClick,{passive:!1}),this.initObserver();const t=new h(this.$container,{start:(e,i)=>{if(!this.option("touch"))return!1;if(this.velocity.scale<0)return!1;const o=i.composedPath()[0];if(!t.currentPointers.length){if(-1!==["BUTTON","TEXTAREA","OPTION","INPUT","SELECT","VIDEO"].indexOf(o.nodeName))return!1;if(this.option("textSelection")&&((t,e,i)=>{const s=t.childNodes,o=document.createRange();for(let t=0;t<s.length;t++){const n=s[t];if(n.nodeType!==Node.TEXT_NODE)continue;o.selectNodeContents(n);const a=o.getBoundingClientRect();if(e>=a.left&&i>=a.top&&e<=a.right&&i<=a.bottom)return n}return!1})(o,e.clientX,e.clientY))return!1}return!s(o)&&(!1!==this.trigger("touchStart",i)&&("mousedown"===i.type&&i.preventDefault(),this.state="pointerdown",this.resetDragPosition(),this.dragPosition.midPoint=null,this.dragPosition.time=Date.now(),!0))},move:(e,i,s)=>{if("pointerdown"!==this.state)return;if(!1===this.trigger("touchMove",s))return void s.preventDefault();if(i.length<2&&!0===this.option("panOnlyZoomed")&&this.content.width<=this.viewport.width&&this.content.height<=this.viewport.height&&this.transform.scale<=this.option("baseScale"))return;if(i.length>1&&(!this.option("zoom")||!1===this.option("pinchToZoom")))return;const o=r(e[0],e[1]),n=r(i[0],i[1]),h=n.clientX-o.clientX,l=n.clientY-o.clientY,c=a(e[0],e[1]),d=a(i[0],i[1]),u=c&&d?d/c:1;this.dragOffset.x+=h,this.dragOffset.y+=l,this.dragOffset.scale*=u,this.dragOffset.time=Date.now()-this.dragPosition.time;const f=1===this.dragStart.scale&&this.option("lockAxis");if(f&&!this.lockAxis){if(Math.abs(this.dragOffset.x)<6&&Math.abs(this.dragOffset.y)<6)return void s.preventDefault();const t=Math.abs(180*Math.atan2(this.dragOffset.y,this.dragOffset.x)/Math.PI);this.lockAxis=t>45&&t<135?"y":"x"}if("xy"===f||"y"!==this.lockAxis){if(s.preventDefault(),s.stopPropagation(),s.stopImmediatePropagation(),this.lockAxis&&(this.dragOffset["x"===this.lockAxis?"y":"x"]=0),this.$container.classList.add(this.option("draggingClass")),this.transform.scale===this.option("baseScale")&&"y"===this.lockAxis||(this.dragPosition.x=this.dragStart.x+this.dragOffset.x),this.transform.scale===this.option("baseScale")&&"x"===this.lockAxis||(this.dragPosition.y=this.dragStart.y+this.dragOffset.y),this.dragPosition.scale=this.dragStart.scale*this.dragOffset.scale,i.length>1){const e=r(t.startPointers[0],t.startPointers[1]),i=e.clientX-this.dragStart.rect.x,s=e.clientY-this.dragStart.rect.y,{deltaX:o,deltaY:a}=this.getZoomDelta(this.content.scale*this.dragOffset.scale,i,s);this.dragPosition.x-=o,this.dragPosition.y-=a,this.dragPosition.midPoint=n}else this.setDragResistance();this.transform={x:this.dragPosition.x,y:this.dragPosition.y,scale:this.dragPosition.scale},this.startAnimation()}},end:(e,i)=>{if("pointerdown"!==this.state)return;if(this._dragOffset={...this.dragOffset},t.currentPointers.length)return void this.resetDragPosition();if(this.state="decel",this.friction=this.option("decelFriction"),this.recalculateTransform(),this.$container.classList.remove(this.option("draggingClass")),!1===this.trigger("touchEnd",i))return;if("decel"!==this.state)return;const s=this.option("minScale");if(this.transform.scale<s)return void this.zoomTo(s,{friction:.64});const o=this.option("maxScale");if(this.transform.scale-o>.01){const t=this.dragPosition.midPoint||e,i=this.$content.getClientRects()[0];this.zoomTo(o,{friction:.64,x:t.clientX-i.left,y:t.clientY-i.top})}else;}});this.pointerTracker=t}initObserver(){this.resizeObserver||(this.resizeObserver=new o((()=>{this.updateTimer||(this.updateTimer=setTimeout((()=>{const t=this.$container.getBoundingClientRect();t.width&&t.height?((Math.abs(t.width-this.container.width)>1||Math.abs(t.height-this.container.height)>1)&&(this.isAnimating()&&this.endAnimation(!0),this.updateMetrics(),this.panTo({x:this.content.x,y:this.content.y,scale:this.option("baseScale"),friction:0})),this.updateTimer=null):this.updateTimer=null}),this.updateRate))})),this.resizeObserver.observe(this.$container))}resetDragPosition(){this.lockAxis=null,this.friction=this.option("friction"),this.velocity={x:0,y:0,scale:0};const{x:t,y:e,scale:i}=this.content;this.dragStart={rect:this.$content.getBoundingClientRect(),x:t,y:e,scale:i},this.dragPosition={...this.dragPosition,x:t,y:e,scale:i},this.dragOffset={x:0,y:0,scale:1,time:0}}updateMetrics(t){!0!==t&&this.trigger("beforeUpdate");const e=this.$container,s=this.$content,o=this.$viewport,n=s instanceof HTMLImageElement,a=this.option("zoom"),r=this.option("resizeParent",a);let h=this.option("width"),l=this.option("height"),c=h||(d=s,Math.max(parseFloat(d.naturalWidth||0),parseFloat(d.width&&d.width.baseVal&&d.width.baseVal.value||0),parseFloat(d.offsetWidth||0),parseFloat(d.scrollWidth||0)));var d;let u=l||(t=>Math.max(parseFloat(t.naturalHeight||0),parseFloat(t.height&&t.height.baseVal&&t.height.baseVal.value||0),parseFloat(t.offsetHeight||0),parseFloat(t.scrollHeight||0)))(s);Object.assign(s.style,{width:h?`${h}px`:"",height:l?`${l}px`:"",maxWidth:"",maxHeight:""}),r&&Object.assign(o.style,{width:"",height:""});const f=this.option("ratio");c=i(c*f),u=i(u*f),h=c,l=u;const g=s.getBoundingClientRect(),p=o.getBoundingClientRect(),m=o==e?p:e.getBoundingClientRect();let y=Math.max(o.offsetWidth,i(p.width)),v=Math.max(o.offsetHeight,i(p.height)),b=window.getComputedStyle(o);if(y-=parseFloat(b.paddingLeft)+parseFloat(b.paddingRight),v-=parseFloat(b.paddingTop)+parseFloat(b.paddingBottom),this.viewport.width=y,this.viewport.height=v,a){if(Math.abs(c-g.width)>.1||Math.abs(u-g.height)>.1){const t=((t,e,i,s)=>{const o=Math.min(i/t||0,s/e);return{width:t*o||0,height:e*o||0}})(c,u,Math.min(c,g.width),Math.min(u,g.height));h=i(t.width),l=i(t.height)}Object.assign(s.style,{width:`${h}px`,height:`${l}px`,transform:""})}if(r&&(Object.assign(o.style,{width:`${h}px`,height:`${l}px`}),this.viewport={...this.viewport,width:h,height:l}),n&&a&&"function"!=typeof this.options.maxScale){const t=this.option("maxScale");this.options.maxScale=function(){return this.content.origWidth>0&&this.content.fitWidth>0?this.content.origWidth/this.content.fitWidth:t}}this.content={...this.content,origWidth:c,origHeight:u,fitWidth:h,fitHeight:l,width:h,height:l,scale:1,isZoomable:a},this.container={width:m.width,height:m.height},!0!==t&&this.trigger("afterUpdate")}zoomIn(t){this.zoomTo(this.content.scale+(t||this.option("step")))}zoomOut(t){this.zoomTo(this.content.scale-(t||this.option("step")))}toggleZoom(t={}){const e=this.option("maxScale"),i=this.option("baseScale"),s=this.content.scale>i+.5*(e-i)?i:e;this.zoomTo(s,t)}zoomTo(t=this.option("baseScale"),{x:e=null,y:s=null}={}){t=Math.max(Math.min(t,this.option("maxScale")),this.option("minScale"));const o=i(this.content.scale/(this.content.width/this.content.fitWidth),1e7);null===e&&(e=this.content.width*o*.5),null===s&&(s=this.content.height*o*.5);const{deltaX:n,deltaY:a}=this.getZoomDelta(t,e,s);e=this.content.x-n,s=this.content.y-a,this.panTo({x:e,y:s,scale:t,friction:this.option("zoomFriction")})}getZoomDelta(t,e=0,i=0){const s=this.content.fitWidth*this.content.scale,o=this.content.fitHeight*this.content.scale,n=e>0&&s?e/s:0,a=i>0&&o?i/o:0;return{deltaX:(this.content.fitWidth*t-s)*n,deltaY:(this.content.fitHeight*t-o)*a}}panTo({x:t=this.content.x,y:e=this.content.y,scale:i,friction:s=this.option("friction"),ignoreBounds:o=!1}={}){if(i=i||this.content.scale||1,!o){const{boundX:s,boundY:o}=this.getBounds(i);s&&(t=Math.max(Math.min(t,s.to),s.from)),o&&(e=Math.max(Math.min(e,o.to),o.from))}this.friction=s,this.transform={...this.transform,x:t,y:e,scale:i},s?(this.state="panning",this.velocity={x:(1/this.friction-1)*(t-this.content.x),y:(1/this.friction-1)*(e-this.content.y),scale:(1/this.friction-1)*(i-this.content.scale)},this.startAnimation()):this.endAnimation()}startAnimation(){this.rAF?cancelAnimationFrame(this.rAF):this.trigger("startAnimation"),this.rAF=requestAnimationFrame((()=>this.animate()))}animate(){if(this.setEdgeForce(),this.setDragForce(),this.velocity.x*=this.friction,this.velocity.y*=this.friction,this.velocity.scale*=this.friction,this.content.x+=this.velocity.x,this.content.y+=this.velocity.y,this.content.scale+=this.velocity.scale,this.isAnimating())this.setTransform();else if("pointerdown"!==this.state)return void this.endAnimation();this.rAF=requestAnimationFrame((()=>this.animate()))}getBounds(t){let e=this.boundX,s=this.boundY;if(void 0!==e&&void 0!==s)return{boundX:e,boundY:s};e={from:0,to:0},s={from:0,to:0},t=t||this.transform.scale;const o=this.content.fitWidth*t,n=this.content.fitHeight*t,a=this.viewport.width,r=this.viewport.height;if(o<a){const t=i(.5*(a-o));e.from=t,e.to=t}else e.from=i(a-o);if(n<r){const t=.5*(r-n);s.from=t,s.to=t}else s.from=i(r-n);return{boundX:e,boundY:s}}setEdgeForce(){if("decel"!==this.state)return;const t=this.option("bounceForce"),{boundX:e,boundY:i}=this.getBounds(Math.max(this.transform.scale,this.content.scale));let s,o,n,a;if(e&&(s=this.content.x<e.from,o=this.content.x>e.to),i&&(n=this.content.y<i.from,a=this.content.y>i.to),s||o){let i=((s?e.from:e.to)-this.content.x)*t;const o=this.content.x+(this.velocity.x+i)/this.friction;o>=e.from&&o<=e.to&&(i+=this.velocity.x),this.velocity.x=i,this.recalculateTransform()}if(n||a){let e=((n?i.from:i.to)-this.content.y)*t;const s=this.content.y+(e+this.velocity.y)/this.friction;s>=i.from&&s<=i.to&&(e+=this.velocity.y),this.velocity.y=e,this.recalculateTransform()}}setDragResistance(){if("pointerdown"!==this.state)return;const{boundX:t,boundY:e}=this.getBounds(this.dragPosition.scale);let i,s,o,n;if(t&&(i=this.dragPosition.x<t.from,s=this.dragPosition.x>t.to),e&&(o=this.dragPosition.y<e.from,n=this.dragPosition.y>e.to),(i||s)&&(!i||!s)){const e=i?t.from:t.to,s=e-this.dragPosition.x;this.dragPosition.x=e-.3*s}if((o||n)&&(!o||!n)){const t=o?e.from:e.to,i=t-this.dragPosition.y;this.dragPosition.y=t-.3*i}}setDragForce(){"pointerdown"===this.state&&(this.velocity.x=this.dragPosition.x-this.content.x,this.velocity.y=this.dragPosition.y-this.content.y,this.velocity.scale=this.dragPosition.scale-this.content.scale)}recalculateTransform(){this.transform.x=this.content.x+this.velocity.x/(1/this.friction-1),this.transform.y=this.content.y+this.velocity.y/(1/this.friction-1),this.transform.scale=this.content.scale+this.velocity.scale/(1/this.friction-1)}isAnimating(){return!(!this.friction||!(Math.abs(this.velocity.x)>.05||Math.abs(this.velocity.y)>.05||Math.abs(this.velocity.scale)>.05))}setTransform(t){let e,s,o;if(t?(e=i(this.transform.x),s=i(this.transform.y),o=this.transform.scale,this.content={...this.content,x:e,y:s,scale:o}):(e=i(this.content.x),s=i(this.content.y),o=this.content.scale/(this.content.width/this.content.fitWidth),this.content={...this.content,x:e,y:s}),this.trigger("beforeTransform"),e=i(this.content.x),s=i(this.content.y),t&&this.option("zoom")){let t,n;t=i(this.content.fitWidth*o),n=i(this.content.fitHeight*o),this.content.width=t,this.content.height=n,this.transform={...this.transform,width:t,height:n,scale:o},Object.assign(this.$content.style,{width:`${t}px`,height:`${n}px`,maxWidth:"none",maxHeight:"none",transform:`translate3d(${e}px, ${s}px, 0) scale(1)`})}else this.$content.style.transform=`translate3d(${e}px, ${s}px, 0) scale(${o})`;this.trigger("afterTransform")}endAnimation(t){cancelAnimationFrame(this.rAF),this.rAF=null,this.velocity={x:0,y:0,scale:0},this.setTransform(!0),this.state="ready",this.handleCursor(),!0!==t&&this.trigger("endAnimation")}handleCursor(){const t=this.option("draggableClass");t&&this.option("touch")&&(1==this.option("panOnlyZoomed")&&this.content.width<=this.viewport.width&&this.content.height<=this.viewport.height&&this.transform.scale<=this.option("baseScale")?this.$container.classList.remove(t):this.$container.classList.add(t))}detachEvents(){this.$content.removeEventListener("load",this.onLoad),this.$container.removeEventListener("wheel",this.onWheel,{passive:!1}),this.$container.removeEventListener("click",this.onClick,{passive:!1}),this.pointerTracker&&(this.pointerTracker.stop(),this.pointerTracker=null),this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null)}destroy(){"destroy"!==this.state&&(this.state="destroy",clearTimeout(this.updateTimer),this.updateTimer=null,cancelAnimationFrame(this.rAF),this.rAF=null,this.detachEvents(),this.detachPlugins(),this.resetDragPosition())}}d.version="4.0.31",d.Plugins={};const u=(t,e)=>{let i=0;return function(...s){const o=(new Date).getTime();if(!(o-i<e))return i=o,t(...s)}};class f{constructor(t){this.$container=null,this.$prev=null,this.$next=null,this.carousel=t,this.onRefresh=this.onRefresh.bind(this)}option(t){return this.carousel.option(`Navigation.${t}`)}createButton(t){const e=document.createElement("button");e.setAttribute("title",this.carousel.localize(`{{${t.toUpperCase()}}}`));const i=this.option("classNames.button")+" "+this.option(`classNames.${t}`);return e.classList.add(...i.split(" ")),e.setAttribute("tabindex","0"),e.innerHTML=this.carousel.localize(this.option(`${t}Tpl`)),e.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),this.carousel["slide"+("next"===t?"Next":"Prev")]()})),e}build(){this.$container||(this.$container=document.createElement("div"),this.$container.classList.add(...this.option("classNames.main").split(" ")),this.carousel.$container.appendChild(this.$container)),this.$next||(this.$next=this.createButton("next"),this.$container.appendChild(this.$next)),this.$prev||(this.$prev=this.createButton("prev"),this.$container.appendChild(this.$prev))}onRefresh(){const t=this.carousel.pages.length;t<=1||t>1&&this.carousel.elemDimWidth<this.carousel.wrapDimWidth&&!Number.isInteger(this.carousel.option("slidesPerPage"))?this.cleanup():(this.build(),this.$prev.removeAttribute("disabled"),this.$next.removeAttribute("disabled"),this.carousel.option("infiniteX",this.carousel.option("infinite"))||(this.carousel.page<=0&&this.$prev.setAttribute("disabled",""),this.carousel.page>=t-1&&this.$next.setAttribute("disabled","")))}cleanup(){this.$prev&&this.$prev.remove(),this.$prev=null,this.$next&&this.$next.remove(),this.$next=null,this.$container&&this.$container.remove(),this.$container=null}attach(){this.carousel.on("refresh change",this.onRefresh)}detach(){this.carousel.off("refresh change",this.onRefresh),this.cleanup()}}f.defaults={prevTpl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>',nextTpl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>',classNames:{main:"carousel__nav",button:"carousel__button",next:"is-next",prev:"is-prev"}};class g{constructor(t){this.carousel=t,this.selectedIndex=null,this.friction=0,this.onNavReady=this.onNavReady.bind(this),this.onNavClick=this.onNavClick.bind(this),this.onNavCreateSlide=this.onNavCreateSlide.bind(this),this.onTargetChange=this.onTargetChange.bind(this)}addAsTargetFor(t){this.target=this.carousel,this.nav=t,this.attachEvents()}addAsNavFor(t){this.target=t,this.nav=this.carousel,this.attachEvents()}attachEvents(){this.nav.options.initialSlide=this.target.options.initialPage,this.nav.on("ready",this.onNavReady),this.nav.on("createSlide",this.onNavCreateSlide),this.nav.on("Panzoom.click",this.onNavClick),this.target.on("change",this.onTargetChange),this.target.on("Panzoom.afterUpdate",this.onTargetChange)}onNavReady(){this.onTargetChange(!0)}onNavClick(t,e,i){const s=i.target.closest(".carousel__slide");if(!s)return;i.stopPropagation();const o=parseInt(s.dataset.index,10),n=this.target.findPageForSlide(o);this.target.page!==n&&this.target.slideTo(n,{friction:this.friction}),this.markSelectedSlide(o)}onNavCreateSlide(t,e){e.index===this.selectedIndex&&this.markSelectedSlide(e.index)}onTargetChange(){const t=this.target.pages[this.target.page].indexes[0],e=this.nav.findPageForSlide(t);this.nav.slideTo(e),this.markSelectedSlide(t)}markSelectedSlide(t){this.selectedIndex=t,[...this.nav.slides].filter((t=>t.$el&&t.$el.classList.remove("is-nav-selected")));const e=this.nav.slides[t];e&&e.$el&&e.$el.classList.add("is-nav-selected")}attach(t){const e=t.options.Sync;(e.target||e.nav)&&(e.target?this.addAsNavFor(e.target):e.nav&&this.addAsTargetFor(e.nav),this.friction=e.friction)}detach(){this.nav&&(this.nav.off("ready",this.onNavReady),this.nav.off("Panzoom.click",this.onNavClick),this.nav.off("createSlide",this.onNavCreateSlide)),this.target&&(this.target.off("Panzoom.afterUpdate",this.onTargetChange),this.target.off("change",this.onTargetChange))}}g.defaults={friction:.92};const p={Navigation:f,Dots:class{constructor(t){this.carousel=t,this.$list=null,this.events={change:this.onChange.bind(this),refresh:this.onRefresh.bind(this)}}buildList(){if(this.carousel.pages.length<this.carousel.option("Dots.minSlideCount"))return;const t=document.createElement("ol");return t.classList.add("carousel__dots"),t.addEventListener("click",(t=>{if(!("page"in t.target.dataset))return;t.preventDefault(),t.stopPropagation();const e=parseInt(t.target.dataset.page,10),i=this.carousel;e!==i.page&&(i.pages.length<3&&i.option("infinite")?i[0==e?"slidePrev":"slideNext"]():i.slideTo(e))})),this.$list=t,this.carousel.$container.appendChild(t),this.carousel.$container.classList.add("has-dots"),t}removeList(){this.$list&&(this.$list.parentNode.removeChild(this.$list),this.$list=null),this.carousel.$container.classList.remove("has-dots")}rebuildDots(){let t=this.$list;const e=!!t,i=this.carousel.pages.length;if(i<2)return void(e&&this.removeList());e||(t=this.buildList());const s=this.$list.children.length;if(s>i)for(let t=i;t<s;t++)this.$list.removeChild(this.$list.lastChild);else{for(let t=s;t<i;t++){const e=document.createElement("li");e.classList.add("carousel__dot"),e.dataset.page=t,e.setAttribute("role","button"),e.setAttribute("tabindex","0"),e.setAttribute("title",this.carousel.localize("{{GOTO}}",[["%d",t+1]])),e.addEventListener("keydown",(t=>{const i=t.code;let s;"Enter"===i||"NumpadEnter"===i?s=e:"ArrowRight"===i?s=e.nextSibling:"ArrowLeft"===i&&(s=e.previousSibling),s&&s.click()})),this.$list.appendChild(e)}this.setActiveDot()}}setActiveDot(){if(!this.$list)return;this.$list.childNodes.forEach((t=>{t.classList.remove("is-selected")}));const t=this.$list.childNodes[this.carousel.page];t&&t.classList.add("is-selected")}onChange(){this.setActiveDot()}onRefresh(){this.rebuildDots()}attach(){this.carousel.on(this.events)}detach(){this.removeList(),this.carousel.off(this.events),this.carousel=null}},Sync:g};const m={slides:[],preload:0,slidesPerPage:"auto",initialPage:null,initialSlide:null,friction:.92,center:!0,infinite:!0,fill:!0,dragFree:!1,prefix:"",classNames:{viewport:"carousel__viewport",track:"carousel__track",slide:"carousel__slide",slideSelected:"is-selected"},l10n:{NEXT:"Next slide",PREV:"Previous slide",GOTO:"Go to slide #%d"}};class y extends l{constructor(t,i={}){if(super(i=e(!0,{},m,i)),this.state="init",this.$container=t,!(this.$container instanceof HTMLElement))throw new Error("No root element provided");this.slideNext=u(this.slideNext.bind(this),250),this.slidePrev=u(this.slidePrev.bind(this),250),this.init(),t.__Carousel=this}init(){this.pages=[],this.page=this.pageIndex=null,this.prevPage=this.prevPageIndex=null,this.attachPlugins(y.Plugins),this.trigger("init"),this.initLayout(),this.initSlides(),this.updateMetrics(),this.$track&&this.pages.length&&(this.$track.style.transform=`translate3d(${-1*this.pages[this.page].left}px, 0px, 0) scale(1)`),this.manageSlideVisiblity(),this.initPanzoom(),this.state="ready",this.trigger("ready")}initLayout(){const t=this.option("prefix"),e=this.option("classNames");this.$viewport=this.option("viewport")||this.$container.querySelector(`.${t}${e.viewport}`),this.$viewport||(this.$viewport=document.createElement("div"),this.$viewport.classList.add(...(t+e.viewport).split(" ")),this.$viewport.append(...this.$container.childNodes),this.$container.appendChild(this.$viewport)),this.$track=this.option("track")||this.$container.querySelector(`.${t}${e.track}`),this.$track||(this.$track=document.createElement("div"),this.$track.classList.add(...(t+e.track).split(" ")),this.$track.append(...this.$viewport.childNodes),this.$viewport.appendChild(this.$track))}initSlides(){this.slides=[];this.$viewport.querySelectorAll(`.${this.option("prefix")}${this.option("classNames.slide")}`).forEach((t=>{const e={$el:t,isDom:!0};this.slides.push(e),this.trigger("createSlide",e,this.slides.length)})),Array.isArray(this.options.slides)&&(this.slides=e(!0,[...this.slides],this.options.slides))}updateMetrics(){let t,e=0,s=[];this.slides.forEach(((i,o)=>{const n=i.$el,a=i.isDom||!t?this.getSlideMetrics(n):t;i.index=o,i.width=a,i.left=e,t=a,e+=a,s.push(o)}));let o=Math.max(this.$track.offsetWidth,i(this.$track.getBoundingClientRect().width)),n=getComputedStyle(this.$track);o-=parseFloat(n.paddingLeft)+parseFloat(n.paddingRight),this.contentWidth=e,this.viewportWidth=o;const a=[],r=this.option("slidesPerPage");if(Number.isInteger(r)&&e>o)for(let t=0;t<this.slides.length;t+=r)a.push({indexes:s.slice(t,t+r),slides:this.slides.slice(t,t+r)});else{let t=0,e=0;for(let i=0;i<this.slides.length;i+=1){let s=this.slides[i];(!a.length||e+s.width>o)&&(a.push({indexes:[],slides:[]}),t=a.length-1,e=0),e+=s.width,a[t].indexes.push(i),a[t].slides.push(s)}}const h=this.option("center"),l=this.option("fill");a.forEach(((t,i)=>{t.index=i,t.width=t.slides.reduce(((t,e)=>t+e.width),0),t.left=t.slides[0].left,h&&(t.left+=.5*(o-t.width)*-1),l&&!this.option("infiniteX",this.option("infinite"))&&e>o&&(t.left=Math.max(t.left,0),t.left=Math.min(t.left,e-o))}));const c=[];let d;a.forEach((t=>{const e={...t};d&&e.left===d.left?(d.width+=e.width,d.slides=[...d.slides,...e.slides],d.indexes=[...d.indexes,...e.indexes]):(e.index=c.length,d=e,c.push(e))})),this.pages=c;let u=this.page;if(null===u){const t=this.option("initialSlide");u=null!==t?this.findPageForSlide(t):parseInt(this.option("initialPage",0),10)||0,c[u]||(u=c.length&&u>c.length?c[c.length-1].index:0),this.page=u,this.pageIndex=u}this.updatePanzoom(),this.trigger("refresh")}getSlideMetrics(t){if(!t){const e=this.slides[0];(t=document.createElement("div")).dataset.isTestEl=1,t.style.visibility="hidden",t.classList.add(...(this.option("prefix")+this.option("classNames.slide")).split(" ")),e.customClass&&t.classList.add(...e.customClass.split(" ")),this.$track.prepend(t)}let e=Math.max(t.offsetWidth,i(t.getBoundingClientRect().width));const s=t.currentStyle||window.getComputedStyle(t);return e=e+(parseFloat(s.marginLeft)||0)+(parseFloat(s.marginRight)||0),t.dataset.isTestEl&&t.remove(),e}findPageForSlide(t){t=parseInt(t,10)||0;const e=this.pages.find((e=>e.indexes.indexOf(t)>-1));return e?e.index:null}slideNext(){this.slideTo(this.pageIndex+1)}slidePrev(){this.slideTo(this.pageIndex-1)}slideTo(t,e={}){const{x:i=-1*this.setPage(t,!0),y:s=0,friction:o=this.option("friction")}=e;this.Panzoom.content.x===i&&!this.Panzoom.velocity.x&&o||(this.Panzoom.panTo({x:i,y:s,friction:o,ignoreBounds:!0}),"ready"===this.state&&"ready"===this.Panzoom.state&&this.trigger("settle"))}initPanzoom(){this.Panzoom&&this.Panzoom.destroy();const t=e(!0,{},{content:this.$track,wrapInner:!1,resizeParent:!1,zoom:!1,click:!1,lockAxis:"x",x:this.pages.length?-1*this.pages[this.page].left:0,centerOnStart:!1,textSelection:()=>this.option("textSelection",!1),panOnlyZoomed:function(){return this.content.width<=this.viewport.width}},this.option("Panzoom"));this.Panzoom=new d(this.$container,t),this.Panzoom.on({"*":(t,...e)=>this.trigger(`Panzoom.${t}`,...e),afterUpdate:()=>{this.updatePage()},beforeTransform:this.onBeforeTransform.bind(this),touchEnd:this.onTouchEnd.bind(this),endAnimation:()=>{this.trigger("settle")}}),this.updateMetrics(),this.manageSlideVisiblity()}updatePanzoom(){this.Panzoom&&(this.Panzoom.content={...this.Panzoom.content,fitWidth:this.contentWidth,origWidth:this.contentWidth,width:this.contentWidth},this.pages.length>1&&this.option("infiniteX",this.option("infinite"))?this.Panzoom.boundX=null:this.pages.length&&(this.Panzoom.boundX={from:-1*this.pages[this.pages.length-1].left,to:-1*this.pages[0].left}),this.option("infiniteY",this.option("infinite"))?this.Panzoom.boundY=null:this.Panzoom.boundY={from:0,to:0},this.Panzoom.handleCursor())}manageSlideVisiblity(){const t=this.contentWidth,e=this.viewportWidth;let i=this.Panzoom?-1*this.Panzoom.content.x:this.pages.length?this.pages[this.page].left:0;const s=this.option("preload"),o=this.option("infiniteX",this.option("infinite")),n=parseFloat(getComputedStyle(this.$viewport,null).getPropertyValue("padding-left")),a=parseFloat(getComputedStyle(this.$viewport,null).getPropertyValue("padding-right"));this.slides.forEach((r=>{let h,l,c=0;h=i-n,l=i+e+a,h-=s*(e+n+a),l+=s*(e+n+a);const d=r.left+r.width>h&&r.left<l;h=i+t-n,l=i+t+e+a,h-=s*(e+n+a);const u=o&&r.left+r.width>h&&r.left<l;h=i-t-n,l=i-t+e+a,h-=s*(e+n+a);const f=o&&r.left+r.width>h&&r.left<l;u||d||f?(this.createSlideEl(r),d&&(c=0),u&&(c=-1),f&&(c=1),r.left+r.width>i&&r.left<=i+e+a&&(c=0)):this.removeSlideEl(r),r.hasDiff=c}));let r=0,h=0;this.slides.forEach(((e,i)=>{let s=0;e.$el?(i!==r||e.hasDiff?s=h+e.hasDiff*t:h=0,e.$el.style.left=Math.abs(s)>.1?`${h+e.hasDiff*t}px`:"",r++):h+=e.width})),this.markSelectedSlides()}createSlideEl(t){if(!t)return;if(t.$el){let e=t.$el.dataset.index;if(!e||parseInt(e,10)!==t.index){let e;t.$el.dataset.index=t.index,t.$el.querySelectorAll("[data-lazy-srcset]").forEach((t=>{t.srcset=t.dataset.lazySrcset})),t.$el.querySelectorAll("[data-lazy-src]").forEach((t=>{let e=t.dataset.lazySrc;t instanceof HTMLImageElement?t.src=e:t.style.backgroundImage=`url('${e}')`})),(e=t.$el.dataset.lazySrc)&&(t.$el.style.backgroundImage=`url('${e}')`),t.state="ready"}return}const e=document.createElement("div");e.dataset.index=t.index,e.classList.add(...(this.option("prefix")+this.option("classNames.slide")).split(" ")),t.customClass&&e.classList.add(...t.customClass.split(" ")),t.html&&(e.innerHTML=t.html);const i=[];this.slides.forEach(((t,e)=>{t.$el&&i.push(e)}));const s=t.index;let o=null;if(i.length){let t=i.reduce(((t,e)=>Math.abs(e-s)<Math.abs(t-s)?e:t));o=this.slides[t]}return this.$track.insertBefore(e,o&&o.$el?o.index<t.index?o.$el.nextSibling:o.$el:null),t.$el=e,this.trigger("createSlide",t,s),t}removeSlideEl(t){t.$el&&!t.isDom&&(this.trigger("removeSlide",t),t.$el.remove(),t.$el=null)}markSelectedSlides(){const t=this.option("classNames.slideSelected"),e="aria-hidden";this.slides.forEach(((i,s)=>{const o=i.$el;if(!o)return;const n=this.pages[this.page];n&&n.indexes&&n.indexes.indexOf(s)>-1?(t&&!o.classList.contains(t)&&(o.classList.add(t),this.trigger("selectSlide",i)),o.removeAttribute(e)):(t&&o.classList.contains(t)&&(o.classList.remove(t),this.trigger("unselectSlide",i)),o.setAttribute(e,!0))}))}updatePage(){this.updateMetrics(),this.slideTo(this.page,{friction:0})}onBeforeTransform(){this.option("infiniteX",this.option("infinite"))&&this.manageInfiniteTrack(),this.manageSlideVisiblity()}manageInfiniteTrack(){const t=this.contentWidth,e=this.viewportWidth;if(!this.option("infiniteX",this.option("infinite"))||this.pages.length<2||t<e)return;const i=this.Panzoom;let s=!1;return i.content.x<-1*(t-e)&&(i.content.x+=t,this.pageIndex=this.pageIndex-this.pages.length,s=!0),i.content.x>e&&(i.content.x-=t,this.pageIndex=this.pageIndex+this.pages.length,s=!0),s&&"pointerdown"===i.state&&i.resetDragPosition(),s}onTouchEnd(t,e){const i=this.option("dragFree");if(!i&&this.pages.length>1&&t.dragOffset.time<350&&Math.abs(t.dragOffset.y)<1&&Math.abs(t.dragOffset.x)>5)this[t.dragOffset.x<0?"slideNext":"slidePrev"]();else if(i){const[,e]=this.getPageFromPosition(-1*t.transform.x);this.setPage(e)}else this.slideToClosest()}slideToClosest(t={}){let[,e]=this.getPageFromPosition(-1*this.Panzoom.content.x);this.slideTo(e,t)}getPageFromPosition(t){const e=this.pages.length;this.option("center")&&(t+=.5*this.viewportWidth);const i=Math.floor(t/this.contentWidth);t-=i*this.contentWidth;let s=this.slides.find((e=>e.left<=t&&e.left+e.width>t));if(s){let t=this.findPageForSlide(s.index);return[t,t+i*e]}return[0,0]}setPage(t,e){let i=0,s=parseInt(t,10)||0;const o=this.page,n=this.pageIndex,a=this.pages.length,r=this.contentWidth,h=this.viewportWidth;if(t=(s%a+a)%a,this.option("infiniteX",this.option("infinite"))&&r>h){const o=Math.floor(s/a)||0,n=r;if(i=this.pages[t].left+o*n,!0===e&&a>2){let t=-1*this.Panzoom.content.x;const e=i-n,o=i+n,r=Math.abs(t-i),h=Math.abs(t-e),l=Math.abs(t-o);l<r&&l<=h?(i=o,s+=a):h<r&&h<l&&(i=e,s-=a)}}else t=s=Math.max(0,Math.min(s,a-1)),i=this.pages.length?this.pages[t].left:0;return this.page=t,this.pageIndex=s,null!==o&&t!==o&&(this.prevPage=o,this.prevPageIndex=n,this.trigger("change",t,o)),i}destroy(){this.state="destroy",this.slides.forEach((t=>{this.removeSlideEl(t)})),this.slides=[],this.Panzoom.destroy(),this.detachPlugins()}}y.version="4.0.31",y.Plugins=p;const v=!("undefined"==typeof window||!window.document||!window.document.createElement);let b=null;const x=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])'],w=t=>{if(t&&v){null===b&&document.createElement("div").focus({get preventScroll(){return b=!0,!1}});try{if(t.setActive)t.setActive();else if(b)t.focus({preventScroll:!0});else{const e=window.pageXOffset||document.body.scrollTop,i=window.pageYOffset||document.body.scrollLeft;t.focus(),document.body.scrollTo({top:e,left:i,behavior:"auto"})}}catch(t){}}};const $={minSlideCount:2,minScreenHeight:500,autoStart:!0,key:"t",Carousel:{},tpl:'<div class="fancybox__thumb" style="background-image:url(\'{{src}}\')"></div>'};class C{constructor(t){this.fancybox=t,this.$container=null,this.state="init";for(const t of["onPrepare","onClosing","onKeydown"])this[t]=this[t].bind(this);this.events={prepare:this.onPrepare,closing:this.onClosing,keydown:this.onKeydown}}onPrepare(){this.getSlides().length<this.fancybox.option("Thumbs.minSlideCount")?this.state="disabled":!0===this.fancybox.option("Thumbs.autoStart")&&this.fancybox.Carousel.Panzoom.content.height>=this.fancybox.option("Thumbs.minScreenHeight")&&this.build()}onClosing(){this.Carousel&&this.Carousel.Panzoom.detachEvents()}onKeydown(t,e){e===t.option("Thumbs.key")&&this.toggle()}build(){if(this.$container)return;const t=document.createElement("div");t.classList.add("fancybox__thumbs"),this.fancybox.$carousel.parentNode.insertBefore(t,this.fancybox.$carousel.nextSibling),this.Carousel=new y(t,e(!0,{Dots:!1,Navigation:!1,Sync:{friction:0},infinite:!1,center:!0,fill:!0,dragFree:!0,slidesPerPage:1,preload:1},this.fancybox.option("Thumbs.Carousel"),{Sync:{target:this.fancybox.Carousel},slides:this.getSlides()})),this.Carousel.Panzoom.on("wheel",((t,e)=>{e.preventDefault(),this.fancybox[e.deltaY<0?"prev":"next"]()})),this.$container=t,this.state="visible"}getSlides(){const t=[];for(const e of this.fancybox.items){const i=e.thumb;i&&t.push({html:this.fancybox.option("Thumbs.tpl").replace(/\{\{src\}\}/gi,i),customClass:`has-thumb has-${e.type||"image"}`})}return t}toggle(){"visible"===this.state?this.hide():"hidden"===this.state?this.show():this.build()}show(){"hidden"===this.state&&(this.$container.style.display="",this.Carousel.Panzoom.attachEvents(),this.state="visible")}hide(){"visible"===this.state&&(this.Carousel.Panzoom.detachEvents(),this.$container.style.display="none",this.state="hidden")}cleanup(){this.Carousel&&(this.Carousel.destroy(),this.Carousel=null),this.$container&&(this.$container.remove(),this.$container=null),this.state="init"}attach(){this.fancybox.on(this.events)}detach(){this.fancybox.off(this.events),this.cleanup()}}C.defaults=$;const S=(t,e)=>{const i=new URL(t),s=new URLSearchParams(i.search);let o=new URLSearchParams;for(const[t,i]of[...s,...Object.entries(e)])"t"===t?o.set("start",parseInt(i)):o.set(t,i);o=o.toString();let n=t.match(/#t=((.*)?\d+s)/);return n&&(o+=`#t=${n[1]}`),o},E={video:{autoplay:!0,ratio:16/9},youtube:{autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},vimeo:{hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},html5video:{tpl:'<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">\n  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos.</video>',format:""}};class P{constructor(t){this.fancybox=t;for(const t of["onInit","onReady","onCreateSlide","onRemoveSlide","onSelectSlide","onUnselectSlide","onRefresh","onMessage"])this[t]=this[t].bind(this);this.events={init:this.onInit,ready:this.onReady,"Carousel.createSlide":this.onCreateSlide,"Carousel.removeSlide":this.onRemoveSlide,"Carousel.selectSlide":this.onSelectSlide,"Carousel.unselectSlide":this.onUnselectSlide,"Carousel.refresh":this.onRefresh}}onInit(){for(const t of this.fancybox.items)this.processType(t)}processType(t){if(t.html)return t.src=t.html,t.type="html",void delete t.html;const i=t.src||"";let s=t.type||this.fancybox.options.type,o=null;if(!i||"string"==typeof i){if(o=i.match(/(?:youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(?:watch\?(?:.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(?:.*)|[\w-]{11}|\?listType=(?:.*)&list=(?:.*))(?:.*)/i)){const e=S(i,this.fancybox.option("Html.youtube")),n=encodeURIComponent(o[1]);t.videoId=n,t.src=`https://www.youtube-nocookie.com/embed/${n}?${e}`,t.thumb=t.thumb||`https://i.ytimg.com/vi/${n}/mqdefault.jpg`,t.vendor="youtube",s="video"}else if(o=i.match(/^.+vimeo.com\/(?:\/)?([\d]+)(.*)?/)){const e=S(i,this.fancybox.option("Html.vimeo")),n=encodeURIComponent(o[1]);t.videoId=n,t.src=`https://player.vimeo.com/video/${n}?${e}`,t.vendor="vimeo",s="video"}else(o=i.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:(?:(?:maps\/(?:place\/(?:.*)\/)?\@(.*),(\d+.?\d+?)z))|(?:\?ll=))(.*)?/i))?(t.src=`//maps.google.${o[1]}/?ll=${(o[2]?o[2]+"&z="+Math.floor(o[3])+(o[4]?o[4].replace(/^\//,"&"):""):o[4]+"").replace(/\?/,"&")}&output=${o[4]&&o[4].indexOf("layer=c")>0?"svembed":"embed"}`,s="map"):(o=i.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:maps\/search\/)(.*)/i))&&(t.src=`//maps.google.${o[1]}/maps?q=${o[2].replace("query=","q=").replace("api=1","")}&output=embed`,s="map");s||("#"===i.charAt(0)?s="inline":(o=i.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(s="html5video",t.format=t.format||"video/"+("ogv"===o[1]?"ogg":o[1])):i.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":i.match(/\.(pdf)((\?|#).*)?$/i)&&(s="pdf")),t.type=s||this.fancybox.option("defaultType","image"),"html5video"!==s&&"video"!==s||(t.video=e({},this.fancybox.option("Html.video"),t.video),t._width&&t._height?t.ratio=parseFloat(t._width)/parseFloat(t._height):t.ratio=t.ratio||t.video.ratio||E.video.ratio)}}onReady(){this.fancybox.Carousel.slides.forEach((t=>{t.$el&&(this.setContent(t),t.index===this.fancybox.getSlide().index&&this.playVideo(t))}))}onCreateSlide(t,e,i){"ready"===this.fancybox.state&&this.setContent(i)}loadInlineContent(t){let e;if(t.src instanceof HTMLElement)e=t.src;else if("string"==typeof t.src){const i=t.src.split("#",2),s=2===i.length&&""===i[0]?i[1]:i[0];e=document.getElementById(s)}if(e){if("clone"===t.type||e.$placeHolder){e=e.cloneNode(!0);let i=e.getAttribute("id");i=i?`${i}--clone`:`clone-${this.fancybox.id}-${t.index}`,e.setAttribute("id",i)}else{const t=document.createElement("div");t.classList.add("fancybox-placeholder"),e.parentNode.insertBefore(t,e),e.$placeHolder=t}this.fancybox.setContent(t,e)}else this.fancybox.setError(t,"{{ELEMENT_NOT_FOUND}}")}loadAjaxContent(t){const e=this.fancybox,i=new XMLHttpRequest;e.showLoading(t),i.onreadystatechange=function(){i.readyState===XMLHttpRequest.DONE&&"ready"===e.state&&(e.hideLoading(t),200===i.status?e.setContent(t,i.responseText):e.setError(t,404===i.status?"{{AJAX_NOT_FOUND}}":"{{AJAX_FORBIDDEN}}"))};const s=t.ajax||null;i.open(s?"POST":"GET",t.src),i.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.send(s),t.xhr=i}loadIframeContent(t){const e=this.fancybox,i=document.createElement("iframe");if(i.className="fancybox__iframe",i.setAttribute("id",`fancybox__iframe_${e.id}_${t.index}`),i.setAttribute("allow","autoplay; fullscreen"),i.setAttribute("scrolling","auto"),t.$iframe=i,"iframe"!==t.type||!1===t.preload)return i.setAttribute("src",t.src),this.fancybox.setContent(t,i),void this.resizeIframe(t);e.showLoading(t);const s=document.createElement("div");s.style.visibility="hidden",this.fancybox.setContent(t,s),s.appendChild(i),i.onerror=()=>{e.setError(t,"{{IFRAME_ERROR}}")},i.onload=()=>{e.hideLoading(t);let s=!1;i.isReady||(i.isReady=!0,s=!0),i.src.length&&(i.parentNode.style.visibility="",this.resizeIframe(t),s&&e.revealContent(t))},i.setAttribute("src",t.src)}setAspectRatio(t){const e=t.$content,i=t.ratio;if(!e)return;let s=t._width,o=t._height;if(i||s&&o){Object.assign(e.style,{width:s&&o?"100%":"",height:s&&o?"100%":"",maxWidth:"",maxHeight:""});let t=e.offsetWidth,n=e.offsetHeight;if(s=s||t,o=o||n,s>t||o>n){let e=Math.min(t/s,n/o);s*=e,o*=e}Math.abs(s/o-i)>.01&&(i<s/o?s=o*i:o=s/i),Object.assign(e.style,{width:`${s}px`,height:`${o}px`})}}resizeIframe(t){const e=t.$iframe;if(!e)return;let i=t._width||0,s=t._height||0;i&&s&&(t.autoSize=!1);const o=e.parentNode,n=o&&o.style;if(!1!==t.preload&&!1!==t.autoSize&&n)try{const t=window.getComputedStyle(o),a=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),r=parseFloat(t.paddingTop)+parseFloat(t.paddingBottom),h=e.contentWindow.document,l=h.getElementsByTagName("html")[0],c=h.body;n.width="",c.style.overflow="hidden",i=i||l.scrollWidth+a,n.width=`${i}px`,c.style.overflow="",n.flex="0 0 auto",n.height=`${c.scrollHeight}px`,s=l.scrollHeight+r}catch(t){}if(i||s){const t={flex:"0 1 auto"};i&&(t.width=`${i}px`),s&&(t.height=`${s}px`),Object.assign(n,t)}}onRefresh(t,e){e.slides.forEach((t=>{t.$el&&(t.$iframe&&this.resizeIframe(t),t.ratio&&this.setAspectRatio(t))}))}setContent(t){if(t&&!t.isDom){switch(t.type){case"html":this.fancybox.setContent(t,t.src);break;case"html5video":this.fancybox.setContent(t,this.fancybox.option("Html.html5video.tpl").replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.format||t.html5video&&t.html5video.format||"").replace("{{poster}}",t.poster||t.thumb||""));break;case"inline":case"clone":this.loadInlineContent(t);break;case"ajax":this.loadAjaxContent(t);break;case"pdf":case"video":case"map":t.preload=!1;case"iframe":this.loadIframeContent(t)}t.ratio&&this.setAspectRatio(t)}}onSelectSlide(t,e,i){"ready"===t.state&&this.playVideo(i)}playVideo(t){if("html5video"===t.type&&t.video.autoplay)try{const e=t.$el.querySelector("video");if(e){const t=e.play();void 0!==t&&t.then((()=>{})).catch((t=>{e.muted=!0,e.play()}))}}catch(t){}if("video"!==t.type||!t.$iframe||!t.$iframe.contentWindow)return;const e=()=>{if("done"===t.state&&t.$iframe&&t.$iframe.contentWindow){let e;if(t.$iframe.isReady)return t.video&&t.video.autoplay&&(e="youtube"==t.vendor?{event:"command",func:"playVideo"}:{method:"play",value:"true"}),void(e&&t.$iframe.contentWindow.postMessage(JSON.stringify(e),"*"));"youtube"===t.vendor&&(e={event:"listening",id:t.$iframe.getAttribute("id")},t.$iframe.contentWindow.postMessage(JSON.stringify(e),"*"))}t.poller=setTimeout(e,250)};e()}onUnselectSlide(t,e,i){if("html5video"===i.type){try{i.$el.querySelector("video").pause()}catch(t){}return}let s=!1;"vimeo"==i.vendor?s={method:"pause",value:"true"}:"youtube"===i.vendor&&(s={event:"command",func:"pauseVideo"}),s&&i.$iframe&&i.$iframe.contentWindow&&i.$iframe.contentWindow.postMessage(JSON.stringify(s),"*"),clearTimeout(i.poller)}onRemoveSlide(t,e,i){i.xhr&&(i.xhr.abort(),i.xhr=null),i.$iframe&&(i.$iframe.onload=i.$iframe.onerror=null,i.$iframe.src="//about:blank",i.$iframe=null);const s=i.$content;"inline"===i.type&&s&&(s.classList.remove("fancybox__content"),"none"!==s.style.display&&(s.style.display="none")),i.$closeButton&&(i.$closeButton.remove(),i.$closeButton=null);const o=s&&s.$placeHolder;o&&(o.parentNode.insertBefore(s,o),o.remove(),s.$placeHolder=null)}onMessage(t){try{let e=JSON.parse(t.data);if("https://player.vimeo.com"===t.origin){if("ready"===e.event)for(let e of document.getElementsByClassName("fancybox__iframe"))e.contentWindow===t.source&&(e.isReady=1)}else"https://www.youtube-nocookie.com"===t.origin&&"onReady"===e.event&&(document.getElementById(e.id).isReady=1)}catch(t){}}attach(){this.fancybox.on(this.events),window.addEventListener("message",this.onMessage,!1)}detach(){this.fancybox.off(this.events),window.removeEventListener("message",this.onMessage,!1)}}P.defaults=E;class T{constructor(t){this.fancybox=t;for(const t of["onReady","onClosing","onDone","onPageChange","onCreateSlide","onRemoveSlide","onImageStatusChange"])this[t]=this[t].bind(this);this.events={ready:this.onReady,closing:this.onClosing,done:this.onDone,"Carousel.change":this.onPageChange,"Carousel.createSlide":this.onCreateSlide,"Carousel.removeSlide":this.onRemoveSlide}}onReady(){this.fancybox.Carousel.slides.forEach((t=>{t.$el&&this.setContent(t)}))}onDone(t,e){this.handleCursor(e)}onClosing(t){clearTimeout(this.clickTimer),this.clickTimer=null,t.Carousel.slides.forEach((t=>{t.$image&&(t.state="destroy"),t.Panzoom&&t.Panzoom.detachEvents()})),"closing"===this.fancybox.state&&this.canZoom(t.getSlide())&&this.zoomOut()}onCreateSlide(t,e,i){"ready"===this.fancybox.state&&this.setContent(i)}onRemoveSlide(t,e,i){i.$image&&(i.$el.classList.remove(t.option("Image.canZoomInClass")),i.$image.remove(),i.$image=null),i.Panzoom&&(i.Panzoom.destroy(),i.Panzoom=null),i.$el&&i.$el.dataset&&delete i.$el.dataset.imageFit}setContent(t){if(t.isDom||t.html||t.type&&"image"!==t.type)return;if(t.$image)return;t.type="image",t.state="loading";const e=document.createElement("div");e.style.visibility="hidden";const i=document.createElement("img");i.addEventListener("load",(e=>{e.stopImmediatePropagation(),this.onImageStatusChange(t)})),i.addEventListener("error",(()=>{this.onImageStatusChange(t)})),i.src=t.src,i.alt="",i.draggable=!1,i.classList.add("fancybox__image"),t.srcset&&i.setAttribute("srcset",t.srcset),t.sizes&&i.setAttribute("sizes",t.sizes),t.$image=i;const s=this.fancybox.option("Image.wrap");if(s){const o=document.createElement("div");o.classList.add("string"==typeof s?s:"fancybox__image-wrap"),o.appendChild(i),e.appendChild(o),t.$wrap=o}else e.appendChild(i);t.$el.dataset.imageFit=this.fancybox.option("Image.fit"),this.fancybox.setContent(t,e),i.complete||i.error?this.onImageStatusChange(t):this.fancybox.showLoading(t)}onImageStatusChange(t){const e=t.$image;e&&"loading"===t.state&&(e.complete&&e.naturalWidth&&e.naturalHeight?(this.fancybox.hideLoading(t),"contain"===this.fancybox.option("Image.fit")&&this.initSlidePanzoom(t),t.$el.addEventListener("wheel",(e=>this.onWheel(t,e)),{passive:!1}),t.$content.addEventListener("click",(e=>this.onClick(t,e)),{passive:!1}),this.revealContent(t)):this.fancybox.setError(t,"{{IMAGE_ERROR}}"))}initSlidePanzoom(t){t.Panzoom||(t.Panzoom=new d(t.$el,e(!0,this.fancybox.option("Image.Panzoom",{}),{viewport:t.$wrap,content:t.$image,width:t._width,height:t._height,wrapInner:!1,textSelection:!0,touch:this.fancybox.option("Image.touch"),panOnlyZoomed:!0,click:!1,wheel:!1})),t.Panzoom.on("startAnimation",(()=>{this.fancybox.trigger("Image.startAnimation",t)})),t.Panzoom.on("endAnimation",(()=>{"zoomIn"===t.state&&this.fancybox.done(t),this.handleCursor(t),this.fancybox.trigger("Image.endAnimation",t)})),t.Panzoom.on("afterUpdate",(()=>{this.handleCursor(t),this.fancybox.trigger("Image.afterUpdate",t)})))}revealContent(t){null===this.fancybox.Carousel.prevPage&&t.index===this.fancybox.options.startIndex&&this.canZoom(t)?this.zoomIn():this.fancybox.revealContent(t)}getZoomInfo(t){const e=t.$thumb.getBoundingClientRect(),i=e.width,s=e.height,o=t.$content.getBoundingClientRect(),n=o.width,a=o.height,r=o.top-e.top,h=o.left-e.left;let l=this.fancybox.option("Image.zoomOpacity");return"auto"===l&&(l=Math.abs(i/s-n/a)>.1),{top:r,left:h,scale:n&&i?i/n:1,opacity:l}}canZoom(t){const e=this.fancybox,i=e.$container;if(window.visualViewport&&1!==window.visualViewport.scale)return!1;if(t.Panzoom&&!t.Panzoom.content.width)return!1;if(!e.option("Image.zoom")||"contain"!==e.option("Image.fit"))return!1;const s=t.$thumb;if(!s||"loading"===t.state)return!1;i.classList.add("fancybox__no-click");const o=s.getBoundingClientRect();let n;if(this.fancybox.option("Image.ignoreCoveredThumbnail")){const t=document.elementFromPoint(o.left+1,o.top+1)===s,e=document.elementFromPoint(o.right-1,o.bottom-1)===s;n=t&&e}else n=document.elementFromPoint(o.left+.5*o.width,o.top+.5*o.height)===s;return i.classList.remove("fancybox__no-click"),n}zoomIn(){const t=this.fancybox,e=t.getSlide(),i=e.Panzoom,{top:s,left:o,scale:n,opacity:a}=this.getZoomInfo(e);t.trigger("reveal",e),i.panTo({x:-1*o,y:-1*s,scale:n,friction:0,ignoreBounds:!0}),e.$content.style.visibility="",e.state="zoomIn",!0===a&&i.on("afterTransform",(t=>{"zoomIn"!==e.state&&"zoomOut"!==e.state||(t.$content.style.opacity=Math.min(1,1-(1-t.content.scale)/(1-n)))})),i.panTo({x:0,y:0,scale:1,friction:this.fancybox.option("Image.zoomFriction")})}zoomOut(){const t=this.fancybox,e=t.getSlide(),i=e.Panzoom;if(!i)return;e.state="zoomOut",t.state="customClosing",e.$caption&&(e.$caption.style.visibility="hidden");let s=this.fancybox.option("Image.zoomFriction");const o=t=>{const{top:o,left:n,scale:a,opacity:r}=this.getZoomInfo(e);t||r||(s*=.82),i.panTo({x:-1*n,y:-1*o,scale:a,friction:s,ignoreBounds:!0}),s*=.98};window.addEventListener("scroll",o),i.once("endAnimation",(()=>{window.removeEventListener("scroll",o),t.destroy()})),o()}handleCursor(t){if("image"!==t.type||!t.$el)return;const e=t.Panzoom,i=this.fancybox.option("Image.click",!1,t),s=this.fancybox.option("Image.touch"),o=t.$el.classList,n=this.fancybox.option("Image.canZoomInClass"),a=this.fancybox.option("Image.canZoomOutClass");if(o.remove(a),o.remove(n),e&&"toggleZoom"===i){e&&1===e.content.scale&&e.option("maxScale")-e.content.scale>.01?o.add(n):e.content.scale>1&&!s&&o.add(a)}else"close"===i&&o.add(a)}onWheel(t,e){if("ready"===this.fancybox.state&&!1!==this.fancybox.trigger("Image.wheel",e))switch(this.fancybox.option("Image.wheel")){case"zoom":"done"===t.state&&t.Panzoom&&t.Panzoom.zoomWithWheel(e);break;case"close":this.fancybox.close();break;case"slide":this.fancybox[e.deltaY<0?"prev":"next"]()}}onClick(t,e){if("ready"!==this.fancybox.state)return;const i=t.Panzoom;if(i&&(i.dragPosition.midPoint||0!==i.dragOffset.x||0!==i.dragOffset.y||1!==i.dragOffset.scale))return;if(this.fancybox.Carousel.Panzoom.lockAxis)return!1;const s=i=>{switch(i){case"toggleZoom":e.stopPropagation(),t.Panzoom&&t.Panzoom.zoomWithClick(e);break;case"close":this.fancybox.close();break;case"next":e.stopPropagation(),this.fancybox.next()}},o=this.fancybox.option("Image.click"),n=this.fancybox.option("Image.doubleClick");n?this.clickTimer?(clearTimeout(this.clickTimer),this.clickTimer=null,s(n)):this.clickTimer=setTimeout((()=>{this.clickTimer=null,s(o)}),300):s(o)}onPageChange(t,e){const i=t.getSlide();e.slides.forEach((t=>{t.Panzoom&&"done"===t.state&&t.index!==i.index&&t.Panzoom.panTo({x:0,y:0,scale:1,friction:.8})}))}attach(){this.fancybox.on(this.events)}detach(){this.fancybox.off(this.events)}}T.defaults={canZoomInClass:"can-zoom_in",canZoomOutClass:"can-zoom_out",zoom:!0,zoomOpacity:"auto",zoomFriction:.82,ignoreCoveredThumbnail:!1,touch:!0,click:"toggleZoom",doubleClick:null,wheel:"zoom",fit:"contain",wrap:!1,Panzoom:{ratio:1}};class L{constructor(t){this.fancybox=t;for(const t of["onChange","onClosing"])this[t]=this[t].bind(this);this.events={initCarousel:this.onChange,"Carousel.change":this.onChange,closing:this.onClosing},this.hasCreatedHistory=!1,this.origHash="",this.timer=null}onChange(t){const e=t.Carousel;this.timer&&clearTimeout(this.timer);const i=null===e.prevPage,s=t.getSlide(),o=new URL(document.URL).hash;let n=!1;if(s.slug)n="#"+s.slug;else{const i=s.$trigger&&s.$trigger.dataset,o=t.option("slug")||i&&i.fancybox;o&&o.length&&"true"!==o&&(n="#"+o+(e.slides.length>1?"-"+(s.index+1):""))}i&&(this.origHash=o!==n?o:""),n&&o!==n&&(this.timer=setTimeout((()=>{try{window.history[i?"pushState":"replaceState"]({},document.title,window.location.pathname+window.location.search+n),i&&(this.hasCreatedHistory=!0)}catch(t){}}),300))}onClosing(){if(this.timer&&clearTimeout(this.timer),!0!==this.hasSilentClose)try{return void window.history.replaceState({},document.title,window.location.pathname+window.location.search+(this.origHash||""))}catch(t){}}attach(t){t.on(this.events)}detach(t){t.off(this.events)}static startFromUrl(){const t=L.Fancybox;if(!t||t.getInstance()||!1===t.defaults.Hash)return;const{hash:e,slug:i,index:s}=L.getParsedURL();if(!i)return;let o=document.querySelector(`[data-slug="${e}"]`);if(o&&o.dispatchEvent(new CustomEvent("click",{bubbles:!0,cancelable:!0})),t.getInstance())return;const n=document.querySelectorAll(`[data-fancybox="${i}"]`);n.length&&(null===s&&1===n.length?o=n[0]:s&&(o=n[s-1]),o&&o.dispatchEvent(new CustomEvent("click",{bubbles:!0,cancelable:!0})))}static onHashChange(){const{slug:t,index:e}=L.getParsedURL(),i=L.Fancybox,s=i&&i.getInstance();if(s&&s.plugins.Hash){if(t){const i=s.Carousel;if(t===s.option("slug"))return i.slideTo(e-1);for(let e of i.slides)if(e.slug&&e.slug===t)return i.slideTo(e.index);const o=s.getSlide(),n=o.$trigger&&o.$trigger.dataset;if(n&&n.fancybox===t)return i.slideTo(e-1)}s.plugins.Hash.hasSilentClose=!0,s.close()}L.startFromUrl()}static create(t){function e(){window.addEventListener("hashchange",L.onHashChange,!1),L.startFromUrl()}L.Fancybox=t,v&&window.requestAnimationFrame((()=>{/complete|interactive|loaded/.test(document.readyState)?e():document.addEventListener("DOMContentLoaded",e)}))}static destroy(){window.removeEventListener("hashchange",L.onHashChange,!1)}static getParsedURL(){const t=window.location.hash.substr(1),e=t.split("-"),i=e.length>1&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||null;return{hash:t,slug:e.join("-"),index:i}}}const _={pageXOffset:0,pageYOffset:0,element:()=>document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement,activate(t){_.pageXOffset=window.pageXOffset,_.pageYOffset=window.pageYOffset,t.requestFullscreen?t.requestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen()},deactivate(){document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen&&document.webkitExitFullscreen()}};class A{constructor(t){this.fancybox=t,this.active=!1,this.handleVisibilityChange=this.handleVisibilityChange.bind(this)}isActive(){return this.active}setTimer(){if(!this.active||this.timer)return;const t=this.fancybox.option("slideshow.delay",3e3);this.timer=setTimeout((()=>{this.timer=null,this.fancybox.option("infinite")||this.fancybox.getSlide().index!==this.fancybox.Carousel.slides.length-1?this.fancybox.next():this.fancybox.jumpTo(0,{friction:0})}),t);let e=this.$progress;e||(e=document.createElement("div"),e.classList.add("fancybox__progress"),this.fancybox.$carousel.parentNode.insertBefore(e,this.fancybox.$carousel),this.$progress=e,e.offsetHeight),e.style.transitionDuration=`${t}ms`,e.style.transform="scaleX(1)"}clearTimer(){clearTimeout(this.timer),this.timer=null,this.$progress&&(this.$progress.style.transitionDuration="",this.$progress.style.transform="",this.$progress.offsetHeight)}activate(){this.active||(this.active=!0,this.fancybox.$container.classList.add("has-slideshow"),"done"===this.fancybox.getSlide().state&&this.setTimer(),document.addEventListener("visibilitychange",this.handleVisibilityChange,!1))}handleVisibilityChange(){this.deactivate()}deactivate(){this.active=!1,this.clearTimer(),this.fancybox.$container.classList.remove("has-slideshow"),document.removeEventListener("visibilitychange",this.handleVisibilityChange,!1)}toggle(){this.active?this.deactivate():this.fancybox.Carousel.slides.length>1&&this.activate()}}const z={display:["counter","zoom","slideshow","fullscreen","thumbs","close"],autoEnable:!0,items:{counter:{position:"left",type:"div",class:"fancybox__counter",html:'<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>',attr:{tabindex:-1}},prev:{type:"button",class:"fancybox__button--prev",label:"PREV",html:'<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>',attr:{"data-fancybox-prev":""}},next:{type:"button",class:"fancybox__button--next",label:"NEXT",html:'<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>',attr:{"data-fancybox-next":""}},fullscreen:{type:"button",class:"fancybox__button--fullscreen",label:"TOGGLE_FULLSCREEN",html:'<svg viewBox="0 0 24 24">\n                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>\n                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>\n            </svg>',click:function(t){t.preventDefault(),_.element()?_.deactivate():_.activate(this.fancybox.$container)}},slideshow:{type:"button",class:"fancybox__button--slideshow",label:"TOGGLE_SLIDESHOW",html:'<svg viewBox="0 0 24 24">\n                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>\n                <g><path d="M7 4v15M17 4v15"/></g>\n            </svg>',click:function(t){t.preventDefault(),this.Slideshow.toggle()}},zoom:{type:"button",class:"fancybox__button--zoom",label:"TOGGLE_ZOOM",html:'<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>',click:function(t){t.preventDefault();const e=this.fancybox.getSlide().Panzoom;e&&e.toggleZoom()}},download:{type:"link",label:"DOWNLOAD",class:"fancybox__button--download",html:'<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>',click:function(t){t.stopPropagation()}},thumbs:{type:"button",label:"TOGGLE_THUMBS",class:"fancybox__button--thumbs",html:'<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>',click:function(t){t.stopPropagation();const e=this.fancybox.plugins.Thumbs;e&&e.toggle()}},close:{type:"button",label:"CLOSE",class:"fancybox__button--close",html:'<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>',attr:{"data-fancybox-close":"",tabindex:0}}}};class k{constructor(t){this.fancybox=t,this.$container=null,this.state="init";for(const t of["onInit","onPrepare","onDone","onKeydown","onClosing","onChange","onSettle","onRefresh"])this[t]=this[t].bind(this);this.events={init:this.onInit,prepare:this.onPrepare,done:this.onDone,keydown:this.onKeydown,closing:this.onClosing,"Carousel.change":this.onChange,"Carousel.settle":this.onSettle,"Carousel.Panzoom.touchStart":()=>this.onRefresh(),"Image.startAnimation":(t,e)=>this.onRefresh(e),"Image.afterUpdate":(t,e)=>this.onRefresh(e)}}onInit(){if(this.fancybox.option("Toolbar.autoEnable")){let t=!1;for(const e of this.fancybox.items)if("image"===e.type){t=!0;break}if(!t)return void(this.state="disabled")}for(const e of this.fancybox.option("Toolbar.display")){if("close"===(t(e)?e.id:e)){this.fancybox.options.closeButton=!1;break}}}onPrepare(){const t=this.fancybox;if("init"===this.state&&(this.build(),this.update(),this.Slideshow=new A(t),!t.Carousel.prevPage&&(t.option("slideshow.autoStart")&&this.Slideshow.activate(),t.option("fullscreen.autoStart")&&!_.element())))try{_.activate(t.$container)}catch(t){}}onFsChange(){window.scrollTo(_.pageXOffset,_.pageYOffset)}onSettle(){const t=this.fancybox,e=this.Slideshow;e&&e.isActive()&&(t.getSlide().index!==t.Carousel.slides.length-1||t.option("infinite")?"done"===t.getSlide().state&&e.setTimer():e.deactivate())}onChange(){this.update(),this.Slideshow&&this.Slideshow.isActive()&&this.Slideshow.clearTimer()}onDone(t,e){const i=this.Slideshow;e.index===t.getSlide().index&&(this.update(),i&&i.isActive()&&(t.option("infinite")||e.index!==t.Carousel.slides.length-1?i.setTimer():i.deactivate()))}onRefresh(t){t&&t.index!==this.fancybox.getSlide().index||(this.update(),!this.Slideshow||!this.Slideshow.isActive()||t&&"done"!==t.state||this.Slideshow.deactivate())}onKeydown(t,e,i){" "===e&&this.Slideshow&&(this.Slideshow.toggle(),i.preventDefault())}onClosing(){this.Slideshow&&this.Slideshow.deactivate(),document.removeEventListener("fullscreenchange",this.onFsChange)}createElement(t){let e;"div"===t.type?e=document.createElement("div"):(e=document.createElement("link"===t.type?"a":"button"),e.classList.add("carousel__button")),e.innerHTML=t.html,e.setAttribute("tabindex",t.tabindex||0),t.class&&e.classList.add(...t.class.split(" "));for(const i in t.attr)e.setAttribute(i,t.attr[i]);t.label&&e.setAttribute("title",this.fancybox.localize(`{{${t.label}}}`)),t.click&&e.addEventListener("click",t.click.bind(this)),"prev"===t.id&&e.setAttribute("data-fancybox-prev",""),"next"===t.id&&e.setAttribute("data-fancybox-next","");const i=e.querySelector("svg");return i&&(i.setAttribute("role","img"),i.setAttribute("tabindex","-1"),i.setAttribute("xmlns","http://www.w3.org/2000/svg")),e}build(){this.cleanup();const i=this.fancybox.option("Toolbar.items"),s=[{position:"left",items:[]},{position:"center",items:[]},{position:"right",items:[]}],o=this.fancybox.plugins.Thumbs;for(const n of this.fancybox.option("Toolbar.display")){let a,r;if(t(n)?(a=n.id,r=e({},i[a],n)):(a=n,r=i[a]),["counter","next","prev","slideshow"].includes(a)&&this.fancybox.items.length<2)continue;if("fullscreen"===a){if(!document.fullscreenEnabled||window.fullScreen)continue;document.addEventListener("fullscreenchange",this.onFsChange)}if("thumbs"===a&&(!o||"disabled"===o.state))continue;if(!r)continue;let h=r.position||"right",l=s.find((t=>t.position===h));l&&l.items.push(r)}const n=document.createElement("div");n.classList.add("fancybox__toolbar");for(const t of s)if(t.items.length){const e=document.createElement("div");e.classList.add("fancybox__toolbar__items"),e.classList.add(`fancybox__toolbar__items--${t.position}`);for(const i of t.items)e.appendChild(this.createElement(i));n.appendChild(e)}this.fancybox.$carousel.parentNode.insertBefore(n,this.fancybox.$carousel),this.$container=n}update(){const t=this.fancybox.getSlide(),e=t.index,i=this.fancybox.items.length,s=t.downloadSrc||("image"!==t.type||t.error?null:t.src);for(const t of this.fancybox.$container.querySelectorAll("a.fancybox__button--download"))s?(t.removeAttribute("disabled"),t.removeAttribute("tabindex"),t.setAttribute("href",s),t.setAttribute("download",s),t.setAttribute("target","_blank")):(t.setAttribute("disabled",""),t.setAttribute("tabindex",-1),t.removeAttribute("href"),t.removeAttribute("download"));const o=t.Panzoom,n=o&&o.option("maxScale")>o.option("baseScale");for(const t of this.fancybox.$container.querySelectorAll(".fancybox__button--zoom"))n?t.removeAttribute("disabled"):t.setAttribute("disabled","");for(const e of this.fancybox.$container.querySelectorAll("[data-fancybox-index]"))e.innerHTML=t.index+1;for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-count]"))t.innerHTML=i;if(!this.fancybox.option("infinite")){for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-prev]"))0===e?t.setAttribute("disabled",""):t.removeAttribute("disabled");for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-next]"))e===i-1?t.setAttribute("disabled",""):t.removeAttribute("disabled")}}cleanup(){this.Slideshow&&this.Slideshow.isActive()&&this.Slideshow.clearTimer(),this.$container&&this.$container.remove(),this.$container=null}attach(){this.fancybox.on(this.events)}detach(){this.fancybox.off(this.events),this.cleanup()}}k.defaults=z;const O={ScrollLock:class{constructor(t){this.fancybox=t,this.viewport=null,this.pendingUpdate=null;for(const t of["onReady","onResize","onTouchstart","onTouchmove"])this[t]=this[t].bind(this)}onReady(){const t=window.visualViewport;t&&(this.viewport=t,this.startY=0,t.addEventListener("resize",this.onResize),this.updateViewport()),window.addEventListener("touchstart",this.onTouchstart,{passive:!1}),window.addEventListener("touchmove",this.onTouchmove,{passive:!1}),window.addEventListener("wheel",this.onWheel,{passive:!1})}onResize(){this.updateViewport()}updateViewport(){const t=this.fancybox,e=this.viewport,i=e.scale||1,s=t.$container;if(!s)return;let o="",n="",a="";i-1>.1&&(o=e.width*i+"px",n=e.height*i+"px",a=`translate3d(${e.offsetLeft}px, ${e.offsetTop}px, 0) scale(${1/i})`),s.style.width=o,s.style.height=n,s.style.transform=a}onTouchstart(t){this.startY=t.touches?t.touches[0].screenY:t.screenY}onTouchmove(t){const e=this.startY,i=window.innerWidth/window.document.documentElement.clientWidth;if(!t.cancelable)return;if(t.touches.length>1||1!==i)return;const o=s(t.composedPath()[0]);if(!o)return void t.preventDefault();const n=window.getComputedStyle(o),a=parseInt(n.getPropertyValue("height"),10),r=t.touches?t.touches[0].screenY:t.screenY,h=e<=r&&0===o.scrollTop,l=e>=r&&o.scrollHeight-o.scrollTop===a;(h||l)&&t.preventDefault()}onWheel(t){s(t.composedPath()[0])||t.preventDefault()}cleanup(){this.pendingUpdate&&(cancelAnimationFrame(this.pendingUpdate),this.pendingUpdate=null);const t=this.viewport;t&&(t.removeEventListener("resize",this.onResize),this.viewport=null),window.removeEventListener("touchstart",this.onTouchstart,!1),window.removeEventListener("touchmove",this.onTouchmove,!1),window.removeEventListener("wheel",this.onWheel,{passive:!1})}attach(){this.fancybox.on("initLayout",this.onReady)}detach(){this.fancybox.off("initLayout",this.onReady),this.cleanup()}},Thumbs:C,Html:P,Toolbar:k,Image:T,Hash:L};const M={startIndex:0,preload:1,infinite:!0,showClass:"fancybox-zoomInUp",hideClass:"fancybox-fadeOut",animated:!0,hideScrollbar:!0,parentEl:null,mainClass:null,autoFocus:!0,trapFocus:!0,placeFocusBack:!0,click:"close",closeButton:"inside",dragToClose:!0,keyboard:{Escape:"close",Delete:"close",Backspace:"close",PageUp:"next",PageDown:"prev",ArrowUp:"next",ArrowDown:"prev",ArrowRight:"next",ArrowLeft:"prev"},template:{closeButton:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>',spinner:'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>',main:null},l10n:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",MODAL:"You can close this modal content with the ESC key",ERROR:"Something Went Wrong, Please Try Again Later",IMAGE_ERROR:"Image Not Found",ELEMENT_NOT_FOUND:"HTML Element Not Found",AJAX_NOT_FOUND:"Error Loading AJAX : Not Found",AJAX_FORBIDDEN:"Error Loading AJAX : Forbidden",IFRAME_ERROR:"Error Loading Page",TOGGLE_ZOOM:"Toggle zoom level",TOGGLE_THUMBS:"Toggle thumbnails",TOGGLE_SLIDESHOW:"Toggle slideshow",TOGGLE_FULLSCREEN:"Toggle full-screen mode",DOWNLOAD:"Download"}},I=new Map;let F=0;class R extends l{constructor(t,i={}){t=t.map((t=>(t.width&&(t._width=t.width),t.height&&(t._height=t.height),t))),super(e(!0,{},M,i)),this.bindHandlers(),this.state="init",this.setItems(t),this.attachPlugins(R.Plugins),this.trigger("init"),!0===this.option("hideScrollbar")&&this.hideScrollbar(),this.initLayout(),this.initCarousel(),this.attachEvents(),I.set(this.id,this),this.trigger("prepare"),this.state="ready",this.trigger("ready"),this.$container.setAttribute("aria-hidden","false"),this.option("trapFocus")&&this.focus()}option(t,...e){const i=this.getSlide();let s=i?i[t]:void 0;return void 0!==s?("function"==typeof s&&(s=s.call(this,this,...e)),s):super.option(t,...e)}bindHandlers(){for(const t of["onMousedown","onKeydown","onClick","onFocus","onCreateSlide","onSettle","onTouchMove","onTouchEnd","onTransform"])this[t]=this[t].bind(this)}attachEvents(){document.addEventListener("mousedown",this.onMousedown),document.addEventListener("keydown",this.onKeydown,!0),this.option("trapFocus")&&document.addEventListener("focus",this.onFocus,!0),this.$container.addEventListener("click",this.onClick)}detachEvents(){document.removeEventListener("mousedown",this.onMousedown),document.removeEventListener("keydown",this.onKeydown,!0),document.removeEventListener("focus",this.onFocus,!0),this.$container.removeEventListener("click",this.onClick)}initLayout(){this.$root=this.option("parentEl")||document.body;let t=this.option("template.main");t&&(this.$root.insertAdjacentHTML("beforeend",this.localize(t)),this.$container=this.$root.querySelector(".fancybox__container")),this.$container||(this.$container=document.createElement("div"),this.$root.appendChild(this.$container)),this.$container.onscroll=()=>(this.$container.scrollLeft=0,!1),Object.entries({class:"fancybox__container",role:"dialog",tabIndex:"-1","aria-modal":"true","aria-hidden":"true","aria-label":this.localize("{{MODAL}}")}).forEach((t=>this.$container.setAttribute(...t))),this.option("animated")&&this.$container.classList.add("is-animated"),this.$backdrop=this.$container.querySelector(".fancybox__backdrop"),this.$backdrop||(this.$backdrop=document.createElement("div"),this.$backdrop.classList.add("fancybox__backdrop"),this.$container.appendChild(this.$backdrop)),this.$carousel=this.$container.querySelector(".fancybox__carousel"),this.$carousel||(this.$carousel=document.createElement("div"),this.$carousel.classList.add("fancybox__carousel"),this.$container.appendChild(this.$carousel)),this.$container.Fancybox=this,this.id=this.$container.getAttribute("id"),this.id||(this.id=this.options.id||++F,this.$container.setAttribute("id","fancybox-"+this.id));const e=this.option("mainClass");return e&&this.$container.classList.add(...e.split(" ")),document.documentElement.classList.add("with-fancybox"),this.trigger("initLayout"),this}setItems(t){const e=[];for(const i of t){const t=i.$trigger;if(t){const e=t.dataset||{};i.src=e.src||t.getAttribute("href")||i.src,i.type=e.type||i.type,!i.src&&t instanceof HTMLImageElement&&(i.src=t.currentSrc||i.$trigger.src)}let s=i.$thumb;if(!s){let t=i.$trigger&&i.$trigger.origTarget;t&&(s=t instanceof HTMLImageElement?t:t.querySelector("img:not([aria-hidden])")),!s&&i.$trigger&&(s=i.$trigger instanceof HTMLImageElement?i.$trigger:i.$trigger.querySelector("img:not([aria-hidden])"))}i.$thumb=s||null;let o=i.thumb;!o&&s&&(o=s.currentSrc||s.src,!o&&s.dataset&&(o=s.dataset.lazySrc||s.dataset.src)),o||"image"!==i.type||(o=i.src),i.thumb=o||null,i.caption=i.caption||"",e.push(i)}this.items=e}initCarousel(){return this.Carousel=new y(this.$carousel,e(!0,{},{prefix:"",classNames:{viewport:"fancybox__viewport",track:"fancybox__track",slide:"fancybox__slide"},textSelection:!0,preload:this.option("preload"),friction:.88,slides:this.items,initialPage:this.options.startIndex,slidesPerPage:1,infiniteX:this.option("infinite"),infiniteY:!0,l10n:this.option("l10n"),Dots:!1,Navigation:{classNames:{main:"fancybox__nav",button:"carousel__button",next:"is-next",prev:"is-prev"}},Panzoom:{textSelection:!0,panOnlyZoomed:()=>this.Carousel&&this.Carousel.pages&&this.Carousel.pages.length<2&&!this.option("dragToClose"),lockAxis:()=>{if(this.Carousel){let t="x";return this.option("dragToClose")&&(t+="y"),t}}},on:{"*":(t,...e)=>this.trigger(`Carousel.${t}`,...e),init:t=>this.Carousel=t,createSlide:this.onCreateSlide,settle:this.onSettle}},this.option("Carousel"))),this.option("dragToClose")&&this.Carousel.Panzoom.on({touchMove:this.onTouchMove,afterTransform:this.onTransform,touchEnd:this.onTouchEnd}),this.trigger("initCarousel"),this}onCreateSlide(t,e){let i=e.caption||"";if("function"==typeof this.options.caption&&(i=this.options.caption.call(this,this,this.Carousel,e)),"string"==typeof i&&i.length){const t=document.createElement("div"),s=`fancybox__caption_${this.id}_${e.index}`;t.className="fancybox__caption",t.innerHTML=i,t.setAttribute("id",s),e.$caption=e.$el.appendChild(t),e.$el.classList.add("has-caption"),e.$el.setAttribute("aria-labelledby",s)}}onSettle(){this.option("autoFocus")&&this.focus()}onFocus(t){this.isTopmost()&&this.focus(t)}onClick(t){if(t.defaultPrevented)return;let e=t.composedPath()[0];if(e.matches("[data-fancybox-close]"))return t.preventDefault(),void R.close(!1,t);if(e.matches("[data-fancybox-next]"))return t.preventDefault(),void R.next();if(e.matches("[data-fancybox-prev]"))return t.preventDefault(),void R.prev();const i=document.activeElement;if(i){if(i.closest("[contenteditable]"))return;e.matches(x)||i.blur()}if(e.closest(".fancybox__content"))return;if(getSelection().toString().length)return;if(!1===this.trigger("click",t))return;switch(this.option("click")){case"close":this.close();break;case"next":this.next()}}onTouchMove(){const t=this.getSlide().Panzoom;return!t||1===t.content.scale}onTouchEnd(t){const e=t.dragOffset.y;Math.abs(e)>=150||Math.abs(e)>=35&&t.dragOffset.time<350?(this.option("hideClass")&&(this.getSlide().hideClass="fancybox-throwOut"+(t.content.y<0?"Up":"Down")),this.close()):"y"===t.lockAxis&&t.panTo({y:0})}onTransform(t){if(this.$backdrop){const e=Math.abs(t.content.y),i=e<1?"":Math.max(.33,Math.min(1,1-e/t.content.fitHeight*1.5));this.$container.style.setProperty("--fancybox-ts",i?"0s":""),this.$container.style.setProperty("--fancybox-opacity",i)}}onMousedown(){"ready"===this.state&&document.body.classList.add("is-using-mouse")}onKeydown(t){if(!this.isTopmost())return;document.body.classList.remove("is-using-mouse");const e=t.key,i=this.option("keyboard");if(!i||t.ctrlKey||t.altKey||t.shiftKey)return;const s=t.composedPath()[0],o=document.activeElement&&document.activeElement.classList,n=o&&o.contains("carousel__button");if("Escape"!==e&&!n){if(t.target.isContentEditable||-1!==["BUTTON","TEXTAREA","OPTION","INPUT","SELECT","VIDEO"].indexOf(s.nodeName))return}if(!1===this.trigger("keydown",e,t))return;const a=i[e];"function"==typeof this[a]&&this[a]()}getSlide(){const t=this.Carousel;if(!t)return null;const e=null===t.page?t.option("initialPage"):t.page,i=t.pages||[];return i.length&&i[e]?i[e].slides[0]:null}focus(t){if(R.ignoreFocusChange)return;if(["init","closing","customClosing","destroy"].indexOf(this.state)>-1)return;const e=this.$container,i=this.getSlide(),s="done"===i.state?i.$el:null;if(s&&s.contains(document.activeElement))return;t&&t.preventDefault(),R.ignoreFocusChange=!0;const o=Array.from(e.querySelectorAll(x));let n,a=[];for(let t of o){const e=t.offsetParent,i=s&&s.contains(t),o=!this.Carousel.$viewport.contains(t);e&&(i||o)?(a.push(t),void 0!==t.dataset.origTabindex&&(t.tabIndex=t.dataset.origTabindex,t.removeAttribute("data-orig-tabindex")),(t.hasAttribute("autoFocus")||!n&&i&&!t.classList.contains("carousel__button"))&&(n=t)):(t.dataset.origTabindex=void 0===t.dataset.origTabindex?t.getAttribute("tabindex"):t.dataset.origTabindex,t.tabIndex=-1)}t?a.indexOf(t.target)>-1?this.lastFocus=t.target:this.lastFocus===e?w(a[a.length-1]):w(e):this.option("autoFocus")&&n?w(n):a.indexOf(document.activeElement)<0&&w(e),this.lastFocus=document.activeElement,R.ignoreFocusChange=!1}hideScrollbar(){if(!v)return;const t=window.innerWidth-document.documentElement.getBoundingClientRect().width,e="fancybox-style-noscroll";let i=document.getElementById(e);i||t>0&&(i=document.createElement("style"),i.id=e,i.type="text/css",i.innerHTML=`.compensate-for-scrollbar {padding-right: ${t}px;}`,document.getElementsByTagName("head")[0].appendChild(i),document.body.classList.add("compensate-for-scrollbar"))}revealScrollbar(){document.body.classList.remove("compensate-for-scrollbar");const t=document.getElementById("fancybox-style-noscroll");t&&t.remove()}clearContent(t){this.Carousel.trigger("removeSlide",t),t.$content&&(t.$content.remove(),t.$content=null),t.$closeButton&&(t.$closeButton.remove(),t.$closeButton=null),t._className&&t.$el.classList.remove(t._className)}setContent(t,e,i={}){let s;const o=t.$el;if(e instanceof HTMLElement)["img","iframe","video","audio"].indexOf(e.nodeName.toLowerCase())>-1?(s=document.createElement("div"),s.appendChild(e)):s=e;else{const t=document.createRange().createContextualFragment(e);s=document.createElement("div"),s.appendChild(t)}if(t.filter&&!t.error&&(s=s.querySelector(t.filter)),s instanceof Element)return t._className=`has-${i.suffix||t.type||"unknown"}`,o.classList.add(t._className),s.classList.add("fancybox__content"),"none"!==s.style.display&&"none"!==getComputedStyle(s).getPropertyValue("display")||(s.style.display=t.display||this.option("defaultDisplay")||"flex"),t.id&&s.setAttribute("id",t.id),t.$content=s,o.prepend(s),this.manageCloseButton(t),"loading"!==t.state&&this.revealContent(t),s;this.setError(t,"{{ELEMENT_NOT_FOUND}}")}manageCloseButton(t){const e=void 0===t.closeButton?this.option("closeButton"):t.closeButton;if(!e||"top"===e&&this.$closeButton)return;const i=document.createElement("button");i.classList.add("carousel__button","is-close"),i.setAttribute("title",this.options.l10n.CLOSE),i.innerHTML=this.option("template.closeButton"),i.addEventListener("click",(t=>this.close(t))),"inside"===e?(t.$closeButton&&t.$closeButton.remove(),t.$closeButton=t.$content.appendChild(i)):this.$closeButton=this.$container.insertBefore(i,this.$container.firstChild)}revealContent(t){this.trigger("reveal",t),t.$content.style.visibility="";let e=!1;t.error||"loading"===t.state||null!==this.Carousel.prevPage||t.index!==this.options.startIndex||(e=void 0===t.showClass?this.option("showClass"):t.showClass),e?(t.state="animating",this.animateCSS(t.$content,e,(()=>{this.done(t)}))):this.done(t)}animateCSS(t,e,i){if(t&&t.dispatchEvent(new CustomEvent("animationend",{bubbles:!0,cancelable:!0})),!t||!e)return void("function"==typeof i&&i());const s=function(o){o.currentTarget===this&&(t.removeEventListener("animationend",s),i&&i(),t.classList.remove(e))};t.addEventListener("animationend",s),t.classList.add(e)}done(t){t.state="done",this.trigger("done",t);const e=this.getSlide();e&&t.index===e.index&&this.option("autoFocus")&&this.focus()}setError(t,e){t.error=e,this.hideLoading(t),this.clearContent(t);const i=document.createElement("div");i.classList.add("fancybox-error"),i.innerHTML=this.localize(e||"<p>{{ERROR}}</p>"),this.setContent(t,i,{suffix:"error"})}showLoading(t){t.state="loading",t.$el.classList.add("is-loading");let e=t.$el.querySelector(".fancybox__spinner");e||(e=document.createElement("div"),e.classList.add("fancybox__spinner"),e.innerHTML=this.option("template.spinner"),e.addEventListener("click",(()=>{this.Carousel.Panzoom.velocity||this.close()})),t.$el.prepend(e))}hideLoading(t){const e=t.$el&&t.$el.querySelector(".fancybox__spinner");e&&(e.remove(),t.$el.classList.remove("is-loading")),"loading"===t.state&&(this.trigger("load",t),t.state="ready")}next(){const t=this.Carousel;t&&t.pages.length>1&&t.slideNext()}prev(){const t=this.Carousel;t&&t.pages.length>1&&t.slidePrev()}jumpTo(...t){this.Carousel&&this.Carousel.slideTo(...t)}isClosing(){return["closing","customClosing","destroy"].includes(this.state)}isTopmost(){return R.getInstance().id==this.id}close(t){if(t&&t.preventDefault(),this.isClosing())return;if(!1===this.trigger("shouldClose",t))return;if(this.state="closing",this.Carousel.Panzoom.destroy(),this.detachEvents(),this.trigger("closing",t),"destroy"===this.state)return;this.$container.setAttribute("aria-hidden","true"),this.$container.classList.add("is-closing");const e=this.getSlide();if(this.Carousel.slides.forEach((t=>{t.$content&&t.index!==e.index&&this.Carousel.trigger("removeSlide",t)})),"closing"===this.state){const t=void 0===e.hideClass?this.option("hideClass"):e.hideClass;this.animateCSS(e.$content,t,(()=>{this.destroy()}),!0)}}destroy(){if("destroy"===this.state)return;this.state="destroy",this.trigger("destroy");const t=this.option("placeFocusBack")?this.option("triggerTarget",this.getSlide().$trigger):null;this.Carousel.destroy(),this.detachPlugins(),this.Carousel=null,this.options={},this.events={},this.$container.remove(),this.$container=this.$backdrop=this.$carousel=null,t&&w(t),I.delete(this.id);const e=R.getInstance();e?e.focus():(document.documentElement.classList.remove("with-fancybox"),document.body.classList.remove("is-using-mouse"),this.revealScrollbar())}static show(t,e={}){return new R(t,e)}static fromEvent(t,e={}){if(t.defaultPrevented)return;if(t.button&&0!==t.button)return;if(t.ctrlKey||t.metaKey||t.shiftKey)return;const i=t.composedPath()[0];let s,o,n,a=i;if((a.matches("[data-fancybox-trigger]")||(a=a.closest("[data-fancybox-trigger]")))&&(e.triggerTarget=a,s=a&&a.dataset&&a.dataset.fancyboxTrigger),s){const t=document.querySelectorAll(`[data-fancybox="${s}"]`),e=parseInt(a.dataset.fancyboxIndex,10)||0;a=t.length?t[e]:a}Array.from(R.openers.keys()).reverse().some((e=>{n=a||i;let s=!1;try{n instanceof Element&&("string"==typeof e||e instanceof String)&&(s=n.matches(e)||(n=n.closest(e)))}catch(t){}return!!s&&(t.preventDefault(),o=e,!0)}));let r=!1;if(o){e.event=t,e.target=n,n.origTarget=i,r=R.fromOpener(o,e);const s=R.getInstance();s&&"ready"===s.state&&t.detail&&document.body.classList.add("is-using-mouse")}return r}static fromOpener(t,i={}){let s=[],o=i.startIndex||0,n=i.target||null;const a=void 0!==(i=e({},i,R.openers.get(t))).groupAll&&i.groupAll,r=void 0===i.groupAttr?"data-fancybox":i.groupAttr,h=r&&n?n.getAttribute(`${r}`):"";if(!n||h||a){const e=i.root||(n?n.getRootNode():document.body);s=[].slice.call(e.querySelectorAll(t))}if(n&&!a&&(s=h?s.filter((t=>t.getAttribute(`${r}`)===h)):[n]),!s.length)return!1;const l=R.getInstance();return!(l&&s.indexOf(l.options.$trigger)>-1)&&(o=n?s.indexOf(n):o,s=s.map((function(t){const e=["false","0","no","null","undefined"],i=["true","1","yes"],s=Object.assign({},t.dataset),o={};for(let[t,n]of Object.entries(s))if("fancybox"!==t)if("width"===t||"height"===t)o[`_${t}`]=n;else if("string"==typeof n||n instanceof String)if(e.indexOf(n)>-1)o[t]=!1;else if(i.indexOf(o[t])>-1)o[t]=!0;else try{o[t]=JSON.parse(n)}catch(e){o[t]=n}else o[t]=n;return t instanceof Element&&(o.$trigger=t),o})),new R(s,e({},i,{startIndex:o,$trigger:n})))}static bind(t,e={}){function i(){document.body.addEventListener("click",R.fromEvent,!1)}v&&(R.openers.size||(/complete|interactive|loaded/.test(document.readyState)?i():document.addEventListener("DOMContentLoaded",i)),R.openers.set(t,e))}static unbind(t){R.openers.delete(t),R.openers.size||R.destroy()}static destroy(){let t;for(;t=R.getInstance();)t.destroy();R.openers=new Map,document.body.removeEventListener("click",R.fromEvent,!1)}static getInstance(t){if(t)return I.get(t);return Array.from(I.values()).reverse().find((t=>!t.isClosing()&&t))||null}static close(t=!0,e){if(t)for(const t of I.values())t.close(e);else{const t=R.getInstance();t&&t.close(e)}}static next(){const t=R.getInstance();t&&t.next()}static prev(){const t=R.getInstance();t&&t.prev()}}R.version="4.0.31",R.defaults=M,R.openers=new Map,R.Plugins=O,R.bind("[data-fancybox]");for(const[t,e]of Object.entries(R.Plugins||{}))"function"==typeof e.create&&e.create(R);


        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/createPopper.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "createPopper": () => (/* binding */ createPopper),
            /* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
            /* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator)
            /* harmony export */ });
        /* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
        /* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
        /* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
        /* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
        /* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
        /* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
        /* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
        /* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
        /* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
        /* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














        var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
        var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
        var DEFAULT_OPTIONS = {
            placement: 'bottom',
            modifiers: [],
            strategy: 'absolute'
        };

        function areValidElements() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return !args.some(function (element) {
                return !(element && typeof element.getBoundingClientRect === 'function');
            });
        }

        function popperGenerator(generatorOptions) {
            if (generatorOptions === void 0) {
                generatorOptions = {};
            }

            var _generatorOptions = generatorOptions,
                _generatorOptions$def = _generatorOptions.defaultModifiers,
                defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
                _generatorOptions$def2 = _generatorOptions.defaultOptions,
                defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
            return function createPopper(reference, popper, options) {
                if (options === void 0) {
                    options = defaultOptions;
                }

                var state = {
                    placement: 'bottom',
                    orderedModifiers: [],
                    options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
                    modifiersData: {},
                    elements: {
                        reference: reference,
                        popper: popper
                    },
                    attributes: {},
                    styles: {}
                };
                var effectCleanupFns = [];
                var isDestroyed = false;
                var instance = {
                    state: state,
                    setOptions: function setOptions(setOptionsAction) {
                        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                        cleanupModifierEffects();
                        state.options = Object.assign({}, defaultOptions, state.options, options);
                        state.scrollParents = {
                            reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference.contextElement) : [],
                            popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
                        }; // Orders the modifiers based on their dependencies and `phase`
                        // properties

                        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

                        state.orderedModifiers = orderedModifiers.filter(function (m) {
                            return m.enabled;
                        }); // Validate the provided modifiers so that the consumer will get warned
                        // if one of the modifiers is invalid for any reason

                        if (true) {
                            var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                                var name = _ref.name;
                                return name;
                            });
                            (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(modifiers);

                            if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {
                                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                                    var name = _ref2.name;
                                    return name === 'flip';
                                });

                                if (!flipModifier) {
                                    console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                                }
                            }

                            var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
                                marginTop = _getComputedStyle.marginTop,
                                marginRight = _getComputedStyle.marginRight,
                                marginBottom = _getComputedStyle.marginBottom,
                                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                            // cause bugs with positioning, so we'll warn the consumer


                            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                                return parseFloat(margin);
                            })) {
                                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
                            }
                        }

                        runModifierEffects();
                        return instance.update();
                    },
                    // Sync update – it will always be executed, even if not necessary. This
                    // is useful for low frequency updates where sync behavior simplifies the
                    // logic.
                    // For high frequency updates (e.g. `resize` and `scroll` events), always
                    // prefer the async Popper#update method
                    forceUpdate: function forceUpdate() {
                        if (isDestroyed) {
                            return;
                        }

                        var _state$elements = state.elements,
                            reference = _state$elements.reference,
                            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                        // anymore

                        if (!areValidElements(reference, popper)) {
                            if (true) {
                                console.error(INVALID_ELEMENT_ERROR);
                            }

                            return;
                        } // Store the reference and popper rects to be read by modifiers


                        state.rects = {
                            reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
                            popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
                        }; // Modifiers have the ability to reset the current update cycle. The
                        // most common use case for this is the `flip` modifier changing the
                        // placement, which then needs to re-run all the modifiers, because the
                        // logic was previously ran for the previous placement and is therefore
                        // stale/incorrect

                        state.reset = false;
                        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                        // is filled with the initial data specified by the modifier. This means
                        // it doesn't persist and is fresh on each update.
                        // To ensure persistent data, use `${name}#persistent`

                        state.orderedModifiers.forEach(function (modifier) {
                            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                        });
                        var __debug_loops__ = 0;

                        for (var index = 0; index < state.orderedModifiers.length; index++) {
                            if (true) {
                                __debug_loops__ += 1;

                                if (__debug_loops__ > 100) {
                                    console.error(INFINITE_LOOP_ERROR);
                                    break;
                                }
                            }

                            if (state.reset === true) {
                                state.reset = false;
                                index = -1;
                                continue;
                            }

                            var _state$orderedModifie = state.orderedModifiers[index],
                                fn = _state$orderedModifie.fn,
                                _state$orderedModifie2 = _state$orderedModifie.options,
                                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                                name = _state$orderedModifie.name;

                            if (typeof fn === 'function') {
                                state = fn({
                                    state: state,
                                    options: _options,
                                    name: name,
                                    instance: instance
                                }) || state;
                            }
                        }
                    },
                    // Async and optimistically optimized update – it will not be executed if
                    // not necessary (debounced to run at most once-per-tick)
                    update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
                        return new Promise(function (resolve) {
                            instance.forceUpdate();
                            resolve(state);
                        });
                    }),
                    destroy: function destroy() {
                        cleanupModifierEffects();
                        isDestroyed = true;
                    }
                };

                if (!areValidElements(reference, popper)) {
                    if (true) {
                        console.error(INVALID_ELEMENT_ERROR);
                    }

                    return instance;
                }

                instance.setOptions(options).then(function (state) {
                    if (!isDestroyed && options.onFirstUpdate) {
                        options.onFirstUpdate(state);
                    }
                }); // Modifiers have the ability to execute arbitrary code before the first
                // update cycle runs. They will be executed in the same order as the update
                // cycle. This is useful when a modifier adds some persistent data that
                // other modifiers need to use, but the modifier is run after the dependent
                // one.

                function runModifierEffects() {
                    state.orderedModifiers.forEach(function (_ref3) {
                        var name = _ref3.name,
                            _ref3$options = _ref3.options,
                            options = _ref3$options === void 0 ? {} : _ref3$options,
                            effect = _ref3.effect;

                        if (typeof effect === 'function') {
                            var cleanupFn = effect({
                                state: state,
                                name: name,
                                instance: instance,
                                options: options
                            });

                            var noopFn = function noopFn() {};

                            effectCleanupFns.push(cleanupFn || noopFn);
                        }
                    });
                }

                function cleanupModifierEffects() {
                    effectCleanupFns.forEach(function (fn) {
                        return fn();
                    });
                    effectCleanupFns = [];
                }

                return instance;
            };
        }
        var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
    /*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ contains)
            /* harmony export */ });
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

        function contains(parent, child) {
            var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

            if (parent.contains(child)) {
                return true;
            } // then fallback to custom implementation with Shadow DOM support
            else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {
                var next = child;

                do {
                    if (next && parent.isSameNode(next)) {
                        return true;
                    } // $FlowFixMe[prop-missing]: need a better way to handle this...


                    next = next.parentNode || next.host;
                } while (next);
            } // Give up, the result is false


            return false;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
    /*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
            /* harmony export */ });
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isLayoutViewport.js */ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");




        function getBoundingClientRect(element, includeScale, isFixedStrategy) {
            if (includeScale === void 0) {
                includeScale = false;
            }

            if (isFixedStrategy === void 0) {
                isFixedStrategy = false;
            }

            var clientRect = element.getBoundingClientRect();
            var scaleX = 1;
            var scaleY = 1;

            if (includeScale && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
                scaleX = element.offsetWidth > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.width) / element.offsetWidth || 1 : 1;
                scaleY = element.offsetHeight > 0 ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(clientRect.height) / element.offsetHeight || 1 : 1;
            }

            var _ref = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) : window,
                visualViewport = _ref.visualViewport;

            var addVisualOffsets = !(0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_3__["default"])() && isFixedStrategy;
            var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
            var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
            var width = clientRect.width / scaleX;
            var height = clientRect.height / scaleY;
            return {
                width: width,
                height: height,
                top: y,
                right: x + width,
                bottom: y + height,
                left: x,
                x: x,
                y: y
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getClippingRect)
            /* harmony export */ });
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
        /* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
        /* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
        /* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
        /* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
        /* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















        function getInnerBoundingClientRect(element, strategy) {
            var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element, false, strategy === 'fixed');
            rect.top = rect.top + element.clientTop;
            rect.left = rect.left + element.clientLeft;
            rect.bottom = rect.top + element.clientHeight;
            rect.right = rect.left + element.clientWidth;
            rect.width = element.clientWidth;
            rect.height = element.clientHeight;
            rect.x = rect.left;
            rect.y = rect.top;
            return rect;
        }

        function getClientRectFromMixedType(element, clippingParent, strategy) {
            return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element, strategy)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
        } // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


        function getClippingParents(element) {
            var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element));
            var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element).position) >= 0;
            var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(element) : element;

            if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {
                return [];
            } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


            return clippingParents.filter(function (clippingParent) {
                return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__["default"])(clippingParent) !== 'body';
            });
        } // Gets the maximum area that the element is visible in due to any number of
// clipping parents


        function getClippingRect(element, boundary, rootBoundary, strategy) {
            var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
            var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
            var firstClippingParent = clippingParents[0];
            var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
                var rect = getClientRectFromMixedType(element, clippingParent, strategy);
                accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);
                accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);
                accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);
                accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);
                return accRect;
            }, getClientRectFromMixedType(element, firstClippingParent, strategy));
            clippingRect.width = clippingRect.right - clippingRect.left;
            clippingRect.height = clippingRect.bottom - clippingRect.top;
            clippingRect.x = clippingRect.left;
            clippingRect.y = clippingRect.top;
            return clippingRect;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
    /*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getCompositeRect)
            /* harmony export */ });
        /* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
        /* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");









        function isElementScaled(element) {
            var rect = element.getBoundingClientRect();
            var scaleX = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.width) / element.offsetWidth || 1;
            var scaleY = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.height) / element.offsetHeight || 1;
            return scaleX !== 1 || scaleY !== 1;
        } // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


        function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
            if (isFixed === void 0) {
                isFixed = false;
            }

            var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);
            var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
            var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent);
            var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(elementOrVirtualElement, offsetParentIsScaled, isFixed);
            var scroll = {
                scrollLeft: 0,
                scrollTop: 0
            };
            var offsets = {
                x: 0,
                y: 0
            };

            if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
                if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
                    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__["default"])(documentElement)) {
                    scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__["default"])(offsetParent);
                }

                if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent)) {
                    offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent, true);
                    offsets.x += offsetParent.clientLeft;
                    offsets.y += offsetParent.clientTop;
                } else if (documentElement) {
                    offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__["default"])(documentElement);
                }
            }

            return {
                x: rect.left + scroll.scrollLeft - offsets.x,
                y: rect.top + scroll.scrollTop - offsets.y,
                width: rect.width,
                height: rect.height
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
    /*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getComputedStyle)
            /* harmony export */ });
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

        function getComputedStyle(element) {
            return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
    /*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getDocumentElement)
            /* harmony export */ });
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

        function getDocumentElement(element) {
            // $FlowFixMe[incompatible-return]: assume body is always available
            return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
                element.document) || window.document).documentElement;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getDocumentRect)
            /* harmony export */ });
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
        /* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
        /* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




        // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

        function getDocumentRect(element) {
            var _element$ownerDocumen;

            var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
            var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
            var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
            var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
            var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
            var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
            var y = -winScroll.scrollTop;

            if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(body || html).direction === 'rtl') {
                x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
            }

            return {
                width: width,
                height: height,
                x: x,
                y: y
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
    /*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
            /* harmony export */ });
        function getHTMLElementScroll(element) {
            return {
                scrollLeft: element.scrollLeft,
                scrollTop: element.scrollTop
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getLayoutRect)
            /* harmony export */ });
        /* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
        // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

        function getLayoutRect(element) {
            var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
            // Fixes https://github.com/popperjs/popper-core/issues/1223

            var width = element.offsetWidth;
            var height = element.offsetHeight;

            if (Math.abs(clientRect.width - width) <= 1) {
                width = clientRect.width;
            }

            if (Math.abs(clientRect.height - height) <= 1) {
                height = clientRect.height;
            }

            return {
                x: element.offsetLeft,
                y: element.offsetTop,
                width: width,
                height: height
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
    /*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getNodeName)
            /* harmony export */ });
        function getNodeName(element) {
            return element ? (element.nodeName || '').toLowerCase() : null;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getNodeScroll)
            /* harmony export */ });
        /* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




        function getNodeScroll(node) {
            if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
                return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
            } else {
                return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
            }
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getOffsetParent)
            /* harmony export */ });
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
        /* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
        /* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/userAgent.js */ "./node_modules/@popperjs/core/lib/utils/userAgent.js");








        function getTrueOffsetParent(element) {
            if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
                (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
                return null;
            }

            return element.offsetParent;
        } // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


        function getContainingBlock(element) {
            var isFirefox = /firefox/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__["default"])());
            var isIE = /Trident/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_2__["default"])());

            if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
                // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
                var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);

                if (elementCss.position === 'fixed') {
                    return null;
                }
            }

            var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);

            if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(currentNode)) {
                currentNode = currentNode.host;
            }

            while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(currentNode)) < 0) {
                var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
                // create a containing block.
                // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

                if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
                    return currentNode;
                } else {
                    currentNode = currentNode.parentNode;
                }
            }

            return null;
        } // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


        function getOffsetParent(element) {
            var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element);
            var offsetParent = getTrueOffsetParent(element);

            while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
                offsetParent = getTrueOffsetParent(offsetParent);
            }

            if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static')) {
                return window;
            }

            return offsetParent || getContainingBlock(element) || window;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getParentNode)
            /* harmony export */ });
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



        function getParentNode(element) {
            if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
                return element;
            }

            return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
                // $FlowFixMe[incompatible-return]
                // $FlowFixMe[prop-missing]
                element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
                element.parentNode || ( // DOM Element detected
                    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
                // $FlowFixMe[incompatible-call]: HTMLElement is a Node
                (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) // fallback

            );
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getScrollParent)
            /* harmony export */ });
        /* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
        /* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




        function getScrollParent(node) {
            if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
                // $FlowFixMe[incompatible-return]: assume body is always available
                return node.ownerDocument.body;
            }

            if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
                return node;
            }

            return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getViewportRect)
            /* harmony export */ });
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
        /* harmony import */ var _isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isLayoutViewport.js */ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");




        function getViewportRect(element, strategy) {
            var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
            var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
            var visualViewport = win.visualViewport;
            var width = html.clientWidth;
            var height = html.clientHeight;
            var x = 0;
            var y = 0;

            if (visualViewport) {
                width = visualViewport.width;
                height = visualViewport.height;
                var layoutViewport = (0,_isLayoutViewport_js__WEBPACK_IMPORTED_MODULE_2__["default"])();

                if (layoutViewport || !layoutViewport && strategy === 'fixed') {
                    x = visualViewport.offsetLeft;
                    y = visualViewport.offsetTop;
                }
            }

            return {
                width: width,
                height: height,
                x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element),
                y: y
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
    /*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getWindow)
            /* harmony export */ });
        function getWindow(node) {
            if (node == null) {
                return window;
            }

            if (node.toString() !== '[object Window]') {
                var ownerDocument = node.ownerDocument;
                return ownerDocument ? ownerDocument.defaultView || window : window;
            }

            return node;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getWindowScroll)
            /* harmony export */ });
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

        function getWindowScroll(node) {
            var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
            var scrollLeft = win.pageXOffset;
            var scrollTop = win.pageYOffset;
            return {
                scrollLeft: scrollLeft,
                scrollTop: scrollTop
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
    /*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
            /* harmony export */ });
        /* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
        /* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



        function getWindowScrollBarX(element) {
            // If <html> has a CSS width greater than the viewport, then this will be
            // incorrect for RTL.
            // Popper 1 is broken in this case and never had a bug report so let's assume
            // it's not an issue. I don't think anyone ever specifies width on <html>
            // anyway.
            // Browsers where the left scrollbar doesn't cause an issue report `0` for
            // this (e.g. Edge 2019, IE11, Safari)
            return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "isElement": () => (/* binding */ isElement),
            /* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement),
            /* harmony export */   "isShadowRoot": () => (/* binding */ isShadowRoot)
            /* harmony export */ });
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


        function isElement(node) {
            var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
            return node instanceof OwnElement || node instanceof Element;
        }

        function isHTMLElement(node) {
            var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
            return node instanceof OwnElement || node instanceof HTMLElement;
        }

        function isShadowRoot(node) {
            // IE 11 has no ShadowRoot
            if (typeof ShadowRoot === 'undefined') {
                return false;
            }

            var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
            return node instanceof OwnElement || node instanceof ShadowRoot;
        }



        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":
    /*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js ***!
  \***********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ isLayoutViewport)
            /* harmony export */ });
        /* harmony import */ var _utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/userAgent.js */ "./node_modules/@popperjs/core/lib/utils/userAgent.js");

        function isLayoutViewport() {
            return !/^((?!chrome|android).)*safari/i.test((0,_utils_userAgent_js__WEBPACK_IMPORTED_MODULE_0__["default"])());
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ isScrollParent)
            /* harmony export */ });
        /* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

        function isScrollParent(element) {
            // Firefox wants us to check `-x` and `-y` variations as well
            var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
                overflow = _getComputedStyle.overflow,
                overflowX = _getComputedStyle.overflowX,
                overflowY = _getComputedStyle.overflowY;

            return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ isTableElement)
            /* harmony export */ });
        /* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

        function isTableElement(element) {
            return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
    /*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ listScrollParents)
            /* harmony export */ });
        /* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
        /* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
        /* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




        /*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

        function listScrollParents(element, list) {
            var _element$ownerDocumen;

            if (list === void 0) {
                list = [];
            }

            var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
            var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
            var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent);
            var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
            var updatedList = list.concat(target);
            return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
                updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(target)));
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/enums.js":
    /*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "afterMain": () => (/* binding */ afterMain),
            /* harmony export */   "afterRead": () => (/* binding */ afterRead),
            /* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
            /* harmony export */   "auto": () => (/* binding */ auto),
            /* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
            /* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
            /* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
            /* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
            /* harmony export */   "bottom": () => (/* binding */ bottom),
            /* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
            /* harmony export */   "end": () => (/* binding */ end),
            /* harmony export */   "left": () => (/* binding */ left),
            /* harmony export */   "main": () => (/* binding */ main),
            /* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases),
            /* harmony export */   "placements": () => (/* binding */ placements),
            /* harmony export */   "popper": () => (/* binding */ popper),
            /* harmony export */   "read": () => (/* binding */ read),
            /* harmony export */   "reference": () => (/* binding */ reference),
            /* harmony export */   "right": () => (/* binding */ right),
            /* harmony export */   "start": () => (/* binding */ start),
            /* harmony export */   "top": () => (/* binding */ top),
            /* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
            /* harmony export */   "viewport": () => (/* binding */ viewport),
            /* harmony export */   "write": () => (/* binding */ write)
            /* harmony export */ });
        var top = 'top';
        var bottom = 'bottom';
        var right = 'right';
        var left = 'left';
        var auto = 'auto';
        var basePlacements = [top, bottom, right, left];
        var start = 'start';
        var end = 'end';
        var clippingParents = 'clippingParents';
        var viewport = 'viewport';
        var popper = 'popper';
        var reference = 'reference';
        var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
            return acc.concat([placement + "-" + start, placement + "-" + end]);
        }, []);
        var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
            return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
        }, []); // modifiers that need to read the DOM

        var beforeRead = 'beforeRead';
        var read = 'read';
        var afterRead = 'afterRead'; // pure-logic modifiers

        var beforeMain = 'beforeMain';
        var main = 'main';
        var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

        var beforeWrite = 'beforeWrite';
        var write = 'write';
        var afterWrite = 'afterWrite';
        var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
    /*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
        /* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

        // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

        function applyStyles(_ref) {
            var state = _ref.state;
            Object.keys(state.elements).forEach(function (name) {
                var style = state.styles[name] || {};
                var attributes = state.attributes[name] || {};
                var element = state.elements[name]; // arrow is optional + virtual elements

                if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
                    return;
                } // Flow doesn't support to extend this property, but it's the most
                // effective way to apply styles to an HTMLElement
                // $FlowFixMe[cannot-write]


                Object.assign(element.style, style);
                Object.keys(attributes).forEach(function (name) {
                    var value = attributes[name];

                    if (value === false) {
                        element.removeAttribute(name);
                    } else {
                        element.setAttribute(name, value === true ? '' : value);
                    }
                });
            });
        }

        function effect(_ref2) {
            var state = _ref2.state;
            var initialStyles = {
                popper: {
                    position: state.options.strategy,
                    left: '0',
                    top: '0',
                    margin: '0'
                },
                arrow: {
                    position: 'absolute'
                },
                reference: {}
            };
            Object.assign(state.elements.popper.style, initialStyles.popper);
            state.styles = initialStyles;

            if (state.elements.arrow) {
                Object.assign(state.elements.arrow.style, initialStyles.arrow);
            }

            return function () {
                Object.keys(state.elements).forEach(function (name) {
                    var element = state.elements[name];
                    var attributes = state.attributes[name] || {};
                    var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

                    var style = styleProperties.reduce(function (style, property) {
                        style[property] = '';
                        return style;
                    }, {}); // arrow is optional + virtual elements

                    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
                        return;
                    }

                    Object.assign(element.style, style);
                    Object.keys(attributes).forEach(function (attribute) {
                        element.removeAttribute(attribute);
                    });
                });
            };
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'applyStyles',
            enabled: true,
            phase: 'write',
            fn: applyStyles,
            effect: effect,
            requires: ['computeStyles']
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
    /*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
        /* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
        /* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
        /* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
        /* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
        /* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
        /* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









        // eslint-disable-next-line import/no-unused-modules

        var toPaddingObject = function toPaddingObject(padding, state) {
            padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
                placement: state.placement
            })) : padding;
            return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));
        };

        function arrow(_ref) {
            var _state$modifiersData$;

            var state = _ref.state,
                name = _ref.name,
                options = _ref.options;
            var arrowElement = state.elements.arrow;
            var popperOffsets = state.modifiersData.popperOffsets;
            var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state.placement);
            var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
            var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
            var len = isVertical ? 'height' : 'width';

            if (!arrowElement || !popperOffsets) {
                return;
            }

            var paddingObject = toPaddingObject(options.padding, state);
            var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement);
            var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
            var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
            var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
            var startDiff = popperOffsets[axis] - state.rects.reference[axis];
            var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement);
            var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
            var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
            // outside of the popper bounds

            var min = paddingObject[minProp];
            var max = clientSize - arrowRect[len] - paddingObject[maxProp];
            var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
            var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__.within)(min, center, max); // Prevents breaking syntax highlighting...

            var axisProp = axis;
            state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
        }

        function effect(_ref2) {
            var state = _ref2.state,
                options = _ref2.options;
            var _options$element = options.element,
                arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

            if (arrowElement == null) {
                return;
            } // CSS selector


            if (typeof arrowElement === 'string') {
                arrowElement = state.elements.popper.querySelector(arrowElement);

                if (!arrowElement) {
                    return;
                }
            }

            if (true) {
                if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {
                    console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
                }
            }

            if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.popper, arrowElement)) {
                if (true) {
                    console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
                }

                return;
            }

            state.elements.arrow = arrowElement;
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'arrow',
            enabled: true,
            phase: 'main',
            fn: arrow,
            effect: effect,
            requires: ['popperOffsets'],
            requiresIfExists: ['preventOverflow']
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
            /* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles)
            /* harmony export */ });
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
        /* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        /* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");







        // eslint-disable-next-line import/no-unused-modules

        var unsetSides = {
            top: 'auto',
            right: 'auto',
            bottom: 'auto',
            left: 'auto'
        }; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

        function roundOffsetsByDPR(_ref) {
            var x = _ref.x,
                y = _ref.y;
            var win = window;
            var dpr = win.devicePixelRatio || 1;
            return {
                x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr || 0,
                y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr || 0
            };
        }

        function mapToStyles(_ref2) {
            var _Object$assign2;

            var popper = _ref2.popper,
                popperRect = _ref2.popperRect,
                placement = _ref2.placement,
                variation = _ref2.variation,
                offsets = _ref2.offsets,
                position = _ref2.position,
                gpuAcceleration = _ref2.gpuAcceleration,
                adaptive = _ref2.adaptive,
                roundOffsets = _ref2.roundOffsets,
                isFixed = _ref2.isFixed;
            var _offsets$x = offsets.x,
                x = _offsets$x === void 0 ? 0 : _offsets$x,
                _offsets$y = offsets.y,
                y = _offsets$y === void 0 ? 0 : _offsets$y;

            var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
                x: x,
                y: y
            }) : {
                x: x,
                y: y
            };

            x = _ref3.x;
            y = _ref3.y;
            var hasX = offsets.hasOwnProperty('x');
            var hasY = offsets.hasOwnProperty('y');
            var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;
            var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;
            var win = window;

            if (adaptive) {
                var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper);
                var heightProp = 'clientHeight';
                var widthProp = 'clientWidth';

                if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) {
                    offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper);

                    if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent).position !== 'static' && position === 'absolute') {
                        heightProp = 'scrollHeight';
                        widthProp = 'scrollWidth';
                    }
                } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


                offsetParent = offsetParent;

                if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
                    sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom;
                    var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
                        offsetParent[heightProp];
                    y -= offsetY - popperRect.height;
                    y *= gpuAcceleration ? 1 : -1;
                }

                if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
                    sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right;
                    var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
                        offsetParent[widthProp];
                    x -= offsetX - popperRect.width;
                    x *= gpuAcceleration ? 1 : -1;
                }
            }

            var commonStyles = Object.assign({
                position: position
            }, adaptive && unsetSides);

            var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
                x: x,
                y: y
            }) : {
                x: x,
                y: y
            };

            x = _ref4.x;
            y = _ref4.y;

            if (gpuAcceleration) {
                var _Object$assign;

                return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
            }

            return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
        }

        function computeStyles(_ref5) {
            var state = _ref5.state,
                options = _ref5.options;
            var _options$gpuAccelerat = options.gpuAcceleration,
                gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
                _options$adaptive = options.adaptive,
                adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
                _options$roundOffsets = options.roundOffsets,
                roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

            if (true) {
                var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper).transitionProperty || '';

                if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
                    return transitionProperty.indexOf(property) >= 0;
                })) {
                    console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
                }
            }

            var commonStyles = {
                placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.placement),
                variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.placement),
                popper: state.elements.popper,
                popperRect: state.rects.popper,
                gpuAcceleration: gpuAcceleration,
                isFixed: state.options.strategy === 'fixed'
            };

            if (state.modifiersData.popperOffsets != null) {
                state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
                    offsets: state.modifiersData.popperOffsets,
                    position: state.options.strategy,
                    adaptive: adaptive,
                    roundOffsets: roundOffsets
                })));
            }

            if (state.modifiersData.arrow != null) {
                state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
                    offsets: state.modifiersData.arrow,
                    position: 'absolute',
                    adaptive: false,
                    roundOffsets: roundOffsets
                })));
            }

            state.attributes.popper = Object.assign({}, state.attributes.popper, {
                'data-popper-placement': state.placement
            });
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'computeStyles',
            enabled: true,
            phase: 'beforeWrite',
            fn: computeStyles,
            data: {}
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
        // eslint-disable-next-line import/no-unused-modules

        var passive = {
            passive: true
        };

        function effect(_ref) {
            var state = _ref.state,
                instance = _ref.instance,
                options = _ref.options;
            var _options$scroll = options.scroll,
                scroll = _options$scroll === void 0 ? true : _options$scroll,
                _options$resize = options.resize,
                resize = _options$resize === void 0 ? true : _options$resize;
            var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
            var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

            if (scroll) {
                scrollParents.forEach(function (scrollParent) {
                    scrollParent.addEventListener('scroll', instance.update, passive);
                });
            }

            if (resize) {
                window.addEventListener('resize', instance.update, passive);
            }

            return function () {
                if (scroll) {
                    scrollParents.forEach(function (scrollParent) {
                        scrollParent.removeEventListener('scroll', instance.update, passive);
                    });
                }

                if (resize) {
                    window.removeEventListener('resize', instance.update, passive);
                }
            };
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'eventListeners',
            enabled: true,
            phase: 'write',
            fn: function fn() {},
            effect: effect,
            data: {}
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
        /* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






        // eslint-disable-next-line import/no-unused-modules

        function getExpandedFallbackPlacements(placement) {
            if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
                return [];
            }

            var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
            return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
        }

        function flip(_ref) {
            var state = _ref.state,
                options = _ref.options,
                name = _ref.name;

            if (state.modifiersData[name]._skip) {
                return;
            }

            var _options$mainAxis = options.mainAxis,
                checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
                _options$altAxis = options.altAxis,
                checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
                specifiedFallbackPlacements = options.fallbackPlacements,
                padding = options.padding,
                boundary = options.boundary,
                rootBoundary = options.rootBoundary,
                altBoundary = options.altBoundary,
                _options$flipVariatio = options.flipVariations,
                flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
                allowedAutoPlacements = options.allowedAutoPlacements;
            var preferredPlacement = state.options.placement;
            var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
            var isBasePlacement = basePlacement === preferredPlacement;
            var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
            var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
                return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
                    placement: placement,
                    boundary: boundary,
                    rootBoundary: rootBoundary,
                    padding: padding,
                    flipVariations: flipVariations,
                    allowedAutoPlacements: allowedAutoPlacements
                }) : placement);
            }, []);
            var referenceRect = state.rects.reference;
            var popperRect = state.rects.popper;
            var checksMap = new Map();
            var makeFallbackChecks = true;
            var firstFittingPlacement = placements[0];

            for (var i = 0; i < placements.length; i++) {
                var placement = placements[i];

                var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

                var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
                var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
                var len = isVertical ? 'width' : 'height';
                var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
                    placement: placement,
                    boundary: boundary,
                    rootBoundary: rootBoundary,
                    altBoundary: altBoundary,
                    padding: padding
                });
                var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

                if (referenceRect[len] > popperRect[len]) {
                    mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
                }

                var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
                var checks = [];

                if (checkMainAxis) {
                    checks.push(overflow[_basePlacement] <= 0);
                }

                if (checkAltAxis) {
                    checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
                }

                if (checks.every(function (check) {
                    return check;
                })) {
                    firstFittingPlacement = placement;
                    makeFallbackChecks = false;
                    break;
                }

                checksMap.set(placement, checks);
            }

            if (makeFallbackChecks) {
                // `2` may be desired in some cases – research later
                var numberOfChecks = flipVariations ? 3 : 1;

                var _loop = function _loop(_i) {
                    var fittingPlacement = placements.find(function (placement) {
                        var checks = checksMap.get(placement);

                        if (checks) {
                            return checks.slice(0, _i).every(function (check) {
                                return check;
                            });
                        }
                    });

                    if (fittingPlacement) {
                        firstFittingPlacement = fittingPlacement;
                        return "break";
                    }
                };

                for (var _i = numberOfChecks; _i > 0; _i--) {
                    var _ret = _loop(_i);

                    if (_ret === "break") break;
                }
            }

            if (state.placement !== firstFittingPlacement) {
                state.modifiersData[name]._skip = true;
                state.placement = firstFittingPlacement;
                state.reset = true;
            }
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'flip',
            enabled: true,
            phase: 'main',
            fn: flip,
            requiresIfExists: ['offset'],
            data: {
                _skip: false
            }
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



        function getSideOffsets(overflow, rect, preventedOffsets) {
            if (preventedOffsets === void 0) {
                preventedOffsets = {
                    x: 0,
                    y: 0
                };
            }

            return {
                top: overflow.top - rect.height - preventedOffsets.y,
                right: overflow.right - rect.width + preventedOffsets.x,
                bottom: overflow.bottom - rect.height + preventedOffsets.y,
                left: overflow.left - rect.width - preventedOffsets.x
            };
        }

        function isAnySideFullyClipped(overflow) {
            return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
                return overflow[side] >= 0;
            });
        }

        function hide(_ref) {
            var state = _ref.state,
                name = _ref.name;
            var referenceRect = state.rects.reference;
            var popperRect = state.rects.popper;
            var preventedOffsets = state.modifiersData.preventOverflow;
            var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
                elementContext: 'reference'
            });
            var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
                altBoundary: true
            });
            var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
            var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
            var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
            var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
            state.modifiersData[name] = {
                referenceClippingOffsets: referenceClippingOffsets,
                popperEscapeOffsets: popperEscapeOffsets,
                isReferenceHidden: isReferenceHidden,
                hasPopperEscaped: hasPopperEscaped
            };
            state.attributes.popper = Object.assign({}, state.attributes.popper, {
                'data-popper-reference-hidden': isReferenceHidden,
                'data-popper-escaped': hasPopperEscaped
            });
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'hide',
            enabled: true,
            phase: 'main',
            requiresIfExists: ['preventOverflow'],
            fn: hide
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
    /*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "applyStyles": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
            /* harmony export */   "arrow": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
            /* harmony export */   "computeStyles": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
            /* harmony export */   "eventListeners": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
            /* harmony export */   "flip": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
            /* harmony export */   "hide": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
            /* harmony export */   "offset": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
            /* harmony export */   "popperOffsets": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
            /* harmony export */   "preventOverflow": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"])
            /* harmony export */ });
        /* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
        /* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
        /* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
        /* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
        /* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
        /* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
        /* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
        /* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
        /* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");










        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
    /*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
            /* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY)
            /* harmony export */ });
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");

        // eslint-disable-next-line import/no-unused-modules

        function distanceAndSkiddingToXY(placement, rects, offset) {
            var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
            var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

            var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
                    placement: placement
                })) : offset,
                skidding = _ref[0],
                distance = _ref[1];

            skidding = skidding || 0;
            distance = (distance || 0) * invertDistance;
            return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
                x: distance,
                y: skidding
            } : {
                x: skidding,
                y: distance
            };
        }

        function offset(_ref2) {
            var state = _ref2.state,
                options = _ref2.options,
                name = _ref2.name;
            var _options$offset = options.offset,
                offset = _options$offset === void 0 ? [0, 0] : _options$offset;
            var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
                acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
                return acc;
            }, {});
            var _data$state$placement = data[state.placement],
                x = _data$state$placement.x,
                y = _data$state$placement.y;

            if (state.modifiersData.popperOffsets != null) {
                state.modifiersData.popperOffsets.x += x;
                state.modifiersData.popperOffsets.y += y;
            }

            state.modifiersData[name] = data;
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'offset',
            enabled: true,
            phase: 'main',
            requires: ['popperOffsets'],
            fn: offset
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


        function popperOffsets(_ref) {
            var state = _ref.state,
                name = _ref.name;
            // Offsets are the actual position the popper needs to have to be
            // properly positioned near its reference element
            // This is the most basic placement, and will be adjusted by
            // the modifiers in the next step
            state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
                reference: state.rects.reference,
                element: state.rects.popper,
                strategy: 'absolute',
                placement: state.placement
            });
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'popperOffsets',
            enabled: true,
            phase: 'read',
            fn: popperOffsets,
            data: {}
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
        /* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
        /* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
        /* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
        /* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
        /* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
        /* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
        /* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












        function preventOverflow(_ref) {
            var state = _ref.state,
                options = _ref.options,
                name = _ref.name;
            var _options$mainAxis = options.mainAxis,
                checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
                _options$altAxis = options.altAxis,
                checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
                boundary = options.boundary,
                rootBoundary = options.rootBoundary,
                altBoundary = options.altBoundary,
                padding = options.padding,
                _options$tether = options.tether,
                tether = _options$tether === void 0 ? true : _options$tether,
                _options$tetherOffset = options.tetherOffset,
                tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
            var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
                boundary: boundary,
                rootBoundary: rootBoundary,
                padding: padding,
                altBoundary: altBoundary
            });
            var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
            var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
            var isBasePlacement = !variation;
            var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
            var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
            var popperOffsets = state.modifiersData.popperOffsets;
            var referenceRect = state.rects.reference;
            var popperRect = state.rects.popper;
            var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
                placement: state.placement
            })) : tetherOffset;
            var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
                mainAxis: tetherOffsetValue,
                altAxis: tetherOffsetValue
            } : Object.assign({
                mainAxis: 0,
                altAxis: 0
            }, tetherOffsetValue);
            var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
            var data = {
                x: 0,
                y: 0
            };

            if (!popperOffsets) {
                return;
            }

            if (checkMainAxis) {
                var _offsetModifierState$;

                var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
                var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
                var len = mainAxis === 'y' ? 'height' : 'width';
                var offset = popperOffsets[mainAxis];
                var min = offset + overflow[mainSide];
                var max = offset - overflow[altSide];
                var additive = tether ? -popperRect[len] / 2 : 0;
                var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
                var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
                // outside the reference bounds

                var arrowElement = state.elements.arrow;
                var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
                    width: 0,
                    height: 0
                };
                var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
                var arrowPaddingMin = arrowPaddingObject[mainSide];
                var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
                // to include its full size in the calculation. If the reference is small
                // and near the edge of a boundary, the popper can overflow even if the
                // reference is not overflowing as well (e.g. virtual elements with no
                // width or height)

                var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(0, referenceRect[len], arrowRect[len]);
                var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
                var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
                var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
                var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
                var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
                var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
                var tetherMax = offset + maxOffset - offsetModifierValue;
                var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);
                popperOffsets[mainAxis] = preventedOffset;
                data[mainAxis] = preventedOffset - offset;
            }

            if (checkAltAxis) {
                var _offsetModifierState$2;

                var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

                var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

                var _offset = popperOffsets[altAxis];

                var _len = altAxis === 'y' ? 'height' : 'width';

                var _min = _offset + overflow[_mainSide];

                var _max = _offset - overflow[_altSide];

                var isOriginSide = [_enums_js__WEBPACK_IMPORTED_MODULE_5__.top, _enums_js__WEBPACK_IMPORTED_MODULE_5__.left].indexOf(basePlacement) !== -1;

                var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

                var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

                var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

                var _preventedOffset = tether && isOriginSide ? (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

                popperOffsets[altAxis] = _preventedOffset;
                data[altAxis] = _preventedOffset - _offset;
            }

            state.modifiersData[name] = data;
        } // eslint-disable-next-line import/no-unused-modules


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            name: 'preventOverflow',
            enabled: true,
            phase: 'main',
            fn: preventOverflow,
            requiresIfExists: ['offset']
        });

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
    /*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "createPopper": () => (/* binding */ createPopper),
            /* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
            /* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
            /* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)
            /* harmony export */ });
        /* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
        /* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
        /* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
        /* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
        /* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





        var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
        var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({
            defaultModifiers: defaultModifiers
        }); // eslint-disable-next-line import/no-unused-modules



        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/popper.js":
    /*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),
            /* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),
            /* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),
            /* harmony export */   "createPopper": () => (/* binding */ createPopper),
            /* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),
            /* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
            /* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
            /* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),
            /* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),
            /* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),
            /* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),
            /* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),
            /* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),
            /* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)
            /* harmony export */ });
        /* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
        /* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
        /* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
        /* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
        /* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
        /* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
        /* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
        /* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
        /* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
        /* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
        /* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
        /* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");










        var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
        var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
            defaultModifiers: defaultModifiers
        }); // eslint-disable-next-line import/no-unused-modules

        // eslint-disable-next-line import/no-unused-modules

        // eslint-disable-next-line import/no-unused-modules



        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
    /*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
            /* harmony export */ });
        /* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
        /* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




        function computeAutoPlacement(state, options) {
            if (options === void 0) {
                options = {};
            }

            var _options = options,
                placement = _options.placement,
                boundary = _options.boundary,
                rootBoundary = _options.rootBoundary,
                padding = _options.padding,
                flipVariations = _options.flipVariations,
                _options$allowedAutoP = _options.allowedAutoPlacements,
                allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
            var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
            var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
                return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
            }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;
            var allowedPlacements = placements.filter(function (placement) {
                return allowedAutoPlacements.indexOf(placement) >= 0;
            });

            if (allowedPlacements.length === 0) {
                allowedPlacements = placements;

                if (true) {
                    console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
                }
            } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


            var overflows = allowedPlacements.reduce(function (acc, placement) {
                acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
                    placement: placement,
                    boundary: boundary,
                    rootBoundary: rootBoundary,
                    padding: padding
                })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
                return acc;
            }, {});
            return Object.keys(overflows).sort(function (a, b) {
                return overflows[a] - overflows[b];
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ computeOffsets)
            /* harmony export */ });
        /* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
        /* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
        /* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




        function computeOffsets(_ref) {
            var reference = _ref.reference,
                element = _ref.element,
                placement = _ref.placement;
            var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
            var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
            var commonX = reference.x + reference.width / 2 - element.width / 2;
            var commonY = reference.y + reference.height / 2 - element.height / 2;
            var offsets;

            switch (basePlacement) {
                case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
                    offsets = {
                        x: commonX,
                        y: reference.y - element.height
                    };
                    break;

                case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
                    offsets = {
                        x: commonX,
                        y: reference.y + reference.height
                    };
                    break;

                case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
                    offsets = {
                        x: reference.x + reference.width,
                        y: commonY
                    };
                    break;

                case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
                    offsets = {
                        x: reference.x - element.width,
                        y: commonY
                    };
                    break;

                default:
                    offsets = {
                        x: reference.x,
                        y: reference.y
                    };
            }

            var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

            if (mainAxis != null) {
                var len = mainAxis === 'y' ? 'height' : 'width';

                switch (variation) {
                    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
                        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                        break;

                    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
                        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                        break;

                    default:
                }
            }

            return offsets;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ debounce)
            /* harmony export */ });
        function debounce(fn) {
            var pending;
            return function () {
                if (!pending) {
                    pending = new Promise(function (resolve) {
                        Promise.resolve().then(function () {
                            pending = undefined;
                            resolve(fn());
                        });
                    });
                }

                return pending;
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ detectOverflow)
            /* harmony export */ });
        /* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
        /* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
        /* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
        /* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
        /* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        /* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
        /* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
        /* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








        // eslint-disable-next-line import/no-unused-modules

        function detectOverflow(state, options) {
            if (options === void 0) {
                options = {};
            }

            var _options = options,
                _options$placement = _options.placement,
                placement = _options$placement === void 0 ? state.placement : _options$placement,
                _options$strategy = _options.strategy,
                strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
                _options$boundary = _options.boundary,
                boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
                _options$rootBoundary = _options.rootBoundary,
                rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
                _options$elementConte = _options.elementContext,
                elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
                _options$altBoundary = _options.altBoundary,
                altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
                _options$padding = _options.padding,
                padding = _options$padding === void 0 ? 0 : _options$padding;
            var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
            var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
            var popperRect = state.rects.popper;
            var element = state.elements[altBoundary ? altContext : elementContext];
            var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary, strategy);
            var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.reference);
            var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
                reference: referenceClientRect,
                element: popperRect,
                strategy: 'absolute',
                placement: placement
            });
            var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, popperOffsets));
            var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
            // 0 or negative = within the clipping rect

            var overflowOffsets = {
                top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
                bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
                left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
                right: elementClientRect.right - clippingClientRect.right + paddingObject.right
            };
            var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

            if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
                var offset = offsetData[placement];
                Object.keys(overflowOffsets).forEach(function (key) {
                    var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
                    var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
                    overflowOffsets[key] += offset[axis] * multiply;
                });
            }

            return overflowOffsets;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
    /*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ expandToHashMap)
            /* harmony export */ });
        function expandToHashMap(value, keys) {
            return keys.reduce(function (hashMap, key) {
                hashMap[key] = value;
                return hashMap;
            }, {});
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/format.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ format)
            /* harmony export */ });
        function format(str) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            return [].concat(args).reduce(function (p, c) {
                return p.replace(/%s/, c);
            }, str);
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
    /*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getAltAxis)
            /* harmony export */ });
        function getAltAxis(axis) {
            return axis === 'x' ? 'y' : 'x';
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
    /*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getBasePlacement)
            /* harmony export */ });

        function getBasePlacement(placement) {
            return placement.split('-')[0];
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getFreshSideObject)
            /* harmony export */ });
        function getFreshSideObject() {
            return {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            };
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
    /*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
            /* harmony export */ });
        function getMainAxisFromPlacement(placement) {
            return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
    /*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getOppositePlacement)
            /* harmony export */ });
        var hash = {
            left: 'right',
            right: 'left',
            bottom: 'top',
            top: 'bottom'
        };
        function getOppositePlacement(placement) {
            return placement.replace(/left|right|bottom|top/g, function (matched) {
                return hash[matched];
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
    /*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
            /* harmony export */ });
        var hash = {
            start: 'end',
            end: 'start'
        };
        function getOppositeVariationPlacement(placement) {
            return placement.replace(/start|end/g, function (matched) {
                return hash[matched];
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
    /*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getVariation)
            /* harmony export */ });
        function getVariation(placement) {
            return placement.split('-')[1];
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/math.js":
    /*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "max": () => (/* binding */ max),
            /* harmony export */   "min": () => (/* binding */ min),
            /* harmony export */   "round": () => (/* binding */ round)
            /* harmony export */ });
        var max = Math.max;
        var min = Math.min;
        var round = Math.round;

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
    /*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ mergeByName)
            /* harmony export */ });
        function mergeByName(modifiers) {
            var merged = modifiers.reduce(function (merged, current) {
                var existing = merged[current.name];
                merged[current.name] = existing ? Object.assign({}, existing, current, {
                    options: Object.assign({}, existing.options, current.options),
                    data: Object.assign({}, existing.data, current.data)
                }) : current;
                return merged;
            }, {}); // IE11 does not support Object.values

            return Object.keys(merged).map(function (key) {
                return merged[key];
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ mergePaddingObject)
            /* harmony export */ });
        /* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

        function mergePaddingObject(paddingObject) {
            return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ orderModifiers)
            /* harmony export */ });
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
        // source: https://stackoverflow.com/questions/49875255

        function order(modifiers) {
            var map = new Map();
            var visited = new Set();
            var result = [];
            modifiers.forEach(function (modifier) {
                map.set(modifier.name, modifier);
            }); // On visiting object, check for its dependencies and visit them recursively

            function sort(modifier) {
                visited.add(modifier.name);
                var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
                requires.forEach(function (dep) {
                    if (!visited.has(dep)) {
                        var depModifier = map.get(dep);

                        if (depModifier) {
                            sort(depModifier);
                        }
                    }
                });
                result.push(modifier);
            }

            modifiers.forEach(function (modifier) {
                if (!visited.has(modifier.name)) {
                    // check for visited object
                    sort(modifier);
                }
            });
            return result;
        }

        function orderModifiers(modifiers) {
            // order based on dependencies
            var orderedModifiers = order(modifiers); // order based on phase

            return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
                return acc.concat(orderedModifiers.filter(function (modifier) {
                    return modifier.phase === phase;
                }));
            }, []);
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
    /*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ rectToClientRect)
            /* harmony export */ });
        function rectToClientRect(rect) {
            return Object.assign({}, rect, {
                left: rect.x,
                top: rect.y,
                right: rect.x + rect.width,
                bottom: rect.y + rect.height
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ uniqueBy)
            /* harmony export */ });
        function uniqueBy(arr, fn) {
            var identifiers = new Set();
            return arr.filter(function (item) {
                var identifier = fn(item);

                if (!identifiers.has(identifier)) {
                    identifiers.add(identifier);
                    return true;
                }
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/userAgent.js":
    /*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/userAgent.js ***!
  \************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getUAString)
            /* harmony export */ });
        function getUAString() {
            var uaData = navigator.userAgentData;

            if (uaData != null && uaData.brands) {
                return uaData.brands.map(function (item) {
                    return item.brand + "/" + item.version;
                }).join(' ');
            }

            return navigator.userAgent;
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
    /*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ validateModifiers)
            /* harmony export */ });
        /* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
        /* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


        var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
        var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
        var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
        function validateModifiers(modifiers) {
            modifiers.forEach(function (modifier) {
                [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
                    .filter(function (value, index, self) {
                        return self.indexOf(value) === index;
                    }).forEach(function (key) {
                    switch (key) {
                        case 'name':
                            if (typeof modifier.name !== 'string') {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                            }

                            break;

                        case 'enabled':
                            if (typeof modifier.enabled !== 'boolean') {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                            }

                            break;

                        case 'phase':
                            if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                            }

                            break;

                        case 'fn':
                            if (typeof modifier.fn !== 'function') {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                            }

                            break;

                        case 'effect':
                            if (modifier.effect != null && typeof modifier.effect !== 'function') {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                            }

                            break;

                        case 'requires':
                            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                            }

                            break;

                        case 'requiresIfExists':
                            if (!Array.isArray(modifier.requiresIfExists)) {
                                console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                            }

                            break;

                        case 'options':
                        case 'data':
                            break;

                        default:
                            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                                return "\"" + s + "\"";
                            }).join(', ') + "; but \"" + key + "\" was provided.");
                    }

                    modifier.requires && modifier.requires.forEach(function (requirement) {
                        if (modifiers.find(function (mod) {
                            return mod.name === requirement;
                        }) == null) {
                            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
                        }
                    });
                });
            });
        }

        /***/ }),

    /***/ "./node_modules/@popperjs/core/lib/utils/within.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "within": () => (/* binding */ within),
            /* harmony export */   "withinMaxClamp": () => (/* binding */ withinMaxClamp)
            /* harmony export */ });
        /* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

        function within(min, value, max) {
            return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));
        }
        function withinMaxClamp(min, value, max) {
            var v = within(min, value, max);
            return v > max ? max : v;
        }

        /***/ }),

    /***/ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/tiptap-core.esm.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "CommandManager": () => (/* binding */ CommandManager),
            /* harmony export */   "Editor": () => (/* binding */ Editor),
            /* harmony export */   "Extension": () => (/* binding */ Extension),
            /* harmony export */   "InputRule": () => (/* binding */ InputRule),
            /* harmony export */   "Mark": () => (/* binding */ Mark),
            /* harmony export */   "Node": () => (/* binding */ Node),
            /* harmony export */   "NodeView": () => (/* binding */ NodeView),
            /* harmony export */   "PasteRule": () => (/* binding */ PasteRule),
            /* harmony export */   "Tracker": () => (/* binding */ Tracker),
            /* harmony export */   "callOrReturn": () => (/* binding */ callOrReturn),
            /* harmony export */   "combineTransactionSteps": () => (/* binding */ combineTransactionSteps),
            /* harmony export */   "defaultBlockAt": () => (/* binding */ defaultBlockAt),
            /* harmony export */   "escapeForRegEx": () => (/* binding */ escapeForRegEx),
            /* harmony export */   "extensions": () => (/* binding */ extensions),
            /* harmony export */   "findChildren": () => (/* binding */ findChildren),
            /* harmony export */   "findChildrenInRange": () => (/* binding */ findChildrenInRange),
            /* harmony export */   "findParentNode": () => (/* binding */ findParentNode),
            /* harmony export */   "findParentNodeClosestToPos": () => (/* binding */ findParentNodeClosestToPos),
            /* harmony export */   "generateHTML": () => (/* binding */ generateHTML),
            /* harmony export */   "generateJSON": () => (/* binding */ generateJSON),
            /* harmony export */   "generateText": () => (/* binding */ generateText),
            /* harmony export */   "getAttributes": () => (/* binding */ getAttributes),
            /* harmony export */   "getChangedRanges": () => (/* binding */ getChangedRanges),
            /* harmony export */   "getDebugJSON": () => (/* binding */ getDebugJSON),
            /* harmony export */   "getExtensionField": () => (/* binding */ getExtensionField),
            /* harmony export */   "getHTMLFromFragment": () => (/* binding */ getHTMLFromFragment),
            /* harmony export */   "getMarkAttributes": () => (/* binding */ getMarkAttributes),
            /* harmony export */   "getMarkRange": () => (/* binding */ getMarkRange),
            /* harmony export */   "getMarkType": () => (/* binding */ getMarkType),
            /* harmony export */   "getMarksBetween": () => (/* binding */ getMarksBetween),
            /* harmony export */   "getNodeAttributes": () => (/* binding */ getNodeAttributes),
            /* harmony export */   "getNodeType": () => (/* binding */ getNodeType),
            /* harmony export */   "getSchema": () => (/* binding */ getSchema),
            /* harmony export */   "getText": () => (/* binding */ getText),
            /* harmony export */   "getTextBetween": () => (/* binding */ getTextBetween),
            /* harmony export */   "getTextContentFromNodes": () => (/* binding */ getTextContentFromNodes),
            /* harmony export */   "getTextSerializersFromSchema": () => (/* binding */ getTextSerializersFromSchema),
            /* harmony export */   "inputRulesPlugin": () => (/* binding */ inputRulesPlugin),
            /* harmony export */   "isActive": () => (/* binding */ isActive),
            /* harmony export */   "isList": () => (/* binding */ isList),
            /* harmony export */   "isMarkActive": () => (/* binding */ isMarkActive),
            /* harmony export */   "isNodeActive": () => (/* binding */ isNodeActive),
            /* harmony export */   "isNodeEmpty": () => (/* binding */ isNodeEmpty),
            /* harmony export */   "isNodeSelection": () => (/* binding */ isNodeSelection),
            /* harmony export */   "isTextSelection": () => (/* binding */ isTextSelection),
            /* harmony export */   "markInputRule": () => (/* binding */ markInputRule),
            /* harmony export */   "markPasteRule": () => (/* binding */ markPasteRule),
            /* harmony export */   "mergeAttributes": () => (/* binding */ mergeAttributes),
            /* harmony export */   "nodeInputRule": () => (/* binding */ nodeInputRule),
            /* harmony export */   "nodePasteRule": () => (/* binding */ nodePasteRule),
            /* harmony export */   "pasteRulesPlugin": () => (/* binding */ pasteRulesPlugin),
            /* harmony export */   "posToDOMRect": () => (/* binding */ posToDOMRect),
            /* harmony export */   "textInputRule": () => (/* binding */ textInputRule),
            /* harmony export */   "textPasteRule": () => (/* binding */ textPasteRule),
            /* harmony export */   "textblockTypeInputRule": () => (/* binding */ textblockTypeInputRule),
            /* harmony export */   "wrappingInputRule": () => (/* binding */ wrappingInputRule)
            /* harmony export */ });
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");
        /* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prosemirror-view */ "./node_modules/@tiptap/core/node_modules/prosemirror-view/dist/index.js");
        /* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-keymap */ "./node_modules/prosemirror-keymap/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/@tiptap/core/node_modules/prosemirror-transform/dist/index.js");
        /* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prosemirror-commands */ "./node_modules/prosemirror-commands/dist/index.js");
        /* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prosemirror-schema-list */ "./node_modules/prosemirror-schema-list/dist/index.js");








        function createChainableState(config) {
            const { state, transaction } = config;
            let { selection } = transaction;
            let { doc } = transaction;
            let { storedMarks } = transaction;
            return {
                ...state,
                apply: state.apply.bind(state),
                applyTransaction: state.applyTransaction.bind(state),
                filterTransaction: state.filterTransaction,
                plugins: state.plugins,
                schema: state.schema,
                reconfigure: state.reconfigure.bind(state),
                toJSON: state.toJSON.bind(state),
                get storedMarks() {
                    return storedMarks;
                },
                get selection() {
                    return selection;
                },
                get doc() {
                    return doc;
                },
                get tr() {
                    selection = transaction.selection;
                    doc = transaction.doc;
                    storedMarks = transaction.storedMarks;
                    return transaction;
                },
            };
        }

        class CommandManager {
            constructor(props) {
                this.editor = props.editor;
                this.rawCommands = this.editor.extensionManager.commands;
                this.customState = props.state;
            }
            get hasCustomState() {
                return !!this.customState;
            }
            get state() {
                return this.customState || this.editor.state;
            }
            get commands() {
                const { rawCommands, editor, state } = this;
                const { view } = editor;
                const { tr } = state;
                const props = this.buildProps(tr);
                return Object.fromEntries(Object
                    .entries(rawCommands)
                    .map(([name, command]) => {
                        const method = (...args) => {
                            const callback = command(...args)(props);
                            if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {
                                view.dispatch(tr);
                            }
                            return callback;
                        };
                        return [name, method];
                    }));
            }
            get chain() {
                return () => this.createChain();
            }
            get can() {
                return () => this.createCan();
            }
            createChain(startTr, shouldDispatch = true) {
                const { rawCommands, editor, state } = this;
                const { view } = editor;
                const callbacks = [];
                const hasStartTransaction = !!startTr;
                const tr = startTr || state.tr;
                const run = () => {
                    if (!hasStartTransaction
                        && shouldDispatch
                        && !tr.getMeta('preventDispatch')
                        && !this.hasCustomState) {
                        view.dispatch(tr);
                    }
                    return callbacks.every(callback => callback === true);
                };
                const chain = {
                    ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
                        const chainedCommand = (...args) => {
                            const props = this.buildProps(tr, shouldDispatch);
                            const callback = command(...args)(props);
                            callbacks.push(callback);
                            return chain;
                        };
                        return [name, chainedCommand];
                    })),
                    run,
                };
                return chain;
            }
            createCan(startTr) {
                const { rawCommands, state } = this;
                const dispatch = false;
                const tr = startTr || state.tr;
                const props = this.buildProps(tr, dispatch);
                const formattedCommands = Object.fromEntries(Object
                    .entries(rawCommands)
                    .map(([name, command]) => {
                        return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];
                    }));
                return {
                    ...formattedCommands,
                    chain: () => this.createChain(tr, dispatch),
                };
            }
            buildProps(tr, shouldDispatch = true) {
                const { rawCommands, editor, state } = this;
                const { view } = editor;
                if (state.storedMarks) {
                    tr.setStoredMarks(state.storedMarks);
                }
                const props = {
                    tr,
                    editor,
                    view,
                    state: createChainableState({
                        state,
                        transaction: tr,
                    }),
                    dispatch: shouldDispatch
                        ? () => undefined
                        : undefined,
                    chain: () => this.createChain(tr),
                    can: () => this.createCan(tr),
                    get commands() {
                        return Object.fromEntries(Object
                            .entries(rawCommands)
                            .map(([name, command]) => {
                                return [name, (...args) => command(...args)(props)];
                            }));
                    },
                };
                return props;
            }
        }

        class EventEmitter {
            constructor() {
                this.callbacks = {};
            }
            on(event, fn) {
                if (!this.callbacks[event]) {
                    this.callbacks[event] = [];
                }
                this.callbacks[event].push(fn);
                return this;
            }
            emit(event, ...args) {
                const callbacks = this.callbacks[event];
                if (callbacks) {
                    callbacks.forEach(callback => callback.apply(this, args));
                }
                return this;
            }
            off(event, fn) {
                const callbacks = this.callbacks[event];
                if (callbacks) {
                    if (fn) {
                        this.callbacks[event] = callbacks.filter(callback => callback !== fn);
                    }
                    else {
                        delete this.callbacks[event];
                    }
                }
                return this;
            }
            removeAllListeners() {
                this.callbacks = {};
            }
        }

        function getExtensionField(extension, field, context) {
            if (extension.config[field] === undefined && extension.parent) {
                return getExtensionField(extension.parent, field, context);
            }
            if (typeof extension.config[field] === 'function') {
                const value = extension.config[field].bind({
                    ...context,
                    parent: extension.parent
                        ? getExtensionField(extension.parent, field, context)
                        : null,
                });
                return value;
            }
            return extension.config[field];
        }

        function splitExtensions(extensions) {
            const baseExtensions = extensions.filter(extension => extension.type === 'extension');
            const nodeExtensions = extensions.filter(extension => extension.type === 'node');
            const markExtensions = extensions.filter(extension => extension.type === 'mark');
            return {
                baseExtensions,
                nodeExtensions,
                markExtensions,
            };
        }

        /**
         * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.
         * @param extensions List of extensions
         */
        function getAttributesFromExtensions(extensions) {
            const extensionAttributes = [];
            const { nodeExtensions, markExtensions } = splitExtensions(extensions);
            const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];
            const defaultAttribute = {
                default: null,
                rendered: true,
                renderHTML: null,
                parseHTML: null,
                keepOnSplit: true,
                isRequired: false,
            };
            extensions.forEach(extension => {
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);
                if (!addGlobalAttributes) {
                    return;
                }
                // TODO: remove `as GlobalAttributes`
                const globalAttributes = addGlobalAttributes();
                globalAttributes.forEach(globalAttribute => {
                    globalAttribute.types.forEach(type => {
                        Object
                            .entries(globalAttribute.attributes)
                            .forEach(([name, attribute]) => {
                                extensionAttributes.push({
                                    type,
                                    name,
                                    attribute: {
                                        ...defaultAttribute,
                                        ...attribute,
                                    },
                                });
                            });
                    });
                });
            });
            nodeAndMarkExtensions.forEach(extension => {
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                const addAttributes = getExtensionField(extension, 'addAttributes', context);
                if (!addAttributes) {
                    return;
                }
                // TODO: remove `as Attributes`
                const attributes = addAttributes();
                Object
                    .entries(attributes)
                    .forEach(([name, attribute]) => {
                        const mergedAttr = {
                            ...defaultAttribute,
                            ...attribute,
                        };
                        if (attribute.isRequired && attribute.default === undefined) {
                            delete mergedAttr.default;
                        }
                        extensionAttributes.push({
                            type: extension.name,
                            name,
                            attribute: mergedAttr,
                        });
                    });
            });
            return extensionAttributes;
        }

        function getNodeType(nameOrType, schema) {
            if (typeof nameOrType === 'string') {
                if (!schema.nodes[nameOrType]) {
                    throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);
                }
                return schema.nodes[nameOrType];
            }
            return nameOrType;
        }

        function mergeAttributes(...objects) {
            return objects
                .filter(item => !!item)
                .reduce((items, item) => {
                    const mergedAttributes = { ...items };
                    Object.entries(item).forEach(([key, value]) => {
                        const exists = mergedAttributes[key];
                        if (!exists) {
                            mergedAttributes[key] = value;
                            return;
                        }
                        if (key === 'class') {
                            mergedAttributes[key] = [mergedAttributes[key], value].join(' ');
                        }
                        else if (key === 'style') {
                            mergedAttributes[key] = [mergedAttributes[key], value].join('; ');
                        }
                        else {
                            mergedAttributes[key] = value;
                        }
                    });
                    return mergedAttributes;
                }, {});
        }

        function getRenderedAttributes(nodeOrMark, extensionAttributes) {
            return extensionAttributes
                .filter(item => item.attribute.rendered)
                .map(item => {
                    if (!item.attribute.renderHTML) {
                        return {
                            [item.name]: nodeOrMark.attrs[item.name],
                        };
                    }
                    return item.attribute.renderHTML(nodeOrMark.attrs) || {};
                })
                .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});
        }

        function isFunction(value) {
            return typeof value === 'function';
        }

        /**
         * Optionally calls `value` as a function.
         * Otherwise it is returned directly.
         * @param value Function or any value.
         * @param context Optional context to bind to function.
         * @param props Optional props to pass to function.
         */
        function callOrReturn(value, context = undefined, ...props) {
            if (isFunction(value)) {
                if (context) {
                    return value.bind(context)(...props);
                }
                return value(...props);
            }
            return value;
        }

        function isEmptyObject(value = {}) {
            return Object.keys(value).length === 0 && value.constructor === Object;
        }

        function fromString(value) {
            if (typeof value !== 'string') {
                return value;
            }
            if (value.match(/^[+-]?(?:\d*\.)?\d+$/)) {
                return Number(value);
            }
            if (value === 'true') {
                return true;
            }
            if (value === 'false') {
                return false;
            }
            return value;
        }

        /**
         * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).
         * Cancels when `getAttrs` returned `false`.
         * @param parseRule ProseMirror ParseRule
         * @param extensionAttributes List of attributes to inject
         */
        function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {
            if (parseRule.style) {
                return parseRule;
            }
            return {
                ...parseRule,
                getAttrs: node => {
                    const oldAttributes = parseRule.getAttrs
                        ? parseRule.getAttrs(node)
                        : parseRule.attrs;
                    if (oldAttributes === false) {
                        return false;
                    }
                    const newAttributes = extensionAttributes.reduce((items, item) => {
                        const value = item.attribute.parseHTML
                            ? item.attribute.parseHTML(node)
                            : fromString(node.getAttribute(item.name));
                        if (value === null || value === undefined) {
                            return items;
                        }
                        return {
                            ...items,
                            [item.name]: value,
                        };
                    }, {});
                    return { ...oldAttributes, ...newAttributes };
                },
            };
        }

        function cleanUpSchemaItem(data) {
            return Object.fromEntries(Object.entries(data).filter(([key, value]) => {
                if (key === 'attrs' && isEmptyObject(value)) {
                    return false;
                }
                return value !== null && value !== undefined;
            }));
        }
        function getSchemaByResolvedExtensions(extensions) {
            var _a;
            const allAttributes = getAttributesFromExtensions(extensions);
            const { nodeExtensions, markExtensions } = splitExtensions(extensions);
            const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;
            const nodes = Object.fromEntries(nodeExtensions.map(extension => {
                const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                const extraNodeFields = extensions.reduce((fields, e) => {
                    const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);
                    return {
                        ...fields,
                        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),
                    };
                }, {});
                const schema = cleanUpSchemaItem({
                    ...extraNodeFields,
                    content: callOrReturn(getExtensionField(extension, 'content', context)),
                    marks: callOrReturn(getExtensionField(extension, 'marks', context)),
                    group: callOrReturn(getExtensionField(extension, 'group', context)),
                    inline: callOrReturn(getExtensionField(extension, 'inline', context)),
                    atom: callOrReturn(getExtensionField(extension, 'atom', context)),
                    selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),
                    draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),
                    code: callOrReturn(getExtensionField(extension, 'code', context)),
                    defining: callOrReturn(getExtensionField(extension, 'defining', context)),
                    isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),
                    attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                        var _a;
                        return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
                    })),
                });
                const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
                if (parseHTML) {
                    schema.parseDOM = parseHTML
                        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
                }
                const renderHTML = getExtensionField(extension, 'renderHTML', context);
                if (renderHTML) {
                    schema.toDOM = node => renderHTML({
                        node,
                        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),
                    });
                }
                const renderText = getExtensionField(extension, 'renderText', context);
                if (renderText) {
                    schema.toText = renderText;
                }
                return [extension.name, schema];
            }));
            const marks = Object.fromEntries(markExtensions.map(extension => {
                const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                const extraMarkFields = extensions.reduce((fields, e) => {
                    const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);
                    return {
                        ...fields,
                        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),
                    };
                }, {});
                const schema = cleanUpSchemaItem({
                    ...extraMarkFields,
                    inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),
                    excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),
                    group: callOrReturn(getExtensionField(extension, 'group', context)),
                    spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),
                    code: callOrReturn(getExtensionField(extension, 'code', context)),
                    attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                        var _a;
                        return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
                    })),
                });
                const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
                if (parseHTML) {
                    schema.parseDOM = parseHTML
                        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
                }
                const renderHTML = getExtensionField(extension, 'renderHTML', context);
                if (renderHTML) {
                    schema.toDOM = mark => renderHTML({
                        mark,
                        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),
                    });
                }
                return [extension.name, schema];
            }));
            return new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema({
                topNode,
                nodes,
                marks,
            });
        }

        function getSchemaTypeByName(name, schema) {
            return schema.nodes[name] || schema.marks[name] || null;
        }

        function isExtensionRulesEnabled(extension, enabled) {
            if (Array.isArray(enabled)) {
                return enabled.some(enabledExtension => {
                    const name = typeof enabledExtension === 'string'
                        ? enabledExtension
                        : enabledExtension.name;
                    return name === extension.name;
                });
            }
            return enabled;
        }

        const getTextContentFromNodes = ($from, maxMatch = 500) => {
            let textBefore = '';
            $from.parent.nodesBetween(Math.max(0, $from.parentOffset - maxMatch), $from.parentOffset, (node, pos, parent, index) => {
                var _a, _b, _c;
                textBefore += ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {
                    node, pos, parent, index,
                })) || ((_c = $from.nodeBefore) === null || _c === void 0 ? void 0 : _c.text) || '%leaf%';
            });
            return textBefore;
        };

        function isRegExp(value) {
            return Object.prototype.toString.call(value) === '[object RegExp]';
        }

        class InputRule {
            constructor(config) {
                this.find = config.find;
                this.handler = config.handler;
            }
        }
        const inputRuleMatcherHandler = (text, find) => {
            if (isRegExp(find)) {
                return find.exec(text);
            }
            const inputRuleMatch = find(text);
            if (!inputRuleMatch) {
                return null;
            }
            const result = [];
            result.push(inputRuleMatch.text);
            result.index = inputRuleMatch.index;
            result.input = text;
            result.data = inputRuleMatch.data;
            if (inputRuleMatch.replaceWith) {
                if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {
                    console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".');
                }
                result.push(inputRuleMatch.replaceWith);
            }
            return result;
        };
        function run$1(config) {
            var _a;
            const { editor, from, to, text, rules, plugin, } = config;
            const { view } = editor;
            if (view.composing) {
                return false;
            }
            const $from = view.state.doc.resolve(from);
            if (
                // check for code node
                $from.parent.type.spec.code
                // check for code mark
                || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {
                return false;
            }
            let matched = false;
            const textBefore = getTextContentFromNodes($from) + text;
            rules.forEach(rule => {
                if (matched) {
                    return;
                }
                const match = inputRuleMatcherHandler(textBefore, rule.find);
                if (!match) {
                    return;
                }
                const tr = view.state.tr;
                const state = createChainableState({
                    state: view.state,
                    transaction: tr,
                });
                const range = {
                    from: from - (match[0].length - text.length),
                    to,
                };
                const { commands, chain, can } = new CommandManager({
                    editor,
                    state,
                });
                const handler = rule.handler({
                    state,
                    range,
                    match,
                    commands,
                    chain,
                    can,
                });
                // stop if there are no changes
                if (handler === null || !tr.steps.length) {
                    return;
                }
                // store transform as meta data
                // so we can undo input rules within the `undoInputRules` command
                tr.setMeta(plugin, {
                    transform: tr,
                    from,
                    to,
                    text,
                });
                view.dispatch(tr);
                matched = true;
            });
            return matched;
        }
        /**
         * Create an input rules plugin. When enabled, it will cause text
         * input that matches any of the given rules to trigger the rule’s
         * action.
         */
        function inputRulesPlugin(props) {
            const { editor, rules } = props;
            const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                state: {
                    init() {
                        return null;
                    },
                    apply(tr, prev) {
                        const stored = tr.getMeta(plugin);
                        if (stored) {
                            return stored;
                        }
                        return tr.selectionSet || tr.docChanged
                            ? null
                            : prev;
                    },
                },
                props: {
                    handleTextInput(view, from, to, text) {
                        return run$1({
                            editor,
                            from,
                            to,
                            text,
                            rules,
                            plugin,
                        });
                    },
                    handleDOMEvents: {
                        compositionend: view => {
                            setTimeout(() => {
                                const { $cursor } = view.state.selection;
                                if ($cursor) {
                                    run$1({
                                        editor,
                                        from: $cursor.pos,
                                        to: $cursor.pos,
                                        text: '',
                                        rules,
                                        plugin,
                                    });
                                }
                            });
                            return false;
                        },
                    },
                    // add support for input rules to trigger on enter
                    // this is useful for example for code blocks
                    handleKeyDown(view, event) {
                        if (event.key !== 'Enter') {
                            return false;
                        }
                        const { $cursor } = view.state.selection;
                        if ($cursor) {
                            return run$1({
                                editor,
                                from: $cursor.pos,
                                to: $cursor.pos,
                                text: '\n',
                                rules,
                                plugin,
                            });
                        }
                        return false;
                    },
                },
                // @ts-ignore
                isInputRules: true,
            });
            return plugin;
        }

        function isNumber(value) {
            return typeof value === 'number';
        }

        class PasteRule {
            constructor(config) {
                this.find = config.find;
                this.handler = config.handler;
            }
        }
        const pasteRuleMatcherHandler = (text, find) => {
            if (isRegExp(find)) {
                return [...text.matchAll(find)];
            }
            const matches = find(text);
            if (!matches) {
                return [];
            }
            return matches.map(pasteRuleMatch => {
                const result = [];
                result.push(pasteRuleMatch.text);
                result.index = pasteRuleMatch.index;
                result.input = text;
                result.data = pasteRuleMatch.data;
                if (pasteRuleMatch.replaceWith) {
                    if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {
                        console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".');
                    }
                    result.push(pasteRuleMatch.replaceWith);
                }
                return result;
            });
        };
        function run(config) {
            const { editor, state, from, to, rule, } = config;
            const { commands, chain, can } = new CommandManager({
                editor,
                state,
            });
            const handlers = [];
            state.doc.nodesBetween(from, to, (node, pos) => {
                if (!node.isTextblock || node.type.spec.code) {
                    return;
                }
                const resolvedFrom = Math.max(from, pos);
                const resolvedTo = Math.min(to, pos + node.content.size);
                const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\ufffc');
                const matches = pasteRuleMatcherHandler(textToMatch, rule.find);
                matches.forEach(match => {
                    if (match.index === undefined) {
                        return;
                    }
                    const start = resolvedFrom + match.index + 1;
                    const end = start + match[0].length;
                    const range = {
                        from: state.tr.mapping.map(start),
                        to: state.tr.mapping.map(end),
                    };
                    const handler = rule.handler({
                        state,
                        range,
                        match,
                        commands,
                        chain,
                        can,
                    });
                    handlers.push(handler);
                });
            });
            const success = handlers.every(handler => handler !== null);
            return success;
        }
        /**
         * Create an paste rules plugin. When enabled, it will cause pasted
         * text that matches any of the given rules to trigger the rule’s
         * action.
         */
        function pasteRulesPlugin(props) {
            const { editor, rules } = props;
            let dragSourceElement = null;
            let isPastedFromProseMirror = false;
            let isDroppedFromProseMirror = false;
            const plugins = rules.map(rule => {
                return new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                    // we register a global drag handler to track the current drag source element
                    view(view) {
                        const handleDragstart = (event) => {
                            var _a;
                            dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))
                                ? view.dom.parentElement
                                : null;
                        };
                        window.addEventListener('dragstart', handleDragstart);
                        return {
                            destroy() {
                                window.removeEventListener('dragstart', handleDragstart);
                            },
                        };
                    },
                    props: {
                        handleDOMEvents: {
                            drop: view => {
                                isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;
                                return false;
                            },
                            paste: (view, event) => {
                                var _a;
                                const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');
                                isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));
                                return false;
                            },
                        },
                    },
                    appendTransaction: (transactions, oldState, state) => {
                        const transaction = transactions[0];
                        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;
                        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;
                        if (!isPaste && !isDrop) {
                            return;
                        }
                        // stop if there is no changed range
                        const from = oldState.doc.content.findDiffStart(state.doc.content);
                        const to = oldState.doc.content.findDiffEnd(state.doc.content);
                        if (!isNumber(from) || !to || from === to.b) {
                            return;
                        }
                        // build a chainable state
                        // so we can use a single transaction for all paste rules
                        const tr = state.tr;
                        const chainableState = createChainableState({
                            state,
                            transaction: tr,
                        });
                        const handler = run({
                            editor,
                            state: chainableState,
                            from: Math.max(from - 1, 0),
                            to: to.b - 1,
                            rule,
                        });
                        // stop if there are no changes
                        if (!handler || !tr.steps.length) {
                            return;
                        }
                        return tr;
                    },
                });
            });
            return plugins;
        }

        function findDuplicates(items) {
            const filtered = items.filter((el, index) => items.indexOf(el) !== index);
            return [...new Set(filtered)];
        }

        class ExtensionManager {
            constructor(extensions, editor) {
                this.splittableMarks = [];
                this.editor = editor;
                this.extensions = ExtensionManager.resolve(extensions);
                this.schema = getSchemaByResolvedExtensions(this.extensions);
                this.extensions.forEach(extension => {
                    var _a;
                    // store extension storage in editor
                    this.editor.extensionStorage[extension.name] = extension.storage;
                    const context = {
                        name: extension.name,
                        options: extension.options,
                        storage: extension.storage,
                        editor: this.editor,
                        type: getSchemaTypeByName(extension.name, this.schema),
                    };
                    if (extension.type === 'mark') {
                        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;
                        if (keepOnSplit) {
                            this.splittableMarks.push(extension.name);
                        }
                    }
                    const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);
                    if (onBeforeCreate) {
                        this.editor.on('beforeCreate', onBeforeCreate);
                    }
                    const onCreate = getExtensionField(extension, 'onCreate', context);
                    if (onCreate) {
                        this.editor.on('create', onCreate);
                    }
                    const onUpdate = getExtensionField(extension, 'onUpdate', context);
                    if (onUpdate) {
                        this.editor.on('update', onUpdate);
                    }
                    const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);
                    if (onSelectionUpdate) {
                        this.editor.on('selectionUpdate', onSelectionUpdate);
                    }
                    const onTransaction = getExtensionField(extension, 'onTransaction', context);
                    if (onTransaction) {
                        this.editor.on('transaction', onTransaction);
                    }
                    const onFocus = getExtensionField(extension, 'onFocus', context);
                    if (onFocus) {
                        this.editor.on('focus', onFocus);
                    }
                    const onBlur = getExtensionField(extension, 'onBlur', context);
                    if (onBlur) {
                        this.editor.on('blur', onBlur);
                    }
                    const onDestroy = getExtensionField(extension, 'onDestroy', context);
                    if (onDestroy) {
                        this.editor.on('destroy', onDestroy);
                    }
                });
            }
            static resolve(extensions) {
                const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));
                const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));
                if (duplicatedNames.length) {
                    console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`);
                }
                return resolvedExtensions;
            }
            static flatten(extensions) {
                return extensions
                    .map(extension => {
                        const context = {
                            name: extension.name,
                            options: extension.options,
                            storage: extension.storage,
                        };
                        const addExtensions = getExtensionField(extension, 'addExtensions', context);
                        if (addExtensions) {
                            return [
                                extension,
                                ...this.flatten(addExtensions()),
                            ];
                        }
                        return extension;
                    })
                    // `Infinity` will break TypeScript so we set a number that is probably high enough
                    .flat(10);
            }
            static sort(extensions) {
                const defaultPriority = 100;
                return extensions.sort((a, b) => {
                    const priorityA = getExtensionField(a, 'priority') || defaultPriority;
                    const priorityB = getExtensionField(b, 'priority') || defaultPriority;
                    if (priorityA > priorityB) {
                        return -1;
                    }
                    if (priorityA < priorityB) {
                        return 1;
                    }
                    return 0;
                });
            }
            get commands() {
                return this.extensions.reduce((commands, extension) => {
                    const context = {
                        name: extension.name,
                        options: extension.options,
                        storage: extension.storage,
                        editor: this.editor,
                        type: getSchemaTypeByName(extension.name, this.schema),
                    };
                    const addCommands = getExtensionField(extension, 'addCommands', context);
                    if (!addCommands) {
                        return commands;
                    }
                    return {
                        ...commands,
                        ...addCommands(),
                    };
                }, {});
            }
            get plugins() {
                const { editor } = this;
                // With ProseMirror, first plugins within an array are executed first.
                // In tiptap, we provide the ability to override plugins,
                // so it feels more natural to run plugins at the end of an array first.
                // That’s why we have to reverse the `extensions` array and sort again
                // based on the `priority` option.
                const extensions = ExtensionManager.sort([...this.extensions].reverse());
                const inputRules = [];
                const pasteRules = [];
                const allPlugins = extensions
                    .map(extension => {
                        const context = {
                            name: extension.name,
                            options: extension.options,
                            storage: extension.storage,
                            editor,
                            type: getSchemaTypeByName(extension.name, this.schema),
                        };
                        const plugins = [];
                        const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);
                        let defaultBindings = {};
                        // bind exit handling
                        if (extension.type === 'mark' && extension.config.exitable) {
                            defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension });
                        }
                        if (addKeyboardShortcuts) {
                            const bindings = Object.fromEntries(Object
                                .entries(addKeyboardShortcuts())
                                .map(([shortcut, method]) => {
                                    return [shortcut, () => method({ editor })];
                                }));
                            defaultBindings = { ...defaultBindings, ...bindings };
                        }
                        const keyMapPlugin = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);
                        plugins.push(keyMapPlugin);
                        const addInputRules = getExtensionField(extension, 'addInputRules', context);
                        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {
                            inputRules.push(...addInputRules());
                        }
                        const addPasteRules = getExtensionField(extension, 'addPasteRules', context);
                        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {
                            pasteRules.push(...addPasteRules());
                        }
                        const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);
                        if (addProseMirrorPlugins) {
                            const proseMirrorPlugins = addProseMirrorPlugins();
                            plugins.push(...proseMirrorPlugins);
                        }
                        return plugins;
                    })
                    .flat();
                return [
                    inputRulesPlugin({
                        editor,
                        rules: inputRules,
                    }),
                    ...pasteRulesPlugin({
                        editor,
                        rules: pasteRules,
                    }),
                    ...allPlugins,
                ];
            }
            get attributes() {
                return getAttributesFromExtensions(this.extensions);
            }
            get nodeViews() {
                const { editor } = this;
                const { nodeExtensions } = splitExtensions(this.extensions);
                return Object.fromEntries(nodeExtensions
                    .filter(extension => !!getExtensionField(extension, 'addNodeView'))
                    .map(extension => {
                        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);
                        const context = {
                            name: extension.name,
                            options: extension.options,
                            storage: extension.storage,
                            editor,
                            type: getNodeType(extension.name, this.schema),
                        };
                        const addNodeView = getExtensionField(extension, 'addNodeView', context);
                        if (!addNodeView) {
                            return [];
                        }
                        const nodeview = (node, view, getPos, decorations) => {
                            const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);
                            return addNodeView()({
                                editor,
                                node,
                                getPos,
                                decorations,
                                HTMLAttributes,
                                extension,
                            });
                        };
                        return [extension.name, nodeview];
                    }));
            }
        }

// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts
        function getType(value) {
            return Object.prototype.toString.call(value).slice(8, -1);
        }
        function isPlainObject(value) {
            if (getType(value) !== 'Object') {
                return false;
            }
            return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;
        }

        function mergeDeep(target, source) {
            const output = { ...target };
            if (isPlainObject(target) && isPlainObject(source)) {
                Object.keys(source).forEach(key => {
                    if (isPlainObject(source[key])) {
                        if (!(key in target)) {
                            Object.assign(output, { [key]: source[key] });
                        }
                        else {
                            output[key] = mergeDeep(target[key], source[key]);
                        }
                    }
                    else {
                        Object.assign(output, { [key]: source[key] });
                    }
                });
            }
            return output;
        }

        class Extension {
            constructor(config = {}) {
                this.type = 'extension';
                this.name = 'extension';
                this.parent = null;
                this.child = null;
                this.config = {
                    name: this.name,
                    defaultOptions: {},
                };
                this.config = {
                    ...this.config,
                    ...config,
                };
                this.name = this.config.name;
                if (config.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
                }
                // TODO: remove `addOptions` fallback
                this.options = this.config.defaultOptions;
                if (this.config.addOptions) {
                    this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                        name: this.name,
                    }));
                }
                this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                    name: this.name,
                    options: this.options,
                })) || {};
            }
            static create(config = {}) {
                return new Extension(config);
            }
            configure(options = {}) {
                // return a new instance so we can use the same extension
                // with different calls of `configure`
                const extension = this.extend();
                extension.options = mergeDeep(this.options, options);
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
            extend(extendedConfig = {}) {
                const extension = new Extension(extendedConfig);
                extension.parent = this;
                this.child = extension;
                extension.name = extendedConfig.name
                    ? extendedConfig.name
                    : extension.parent.name;
                if (extendedConfig.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
                }
                extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                    name: extension.name,
                }));
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
        }

        function getTextBetween(startNode, range, options) {
            const { from, to } = range;
            const { blockSeparator = '\n\n', textSerializers = {}, } = options || {};
            let text = '';
            let separated = true;
            startNode.nodesBetween(from, to, (node, pos, parent, index) => {
                var _a;
                const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];
                if (textSerializer) {
                    if (node.isBlock && !separated) {
                        text += blockSeparator;
                        separated = true;
                    }
                    if (parent) {
                        text += textSerializer({
                            node,
                            pos,
                            parent,
                            index,
                            range,
                        });
                    }
                }
                else if (node.isText) {
                    text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line
                    separated = false;
                }
                else if (node.isBlock && !separated) {
                    text += blockSeparator;
                    separated = true;
                }
            });
            return text;
        }

        function getTextSerializersFromSchema(schema) {
            return Object.fromEntries(Object
                .entries(schema.nodes)
                .filter(([, node]) => node.spec.toText)
                .map(([name, node]) => [name, node.spec.toText]));
        }

        const ClipboardTextSerializer = Extension.create({
            name: 'clipboardTextSerializer',
            addProseMirrorPlugins() {
                return [
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('clipboardTextSerializer'),
                        props: {
                            clipboardTextSerializer: () => {
                                const { editor } = this;
                                const { state, schema } = editor;
                                const { doc, selection } = state;
                                const { ranges } = selection;
                                const from = Math.min(...ranges.map(range => range.$from.pos));
                                const to = Math.max(...ranges.map(range => range.$to.pos));
                                const textSerializers = getTextSerializersFromSchema(schema);
                                const range = { from, to };
                                return getTextBetween(doc, range, {
                                    textSerializers,
                                });
                            },
                        },
                    }),
                ];
            },
        });

        const blur = () => ({ editor, view }) => {
            requestAnimationFrame(() => {
                var _a;
                if (!editor.isDestroyed) {
                    view.dom.blur();
                    // Browsers should remove the caret on blur but safari does not.
                    // See: https://github.com/ueberdosis/tiptap/issues/2405
                    (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
                }
            });
            return true;
        };

        const clearContent = (emitUpdate = false) => ({ commands }) => {
            return commands.setContent('', emitUpdate);
        };

        const clearNodes = () => ({ state, tr, dispatch }) => {
            const { selection } = tr;
            const { ranges } = selection;
            if (!dispatch) {
                return true;
            }
            ranges.forEach(({ $from, $to }) => {
                state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
                    if (node.type.isText) {
                        return;
                    }
                    const { doc, mapping } = tr;
                    const $mappedFrom = doc.resolve(mapping.map(pos));
                    const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));
                    const nodeRange = $mappedFrom.blockRange($mappedTo);
                    if (!nodeRange) {
                        return;
                    }
                    const targetLiftDepth = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.liftTarget)(nodeRange);
                    if (node.type.isTextblock) {
                        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());
                        tr.setNodeMarkup(nodeRange.start, defaultType);
                    }
                    if (targetLiftDepth || targetLiftDepth === 0) {
                        tr.lift(nodeRange, targetLiftDepth);
                    }
                });
            });
            return true;
        };

        const command = fn => props => {
            return fn(props);
        };

        const createParagraphNear = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.createParagraphNear)(state, dispatch);
        };

        const deleteNode = typeOrName => ({ tr, state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            const $pos = tr.selection.$anchor;
            for (let depth = $pos.depth; depth > 0; depth -= 1) {
                const node = $pos.node(depth);
                if (node.type === type) {
                    if (dispatch) {
                        const from = $pos.before(depth);
                        const to = $pos.after(depth);
                        tr.delete(from, to).scrollIntoView();
                    }
                    return true;
                }
            }
            return false;
        };

        const deleteRange = range => ({ tr, dispatch }) => {
            const { from, to } = range;
            if (dispatch) {
                tr.delete(from, to);
            }
            return true;
        };

        const deleteSelection = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.deleteSelection)(state, dispatch);
        };

        const enter = () => ({ commands }) => {
            return commands.keyboardShortcut('Enter');
        };

        const exitCode = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.exitCode)(state, dispatch);
        };

        /**
         * Check if object1 includes object2
         * @param object1 Object
         * @param object2 Object
         */
        function objectIncludes(object1, object2, options = { strict: true }) {
            const keys = Object.keys(object2);
            if (!keys.length) {
                return true;
            }
            return keys.every(key => {
                if (options.strict) {
                    return object2[key] === object1[key];
                }
                if (isRegExp(object2[key])) {
                    return object2[key].test(object1[key]);
                }
                return object2[key] === object1[key];
            });
        }

        function findMarkInSet(marks, type, attributes = {}) {
            return marks.find(item => {
                return item.type === type && objectIncludes(item.attrs, attributes);
            });
        }
        function isMarkInSet(marks, type, attributes = {}) {
            return !!findMarkInSet(marks, type, attributes);
        }
        function getMarkRange($pos, type, attributes = {}) {
            if (!$pos || !type) {
                return;
            }
            let start = $pos.parent.childAfter($pos.parentOffset);
            if ($pos.parentOffset === start.offset && start.offset !== 0) {
                start = $pos.parent.childBefore($pos.parentOffset);
            }
            if (!start.node) {
                return;
            }
            const mark = findMarkInSet([...start.node.marks], type, attributes);
            if (!mark) {
                return;
            }
            let startIndex = start.index;
            let startPos = $pos.start() + start.offset;
            let endIndex = startIndex + 1;
            let endPos = startPos + start.node.nodeSize;
            findMarkInSet([...start.node.marks], type, attributes);
            while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {
                startIndex -= 1;
                startPos -= $pos.parent.child(startIndex).nodeSize;
            }
            while (endIndex < $pos.parent.childCount
            && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {
                endPos += $pos.parent.child(endIndex).nodeSize;
                endIndex += 1;
            }
            return {
                from: startPos,
                to: endPos,
            };
        }

        function getMarkType(nameOrType, schema) {
            if (typeof nameOrType === 'string') {
                if (!schema.marks[nameOrType]) {
                    throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);
                }
                return schema.marks[nameOrType];
            }
            return nameOrType;
        }

        const extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
            const type = getMarkType(typeOrName, state.schema);
            const { doc, selection } = tr;
            const { $from, from, to } = selection;
            if (dispatch) {
                const range = getMarkRange($from, type, attributes);
                if (range && range.from <= from && range.to >= to) {
                    const newSelection = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, range.from, range.to);
                    tr.setSelection(newSelection);
                }
            }
            return true;
        };

        const first = commands => props => {
            const items = typeof commands === 'function'
                ? commands(props)
                : commands;
            for (let i = 0; i < items.length; i += 1) {
                if (items[i](props)) {
                    return true;
                }
            }
            return false;
        };

        function isTextSelection(value) {
            return value instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection;
        }

        function minMax(value = 0, min = 0, max = 0) {
            return Math.min(Math.max(value, min), max);
        }

        function resolveFocusPosition(doc, position = null) {
            if (!position) {
                return null;
            }
            const selectionAtStart = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.atStart(doc);
            const selectionAtEnd = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.atEnd(doc);
            if (position === 'start' || position === true) {
                return selectionAtStart;
            }
            if (position === 'end') {
                return selectionAtEnd;
            }
            const minPos = selectionAtStart.from;
            const maxPos = selectionAtEnd.to;
            if (position === 'all') {
                return prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));
            }
            return prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));
        }

        function isiOS() {
            return [
                    'iPad Simulator',
                    'iPhone Simulator',
                    'iPod Simulator',
                    'iPad',
                    'iPhone',
                    'iPod',
                ].includes(navigator.platform)
                // iPad on iOS 13 detection
                || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
        }

        const focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {
            options = {
                scrollIntoView: true,
                ...options,
            };
            const delayedFocus = () => {
                // focus within `requestAnimationFrame` breaks focus on iOS
                // so we have to call this
                if (isiOS()) {
                    view.dom.focus();
                }
                // For React we have to focus asynchronously. Otherwise wild things happen.
                // see: https://github.com/ueberdosis/tiptap/issues/1520
                requestAnimationFrame(() => {
                    if (!editor.isDestroyed) {
                        view.focus();
                        if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {
                            editor.commands.scrollIntoView();
                        }
                    }
                });
            };
            if ((view.hasFocus() && position === null) || position === false) {
                return true;
            }
            // we don’t try to resolve a NodeSelection or CellSelection
            if (dispatch && position === null && !isTextSelection(editor.state.selection)) {
                delayedFocus();
                return true;
            }
            // pass through tr.doc instead of editor.state.doc
            // since transactions could change the editors state before this command has been run
            const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;
            const isSameSelection = editor.state.selection.eq(selection);
            if (dispatch) {
                if (!isSameSelection) {
                    tr.setSelection(selection);
                }
                // `tr.setSelection` resets the stored marks
                // so we’ll restore them if the selection is the same as before
                if (isSameSelection && tr.storedMarks) {
                    tr.setStoredMarks(tr.storedMarks);
                }
                delayedFocus();
            }
            return true;
        };

        const forEach = (items, fn) => props => {
            return items.every((item, index) => fn(item, { ...props, index }));
        };

        const insertContent = (value, options) => ({ tr, commands }) => {
            return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);
        };

        function elementFromString(value) {
            // add a wrapper to preserve leading and trailing whitespace
            const wrappedValue = `<body>${value}</body>`;
            return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;
        }

        function createNodeFromContent(content, schema, options) {
            options = {
                slice: true,
                parseOptions: {},
                ...options,
            };
            if (typeof content === 'object' && content !== null) {
                try {
                    if (Array.isArray(content)) {
                        return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));
                    }
                    return schema.nodeFromJSON(content);
                }
                catch (error) {
                    console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);
                    return createNodeFromContent('', schema, options);
                }
            }
            if (typeof content === 'string') {
                const parser = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(schema);
                return options.slice
                    ? parser.parseSlice(elementFromString(content), options.parseOptions).content
                    : parser.parse(elementFromString(content), options.parseOptions);
            }
            return createNodeFromContent('', schema, options);
        }

// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466
        function selectionToInsertionEnd(tr, startLen, bias) {
            const last = tr.steps.length - 1;
            if (last < startLen) {
                return;
            }
            const step = tr.steps[last];
            if (!(step instanceof prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.ReplaceStep || step instanceof prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.ReplaceAroundStep)) {
                return;
            }
            const map = tr.mapping.maps[last];
            let end = 0;
            map.forEach((_from, _to, _newFrom, newTo) => {
                if (end === 0) {
                    end = newTo;
                }
            });
            tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(tr.doc.resolve(end), bias));
        }

        const isFragment = (nodeOrFragment) => {
            return nodeOrFragment.toString().startsWith('<');
        };
        const insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {
            if (dispatch) {
                options = {
                    parseOptions: {},
                    updateSelection: true,
                    ...options,
                };
                const content = createNodeFromContent(value, editor.schema, {
                    parseOptions: {
                        preserveWhitespace: 'full',
                        ...options.parseOptions,
                    },
                });
                // don’t dispatch an empty fragment because this can lead to strange errors
                if (content.toString() === '<>') {
                    return true;
                }
                let { from, to } = typeof position === 'number'
                    ? { from: position, to: position }
                    : position;
                let isOnlyTextContent = true;
                let isOnlyBlockContent = true;
                const nodes = isFragment(content)
                    ? content
                    : [content];
                nodes.forEach(node => {
                    // check if added node is valid
                    node.check();
                    isOnlyTextContent = isOnlyTextContent
                        ? node.isText && node.marks.length === 0
                        : false;
                    isOnlyBlockContent = isOnlyBlockContent
                        ? node.isBlock
                        : false;
                });
                // check if we can replace the wrapping node by
                // the newly inserted content
                // example:
                // replace an empty paragraph by an inserted image
                // instead of inserting the image below the paragraph
                if (from === to && isOnlyBlockContent) {
                    const { parent } = tr.doc.resolve(from);
                    const isEmptyTextBlock = parent.isTextblock
                        && !parent.type.spec.code
                        && !parent.childCount;
                    if (isEmptyTextBlock) {
                        from -= 1;
                        to += 1;
                    }
                }
                // if there is only plain text we have to use `insertText`
                // because this will keep the current marks
                if (isOnlyTextContent) {
                    tr.insertText(value, from, to);
                }
                else {
                    tr.replaceWith(from, to, content);
                }
                // set cursor at end of inserted content
                if (options.updateSelection) {
                    selectionToInsertionEnd(tr, tr.steps.length - 1, -1);
                }
            }
            return true;
        };

        const joinBackward = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.joinBackward)(state, dispatch);
        };

        const joinForward = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.joinForward)(state, dispatch);
        };

        function isMacOS() {
            return typeof navigator !== 'undefined'
                ? /Mac/.test(navigator.platform)
                : false;
        }

        function normalizeKeyName(name) {
            const parts = name.split(/-(?!$)/);
            let result = parts[parts.length - 1];
            if (result === 'Space') {
                result = ' ';
            }
            let alt;
            let ctrl;
            let shift;
            let meta;
            for (let i = 0; i < parts.length - 1; i += 1) {
                const mod = parts[i];
                if (/^(cmd|meta|m)$/i.test(mod)) {
                    meta = true;
                }
                else if (/^a(lt)?$/i.test(mod)) {
                    alt = true;
                }
                else if (/^(c|ctrl|control)$/i.test(mod)) {
                    ctrl = true;
                }
                else if (/^s(hift)?$/i.test(mod)) {
                    shift = true;
                }
                else if (/^mod$/i.test(mod)) {
                    if (isiOS() || isMacOS()) {
                        meta = true;
                    }
                    else {
                        ctrl = true;
                    }
                }
                else {
                    throw new Error(`Unrecognized modifier name: ${mod}`);
                }
            }
            if (alt) {
                result = `Alt-${result}`;
            }
            if (ctrl) {
                result = `Ctrl-${result}`;
            }
            if (meta) {
                result = `Meta-${result}`;
            }
            if (shift) {
                result = `Shift-${result}`;
            }
            return result;
        }
        const keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {
            const keys = normalizeKeyName(name).split(/-(?!$)/);
            const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));
            const event = new KeyboardEvent('keydown', {
                key: key === 'Space'
                    ? ' '
                    : key,
                altKey: keys.includes('Alt'),
                ctrlKey: keys.includes('Ctrl'),
                metaKey: keys.includes('Meta'),
                shiftKey: keys.includes('Shift'),
                bubbles: true,
                cancelable: true,
            });
            const capturedTransaction = editor.captureTransaction(() => {
                view.someProp('handleKeyDown', f => f(view, event));
            });
            capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {
                const newStep = step.map(tr.mapping);
                if (newStep && dispatch) {
                    tr.maybeStep(newStep);
                }
            });
            return true;
        };

        function isNodeActive(state, typeOrName, attributes = {}) {
            const { from, to, empty } = state.selection;
            const type = typeOrName
                ? getNodeType(typeOrName, state.schema)
                : null;
            const nodeRanges = [];
            state.doc.nodesBetween(from, to, (node, pos) => {
                if (node.isText) {
                    return;
                }
                const relativeFrom = Math.max(from, pos);
                const relativeTo = Math.min(to, pos + node.nodeSize);
                nodeRanges.push({
                    node,
                    from: relativeFrom,
                    to: relativeTo,
                });
            });
            const selectionRange = to - from;
            const matchedNodeRanges = nodeRanges
                .filter(nodeRange => {
                    if (!type) {
                        return true;
                    }
                    return type.name === nodeRange.node.type.name;
                })
                .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));
            if (empty) {
                return !!matchedNodeRanges.length;
            }
            const range = matchedNodeRanges
                .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);
            return range >= selectionRange;
        }

        const lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            const isActive = isNodeActive(state, type, attributes);
            if (!isActive) {
                return false;
            }
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.lift)(state, dispatch);
        };

        const liftEmptyBlock = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.liftEmptyBlock)(state, dispatch);
        };

        const liftListItem = typeOrName => ({ state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            return (0,prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_5__.liftListItem)(type)(state, dispatch);
        };

        const newlineInCode = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.newlineInCode)(state, dispatch);
        };

        function getSchemaTypeNameByName(name, schema) {
            if (schema.nodes[name]) {
                return 'node';
            }
            if (schema.marks[name]) {
                return 'mark';
            }
            return null;
        }

        /**
         * Remove a property or an array of properties from an object
         * @param obj Object
         * @param key Key to remove
         */
        function deleteProps(obj, propOrProps) {
            const props = typeof propOrProps === 'string'
                ? [propOrProps]
                : propOrProps;
            return Object
                .keys(obj)
                .reduce((newObj, prop) => {
                    if (!props.includes(prop)) {
                        newObj[prop] = obj[prop];
                    }
                    return newObj;
                }, {});
        }

        const resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {
            let nodeType = null;
            let markType = null;
            const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
                ? typeOrName
                : typeOrName.name, state.schema);
            if (!schemaType) {
                return false;
            }
            if (schemaType === 'node') {
                nodeType = getNodeType(typeOrName, state.schema);
            }
            if (schemaType === 'mark') {
                markType = getMarkType(typeOrName, state.schema);
            }
            if (dispatch) {
                tr.selection.ranges.forEach(range => {
                    state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {
                        if (nodeType && nodeType === node.type) {
                            tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));
                        }
                        if (markType && node.marks.length) {
                            node.marks.forEach(mark => {
                                if (markType === mark.type) {
                                    tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));
                                }
                            });
                        }
                    });
                });
            }
            return true;
        };

        const scrollIntoView = () => ({ tr, dispatch }) => {
            if (dispatch) {
                tr.scrollIntoView();
            }
            return true;
        };

        const selectAll = () => ({ tr, commands }) => {
            return commands.setTextSelection({
                from: 0,
                to: tr.doc.content.size,
            });
        };

        const selectNodeBackward = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.selectNodeBackward)(state, dispatch);
        };

        const selectNodeForward = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.selectNodeForward)(state, dispatch);
        };

        const selectParentNode = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.selectParentNode)(state, dispatch);
        };

// @ts-ignore
        const selectTextblockEnd = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.selectTextblockEnd)(state, dispatch);
        };

// @ts-ignore
        const selectTextblockStart = () => ({ state, dispatch }) => {
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.selectTextblockStart)(state, dispatch);
        };

        function createDocument(content, schema, parseOptions = {}) {
            return createNodeFromContent(content, schema, { slice: false, parseOptions });
        }

        const setContent = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {
            const { doc } = tr;
            const document = createDocument(content, editor.schema, parseOptions);
            if (dispatch) {
                tr.replaceWith(0, doc.content.size, document)
                    .setMeta('preventUpdate', !emitUpdate);
            }
            return true;
        };

        function getMarkAttributes(state, typeOrName) {
            const type = getMarkType(typeOrName, state.schema);
            const { from, to, empty } = state.selection;
            const marks = [];
            if (empty) {
                if (state.storedMarks) {
                    marks.push(...state.storedMarks);
                }
                marks.push(...state.selection.$head.marks());
            }
            else {
                state.doc.nodesBetween(from, to, node => {
                    marks.push(...node.marks);
                });
            }
            const mark = marks.find(markItem => markItem.type.name === type.name);
            if (!mark) {
                return {};
            }
            return { ...mark.attrs };
        }

        const setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
            const { selection } = tr;
            const { empty, ranges } = selection;
            const type = getMarkType(typeOrName, state.schema);
            if (dispatch) {
                if (empty) {
                    const oldAttributes = getMarkAttributes(state, type);
                    tr.addStoredMark(type.create({
                        ...oldAttributes,
                        ...attributes,
                    }));
                }
                else {
                    ranges.forEach(range => {
                        const from = range.$from.pos;
                        const to = range.$to.pos;
                        state.doc.nodesBetween(from, to, (node, pos) => {
                            const trimmedFrom = Math.max(pos, from);
                            const trimmedTo = Math.min(pos + node.nodeSize, to);
                            const someHasMark = node.marks.find(mark => mark.type === type);
                            // if there is already a mark of this type
                            // we know that we have to merge its attributes
                            // otherwise we add a fresh new mark
                            if (someHasMark) {
                                node.marks.forEach(mark => {
                                    if (type === mark.type) {
                                        tr.addMark(trimmedFrom, trimmedTo, type.create({
                                            ...mark.attrs,
                                            ...attributes,
                                        }));
                                    }
                                });
                            }
                            else {
                                tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));
                            }
                        });
                    });
                }
            }
            return true;
        };

        const setMeta = (key, value) => ({ tr }) => {
            tr.setMeta(key, value);
            return true;
        };

        const setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {
            const type = getNodeType(typeOrName, state.schema);
            // TODO: use a fallback like insertContent?
            if (!type.isTextblock) {
                console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.');
                return false;
            }
            return chain()
                // try to convert node to default node if needed
                .command(({ commands }) => {
                    const canSetBlock = (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.setBlockType)(type, attributes)(state);
                    if (canSetBlock) {
                        return true;
                    }
                    return commands.clearNodes();
                })
                .command(({ state: updatedState }) => {
                    return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.setBlockType)(type, attributes)(updatedState, dispatch);
                })
                .run();
        };

        const setNodeSelection = position => ({ tr, dispatch }) => {
            if (dispatch) {
                const { doc } = tr;
                const from = minMax(position, 0, doc.content.size);
                const selection = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(doc, from);
                tr.setSelection(selection);
            }
            return true;
        };

        const setTextSelection = position => ({ tr, dispatch }) => {
            if (dispatch) {
                const { doc } = tr;
                const { from, to } = typeof position === 'number'
                    ? { from: position, to: position }
                    : position;
                const minPos = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.atStart(doc).from;
                const maxPos = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.atEnd(doc).to;
                const resolvedFrom = minMax(from, minPos, maxPos);
                const resolvedEnd = minMax(to, minPos, maxPos);
                const selection = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, resolvedFrom, resolvedEnd);
                tr.setSelection(selection);
            }
            return true;
        };

        const sinkListItem = typeOrName => ({ state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            return (0,prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_5__.sinkListItem)(type)(state, dispatch);
        };

        function defaultBlockAt(match) {
            for (let i = 0; i < match.edgeCount; i += 1) {
                const { type } = match.edge(i);
                if (type.isTextblock && !type.hasRequiredAttrs()) {
                    return type;
                }
            }
            return null;
        }

        function getSplittedAttributes(extensionAttributes, typeName, attributes) {
            return Object.fromEntries(Object
                .entries(attributes)
                .filter(([name]) => {
                    const extensionAttribute = extensionAttributes.find(item => {
                        return item.type === typeName && item.name === name;
                    });
                    if (!extensionAttribute) {
                        return false;
                    }
                    return extensionAttribute.attribute.keepOnSplit;
                }));
        }

        function ensureMarks(state, splittableMarks) {
            const marks = state.storedMarks
                || (state.selection.$to.parentOffset && state.selection.$from.marks());
            if (marks) {
                const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));
                state.tr.ensureMarks(filteredMarks);
            }
        }
        const splitBlock = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {
            const { selection, doc } = tr;
            const { $from, $to } = selection;
            const extensionAttributes = editor.extensionManager.attributes;
            const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
            if (selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && selection.node.isBlock) {
                if (!$from.parentOffset || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canSplit)(doc, $from.pos)) {
                    return false;
                }
                if (dispatch) {
                    if (keepMarks) {
                        ensureMarks(state, editor.extensionManager.splittableMarks);
                    }
                    tr.split($from.pos).scrollIntoView();
                }
                return true;
            }
            if (!$from.parent.isBlock) {
                return false;
            }
            if (dispatch) {
                const atEnd = $to.parentOffset === $to.parent.content.size;
                if (selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {
                    tr.deleteSelection();
                }
                const deflt = $from.depth === 0
                    ? undefined
                    : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
                let types = atEnd && deflt
                    ? [{
                        type: deflt,
                        attrs: newAttributes,
                    }]
                    : undefined;
                let can = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);
                if (!types
                    && !can
                    && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                    can = true;
                    types = deflt
                        ? [{
                            type: deflt,
                            attrs: newAttributes,
                        }]
                        : undefined;
                }
                if (can) {
                    tr.split(tr.mapping.map($from.pos), 1, types);
                    if (deflt
                        && !atEnd
                        && !$from.parentOffset
                        && $from.parent.type !== deflt) {
                        const first = tr.mapping.map($from.before());
                        const $first = tr.doc.resolve(first);
                        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {
                            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                        }
                    }
                }
                if (keepMarks) {
                    ensureMarks(state, editor.extensionManager.splittableMarks);
                }
                tr.scrollIntoView();
            }
            return true;
        };

        const splitListItem = typeOrName => ({ tr, state, dispatch, editor, }) => {
            var _a;
            const type = getNodeType(typeOrName, state.schema);
            const { $from, $to } = state.selection;
            // @ts-ignore
            // eslint-disable-next-line
            const node = state.selection.node;
            if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {
                return false;
            }
            const grandParent = $from.node(-1);
            if (grandParent.type !== type) {
                return false;
            }
            const extensionAttributes = editor.extensionManager.attributes;
            if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
                // In an empty block. If this is a nested list, the wrapping
                // list item should be split. Otherwise, bail out and let next
                // command handle lifting.
                if ($from.depth === 2
                    || $from.node(-3).type !== type
                    || $from.index(-2) !== $from.node(-2).childCount - 1) {
                    return false;
                }
                if (dispatch) {
                    let wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                    // eslint-disable-next-line
                    const depthBefore = $from.index(-1)
                        ? 1
                        : $from.index(-2)
                            ? 2
                            : 3;
                    // Build a fragment containing empty versions of the structure
                    // from the outer list item to the parent node of the cursor
                    for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {
                        wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(wrap));
                    }
                    // eslint-disable-next-line
                    const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount
                        ? 1
                        : $from.indexAfter(-2) < $from.node(-3).childCount
                            ? 2
                            : 3;
                    // Add a second list item with an empty default start node
                    const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
                    const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;
                    wrap = wrap.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.createAndFill(null, nextType) || undefined));
                    const start = $from.before($from.depth - (depthBefore - 1));
                    tr.replace(start, $from.after(-depthAfter), new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(wrap, 4 - depthBefore, 0));
                    let sel = -1;
                    tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {
                        if (sel > -1) {
                            return false;
                        }
                        if (n.isTextblock && n.content.size === 0) {
                            sel = pos + 1;
                        }
                    });
                    if (sel > -1) {
                        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.near(tr.doc.resolve(sel)));
                    }
                    tr.scrollIntoView();
                }
                return true;
            }
            const nextType = $to.pos === $from.end()
                ? grandParent.contentMatchAt(0).defaultType
                : null;
            const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);
            const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
            tr.delete($from.pos, $to.pos);
            const types = nextType
                ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]
                : [{ type, attrs: newTypeAttributes }];
            if (!(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canSplit)(tr.doc, $from.pos, 2)) {
                return false;
            }
            if (dispatch) {
                tr.split($from.pos, 2, types).scrollIntoView();
            }
            return true;
        };

        function findParentNodeClosestToPos($pos, predicate) {
            for (let i = $pos.depth; i > 0; i -= 1) {
                const node = $pos.node(i);
                if (predicate(node)) {
                    return {
                        pos: i > 0 ? $pos.before(i) : 0,
                        start: $pos.start(i),
                        depth: i,
                        node,
                    };
                }
            }
        }

        function findParentNode(predicate) {
            return (selection) => findParentNodeClosestToPos(selection.$from, predicate);
        }

        function isList(name, extensions) {
            const { nodeExtensions } = splitExtensions(extensions);
            const extension = nodeExtensions.find(item => item.name === name);
            if (!extension) {
                return false;
            }
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            const group = callOrReturn(getExtensionField(extension, 'group', context));
            if (typeof group !== 'string') {
                return false;
            }
            return group.split(' ').includes('list');
        }

        const joinListBackwards = (tr, listType) => {
            const list = findParentNode(node => node.type === listType)(tr.selection);
            if (!list) {
                return true;
            }
            const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);
            if (before === undefined) {
                return true;
            }
            const nodeBefore = tr.doc.nodeAt(before);
            const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type)
                && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canJoin)(tr.doc, list.pos);
            if (!canJoinBackwards) {
                return true;
            }
            tr.join(list.pos);
            return true;
        };
        const joinListForwards = (tr, listType) => {
            const list = findParentNode(node => node.type === listType)(tr.selection);
            if (!list) {
                return true;
            }
            const after = tr.doc.resolve(list.start).after(list.depth);
            if (after === undefined) {
                return true;
            }
            const nodeAfter = tr.doc.nodeAt(after);
            const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type)
                && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canJoin)(tr.doc, after);
            if (!canJoinForwards) {
                return true;
            }
            tr.join(after);
            return true;
        };
        const toggleList = (listTypeOrName, itemTypeOrName) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {
            const { extensions } = editor.extensionManager;
            const listType = getNodeType(listTypeOrName, state.schema);
            const itemType = getNodeType(itemTypeOrName, state.schema);
            const { selection } = state;
            const { $from, $to } = selection;
            const range = $from.blockRange($to);
            if (!range) {
                return false;
            }
            const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);
            if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {
                // remove list
                if (parentList.node.type === listType) {
                    return commands.liftListItem(itemType);
                }
                // change list type
                if (isList(parentList.node.type.name, extensions)
                    && listType.validContent(parentList.node.content)
                    && dispatch) {
                    return chain()
                        .command(() => {
                            tr.setNodeMarkup(parentList.pos, listType);
                            return true;
                        })
                        .command(() => joinListBackwards(tr, listType))
                        .command(() => joinListForwards(tr, listType))
                        .run();
                }
            }
            return chain()
                // try to convert node to default node if needed
                .command(() => {
                    const canWrapInList = can().wrapInList(listType);
                    if (canWrapInList) {
                        return true;
                    }
                    return commands.clearNodes();
                })
                .wrapInList(listType)
                .command(() => joinListBackwards(tr, listType))
                .command(() => joinListForwards(tr, listType))
                .run();
        };

        function isMarkActive(state, typeOrName, attributes = {}) {
            const { empty, ranges } = state.selection;
            const type = typeOrName
                ? getMarkType(typeOrName, state.schema)
                : null;
            if (empty) {
                return !!(state.storedMarks || state.selection.$from.marks())
                    .filter(mark => {
                        if (!type) {
                            return true;
                        }
                        return type.name === mark.type.name;
                    })
                    .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));
            }
            let selectionRange = 0;
            const markRanges = [];
            ranges.forEach(({ $from, $to }) => {
                const from = $from.pos;
                const to = $to.pos;
                state.doc.nodesBetween(from, to, (node, pos) => {
                    if (!node.isText && !node.marks.length) {
                        return;
                    }
                    const relativeFrom = Math.max(from, pos);
                    const relativeTo = Math.min(to, pos + node.nodeSize);
                    const range = relativeTo - relativeFrom;
                    selectionRange += range;
                    markRanges.push(...node.marks.map(mark => ({
                        mark,
                        from: relativeFrom,
                        to: relativeTo,
                    })));
                });
            });
            if (selectionRange === 0) {
                return false;
            }
            // calculate range of matched mark
            const matchedRange = markRanges
                .filter(markRange => {
                    if (!type) {
                        return true;
                    }
                    return type.name === markRange.mark.type.name;
                })
                .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))
                .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
            // calculate range of marks that excludes the searched mark
            // for example `code` doesn’t allow any other marks
            const excludedRange = markRanges
                .filter(markRange => {
                    if (!type) {
                        return true;
                    }
                    return markRange.mark.type !== type
                        && markRange.mark.type.excludes(type);
                })
                .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
            // we only include the result of `excludedRange`
            // if there is a match at all
            const range = matchedRange > 0
                ? matchedRange + excludedRange
                : matchedRange;
            return range >= selectionRange;
        }

        const toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {
            const { extendEmptyMarkRange = false } = options;
            const type = getMarkType(typeOrName, state.schema);
            const isActive = isMarkActive(state, type, attributes);
            if (isActive) {
                return commands.unsetMark(type, { extendEmptyMarkRange });
            }
            return commands.setMark(type, attributes);
        };

        const toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {
            const type = getNodeType(typeOrName, state.schema);
            const toggleType = getNodeType(toggleTypeOrName, state.schema);
            const isActive = isNodeActive(state, type, attributes);
            if (isActive) {
                return commands.setNode(toggleType);
            }
            return commands.setNode(type, attributes);
        };

        const toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {
            const type = getNodeType(typeOrName, state.schema);
            const isActive = isNodeActive(state, type, attributes);
            if (isActive) {
                return commands.lift(type);
            }
            return commands.wrapIn(type, attributes);
        };

        const undoInputRule = () => ({ state, dispatch }) => {
            const plugins = state.plugins;
            for (let i = 0; i < plugins.length; i += 1) {
                const plugin = plugins[i];
                let undoable;
                // @ts-ignore
                // eslint-disable-next-line
                if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
                    if (dispatch) {
                        const tr = state.tr;
                        const toUndo = undoable.transform;
                        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {
                            tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                        }
                        if (undoable.text) {
                            const marks = tr.doc.resolve(undoable.from).marks();
                            tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                        }
                        else {
                            tr.delete(undoable.from, undoable.to);
                        }
                    }
                    return true;
                }
            }
            return false;
        };

        const unsetAllMarks = () => ({ tr, dispatch }) => {
            const { selection } = tr;
            const { empty, ranges } = selection;
            if (empty) {
                return true;
            }
            if (dispatch) {
                ranges.forEach(range => {
                    tr.removeMark(range.$from.pos, range.$to.pos);
                });
            }
            return true;
        };

        const unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {
            var _a;
            const { extendEmptyMarkRange = false } = options;
            const { selection } = tr;
            const type = getMarkType(typeOrName, state.schema);
            const { $from, empty, ranges } = selection;
            if (!dispatch) {
                return true;
            }
            if (empty && extendEmptyMarkRange) {
                let { from, to } = selection;
                const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;
                const range = getMarkRange($from, type, attrs);
                if (range) {
                    from = range.from;
                    to = range.to;
                }
                tr.removeMark(from, to, type);
            }
            else {
                ranges.forEach(range => {
                    tr.removeMark(range.$from.pos, range.$to.pos, type);
                });
            }
            tr.removeStoredMark(type);
            return true;
        };

        const updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
            let nodeType = null;
            let markType = null;
            const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
                ? typeOrName
                : typeOrName.name, state.schema);
            if (!schemaType) {
                return false;
            }
            if (schemaType === 'node') {
                nodeType = getNodeType(typeOrName, state.schema);
            }
            if (schemaType === 'mark') {
                markType = getMarkType(typeOrName, state.schema);
            }
            if (dispatch) {
                tr.selection.ranges.forEach(range => {
                    const from = range.$from.pos;
                    const to = range.$to.pos;
                    state.doc.nodesBetween(from, to, (node, pos) => {
                        if (nodeType && nodeType === node.type) {
                            tr.setNodeMarkup(pos, undefined, {
                                ...node.attrs,
                                ...attributes,
                            });
                        }
                        if (markType && node.marks.length) {
                            node.marks.forEach(mark => {
                                if (markType === mark.type) {
                                    const trimmedFrom = Math.max(pos, from);
                                    const trimmedTo = Math.min(pos + node.nodeSize, to);
                                    tr.addMark(trimmedFrom, trimmedTo, markType.create({
                                        ...mark.attrs,
                                        ...attributes,
                                    }));
                                }
                            });
                        }
                    });
                });
            }
            return true;
        };

        const wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            return (0,prosemirror_commands__WEBPACK_IMPORTED_MODULE_4__.wrapIn)(type, attributes)(state, dispatch);
        };

        const wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
            const type = getNodeType(typeOrName, state.schema);
            return (0,prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_5__.wrapInList)(type, attributes)(state, dispatch);
        };

        var commands = /*#__PURE__*/Object.freeze({
            __proto__: null,
            blur: blur,
            clearContent: clearContent,
            clearNodes: clearNodes,
            command: command,
            createParagraphNear: createParagraphNear,
            deleteNode: deleteNode,
            deleteRange: deleteRange,
            deleteSelection: deleteSelection,
            enter: enter,
            exitCode: exitCode,
            extendMarkRange: extendMarkRange,
            first: first,
            focus: focus,
            forEach: forEach,
            insertContent: insertContent,
            insertContentAt: insertContentAt,
            joinBackward: joinBackward,
            joinForward: joinForward,
            keyboardShortcut: keyboardShortcut,
            lift: lift,
            liftEmptyBlock: liftEmptyBlock,
            liftListItem: liftListItem,
            newlineInCode: newlineInCode,
            resetAttributes: resetAttributes,
            scrollIntoView: scrollIntoView,
            selectAll: selectAll,
            selectNodeBackward: selectNodeBackward,
            selectNodeForward: selectNodeForward,
            selectParentNode: selectParentNode,
            selectTextblockEnd: selectTextblockEnd,
            selectTextblockStart: selectTextblockStart,
            setContent: setContent,
            setMark: setMark,
            setMeta: setMeta,
            setNode: setNode,
            setNodeSelection: setNodeSelection,
            setTextSelection: setTextSelection,
            sinkListItem: sinkListItem,
            splitBlock: splitBlock,
            splitListItem: splitListItem,
            toggleList: toggleList,
            toggleMark: toggleMark,
            toggleNode: toggleNode,
            toggleWrap: toggleWrap,
            undoInputRule: undoInputRule,
            unsetAllMarks: unsetAllMarks,
            unsetMark: unsetMark,
            updateAttributes: updateAttributes,
            wrapIn: wrapIn,
            wrapInList: wrapInList
        });

        const Commands = Extension.create({
            name: 'commands',
            addCommands() {
                return {
                    ...commands,
                };
            },
        });

        const Editable = Extension.create({
            name: 'editable',
            addProseMirrorPlugins() {
                return [
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('editable'),
                        props: {
                            editable: () => this.editor.options.editable,
                        },
                    }),
                ];
            },
        });

        const FocusEvents = Extension.create({
            name: 'focusEvents',
            addProseMirrorPlugins() {
                const { editor } = this;
                return [
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('focusEvents'),
                        props: {
                            handleDOMEvents: {
                                focus: (view, event) => {
                                    editor.isFocused = true;
                                    const transaction = editor.state.tr
                                        .setMeta('focus', { event })
                                        .setMeta('addToHistory', false);
                                    view.dispatch(transaction);
                                    return false;
                                },
                                blur: (view, event) => {
                                    editor.isFocused = false;
                                    const transaction = editor.state.tr
                                        .setMeta('blur', { event })
                                        .setMeta('addToHistory', false);
                                    view.dispatch(transaction);
                                    return false;
                                },
                            },
                        },
                    }),
                ];
            },
        });

        const Keymap = Extension.create({
            name: 'keymap',
            addKeyboardShortcuts() {
                const handleBackspace = () => this.editor.commands.first(({ commands }) => [
                    () => commands.undoInputRule(),
                    // maybe convert first text block node to default node
                    () => commands.command(({ tr }) => {
                        const { selection, doc } = tr;
                        const { empty, $anchor } = selection;
                        const { pos, parent } = $anchor;
                        const isAtStart = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.atStart(doc).from === pos;
                        if (!empty
                            || !isAtStart
                            || !parent.type.isTextblock
                            || parent.textContent.length) {
                            return false;
                        }
                        return commands.clearNodes();
                    }),
                    () => commands.deleteSelection(),
                    () => commands.joinBackward(),
                    () => commands.selectNodeBackward(),
                ]);
                const handleDelete = () => this.editor.commands.first(({ commands }) => [
                    () => commands.deleteSelection(),
                    () => commands.joinForward(),
                    () => commands.selectNodeForward(),
                ]);
                const handleEnter = () => this.editor.commands.first(({ commands }) => [
                    () => commands.newlineInCode(),
                    () => commands.createParagraphNear(),
                    () => commands.liftEmptyBlock(),
                    () => commands.splitBlock(),
                ]);
                const baseKeymap = {
                    Enter: handleEnter,
                    'Mod-Enter': () => this.editor.commands.exitCode(),
                    Backspace: handleBackspace,
                    'Mod-Backspace': handleBackspace,
                    'Shift-Backspace': handleBackspace,
                    Delete: handleDelete,
                    'Mod-Delete': handleDelete,
                    'Mod-a': () => this.editor.commands.selectAll(),
                };
                const pcKeymap = {
                    ...baseKeymap,
                };
                const macKeymap = {
                    ...baseKeymap,
                    'Ctrl-h': handleBackspace,
                    'Alt-Backspace': handleBackspace,
                    'Ctrl-d': handleDelete,
                    'Ctrl-Alt-Backspace': handleDelete,
                    'Alt-Delete': handleDelete,
                    'Alt-d': handleDelete,
                    'Ctrl-a': () => this.editor.commands.selectTextblockStart(),
                    'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),
                };
                if (isiOS() || isMacOS()) {
                    return macKeymap;
                }
                return pcKeymap;
            },
            addProseMirrorPlugins() {
                return [
                    // With this plugin we check if the whole document was selected and deleted.
                    // In this case we will additionally call `clearNodes()` to convert e.g. a heading
                    // to a paragraph if necessary.
                    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
                    // with many other commands.
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('clearDocument'),
                        appendTransaction: (transactions, oldState, newState) => {
                            const docChanges = transactions.some(transaction => transaction.docChanged)
                                && !oldState.doc.eq(newState.doc);
                            if (!docChanges) {
                                return;
                            }
                            const { empty, from, to } = oldState.selection;
                            const allFrom = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.atStart(oldState.doc).from;
                            const allEnd = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.atEnd(oldState.doc).to;
                            const allWasSelected = from === allFrom && to === allEnd;
                            const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;
                            if (empty || !allWasSelected || !isEmpty) {
                                return;
                            }
                            const tr = newState.tr;
                            const state = createChainableState({
                                state: newState,
                                transaction: tr,
                            });
                            const { commands } = new CommandManager({
                                editor: this.editor,
                                state,
                            });
                            commands.clearNodes();
                            if (!tr.steps.length) {
                                return;
                            }
                            return tr;
                        },
                    }),
                ];
            },
        });

        const Tabindex = Extension.create({
            name: 'tabindex',
            addProseMirrorPlugins() {
                return [
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('tabindex'),
                        props: {
                            attributes: this.editor.isEditable ? { tabindex: '0' } : {},
                        },
                    }),
                ];
            },
        });

        var extensions = /*#__PURE__*/Object.freeze({
            __proto__: null,
            ClipboardTextSerializer: ClipboardTextSerializer,
            Commands: Commands,
            Editable: Editable,
            FocusEvents: FocusEvents,
            Keymap: Keymap,
            Tabindex: Tabindex
        });

        function getNodeAttributes(state, typeOrName) {
            const type = getNodeType(typeOrName, state.schema);
            const { from, to } = state.selection;
            const nodes = [];
            state.doc.nodesBetween(from, to, node => {
                nodes.push(node);
            });
            const node = nodes
                .reverse()
                .find(nodeItem => nodeItem.type.name === type.name);
            if (!node) {
                return {};
            }
            return { ...node.attrs };
        }

        function getAttributes(state, typeOrName) {
            const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
                ? typeOrName
                : typeOrName.name, state.schema);
            if (schemaType === 'node') {
                return getNodeAttributes(state, typeOrName);
            }
            if (schemaType === 'mark') {
                return getMarkAttributes(state, typeOrName);
            }
            return {};
        }

        function getHTMLFromFragment(fragment, schema) {
            const documentFragment = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(schema)
                .serializeFragment(fragment);
            const temporaryDocument = document.implementation.createHTMLDocument();
            const container = temporaryDocument.createElement('div');
            container.appendChild(documentFragment);
            return container.innerHTML;
        }

        function getText(node, options) {
            const range = {
                from: 0,
                to: node.content.size,
            };
            return getTextBetween(node, range, options);
        }

        function isActive(state, name, attributes = {}) {
            if (!name) {
                return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);
            }
            const schemaType = getSchemaTypeNameByName(name, state.schema);
            if (schemaType === 'node') {
                return isNodeActive(state, name, attributes);
            }
            if (schemaType === 'mark') {
                return isMarkActive(state, name, attributes);
            }
            return false;
        }

        function isNodeEmpty(node) {
            var _a;
            const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();
            const content = node.toJSON();
            return JSON.stringify(defaultContent) === JSON.stringify(content);
        }

        const style = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;

        function createStyleTag(style, nonce) {
            const tipTapStyleTag = document.querySelector('style[data-tiptap-style]');
            if (tipTapStyleTag !== null) {
                return tipTapStyleTag;
            }
            const styleNode = document.createElement('style');
            if (nonce) {
                styleNode.setAttribute('nonce', nonce);
            }
            styleNode.setAttribute('data-tiptap-style', '');
            styleNode.innerHTML = style;
            document.getElementsByTagName('head')[0].appendChild(styleNode);
            return styleNode;
        }

        class Editor extends EventEmitter {
            constructor(options = {}) {
                super();
                this.isFocused = false;
                this.extensionStorage = {};
                this.options = {
                    element: document.createElement('div'),
                    content: '',
                    injectCSS: true,
                    injectNonce: undefined,
                    extensions: [],
                    autofocus: false,
                    editable: true,
                    editorProps: {},
                    parseOptions: {},
                    enableInputRules: true,
                    enablePasteRules: true,
                    enableCoreExtensions: true,
                    onBeforeCreate: () => null,
                    onCreate: () => null,
                    onUpdate: () => null,
                    onSelectionUpdate: () => null,
                    onTransaction: () => null,
                    onFocus: () => null,
                    onBlur: () => null,
                    onDestroy: () => null,
                };
                this.isCapturingTransaction = false;
                this.capturedTransaction = null;
                this.setOptions(options);
                this.createExtensionManager();
                this.createCommandManager();
                this.createSchema();
                this.on('beforeCreate', this.options.onBeforeCreate);
                this.emit('beforeCreate', { editor: this });
                this.createView();
                this.injectCSS();
                this.on('create', this.options.onCreate);
                this.on('update', this.options.onUpdate);
                this.on('selectionUpdate', this.options.onSelectionUpdate);
                this.on('transaction', this.options.onTransaction);
                this.on('focus', this.options.onFocus);
                this.on('blur', this.options.onBlur);
                this.on('destroy', this.options.onDestroy);
                window.setTimeout(() => {
                    if (this.isDestroyed) {
                        return;
                    }
                    this.commands.focus(this.options.autofocus);
                    this.emit('create', { editor: this });
                }, 0);
            }
            /**
             * Returns the editor storage.
             */
            get storage() {
                return this.extensionStorage;
            }
            /**
             * An object of all registered commands.
             */
            get commands() {
                return this.commandManager.commands;
            }
            /**
             * Create a command chain to call multiple commands at once.
             */
            chain() {
                return this.commandManager.chain();
            }
            /**
             * Check if a command or a command chain can be executed. Without executing it.
             */
            can() {
                return this.commandManager.can();
            }
            /**
             * Inject CSS styles.
             */
            injectCSS() {
                if (this.options.injectCSS && document) {
                    this.css = createStyleTag(style, this.options.injectNonce);
                }
            }
            /**
             * Update editor options.
             *
             * @param options A list of options
             */
            setOptions(options = {}) {
                this.options = {
                    ...this.options,
                    ...options,
                };
                if (!this.view || !this.state || this.isDestroyed) {
                    return;
                }
                if (this.options.editorProps) {
                    this.view.setProps(this.options.editorProps);
                }
                this.view.updateState(this.state);
            }
            /**
             * Update editable state of the editor.
             */
            setEditable(editable) {
                this.setOptions({ editable });
                this.emit('update', { editor: this, transaction: this.state.tr });
            }
            /**
             * Returns whether the editor is editable.
             */
            get isEditable() {
                // since plugins are applied after creating the view
                // `editable` is always `true` for one tick.
                // that’s why we also have to check for `options.editable`
                return this.options.editable
                    && this.view
                    && this.view.editable;
            }
            /**
             * Returns the editor state.
             */
            get state() {
                return this.view.state;
            }
            /**
             * Register a ProseMirror plugin.
             *
             * @param plugin A ProseMirror plugin
             * @param handlePlugins Control how to merge the plugin into the existing plugins.
             */
            registerPlugin(plugin, handlePlugins) {
                const plugins = isFunction(handlePlugins)
                    ? handlePlugins(plugin, [...this.state.plugins])
                    : [...this.state.plugins, plugin];
                const state = this.state.reconfigure({ plugins });
                this.view.updateState(state);
            }
            /**
             * Unregister a ProseMirror plugin.
             *
             * @param nameOrPluginKey The plugins name
             */
            unregisterPlugin(nameOrPluginKey) {
                if (this.isDestroyed) {
                    return;
                }
                const name = typeof nameOrPluginKey === 'string'
                    ? `${nameOrPluginKey}$`
                    // @ts-ignore
                    : nameOrPluginKey.key;
                const state = this.state.reconfigure({
                    // @ts-ignore
                    plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),
                });
                this.view.updateState(state);
            }
            /**
             * Creates an extension manager.
             */
            createExtensionManager() {
                const coreExtensions = this.options.enableCoreExtensions
                    ? Object.values(extensions)
                    : [];
                const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {
                    return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);
                });
                this.extensionManager = new ExtensionManager(allExtensions, this);
            }
            /**
             * Creates an command manager.
             */
            createCommandManager() {
                this.commandManager = new CommandManager({
                    editor: this,
                });
            }
            /**
             * Creates a ProseMirror schema.
             */
            createSchema() {
                this.schema = this.extensionManager.schema;
            }
            /**
             * Creates a ProseMirror view.
             */
            createView() {
                const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);
                const selection = resolveFocusPosition(doc, this.options.autofocus);
                this.view = new prosemirror_view__WEBPACK_IMPORTED_MODULE_6__.EditorView(this.options.element, {
                    ...this.options.editorProps,
                    dispatchTransaction: this.dispatchTransaction.bind(this),
                    state: prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.create({
                        doc,
                        selection: selection || undefined,
                    }),
                });
                // `editor.view` is not yet available at this time.
                // Therefore we will add all plugins and node views directly afterwards.
                const newState = this.state.reconfigure({
                    plugins: this.extensionManager.plugins,
                });
                this.view.updateState(newState);
                this.createNodeViews();
                // Let’s store the editor instance in the DOM element.
                // So we’ll have access to it for tests.
                const dom = this.view.dom;
                dom.editor = this;
            }
            /**
             * Creates all node views.
             */
            createNodeViews() {
                this.view.setProps({
                    nodeViews: this.extensionManager.nodeViews,
                });
            }
            captureTransaction(fn) {
                this.isCapturingTransaction = true;
                fn();
                this.isCapturingTransaction = false;
                const tr = this.capturedTransaction;
                this.capturedTransaction = null;
                return tr;
            }
            /**
             * The callback over which to send transactions (state updates) produced by the view.
             *
             * @param transaction An editor state transaction
             */
            dispatchTransaction(transaction) {
                if (this.isCapturingTransaction) {
                    if (!this.capturedTransaction) {
                        this.capturedTransaction = transaction;
                        return;
                    }
                    transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });
                    return;
                }
                const state = this.state.apply(transaction);
                const selectionHasChanged = !this.state.selection.eq(state.selection);
                this.view.updateState(state);
                this.emit('transaction', {
                    editor: this,
                    transaction,
                });
                if (selectionHasChanged) {
                    this.emit('selectionUpdate', {
                        editor: this,
                        transaction,
                    });
                }
                const focus = transaction.getMeta('focus');
                const blur = transaction.getMeta('blur');
                if (focus) {
                    this.emit('focus', {
                        editor: this,
                        event: focus.event,
                        transaction,
                    });
                }
                if (blur) {
                    this.emit('blur', {
                        editor: this,
                        event: blur.event,
                        transaction,
                    });
                }
                if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {
                    return;
                }
                this.emit('update', {
                    editor: this,
                    transaction,
                });
            }
            /**
             * Get attributes of the currently selected node or mark.
             */
            getAttributes(nameOrType) {
                return getAttributes(this.state, nameOrType);
            }
            isActive(nameOrAttributes, attributesOrUndefined) {
                const name = typeof nameOrAttributes === 'string'
                    ? nameOrAttributes
                    : null;
                const attributes = typeof nameOrAttributes === 'string'
                    ? attributesOrUndefined
                    : nameOrAttributes;
                return isActive(this.state, name, attributes);
            }
            /**
             * Get the document as JSON.
             */
            getJSON() {
                return this.state.doc.toJSON();
            }
            /**
             * Get the document as HTML.
             */
            getHTML() {
                return getHTMLFromFragment(this.state.doc.content, this.schema);
            }
            /**
             * Get the document as text.
             */
            getText(options) {
                const { blockSeparator = '\n\n', textSerializers = {}, } = options || {};
                return getText(this.state.doc, {
                    blockSeparator,
                    textSerializers: {
                        ...textSerializers,
                        ...getTextSerializersFromSchema(this.schema),
                    },
                });
            }
            /**
             * Check if there is no content.
             */
            get isEmpty() {
                return isNodeEmpty(this.state.doc);
            }
            /**
             * Get the number of characters for the current document.
             *
             * @deprecated
             */
            getCharacterCount() {
                console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.');
                return this.state.doc.content.size - 2;
            }
            /**
             * Destroy the editor.
             */
            destroy() {
                this.emit('destroy');
                if (this.view) {
                    this.view.destroy();
                }
                this.removeAllListeners();
            }
            /**
             * Check if the editor is already destroyed.
             */
            get isDestroyed() {
                var _a;
                // @ts-ignore
                return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);
            }
        }

        /**
         * Returns a new `Transform` based on all steps of the passed transactions.
         */
        function combineTransactionSteps(oldDoc, transactions) {
            const transform = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.Transform(oldDoc);
            transactions.forEach(transaction => {
                transaction.steps.forEach(step => {
                    transform.step(step);
                });
            });
            return transform;
        }

        function findChildren(node, predicate) {
            const nodesWithPos = [];
            node.descendants((child, pos) => {
                if (predicate(child)) {
                    nodesWithPos.push({
                        node: child,
                        pos,
                    });
                }
            });
            return nodesWithPos;
        }

        /**
         * Same as `findChildren` but searches only within a `range`.
         */
        function findChildrenInRange(node, range, predicate) {
            const nodesWithPos = [];
            // if (range.from === range.to) {
            //   const nodeAt = node.nodeAt(range.from)
            //   if (nodeAt) {
            //     nodesWithPos.push({
            //       node: nodeAt,
            //       pos: range.from,
            //     })
            //   }
            // }
            node.nodesBetween(range.from, range.to, (child, pos) => {
                if (predicate(child)) {
                    nodesWithPos.push({
                        node: child,
                        pos,
                    });
                }
            });
            return nodesWithPos;
        }

        function getSchema(extensions) {
            const resolvedExtensions = ExtensionManager.resolve(extensions);
            return getSchemaByResolvedExtensions(resolvedExtensions);
        }

        function generateHTML(doc, extensions) {
            const schema = getSchema(extensions);
            const contentNode = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node.fromJSON(schema, doc);
            return getHTMLFromFragment(contentNode.content, schema);
        }

        function generateJSON(html, extensions) {
            const schema = getSchema(extensions);
            const dom = elementFromString(html);
            return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(schema)
                .parse(dom)
                .toJSON();
        }

        function generateText(doc, extensions, options) {
            const { blockSeparator = '\n\n', textSerializers = {}, } = options || {};
            const schema = getSchema(extensions);
            const contentNode = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node.fromJSON(schema, doc);
            return getText(contentNode, {
                blockSeparator,
                textSerializers: {
                    ...textSerializers,
                    ...getTextSerializersFromSchema(schema),
                },
            });
        }

        /**
         * Removes duplicated values within an array.
         * Supports numbers, strings and objects.
         */
        function removeDuplicates(array, by = JSON.stringify) {
            const seen = {};
            return array.filter(item => {
                const key = by(item);
                return Object.prototype.hasOwnProperty.call(seen, key)
                    ? false
                    : (seen[key] = true);
            });
        }

        /**
         * Removes duplicated ranges and ranges that are
         * fully captured by other ranges.
         */
        function simplifyChangedRanges(changes) {
            const uniqueChanges = removeDuplicates(changes);
            return uniqueChanges.length === 1
                ? uniqueChanges
                : uniqueChanges.filter((change, index) => {
                    const rest = uniqueChanges.filter((_, i) => i !== index);
                    return !rest.some(otherChange => {
                        return change.oldRange.from >= otherChange.oldRange.from
                            && change.oldRange.to <= otherChange.oldRange.to
                            && change.newRange.from >= otherChange.newRange.from
                            && change.newRange.to <= otherChange.newRange.to;
                    });
                });
        }
        /**
         * Returns a list of changed ranges
         * based on the first and last state of all steps.
         */
        function getChangedRanges(transform) {
            const { mapping, steps } = transform;
            const changes = [];
            mapping.maps.forEach((stepMap, index) => {
                const ranges = [];
                // This accounts for step changes where no range was actually altered
                // e.g. when setting a mark, node attribute, etc.
                // @ts-ignore
                if (!stepMap.ranges.length) {
                    const { from, to } = steps[index];
                    if (from === undefined || to === undefined) {
                        return;
                    }
                    ranges.push({ from, to });
                }
                else {
                    stepMap.forEach((from, to) => {
                        ranges.push({ from, to });
                    });
                }
                ranges.forEach(({ from, to }) => {
                    const newStart = mapping.slice(index).map(from, -1);
                    const newEnd = mapping.slice(index).map(to);
                    const oldStart = mapping.invert().map(newStart, -1);
                    const oldEnd = mapping.invert().map(newEnd);
                    changes.push({
                        oldRange: {
                            from: oldStart,
                            to: oldEnd,
                        },
                        newRange: {
                            from: newStart,
                            to: newEnd,
                        },
                    });
                });
            });
            return simplifyChangedRanges(changes);
        }

        function getDebugJSON(node, startOffset = 0) {
            const isTopNode = node.type === node.type.schema.topNodeType;
            const increment = isTopNode ? 0 : 1;
            const from = startOffset;
            const to = from + node.nodeSize;
            const marks = node.marks.map(mark => {
                const output = {
                    type: mark.type.name,
                };
                if (Object.keys(mark.attrs).length) {
                    output.attrs = { ...mark.attrs };
                }
                return output;
            });
            const attrs = { ...node.attrs };
            const output = {
                type: node.type.name,
                from,
                to,
            };
            if (Object.keys(attrs).length) {
                output.attrs = attrs;
            }
            if (marks.length) {
                output.marks = marks;
            }
            if (node.content.childCount) {
                output.content = [];
                node.forEach((child, offset) => {
                    var _a;
                    (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));
                });
            }
            if (node.text) {
                output.text = node.text;
            }
            return output;
        }

        function getMarksBetween(from, to, doc) {
            const marks = [];
            // get all inclusive marks on empty selection
            if (from === to) {
                doc
                    .resolve(from)
                    .marks()
                    .forEach(mark => {
                        const $pos = doc.resolve(from - 1);
                        const range = getMarkRange($pos, mark.type);
                        if (!range) {
                            return;
                        }
                        marks.push({
                            mark,
                            ...range,
                        });
                    });
            }
            else {
                doc.nodesBetween(from, to, (node, pos) => {
                    marks.push(...node.marks.map(mark => ({
                        from: pos,
                        to: pos + node.nodeSize,
                        mark,
                    })));
                });
            }
            return marks;
        }

        function isNodeSelection(value) {
            return value instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection;
        }

        function posToDOMRect(view, from, to) {
            const minPos = 0;
            const maxPos = view.state.doc.content.size;
            const resolvedFrom = minMax(from, minPos, maxPos);
            const resolvedEnd = minMax(to, minPos, maxPos);
            const start = view.coordsAtPos(resolvedFrom);
            const end = view.coordsAtPos(resolvedEnd, -1);
            const top = Math.min(start.top, end.top);
            const bottom = Math.max(start.bottom, end.bottom);
            const left = Math.min(start.left, end.left);
            const right = Math.max(start.right, end.right);
            const width = right - left;
            const height = bottom - top;
            const x = left;
            const y = top;
            const data = {
                top,
                bottom,
                left,
                right,
                width,
                height,
                x,
                y,
            };
            return {
                ...data,
                toJSON: () => data,
            };
        }

        /**
         * Build an input rule that adds a mark when the
         * matched text is typed into it.
         */
        function markInputRule(config) {
            return new InputRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    const attributes = callOrReturn(config.getAttributes, undefined, match);
                    if (attributes === false || attributes === null) {
                        return null;
                    }
                    const { tr } = state;
                    const captureGroup = match[match.length - 1];
                    const fullMatch = match[0];
                    let markEnd = range.to;
                    if (captureGroup) {
                        const startSpaces = fullMatch.search(/\S/);
                        const textStart = range.from + fullMatch.indexOf(captureGroup);
                        const textEnd = textStart + captureGroup.length;
                        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                            .filter(item => {
                                // @ts-ignore
                                const excluded = item.mark.type.excluded;
                                return excluded.find(type => type === config.type && type !== item.mark.type);
                            })
                            .filter(item => item.to > textStart);
                        if (excludedMarks.length) {
                            return null;
                        }
                        if (textEnd < range.to) {
                            tr.delete(textEnd, range.to);
                        }
                        if (textStart > range.from) {
                            tr.delete(range.from + startSpaces, textStart);
                        }
                        markEnd = range.from + startSpaces + captureGroup.length;
                        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                        tr.removeStoredMark(config.type);
                    }
                },
            });
        }

        /**
         * Build an input rule that adds a node when the
         * matched text is typed into it.
         */
        function nodeInputRule(config) {
            return new InputRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                    const { tr } = state;
                    const start = range.from;
                    let end = range.to;
                    if (match[1]) {
                        const offset = match[0].lastIndexOf(match[1]);
                        let matchStart = start + offset;
                        if (matchStart > end) {
                            matchStart = end;
                        }
                        else {
                            end = matchStart + match[1].length;
                        }
                        // insert last typed character
                        const lastChar = match[0][match[0].length - 1];
                        tr.insertText(lastChar, start + match[0].length - 1);
                        // insert node from input rule
                        tr.replaceWith(matchStart, end, config.type.create(attributes));
                    }
                    else if (match[0]) {
                        tr.replaceWith(start, end, config.type.create(attributes));
                    }
                },
            });
        }

        /**
         * Build an input rule that changes the type of a textblock when the
         * matched text is typed into it. When using a regular expresion you’ll
         * probably want the regexp to start with `^`, so that the pattern can
         * only occur at the start of a textblock.
         */
        function textblockTypeInputRule(config) {
            return new InputRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    const $start = state.doc.resolve(range.from);
                    const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {
                        return null;
                    }
                    state.tr
                        .delete(range.from, range.to)
                        .setBlockType(range.from, range.from, config.type, attributes);
                },
            });
        }

        /**
         * Build an input rule that replaces text when the
         * matched text is typed into it.
         */
        function textInputRule(config) {
            return new InputRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    let insert = config.replace;
                    let start = range.from;
                    const end = range.to;
                    if (match[1]) {
                        const offset = match[0].lastIndexOf(match[1]);
                        insert += match[0].slice(offset + match[1].length);
                        start += offset;
                        const cutOff = start - end;
                        if (cutOff > 0) {
                            insert = match[0].slice(offset - cutOff, offset) + insert;
                            start = end;
                        }
                    }
                    state.tr.insertText(insert, start, end);
                },
            });
        }

        /**
         * Build an input rule for automatically wrapping a textblock when a
         * given string is typed. When using a regular expresion you’ll
         * probably want the regexp to start with `^`, so that the pattern can
         * only occur at the start of a textblock.
         *
         * `type` is the type of node to wrap in.
         *
         * By default, if there’s a node with the same type above the newly
         * wrapped node, the rule will try to join those
         * two nodes. You can pass a join predicate, which takes a regular
         * expression match and the node before the wrapped node, and can
         * return a boolean to indicate whether a join should happen.
         */
        function wrappingInputRule(config) {
            return new InputRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                    const tr = state.tr.delete(range.from, range.to);
                    const $start = tr.doc.resolve(range.from);
                    const blockRange = $start.blockRange();
                    const wrapping = blockRange && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.findWrapping)(blockRange, config.type, attributes);
                    if (!wrapping) {
                        return null;
                    }
                    tr.wrap(blockRange, wrapping);
                    const before = tr.doc.resolve(range.from - 1).nodeBefore;
                    if (before
                        && before.type === config.type
                        && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.canJoin)(tr.doc, range.from - 1)
                        && (!config.joinPredicate || config.joinPredicate(match, before))) {
                        tr.join(range.from - 1);
                    }
                },
            });
        }

        class Mark {
            constructor(config = {}) {
                this.type = 'mark';
                this.name = 'mark';
                this.parent = null;
                this.child = null;
                this.config = {
                    name: this.name,
                    defaultOptions: {},
                };
                this.config = {
                    ...this.config,
                    ...config,
                };
                this.name = this.config.name;
                if (config.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
                }
                // TODO: remove `addOptions` fallback
                this.options = this.config.defaultOptions;
                if (this.config.addOptions) {
                    this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                        name: this.name,
                    }));
                }
                this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                    name: this.name,
                    options: this.options,
                })) || {};
            }
            static create(config = {}) {
                return new Mark(config);
            }
            configure(options = {}) {
                // return a new instance so we can use the same extension
                // with different calls of `configure`
                const extension = this.extend();
                extension.options = mergeDeep(this.options, options);
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
            extend(extendedConfig = {}) {
                const extension = new Mark(extendedConfig);
                extension.parent = this;
                this.child = extension;
                extension.name = extendedConfig.name
                    ? extendedConfig.name
                    : extension.parent.name;
                if (extendedConfig.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
                }
                extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                    name: extension.name,
                }));
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
            static handleExit({ editor, mark, }) {
                const { tr } = editor.state;
                const currentPos = editor.state.selection.$from;
                const isAtEnd = currentPos.pos === currentPos.end();
                if (isAtEnd) {
                    const currentMarks = currentPos.marks();
                    const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
                    if (!isInMark) {
                        return false;
                    }
                    const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
                    if (removeMark) {
                        tr.removeStoredMark(removeMark);
                    }
                    tr.insertText(' ', currentPos.pos);
                    editor.view.dispatch(tr);
                    return true;
                }
                return false;
            }
        }

        class Node {
            constructor(config = {}) {
                this.type = 'node';
                this.name = 'node';
                this.parent = null;
                this.child = null;
                this.config = {
                    name: this.name,
                    defaultOptions: {},
                };
                this.config = {
                    ...this.config,
                    ...config,
                };
                this.name = this.config.name;
                if (config.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
                }
                // TODO: remove `addOptions` fallback
                this.options = this.config.defaultOptions;
                if (this.config.addOptions) {
                    this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                        name: this.name,
                    }));
                }
                this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                    name: this.name,
                    options: this.options,
                })) || {};
            }
            static create(config = {}) {
                return new Node(config);
            }
            configure(options = {}) {
                // return a new instance so we can use the same extension
                // with different calls of `configure`
                const extension = this.extend();
                extension.options = mergeDeep(this.options, options);
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
            extend(extendedConfig = {}) {
                const extension = new Node(extendedConfig);
                extension.parent = this;
                this.child = extension;
                extension.name = extendedConfig.name
                    ? extendedConfig.name
                    : extension.parent.name;
                if (extendedConfig.defaultOptions) {
                    console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
                }
                extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                    name: extension.name,
                }));
                extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                    name: extension.name,
                    options: extension.options,
                }));
                return extension;
            }
        }

        class NodeView {
            constructor(component, props, options) {
                this.isDragging = false;
                this.component = component;
                this.editor = props.editor;
                this.options = {
                    stopEvent: null,
                    ignoreMutation: null,
                    ...options,
                };
                this.extension = props.extension;
                this.node = props.node;
                this.decorations = props.decorations;
                this.getPos = props.getPos;
                this.mount();
            }
            mount() {
                // eslint-disable-next-line
                return;
            }
            get dom() {
                return this.editor.view.dom;
            }
            get contentDOM() {
                return null;
            }
            onDragStart(event) {
                var _a, _b, _c, _d, _e, _f, _g;
                const { view } = this.editor;
                const target = event.target;
                // get the drag handle element
                // `closest` is not available for text nodes so we may have to use its parent
                const dragHandle = target.nodeType === 3
                    ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]')
                    : target.closest('[data-drag-handle]');
                if (!this.dom
                    || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target))
                    || !dragHandle) {
                    return;
                }
                let x = 0;
                let y = 0;
                // calculate offset for drag element if we use a different drag handle element
                if (this.dom !== dragHandle) {
                    const domBox = this.dom.getBoundingClientRect();
                    const handleBox = dragHandle.getBoundingClientRect();
                    // In React, we have to go through nativeEvent to reach offsetX/offsetY.
                    const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;
                    const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;
                    x = handleBox.x - domBox.x + offsetX;
                    y = handleBox.y - domBox.y + offsetY;
                }
                (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);
                // we need to tell ProseMirror that we want to move the whole node
                // so we create a NodeSelection
                const selection = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, this.getPos());
                const transaction = view.state.tr.setSelection(selection);
                view.dispatch(transaction);
            }
            stopEvent(event) {
                var _a;
                if (!this.dom) {
                    return false;
                }
                if (typeof this.options.stopEvent === 'function') {
                    return this.options.stopEvent({ event });
                }
                const target = event.target;
                const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));
                // any event from child nodes should be handled by ProseMirror
                if (!isInElement) {
                    return false;
                }
                const isDropEvent = event.type === 'drop';
                const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)
                    || target.isContentEditable;
                // any input event within node views should be ignored by ProseMirror
                if (isInput && !isDropEvent) {
                    return true;
                }
                const { isEditable } = this.editor;
                const { isDragging } = this;
                const isDraggable = !!this.node.type.spec.draggable;
                const isSelectable = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(this.node);
                const isCopyEvent = event.type === 'copy';
                const isPasteEvent = event.type === 'paste';
                const isCutEvent = event.type === 'cut';
                const isClickEvent = event.type === 'mousedown';
                const isDragEvent = event.type.startsWith('drag');
                // ProseMirror tries to drag selectable nodes
                // even if `draggable` is set to `false`
                // this fix prevents that
                if (!isDraggable && isSelectable && isDragEvent) {
                    event.preventDefault();
                }
                if (isDraggable && isDragEvent && !isDragging) {
                    event.preventDefault();
                    return false;
                }
                // we have to store that dragging started
                if (isDraggable && isEditable && !isDragging && isClickEvent) {
                    const dragHandle = target.closest('[data-drag-handle]');
                    const isValidDragHandle = dragHandle
                        && (this.dom === dragHandle || (this.dom.contains(dragHandle)));
                    if (isValidDragHandle) {
                        this.isDragging = true;
                        document.addEventListener('dragend', () => {
                            this.isDragging = false;
                        }, { once: true });
                        document.addEventListener('mouseup', () => {
                            this.isDragging = false;
                        }, { once: true });
                    }
                }
                // these events are handled by prosemirror
                if (isDragging
                    || isDropEvent
                    || isCopyEvent
                    || isPasteEvent
                    || isCutEvent
                    || (isClickEvent && isSelectable)) {
                    return false;
                }
                return true;
            }
            ignoreMutation(mutation) {
                if (!this.dom || !this.contentDOM) {
                    return true;
                }
                if (typeof this.options.ignoreMutation === 'function') {
                    return this.options.ignoreMutation({ mutation });
                }
                // a leaf/atom node is like a black box for ProseMirror
                // and should be fully handled by the node view
                if (this.node.isLeaf || this.node.isAtom) {
                    return true;
                }
                // ProseMirror should handle any selections
                if (mutation.type === 'selection') {
                    return false;
                }
                // try to prevent a bug on iOS that will break node views on enter
                // this is because ProseMirror can’t preventDispatch on enter
                // this will lead to a re-render of the node view on enter
                // see: https://github.com/ueberdosis/tiptap/issues/1214
                if (this.dom.contains(mutation.target)
                    && mutation.type === 'childList'
                    && isiOS()
                    && this.editor.isFocused) {
                    const changedNodes = [
                        ...Array.from(mutation.addedNodes),
                        ...Array.from(mutation.removedNodes),
                    ];
                    // we’ll check if every changed node is contentEditable
                    // to make sure it’s probably mutated by ProseMirror
                    if (changedNodes.every(node => node.isContentEditable)) {
                        return false;
                    }
                }
                // we will allow mutation contentDOM with attributes
                // so we can for example adding classes within our node view
                if (this.contentDOM === mutation.target && mutation.type === 'attributes') {
                    return true;
                }
                // ProseMirror should handle any changes within contentDOM
                if (this.contentDOM.contains(mutation.target)) {
                    return false;
                }
                return true;
            }
            updateAttributes(attributes) {
                this.editor.commands.command(({ tr }) => {
                    const pos = this.getPos();
                    tr.setNodeMarkup(pos, undefined, {
                        ...this.node.attrs,
                        ...attributes,
                    });
                    return true;
                });
            }
            deleteNode() {
                const from = this.getPos();
                const to = from + this.node.nodeSize;
                this.editor.commands.deleteRange({ from, to });
            }
        }

        /**
         * Build an paste rule that adds a mark when the
         * matched text is pasted into it.
         */
        function markPasteRule(config) {
            return new PasteRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    const attributes = callOrReturn(config.getAttributes, undefined, match);
                    if (attributes === false || attributes === null) {
                        return null;
                    }
                    const { tr } = state;
                    const captureGroup = match[match.length - 1];
                    const fullMatch = match[0];
                    let markEnd = range.to;
                    if (captureGroup) {
                        const startSpaces = fullMatch.search(/\S/);
                        const textStart = range.from + fullMatch.indexOf(captureGroup);
                        const textEnd = textStart + captureGroup.length;
                        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                            .filter(item => {
                                // @ts-ignore
                                const excluded = item.mark.type.excluded;
                                return excluded.find(type => type === config.type && type !== item.mark.type);
                            })
                            .filter(item => item.to > textStart);
                        if (excludedMarks.length) {
                            return null;
                        }
                        if (textEnd < range.to) {
                            tr.delete(textEnd, range.to);
                        }
                        if (textStart > range.from) {
                            tr.delete(range.from + startSpaces, textStart);
                        }
                        markEnd = range.from + startSpaces + captureGroup.length;
                        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                        tr.removeStoredMark(config.type);
                    }
                },
            });
        }

// source: https://stackoverflow.com/a/6969486
        function escapeForRegEx(string) {
            return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        /**
         * Build an paste rule that adds a node when the
         * matched text is pasted into it.
         */
        function nodePasteRule(config) {
            return new PasteRule({
                find: config.find,
                handler({ match, chain, range }) {
                    const attributes = callOrReturn(config.getAttributes, undefined, match);
                    if (attributes === false || attributes === null) {
                        return null;
                    }
                    if (match.input) {
                        chain()
                            .deleteRange(range)
                            .insertContentAt(range.from, {
                                type: config.type.name,
                                attrs: attributes,
                            });
                    }
                },
            });
        }

        /**
         * Build an paste rule that replaces text when the
         * matched text is pasted into it.
         */
        function textPasteRule(config) {
            return new PasteRule({
                find: config.find,
                handler: ({ state, range, match }) => {
                    let insert = config.replace;
                    let start = range.from;
                    const end = range.to;
                    if (match[1]) {
                        const offset = match[0].lastIndexOf(match[1]);
                        insert += match[0].slice(offset + match[1].length);
                        start += offset;
                        const cutOff = start - end;
                        if (cutOff > 0) {
                            insert = match[0].slice(offset - cutOff, offset) + insert;
                            start = end;
                        }
                    }
                    state.tr.insertText(insert, start, end);
                },
            });
        }

        class Tracker {
            constructor(transaction) {
                this.transaction = transaction;
                this.currentStep = this.transaction.steps.length;
            }
            map(position) {
                let deleted = false;
                const mappedPosition = this.transaction.steps
                    .slice(this.currentStep)
                    .reduce((newPosition, step) => {
                        const mapResult = step
                            .getMap()
                            .mapResult(newPosition);
                        if (mapResult.deleted) {
                            deleted = true;
                        }
                        return mapResult.pos;
                    }, position);
                return {
                    position: mappedPosition,
                    deleted,
                };
            }
        }


//# sourceMappingURL=tiptap-core.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-blockquote/dist/tiptap-extension-blockquote.esm.js":
    /*!*******************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-blockquote/dist/tiptap-extension-blockquote.esm.js ***!
  \*******************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Blockquote": () => (/* binding */ Blockquote),
            /* harmony export */   "default": () => (/* binding */ Blockquote),
            /* harmony export */   "inputRegex": () => (/* binding */ inputRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const inputRegex = /^\s*>\s$/;
        const Blockquote = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'blockquote',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            content: 'block+',
            group: 'block',
            defining: true,
            parseHTML() {
                return [
                    { tag: 'blockquote' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['blockquote', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setBlockquote: () => ({ commands }) => {
                        return commands.wrapIn(this.name);
                    },
                    toggleBlockquote: () => ({ commands }) => {
                        return commands.toggleWrap(this.name);
                    },
                    unsetBlockquote: () => ({ commands }) => {
                        return commands.lift(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({
                        find: inputRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-blockquote.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-bold/dist/tiptap-extension-bold.esm.js":
    /*!*******************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/tiptap-extension-bold.esm.js ***!
  \*******************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Bold": () => (/* binding */ Bold),
            /* harmony export */   "default": () => (/* binding */ Bold),
            /* harmony export */   "starInputRegex": () => (/* binding */ starInputRegex),
            /* harmony export */   "starPasteRegex": () => (/* binding */ starPasteRegex),
            /* harmony export */   "underscoreInputRegex": () => (/* binding */ underscoreInputRegex),
            /* harmony export */   "underscorePasteRegex": () => (/* binding */ underscorePasteRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const starInputRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/;
        const starPasteRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g;
        const underscoreInputRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/;
        const underscorePasteRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g;
        const Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({
            name: 'bold',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            parseHTML() {
                return [
                    {
                        tag: 'strong',
                    },
                    {
                        tag: 'b',
                        getAttrs: node => node.style.fontWeight !== 'normal' && null,
                    },
                    {
                        style: 'font-weight',
                        getAttrs: value => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null,
                    },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['strong', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setBold: () => ({ commands }) => {
                        return commands.setMark(this.name);
                    },
                    toggleBold: () => ({ commands }) => {
                        return commands.toggleMark(this.name);
                    },
                    unsetBold: () => ({ commands }) => {
                        return commands.unsetMark(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-b': () => this.editor.commands.toggleBold(),
                    'Mod-B': () => this.editor.commands.toggleBold(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: starInputRegex,
                        type: this.type,
                    }),
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: underscoreInputRegex,
                        type: this.type,
                    }),
                ];
            },
            addPasteRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: starPasteRegex,
                        type: this.type,
                    }),
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: underscorePasteRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-bold.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-bullet-list/dist/tiptap-extension-bullet-list.esm.js":
    /*!*********************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bullet-list/dist/tiptap-extension-bullet-list.esm.js ***!
  \*********************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "BulletList": () => (/* binding */ BulletList),
            /* harmony export */   "default": () => (/* binding */ BulletList),
            /* harmony export */   "inputRegex": () => (/* binding */ inputRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const inputRegex = /^\s*([-+*])\s$/;
        const BulletList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'bulletList',
            addOptions() {
                return {
                    itemTypeName: 'listItem',
                    HTMLAttributes: {},
                };
            },
            group: 'block list',
            content() {
                return `${this.options.itemTypeName}+`;
            },
            parseHTML() {
                return [
                    { tag: 'ul' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['ul', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    toggleBulletList: () => ({ commands }) => {
                        return commands.toggleList(this.name, this.options.itemTypeName);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({
                        find: inputRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-bullet-list.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-code-block/dist/tiptap-extension-code-block.esm.js":
    /*!*******************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-code-block/dist/tiptap-extension-code-block.esm.js ***!
  \*******************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "CodeBlock": () => (/* binding */ CodeBlock),
            /* harmony export */   "backtickInputRegex": () => (/* binding */ backtickInputRegex),
            /* harmony export */   "default": () => (/* binding */ CodeBlock),
            /* harmony export */   "tildeInputRegex": () => (/* binding */ tildeInputRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");



        const backtickInputRegex = /^```([a-z]+)?[\s\n]$/;
        const tildeInputRegex = /^~~~([a-z]+)?[\s\n]$/;
        const CodeBlock = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'codeBlock',
            addOptions() {
                return {
                    languageClassPrefix: 'language-',
                    exitOnTripleEnter: true,
                    exitOnArrowDown: true,
                    HTMLAttributes: {},
                };
            },
            content: 'text*',
            marks: '',
            group: 'block',
            code: true,
            defining: true,
            addAttributes() {
                return {
                    language: {
                        default: null,
                        parseHTML: element => {
                            var _a;
                            const { languageClassPrefix } = this.options;
                            const classNames = [...((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []];
                            const languages = classNames
                                .filter(className => className.startsWith(languageClassPrefix))
                                .map(className => className.replace(languageClassPrefix, ''));
                            const language = languages[0];
                            if (!language) {
                                return null;
                            }
                            return language;
                        },
                        rendered: false,
                    },
                };
            },
            parseHTML() {
                return [
                    {
                        tag: 'pre',
                        preserveWhitespace: 'full',
                    },
                ];
            },
            renderHTML({ node, HTMLAttributes }) {
                return [
                    'pre',
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),
                    [
                        'code',
                        {
                            class: node.attrs.language
                                ? this.options.languageClassPrefix + node.attrs.language
                                : null,
                        },
                        0,
                    ],
                ];
            },
            addCommands() {
                return {
                    setCodeBlock: attributes => ({ commands }) => {
                        return commands.setNode(this.name, attributes);
                    },
                    toggleCodeBlock: attributes => ({ commands }) => {
                        return commands.toggleNode(this.name, 'paragraph', attributes);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),
                    // remove code block when at start of document or code block is empty
                    Backspace: () => {
                        const { empty, $anchor } = this.editor.state.selection;
                        const isAtStart = $anchor.pos === 1;
                        if (!empty || $anchor.parent.type.name !== this.name) {
                            return false;
                        }
                        if (isAtStart || !$anchor.parent.textContent.length) {
                            return this.editor.commands.clearNodes();
                        }
                        return false;
                    },
                    // exit node on triple enter
                    Enter: ({ editor }) => {
                        if (!this.options.exitOnTripleEnter) {
                            return false;
                        }
                        const { state } = editor;
                        const { selection } = state;
                        const { $from, empty } = selection;
                        if (!empty || $from.parent.type !== this.type) {
                            return false;
                        }
                        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\n\n');
                        if (!isAtEnd || !endsWithDoubleNewline) {
                            return false;
                        }
                        return editor
                            .chain()
                            .command(({ tr }) => {
                                tr.delete($from.pos - 2, $from.pos);
                                return true;
                            })
                            .exitCode()
                            .run();
                    },
                    // exit node on arrow down
                    ArrowDown: ({ editor }) => {
                        if (!this.options.exitOnArrowDown) {
                            return false;
                        }
                        const { state } = editor;
                        const { selection, doc } = state;
                        const { $from, empty } = selection;
                        if (!empty || $from.parent.type !== this.type) {
                            return false;
                        }
                        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                        if (!isAtEnd) {
                            return false;
                        }
                        const after = $from.after();
                        if (after === undefined) {
                            return false;
                        }
                        const nodeAfter = doc.nodeAt(after);
                        if (nodeAfter) {
                            return false;
                        }
                        return editor.commands.exitCode();
                    },
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({
                        find: backtickInputRegex,
                        type: this.type,
                        getAttributes: match => ({
                            language: match[1],
                        }),
                    }),
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({
                        find: tildeInputRegex,
                        type: this.type,
                        getAttributes: match => ({
                            language: match[1],
                        }),
                    }),
                ];
            },
            addProseMirrorPlugins() {
                return [
                    // this plugin creates a code block for pasted content from VS Code
                    // we can also detect the copied code language
                    new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({
                        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('codeBlockVSCodeHandler'),
                        props: {
                            handlePaste: (view, event) => {
                                if (!event.clipboardData) {
                                    return false;
                                }
                                // don’t create a new code block within code blocks
                                if (this.editor.isActive(this.type.name)) {
                                    return false;
                                }
                                const text = event.clipboardData.getData('text/plain');
                                const vscode = event.clipboardData.getData('vscode-editor-data');
                                const vscodeData = vscode
                                    ? JSON.parse(vscode)
                                    : undefined;
                                const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;
                                if (!text || !language) {
                                    return false;
                                }
                                const { tr } = view.state;
                                // create an empty code block
                                tr.replaceSelectionWith(this.type.create({ language }));
                                // put cursor inside the newly created code block
                                tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));
                                // add text to code block
                                // strip carriage return chars from text pasted as code
                                // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd
                                tr.insertText(text.replace(/\r\n?/g, '\n'));
                                // store meta information
                                // this is useful for other plugins that depends on the paste event
                                // like the paste rule plugin
                                tr.setMeta('paste', true);
                                view.dispatch(tr);
                                return true;
                            },
                        },
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-code-block.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-code/dist/tiptap-extension-code.esm.js":
    /*!*******************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/tiptap-extension-code.esm.js ***!
  \*******************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Code": () => (/* binding */ Code),
            /* harmony export */   "default": () => (/* binding */ Code),
            /* harmony export */   "inputRegex": () => (/* binding */ inputRegex),
            /* harmony export */   "pasteRegex": () => (/* binding */ pasteRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const inputRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/;
        const pasteRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/g;
        const Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({
            name: 'code',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            excludes: '_',
            code: true,
            exitable: true,
            parseHTML() {
                return [
                    { tag: 'code' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['code', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setCode: () => ({ commands }) => {
                        return commands.setMark(this.name);
                    },
                    toggleCode: () => ({ commands }) => {
                        return commands.toggleMark(this.name);
                    },
                    unsetCode: () => ({ commands }) => {
                        return commands.unsetMark(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-e': () => this.editor.commands.toggleCode(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: inputRegex,
                        type: this.type,
                    }),
                ];
            },
            addPasteRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: pasteRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-code.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-document/dist/tiptap-extension-document.esm.js":
    /*!***************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-document/dist/tiptap-extension-document.esm.js ***!
  \***************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Document": () => (/* binding */ Document),
            /* harmony export */   "default": () => (/* binding */ Document)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const Document = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'doc',
            topNode: true,
            content: 'block+',
        });


//# sourceMappingURL=tiptap-extension-document.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-dropcursor/dist/tiptap-extension-dropcursor.esm.js":
    /*!*******************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-dropcursor/dist/tiptap-extension-dropcursor.esm.js ***!
  \*******************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Dropcursor": () => (/* binding */ Dropcursor),
            /* harmony export */   "default": () => (/* binding */ Dropcursor)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-dropcursor */ "./node_modules/prosemirror-dropcursor/dist/index.js");



        const Dropcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({
            name: 'dropCursor',
            addOptions() {
                return {
                    color: 'currentColor',
                    width: 1,
                    class: undefined,
                };
            },
            addProseMirrorPlugins() {
                return [
                    (0,prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_1__.dropCursor)(this.options),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-dropcursor.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-gapcursor/dist/tiptap-extension-gapcursor.esm.js":
    /*!*****************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/tiptap-extension-gapcursor.esm.js ***!
  \*****************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Gapcursor": () => (/* binding */ Gapcursor),
            /* harmony export */   "default": () => (/* binding */ Gapcursor)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-gapcursor */ "./node_modules/prosemirror-gapcursor/dist/index.js");



        const Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({
            name: 'gapCursor',
            addProseMirrorPlugins() {
                return [
                    (0,prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_1__.gapCursor)(),
                ];
            },
            extendNodeSchema(extension) {
                var _a;
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                return {
                    allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getExtensionField)(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null,
                };
            },
        });


//# sourceMappingURL=tiptap-extension-gapcursor.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-hard-break/dist/tiptap-extension-hard-break.esm.js":
    /*!*******************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-hard-break/dist/tiptap-extension-hard-break.esm.js ***!
  \*******************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "HardBreak": () => (/* binding */ HardBreak),
            /* harmony export */   "default": () => (/* binding */ HardBreak)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const HardBreak = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'hardBreak',
            addOptions() {
                return {
                    keepMarks: true,
                    HTMLAttributes: {},
                };
            },
            inline: true,
            group: 'inline',
            selectable: false,
            parseHTML() {
                return [
                    { tag: 'br' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['br', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];
            },
            renderText() {
                return '\n';
            },
            addCommands() {
                return {
                    setHardBreak: () => ({ commands, chain, state, editor, }) => {
                        return commands.first([
                            () => commands.exitCode(),
                            () => commands.command(() => {
                                const { selection, storedMarks } = state;
                                if (selection.$from.parent.type.spec.isolating) {
                                    return false;
                                }
                                const { keepMarks } = this.options;
                                const { splittableMarks } = editor.extensionManager;
                                const marks = storedMarks
                                    || (selection.$to.parentOffset && selection.$from.marks());
                                return chain()
                                    .insertContent({ type: this.name })
                                    .command(({ tr, dispatch }) => {
                                        if (dispatch && marks && keepMarks) {
                                            const filteredMarks = marks
                                                .filter(mark => splittableMarks.includes(mark.type.name));
                                            tr.ensureMarks(filteredMarks);
                                        }
                                        return true;
                                    })
                                    .run();
                            }),
                        ]);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Enter': () => this.editor.commands.setHardBreak(),
                    'Shift-Enter': () => this.editor.commands.setHardBreak(),
                };
            },
        });


//# sourceMappingURL=tiptap-extension-hard-break.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-heading/dist/tiptap-extension-heading.esm.js":
    /*!*************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-heading/dist/tiptap-extension-heading.esm.js ***!
  \*************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Heading": () => (/* binding */ Heading),
            /* harmony export */   "default": () => (/* binding */ Heading)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const Heading = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'heading',
            addOptions() {
                return {
                    levels: [1, 2, 3, 4, 5, 6],
                    HTMLAttributes: {},
                };
            },
            content: 'inline*',
            group: 'block',
            defining: true,
            addAttributes() {
                return {
                    level: {
                        default: 1,
                        rendered: false,
                    },
                };
            },
            parseHTML() {
                return this.options.levels
                    .map((level) => ({
                        tag: `h${level}`,
                        attrs: { level },
                    }));
            },
            renderHTML({ node, HTMLAttributes }) {
                const hasLevel = this.options.levels.includes(node.attrs.level);
                const level = hasLevel
                    ? node.attrs.level
                    : this.options.levels[0];
                return [`h${level}`, (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setHeading: attributes => ({ commands }) => {
                        if (!this.options.levels.includes(attributes.level)) {
                            return false;
                        }
                        return commands.setNode(this.name, attributes);
                    },
                    toggleHeading: attributes => ({ commands }) => {
                        if (!this.options.levels.includes(attributes.level)) {
                            return false;
                        }
                        return commands.toggleNode(this.name, 'paragraph', attributes);
                    },
                };
            },
            addKeyboardShortcuts() {
                return this.options.levels.reduce((items, level) => ({
                    ...items,
                    ...{
                        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),
                    },
                }), {});
            },
            addInputRules() {
                return this.options.levels.map(level => {
                    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({
                        find: new RegExp(`^(#{1,${level}})\\s$`),
                        type: this.type,
                        getAttributes: {
                            level,
                        },
                    });
                });
            },
        });


//# sourceMappingURL=tiptap-extension-heading.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-history/dist/tiptap-extension-history.esm.js":
    /*!*************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/tiptap-extension-history.esm.js ***!
  \*************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "History": () => (/* binding */ History),
            /* harmony export */   "default": () => (/* binding */ History)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-history */ "./node_modules/prosemirror-history/dist/index.js");



        const History = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({
            name: 'history',
            addOptions() {
                return {
                    depth: 100,
                    newGroupDelay: 500,
                };
            },
            addCommands() {
                return {
                    undo: () => ({ state, dispatch }) => {
                        return (0,prosemirror_history__WEBPACK_IMPORTED_MODULE_1__.undo)(state, dispatch);
                    },
                    redo: () => ({ state, dispatch }) => {
                        return (0,prosemirror_history__WEBPACK_IMPORTED_MODULE_1__.redo)(state, dispatch);
                    },
                };
            },
            addProseMirrorPlugins() {
                return [
                    (0,prosemirror_history__WEBPACK_IMPORTED_MODULE_1__.history)(this.options),
                ];
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-z': () => this.editor.commands.undo(),
                    'Mod-y': () => this.editor.commands.redo(),
                    'Shift-Mod-z': () => this.editor.commands.redo(),
                    // Russian keyboard layouts
                    'Mod-я': () => this.editor.commands.undo(),
                    'Shift-Mod-я': () => this.editor.commands.redo(),
                };
            },
        });


//# sourceMappingURL=tiptap-extension-history.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-horizontal-rule/dist/tiptap-extension-horizontal-rule.esm.js":
    /*!*****************************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-horizontal-rule/dist/tiptap-extension-horizontal-rule.esm.js ***!
  \*****************************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "HorizontalRule": () => (/* binding */ HorizontalRule),
            /* harmony export */   "default": () => (/* binding */ HorizontalRule)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");



        const HorizontalRule = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'horizontalRule',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            group: 'block',
            parseHTML() {
                return [
                    { tag: 'hr' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['hr', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];
            },
            addCommands() {
                return {
                    setHorizontalRule: () => ({ chain }) => {
                        return chain()
                            .insertContent({ type: this.name })
                            // set cursor after horizontal rule
                            .command(({ tr, dispatch }) => {
                                var _a;
                                if (dispatch) {
                                    const { $to } = tr.selection;
                                    const posAfter = $to.end();
                                    if ($to.nodeAfter) {
                                        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(tr.doc, $to.pos));
                                    }
                                    else {
                                        // add node after horizontal rule if it’s the end of the document
                                        const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();
                                        if (node) {
                                            tr.insert(posAfter, node);
                                            tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(tr.doc, posAfter));
                                        }
                                    }
                                    tr.scrollIntoView();
                                }
                                return true;
                            })
                            .run();
                    },
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.nodeInputRule)({
                        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-horizontal-rule.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-italic/dist/tiptap-extension-italic.esm.js":
    /*!***********************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/tiptap-extension-italic.esm.js ***!
  \***********************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Italic": () => (/* binding */ Italic),
            /* harmony export */   "default": () => (/* binding */ Italic),
            /* harmony export */   "starInputRegex": () => (/* binding */ starInputRegex),
            /* harmony export */   "starPasteRegex": () => (/* binding */ starPasteRegex),
            /* harmony export */   "underscoreInputRegex": () => (/* binding */ underscoreInputRegex),
            /* harmony export */   "underscorePasteRegex": () => (/* binding */ underscorePasteRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const starInputRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/;
        const starPasteRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g;
        const underscoreInputRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/;
        const underscorePasteRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g;
        const Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({
            name: 'italic',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            parseHTML() {
                return [
                    {
                        tag: 'em',
                    },
                    {
                        tag: 'i',
                        getAttrs: node => node.style.fontStyle !== 'normal' && null,
                    },
                    {
                        style: 'font-style=italic',
                    },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['em', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setItalic: () => ({ commands }) => {
                        return commands.setMark(this.name);
                    },
                    toggleItalic: () => ({ commands }) => {
                        return commands.toggleMark(this.name);
                    },
                    unsetItalic: () => ({ commands }) => {
                        return commands.unsetMark(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-i': () => this.editor.commands.toggleItalic(),
                    'Mod-I': () => this.editor.commands.toggleItalic(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: starInputRegex,
                        type: this.type,
                    }),
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: underscoreInputRegex,
                        type: this.type,
                    }),
                ];
            },
            addPasteRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: starPasteRegex,
                        type: this.type,
                    }),
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: underscorePasteRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-italic.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-list-item/dist/tiptap-extension-list-item.esm.js":
    /*!*****************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-list-item/dist/tiptap-extension-list-item.esm.js ***!
  \*****************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "ListItem": () => (/* binding */ ListItem),
            /* harmony export */   "default": () => (/* binding */ ListItem)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'listItem',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            content: 'paragraph block*',
            defining: true,
            parseHTML() {
                return [
                    {
                        tag: 'li',
                    },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addKeyboardShortcuts() {
                return {
                    Enter: () => this.editor.commands.splitListItem(this.name),
                    Tab: () => this.editor.commands.sinkListItem(this.name),
                    'Shift-Tab': () => this.editor.commands.liftListItem(this.name),
                };
            },
        });


//# sourceMappingURL=tiptap-extension-list-item.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-ordered-list/dist/tiptap-extension-ordered-list.esm.js":
    /*!***********************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-ordered-list/dist/tiptap-extension-ordered-list.esm.js ***!
  \***********************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "OrderedList": () => (/* binding */ OrderedList),
            /* harmony export */   "default": () => (/* binding */ OrderedList),
            /* harmony export */   "inputRegex": () => (/* binding */ inputRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const inputRegex = /^(\d+)\.\s$/;
        const OrderedList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'orderedList',
            addOptions() {
                return {
                    itemTypeName: 'listItem',
                    HTMLAttributes: {},
                };
            },
            group: 'block list',
            content() {
                return `${this.options.itemTypeName}+`;
            },
            addAttributes() {
                return {
                    start: {
                        default: 1,
                        parseHTML: element => {
                            return element.hasAttribute('start')
                                ? parseInt(element.getAttribute('start') || '', 10)
                                : 1;
                        },
                    },
                };
            },
            parseHTML() {
                return [
                    {
                        tag: 'ol',
                    },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                const { start, ...attributesWithoutStart } = HTMLAttributes;
                return start === 1
                    ? ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, attributesWithoutStart), 0]
                    : ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    toggleOrderedList: () => ({ commands }) => {
                        return commands.toggleList(this.name, this.options.itemTypeName);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({
                        find: inputRegex,
                        type: this.type,
                        getAttributes: match => ({ start: +match[1] }),
                        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-ordered-list.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-paragraph/dist/tiptap-extension-paragraph.esm.js":
    /*!*****************************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-paragraph/dist/tiptap-extension-paragraph.esm.js ***!
  \*****************************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Paragraph": () => (/* binding */ Paragraph),
            /* harmony export */   "default": () => (/* binding */ Paragraph)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const Paragraph = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'paragraph',
            priority: 1000,
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            group: 'block',
            content: 'inline*',
            parseHTML() {
                return [
                    { tag: 'p' },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['p', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setParagraph: () => ({ commands }) => {
                        return commands.setNode(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Alt-0': () => this.editor.commands.setParagraph(),
                };
            },
        });


//# sourceMappingURL=tiptap-extension-paragraph.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-strike/dist/tiptap-extension-strike.esm.js":
    /*!***********************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/tiptap-extension-strike.esm.js ***!
  \***********************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Strike": () => (/* binding */ Strike),
            /* harmony export */   "default": () => (/* binding */ Strike),
            /* harmony export */   "inputRegex": () => (/* binding */ inputRegex),
            /* harmony export */   "pasteRegex": () => (/* binding */ pasteRegex)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const inputRegex = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/;
        const pasteRegex = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g;
        const Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({
            name: 'strike',
            addOptions() {
                return {
                    HTMLAttributes: {},
                };
            },
            parseHTML() {
                return [
                    {
                        tag: 's',
                    },
                    {
                        tag: 'del',
                    },
                    {
                        tag: 'strike',
                    },
                    {
                        style: 'text-decoration',
                        consuming: false,
                        getAttrs: style => (style.includes('line-through') ? {} : false),
                    },
                ];
            },
            renderHTML({ HTMLAttributes }) {
                return ['s', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];
            },
            addCommands() {
                return {
                    setStrike: () => ({ commands }) => {
                        return commands.setMark(this.name);
                    },
                    toggleStrike: () => ({ commands }) => {
                        return commands.toggleMark(this.name);
                    },
                    unsetStrike: () => ({ commands }) => {
                        return commands.unsetMark(this.name);
                    },
                };
            },
            addKeyboardShortcuts() {
                return {
                    'Mod-Shift-x': () => this.editor.commands.toggleStrike(),
                };
            },
            addInputRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({
                        find: inputRegex,
                        type: this.type,
                    }),
                ];
            },
            addPasteRules() {
                return [
                    (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({
                        find: pasteRegex,
                        type: this.type,
                    }),
                ];
            },
        });


//# sourceMappingURL=tiptap-extension-strike.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/extension-text/dist/tiptap-extension-text.esm.js":
    /*!*******************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/tiptap-extension-text.esm.js ***!
  \*******************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Text": () => (/* binding */ Text),
            /* harmony export */   "default": () => (/* binding */ Text)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");


        const Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({
            name: 'text',
            group: 'inline',
        });


//# sourceMappingURL=tiptap-extension-text.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/starter-kit/dist/tiptap-starter-kit.esm.js":
    /*!*************************************************************************!*\
  !*** ./node_modules/@tiptap/starter-kit/dist/tiptap-starter-kit.esm.js ***!
  \*************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "StarterKit": () => (/* binding */ StarterKit),
            /* harmony export */   "default": () => (/* binding */ StarterKit)
            /* harmony export */ });
        /* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tiptap/core */ "./node_modules/@tiptap/core/dist/tiptap-core.esm.js");
        /* harmony import */ var _tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-blockquote */ "./node_modules/@tiptap/extension-blockquote/dist/tiptap-extension-blockquote.esm.js");
        /* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-bold */ "./node_modules/@tiptap/extension-bold/dist/tiptap-extension-bold.esm.js");
        /* harmony import */ var _tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-bullet-list */ "./node_modules/@tiptap/extension-bullet-list/dist/tiptap-extension-bullet-list.esm.js");
        /* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-code */ "./node_modules/@tiptap/extension-code/dist/tiptap-extension-code.esm.js");
        /* harmony import */ var _tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-code-block */ "./node_modules/@tiptap/extension-code-block/dist/tiptap-extension-code-block.esm.js");
        /* harmony import */ var _tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-document */ "./node_modules/@tiptap/extension-document/dist/tiptap-extension-document.esm.js");
        /* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ "./node_modules/@tiptap/extension-dropcursor/dist/tiptap-extension-dropcursor.esm.js");
        /* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ "./node_modules/@tiptap/extension-gapcursor/dist/tiptap-extension-gapcursor.esm.js");
        /* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-hard-break */ "./node_modules/@tiptap/extension-hard-break/dist/tiptap-extension-hard-break.esm.js");
        /* harmony import */ var _tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-heading */ "./node_modules/@tiptap/extension-heading/dist/tiptap-extension-heading.esm.js");
        /* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-history */ "./node_modules/@tiptap/extension-history/dist/tiptap-extension-history.esm.js");
        /* harmony import */ var _tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-horizontal-rule */ "./node_modules/@tiptap/extension-horizontal-rule/dist/tiptap-extension-horizontal-rule.esm.js");
        /* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-italic */ "./node_modules/@tiptap/extension-italic/dist/tiptap-extension-italic.esm.js");
        /* harmony import */ var _tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-list-item */ "./node_modules/@tiptap/extension-list-item/dist/tiptap-extension-list-item.esm.js");
        /* harmony import */ var _tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-ordered-list */ "./node_modules/@tiptap/extension-ordered-list/dist/tiptap-extension-ordered-list.esm.js");
        /* harmony import */ var _tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-paragraph */ "./node_modules/@tiptap/extension-paragraph/dist/tiptap-extension-paragraph.esm.js");
        /* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-strike */ "./node_modules/@tiptap/extension-strike/dist/tiptap-extension-strike.esm.js");
        /* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/extension-text */ "./node_modules/@tiptap/extension-text/dist/tiptap-extension-text.esm.js");




















        const StarterKit = _tiptap_core__WEBPACK_IMPORTED_MODULE_18__.Extension.create({
            name: 'starterKit',
            addExtensions() {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
                const extensions = [];
                if (this.options.blockquote !== false) {
                    extensions.push(_tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__.Blockquote.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.blockquote));
                }
                if (this.options.bold !== false) {
                    extensions.push(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__.Bold.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.bold));
                }
                if (this.options.bulletList !== false) {
                    extensions.push(_tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__.BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));
                }
                if (this.options.code !== false) {
                    extensions.push(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__.Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));
                }
                if (this.options.codeBlock !== false) {
                    extensions.push(_tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__.CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));
                }
                if (this.options.document !== false) {
                    extensions.push(_tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__.Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));
                }
                if (this.options.dropcursor !== false) {
                    extensions.push(_tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__.Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));
                }
                if (this.options.gapcursor !== false) {
                    extensions.push(_tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__.Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));
                }
                if (this.options.hardBreak !== false) {
                    extensions.push(_tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__.HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));
                }
                if (this.options.heading !== false) {
                    extensions.push(_tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__.Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));
                }
                if (this.options.history !== false) {
                    extensions.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__.History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));
                }
                if (this.options.horizontalRule !== false) {
                    extensions.push(_tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__.HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));
                }
                if (this.options.italic !== false) {
                    extensions.push(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__.Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));
                }
                if (this.options.listItem !== false) {
                    extensions.push(_tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__.ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));
                }
                if (this.options.orderedList !== false) {
                    extensions.push(_tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__.OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));
                }
                if (this.options.paragraph !== false) {
                    extensions.push(_tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__.Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));
                }
                if (this.options.strike !== false) {
                    extensions.push(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__.Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));
                }
                if (this.options.text !== false) {
                    extensions.push(_tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__.Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));
                }
                return extensions;
            },
        });


//# sourceMappingURL=tiptap-starter-kit.esm.js.map


        /***/ }),

    /***/ "./node_modules/axios/index.js":
    /*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

        /***/ }),

    /***/ "./node_modules/axios/lib/adapters/xhr.js":
    /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
        var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
        var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
        var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
        var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
        var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
        var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

        module.exports = function xhrAdapter(config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
                var requestData = config.data;
                var requestHeaders = config.headers;
                var responseType = config.responseType;

                if (utils.isFormData(requestData)) {
                    delete requestHeaders['Content-Type']; // Let the browser set it
                }

                var request = new XMLHttpRequest();

                // HTTP basic authentication
                if (config.auth) {
                    var username = config.auth.username || '';
                    var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
                    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                }

                var fullPath = buildFullPath(config.baseURL, config.url);
                request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                // Set the request timeout in MS
                request.timeout = config.timeout;

                function onloadend() {
                    if (!request) {
                        return;
                    }
                    // Prepare the response
                    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                    var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
                        request.responseText : request.response;
                    var response = {
                        data: responseData,
                        status: request.status,
                        statusText: request.statusText,
                        headers: responseHeaders,
                        config: config,
                        request: request
                    };

                    settle(resolve, reject, response);

                    // Clean up request
                    request = null;
                }

                if ('onloadend' in request) {
                    // Use onloadend if available
                    request.onloadend = onloadend;
                } else {
                    // Listen for ready state to emulate onloadend
                    request.onreadystatechange = function handleLoad() {
                        if (!request || request.readyState !== 4) {
                            return;
                        }

                        // The request errored out and we didn't get a response, this will be
                        // handled by onerror instead
                        // With one exception: request that using file: protocol, most browsers
                        // will return status as 0 even though it's a successful request
                        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                            return;
                        }
                        // readystate handler is calling before onerror or ontimeout handlers,
                        // so we should call onloadend on the next 'tick'
                        setTimeout(onloadend);
                    };
                }

                // Handle browser request cancellation (as opposed to a manual cancellation)
                request.onabort = function handleAbort() {
                    if (!request) {
                        return;
                    }

                    reject(createError('Request aborted', config, 'ECONNABORTED', request));

                    // Clean up request
                    request = null;
                };

                // Handle low level network errors
                request.onerror = function handleError() {
                    // Real errors are hidden from us by the browser
                    // onerror should only fire if it's a network error
                    reject(createError('Network Error', config, null, request));

                    // Clean up request
                    request = null;
                };

                // Handle timeout
                request.ontimeout = function handleTimeout() {
                    var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                    if (config.timeoutErrorMessage) {
                        timeoutErrorMessage = config.timeoutErrorMessage;
                    }
                    reject(createError(
                        timeoutErrorMessage,
                        config,
                        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
                        request));

                    // Clean up request
                    request = null;
                };

                // Add xsrf header
                // This is only done if running in a standard browser environment.
                // Specifically not if we're in a web worker, or react-native.
                if (utils.isStandardBrowserEnv()) {
                    // Add xsrf header
                    var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                        cookies.read(config.xsrfCookieName) :
                        undefined;

                    if (xsrfValue) {
                        requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                }

                // Add headers to the request
                if ('setRequestHeader' in request) {
                    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                            // Remove Content-Type if data is undefined
                            delete requestHeaders[key];
                        } else {
                            // Otherwise add header to the request
                            request.setRequestHeader(key, val);
                        }
                    });
                }

                // Add withCredentials to request if needed
                if (!utils.isUndefined(config.withCredentials)) {
                    request.withCredentials = !!config.withCredentials;
                }

                // Add responseType to request if needed
                if (responseType && responseType !== 'json') {
                    request.responseType = config.responseType;
                }

                // Handle progress if needed
                if (typeof config.onDownloadProgress === 'function') {
                    request.addEventListener('progress', config.onDownloadProgress);
                }

                // Not all browsers support upload events
                if (typeof config.onUploadProgress === 'function' && request.upload) {
                    request.upload.addEventListener('progress', config.onUploadProgress);
                }

                if (config.cancelToken) {
                    // Handle cancellation
                    config.cancelToken.promise.then(function onCanceled(cancel) {
                        if (!request) {
                            return;
                        }

                        request.abort();
                        reject(cancel);
                        // Clean up request
                        request = null;
                    });
                }

                if (!requestData) {
                    requestData = null;
                }

                // Send the request
                request.send(requestData);
            });
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/axios.js":
    /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
        var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
        var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
        var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
        var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context);

            // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context);

            // Copy context to instance
            utils.extend(instance, context);

            return instance;
        }

// Create the default instance to be exported
        var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
        axios.Axios = Axios;

// Factory for creating new instances
        axios.create = function create(instanceConfig) {
            return createInstance(mergeConfig(axios.defaults, instanceConfig));
        };

// Expose Cancel & CancelToken
        axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
        axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
        axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
        axios.all = function all(promises) {
            return Promise.all(promises);
        };
        axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
        axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

        module.exports = axios;

// Allow use of default import syntax in TypeScript
        module.exports["default"] = axios;


        /***/ }),

    /***/ "./node_modules/axios/lib/cancel/Cancel.js":
    /*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
            this.message = message;
        }

        Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;


        /***/ }),

    /***/ "./node_modules/axios/lib/cancel/CancelToken.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
            }

            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
            });

            var token = this;
            executor(function cancel(message) {
                if (token.reason) {
                    // Cancellation has already been requested
                    return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
            });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
                throw this.reason;
            }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
                cancel = c;
            });
            return {
                token: token,
                cancel: cancel
            };
        };

        module.exports = CancelToken;


        /***/ }),

    /***/ "./node_modules/axios/lib/cancel/isCancel.js":
    /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
    /***/ ((module) => {

        "use strict";


        module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/Axios.js":
    /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
        var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
        var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
        var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
        var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

        var validators = validator.validators;
        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
            };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof config === 'string') {
                config = arguments[1] || {};
                config.url = arguments[0];
            } else {
                config = config || {};
            }

            config = mergeConfig(this.defaults, config);

            // Set config.method
            if (config.method) {
                config.method = config.method.toLowerCase();
            } else if (this.defaults.method) {
                config.method = this.defaults.method.toLowerCase();
            } else {
                config.method = 'get';
            }

            var transitional = config.transitional;

            if (transitional !== undefined) {
                validator.assertOptions(transitional, {
                    silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
                    forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
                    clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
                }, false);
            }

            // filter out skipped interceptors
            var requestInterceptorChain = [];
            var synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
                    return;
                }

                synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

                requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
            });

            var responseInterceptorChain = [];
            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
            });

            var promise;

            if (!synchronousRequestInterceptors) {
                var chain = [dispatchRequest, undefined];

                Array.prototype.unshift.apply(chain, requestInterceptorChain);
                chain = chain.concat(responseInterceptorChain);

                promise = Promise.resolve(config);
                while (chain.length) {
                    promise = promise.then(chain.shift(), chain.shift());
                }

                return promise;
            }


            var newConfig = config;
            while (requestInterceptorChain.length) {
                var onFulfilled = requestInterceptorChain.shift();
                var onRejected = requestInterceptorChain.shift();
                try {
                    newConfig = onFulfilled(newConfig);
                } catch (error) {
                    onRejected(error);
                    break;
                }
            }

            try {
                promise = dispatchRequest(newConfig);
            } catch (error) {
                return Promise.reject(error);
            }

            while (responseInterceptorChain.length) {
                promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
            }

            return promise;
        };

        Axios.prototype.getUri = function getUri(config) {
            config = mergeConfig(this.defaults, config);
            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
        };

// Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function(url, config) {
                return this.request(mergeConfig(config || {}, {
                    method: method,
                    url: url,
                    data: (config || {}).data
                }));
            };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function(url, data, config) {
                return this.request(mergeConfig(config || {}, {
                    method: method,
                    url: url,
                    data: data
                }));
            };
        });

        module.exports = Axios;


        /***/ }),

    /***/ "./node_modules/axios/lib/core/InterceptorManager.js":
    /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        function InterceptorManager() {
            this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
            this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected,
                synchronous: options ? options.synchronous : false,
                runWhen: options ? options.runWhen : null
            });
            return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
                this.handlers[id] = null;
            }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                    fn(h);
                }
            });
        };

        module.exports = InterceptorManager;


        /***/ }),

    /***/ "./node_modules/axios/lib/core/buildFullPath.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
        var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         * @returns {string} The combined full path
         */
        module.exports = function buildFullPath(baseURL, requestedURL) {
            if (baseURL && !isAbsoluteURL(requestedURL)) {
                return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/createError.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/dispatchRequest.js":
    /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
        var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
        var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
            }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config);

            // Ensure headers exist
            config.headers = config.headers || {};

            // Transform request data
            config.data = transformData.call(
                config,
                config.data,
                config.headers,
                config.transformRequest
            );

            // Flatten headers
            config.headers = utils.merge(
                config.headers.common || {},
                config.headers[config.method] || {},
                config.headers
            );

            utils.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                function cleanHeaderConfig(method) {
                    delete config.headers[method];
                }
            );

            var adapter = config.adapter || defaults.adapter;

            return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);

                // Transform response data
                response.data = transformData.call(
                    config,
                    response.data,
                    response.headers,
                    config.transformResponse
                );

                return response;
            }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    if (reason && reason.response) {
                        reason.response.data = transformData.call(
                            config,
                            reason.response.data,
                            reason.response.headers,
                            config.transformResponse
                        );
                    }
                }

                return Promise.reject(reason);
            });
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/enhanceError.js":
    /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
                error.code = code;
            }

            error.request = request;
            error.response = response;
            error.isAxiosError = true;

            error.toJSON = function toJSON() {
                return {
                    // Standard
                    message: this.message,
                    name: this.name,
                    // Microsoft
                    description: this.description,
                    number: this.number,
                    // Mozilla
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    // Axios
                    config: this.config,
                    code: this.code
                };
            };
            return error;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/mergeConfig.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         * @returns {Object} New object resulting from merging config2 to config1
         */
        module.exports = function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            var config = {};

            var valueFromConfig2Keys = ['url', 'method', 'data'];
            var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
            var defaultToConfig2Keys = [
                'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
                'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
                'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
                'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
            ];
            var directMergeKeys = ['validateStatus'];

            function getMergedValue(target, source) {
                if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
                    return utils.merge(target, source);
                } else if (utils.isPlainObject(source)) {
                    return utils.merge({}, source);
                } else if (utils.isArray(source)) {
                    return source.slice();
                }
                return source;
            }

            function mergeDeepProperties(prop) {
                if (!utils.isUndefined(config2[prop])) {
                    config[prop] = getMergedValue(config1[prop], config2[prop]);
                } else if (!utils.isUndefined(config1[prop])) {
                    config[prop] = getMergedValue(undefined, config1[prop]);
                }
            }

            utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                if (!utils.isUndefined(config2[prop])) {
                    config[prop] = getMergedValue(undefined, config2[prop]);
                }
            });

            utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

            utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                if (!utils.isUndefined(config2[prop])) {
                    config[prop] = getMergedValue(undefined, config2[prop]);
                } else if (!utils.isUndefined(config1[prop])) {
                    config[prop] = getMergedValue(undefined, config1[prop]);
                }
            });

            utils.forEach(directMergeKeys, function merge(prop) {
                if (prop in config2) {
                    config[prop] = getMergedValue(config1[prop], config2[prop]);
                } else if (prop in config1) {
                    config[prop] = getMergedValue(undefined, config1[prop]);
                }
            });

            var axiosKeys = valueFromConfig2Keys
                .concat(mergeDeepPropertiesKeys)
                .concat(defaultToConfig2Keys)
                .concat(directMergeKeys);

            var otherKeys = Object
                .keys(config1)
                .concat(Object.keys(config2))
                .filter(function filterAxiosKeys(key) {
                    return axiosKeys.indexOf(key) === -1;
                });

            utils.forEach(otherKeys, mergeDeepProperties);

            return config;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/settle.js":
    /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            if (!response.status || !validateStatus || validateStatus(response.status)) {
                resolve(response);
            } else {
                reject(createError(
                    'Request failed with status code ' + response.status,
                    response.config,
                    null,
                    response.request,
                    response
                ));
            }
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/core/transformData.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
            var context = this || defaults;
            /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
                data = fn.call(context, data, headers);
            });

            return data;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/defaults.js":
    /*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
        var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
        var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

        var DEFAULT_CONTENT_TYPE = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };

        function setContentTypeIfUnset(headers, value) {
            if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                headers['Content-Type'] = value;
            }
        }

        function getDefaultAdapter() {
            var adapter;
            if (typeof XMLHttpRequest !== 'undefined') {
                // For browsers use XHR adapter
                adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
            } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                // For node use HTTP adapter
                adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
            }
            return adapter;
        }

        function stringifySafely(rawValue, parser, encoder) {
            if (utils.isString(rawValue)) {
                try {
                    (parser || JSON.parse)(rawValue);
                    return utils.trim(rawValue);
                } catch (e) {
                    if (e.name !== 'SyntaxError') {
                        throw e;
                    }
                }
            }

            return (encoder || JSON.stringify)(rawValue);
        }

        var defaults = {

            transitional: {
                silentJSONParsing: true,
                forcedJSONParsing: true,
                clarifyTimeoutError: false
            },

            adapter: getDefaultAdapter(),

            transformRequest: [function transformRequest(data, headers) {
                normalizeHeaderName(headers, 'Accept');
                normalizeHeaderName(headers, 'Content-Type');

                if (utils.isFormData(data) ||
                    utils.isArrayBuffer(data) ||
                    utils.isBuffer(data) ||
                    utils.isStream(data) ||
                    utils.isFile(data) ||
                    utils.isBlob(data)
                ) {
                    return data;
                }
                if (utils.isArrayBufferView(data)) {
                    return data.buffer;
                }
                if (utils.isURLSearchParams(data)) {
                    setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                    return data.toString();
                }
                if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
                    setContentTypeIfUnset(headers, 'application/json');
                    return stringifySafely(data);
                }
                return data;
            }],

            transformResponse: [function transformResponse(data) {
                var transitional = this.transitional;
                var silentJSONParsing = transitional && transitional.silentJSONParsing;
                var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
                var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

                if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
                    try {
                        return JSON.parse(data);
                    } catch (e) {
                        if (strictJSONParsing) {
                            if (e.name === 'SyntaxError') {
                                throw enhanceError(e, this, 'E_JSON_PARSE');
                            }
                            throw e;
                        }
                    }
                }

                return data;
            }],

            /**
             * A timeout in milliseconds to abort a request. If set to 0 (default) a
             * timeout is not created.
             */
            timeout: 0,

            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN',

            maxContentLength: -1,
            maxBodyLength: -1,

            validateStatus: function validateStatus(status) {
                return status >= 200 && status < 300;
            }
        };

        defaults.headers = {
            common: {
                'Accept': 'application/json, text/plain, */*'
            }
        };

        utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
            defaults.headers[method] = {};
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
        });

        module.exports = defaults;


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/bind.js":
    /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
    /***/ ((module) => {

        "use strict";


        module.exports = function bind(fn, thisArg) {
            return function wrap() {
                var args = new Array(arguments.length);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i];
                }
                return fn.apply(thisArg, args);
            };
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/buildURL.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        function encode(val) {
            return encodeURIComponent(val).
            replace(/%3A/gi, ':').
            replace(/%24/g, '$').
            replace(/%2C/gi, ',').
            replace(/%20/g, '+').
            replace(/%5B/gi, '[').
            replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/
            if (!params) {
                return url;
            }

            var serializedParams;
            if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
                serializedParams = params.toString();
            } else {
                var parts = [];

                utils.forEach(params, function serialize(val, key) {
                    if (val === null || typeof val === 'undefined') {
                        return;
                    }

                    if (utils.isArray(val)) {
                        key = key + '[]';
                    } else {
                        val = [val];
                    }

                    utils.forEach(val, function parseValue(v) {
                        if (utils.isDate(v)) {
                            v = v.toISOString();
                        } else if (utils.isObject(v)) {
                            v = JSON.stringify(v);
                        }
                        parts.push(encode(key) + '=' + encode(v));
                    });
                });

                serializedParams = parts.join('&');
            }

            if (serializedParams) {
                var hashmarkIndex = url.indexOf('#');
                if (hashmarkIndex !== -1) {
                    url = url.slice(0, hashmarkIndex);
                }

                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }

            return url;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/combineURLs.js":
    /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL
                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                : baseURL;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/cookies.js":
    /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs support document.cookie
                (function standardBrowserEnv() {
                    return {
                        write: function write(name, value, expires, path, domain, secure) {
                            var cookie = [];
                            cookie.push(name + '=' + encodeURIComponent(value));

                            if (utils.isNumber(expires)) {
                                cookie.push('expires=' + new Date(expires).toGMTString());
                            }

                            if (utils.isString(path)) {
                                cookie.push('path=' + path);
                            }

                            if (utils.isString(domain)) {
                                cookie.push('domain=' + domain);
                            }

                            if (secure === true) {
                                cookie.push('secure');
                            }

                            document.cookie = cookie.join('; ');
                        },

                        read: function read(name) {
                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                            return (match ? decodeURIComponent(match[3]) : null);
                        },

                        remove: function remove(name) {
                            this.write(name, '', Date.now() - 86400000);
                        }
                    };
                })() :

                // Non standard browser env (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return {
                        write: function write() {},
                        read: function read() { return null; },
                        remove: function remove() {}
                    };
                })()
        );


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
    /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
    /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        module.exports = function isAxiosError(payload) {
            return (typeof payload === 'object') && (payload.isAxiosError === true);
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
    /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs have full support of the APIs needed to test
                // whether the request URL is of the same origin as current location.
                (function standardBrowserEnv() {
                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                    var urlParsingNode = document.createElement('a');
                    var originURL;

                    /**
                     * Parse a URL to discover it's components
                     *
                     * @param {String} url The URL to be parsed
                     * @returns {Object}
                     */
                    function resolveURL(url) {
                        var href = url;

                        if (msie) {
                            // IE needs attribute set twice to normalize properties
                            urlParsingNode.setAttribute('href', href);
                            href = urlParsingNode.href;
                        }

                        urlParsingNode.setAttribute('href', href);

                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                        return {
                            href: urlParsingNode.href,
                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                            host: urlParsingNode.host,
                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                            hostname: urlParsingNode.hostname,
                            port: urlParsingNode.port,
                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                urlParsingNode.pathname :
                                '/' + urlParsingNode.pathname
                        };
                    }

                    originURL = resolveURL(window.location.href);

                    /**
                     * Determine if a URL shares the same origin as the current location
                     *
                     * @param {String} requestURL The URL to test
                     * @returns {boolean} True if URL shares the same origin, otherwise false
                     */
                    return function isURLSameOrigin(requestURL) {
                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                        return (parsed.protocol === originURL.protocol &&
                            parsed.host === originURL.host);
                    };
                })() :

                // Non standard browser envs (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return function isURLSameOrigin() {
                        return true;
                    };
                })()
        );


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
    /*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                    headers[normalizedName] = value;
                    delete headers[name];
                }
            });
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
    /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
            'age', 'authorization', 'content-length', 'content-type', 'etag',
            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
            'referer', 'retry-after', 'user-agent'
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;

            if (!headers) { return parsed; }

            utils.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils.trim(line.substr(0, i)).toLowerCase();
                val = utils.trim(line.substr(i + 1));

                if (key) {
                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                        return;
                    }
                    if (key === 'set-cookie') {
                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                    } else {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }
            });

            return parsed;
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/spread.js":
    /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
    /***/ ((module) => {

        "use strict";


        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
            return function wrap(arr) {
                return callback.apply(null, arr);
            };
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/helpers/validator.js":
    /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

        var validators = {};

// eslint-disable-next-line func-names
        ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
            validators[type] = function validator(thing) {
                return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
            };
        });

        var deprecatedWarnings = {};
        var currentVerArr = pkg.version.split('.');

        /**
         * Compare package versions
         * @param {string} version
         * @param {string?} thanVersion
         * @returns {boolean}
         */
        function isOlderVersion(version, thanVersion) {
            var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
            var destVer = version.split('.');
            for (var i = 0; i < 3; i++) {
                if (pkgVersionArr[i] > destVer[i]) {
                    return true;
                } else if (pkgVersionArr[i] < destVer[i]) {
                    return false;
                }
            }
            return false;
        }

        /**
         * Transitional option validator
         * @param {function|boolean?} validator
         * @param {string?} version
         * @param {string} message
         * @returns {function}
         */
        validators.transitional = function transitional(validator, version, message) {
            var isDeprecated = version && isOlderVersion(version);

            function formatMessage(opt, desc) {
                return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
            }

            // eslint-disable-next-line func-names
            return function(value, opt, opts) {
                if (validator === false) {
                    throw new Error(formatMessage(opt, ' has been removed in ' + version));
                }

                if (isDeprecated && !deprecatedWarnings[opt]) {
                    deprecatedWarnings[opt] = true;
                    // eslint-disable-next-line no-console
                    console.warn(
                        formatMessage(
                            opt,
                            ' has been deprecated since v' + version + ' and will be removed in the near future'
                        )
                    );
                }

                return validator ? validator(value, opt, opts) : true;
            };
        };

        /**
         * Assert object's properties type
         * @param {object} options
         * @param {object} schema
         * @param {boolean?} allowUnknown
         */

        function assertOptions(options, schema, allowUnknown) {
            if (typeof options !== 'object') {
                throw new TypeError('options must be an object');
            }
            var keys = Object.keys(options);
            var i = keys.length;
            while (i-- > 0) {
                var opt = keys[i];
                var validator = schema[opt];
                if (validator) {
                    var value = options[opt];
                    var result = value === undefined || validator(value, opt, options);
                    if (result !== true) {
                        throw new TypeError('option ' + opt + ' must be ' + result);
                    }
                    continue;
                }
                if (allowUnknown !== true) {
                    throw Error('Unknown option ' + opt);
                }
            }
        }

        module.exports = {
            isOlderVersion: isOlderVersion,
            assertOptions: assertOptions,
            validators: validators
        };


        /***/ }),

    /***/ "./node_modules/axios/lib/utils.js":
    /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

        "use strict";


        var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
            return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
            return typeof val === 'undefined';
        }

        /**
         * Determine if a value is a Buffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
            return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
            var result;
            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                result = ArrayBuffer.isView(val);
            } else {
                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
            }
            return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
            return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
            return typeof val === 'number';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
            return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a plain Object
         *
         * @param {Object} val The value to test
         * @return {boolean} True if value is a plain Object, otherwise false
         */
        function isPlainObject(val) {
            if (toString.call(val) !== '[object Object]') {
                return false;
            }

            var prototype = Object.getPrototypeOf(val);
            return prototype === null || prototype === Object.prototype;
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
            return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
            return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
            return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
            return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         */
        function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                navigator.product === 'NativeScript' ||
                navigator.product === 'NS')) {
                return false;
            }
            return (
                typeof window !== 'undefined' &&
                typeof document !== 'undefined'
            );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
                return;
            }

            // Force an array if not already something iterable
            if (typeof obj !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
            }

            if (isArray(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                    fn.call(null, obj[i], i, obj);
                }
            } else {
                // Iterate over object keys
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        fn.call(null, obj[key], key, obj);
                    }
                }
            }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
            var result = {};
            function assignValue(val, key) {
                if (isPlainObject(result[key]) && isPlainObject(val)) {
                    result[key] = merge(result[key], val);
                } else if (isPlainObject(val)) {
                    result[key] = merge({}, val);
                } else if (isArray(val)) {
                    result[key] = val.slice();
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                    a[key] = bind(val, thisArg);
                } else {
                    a[key] = val;
                }
            });
            return a;
        }

        /**
         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
         *
         * @param {string} content with BOM
         * @return {string} content value without BOM
         */
        function stripBOM(content) {
            if (content.charCodeAt(0) === 0xFEFF) {
                content = content.slice(1);
            }
            return content;
        }

        module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isPlainObject: isPlainObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            extend: extend,
            trim: trim,
            stripBOM: stripBOM
        };


        /***/ }),

    /***/ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "_": () => (/* binding */ _createClass),
            /* harmony export */   "a": () => (/* binding */ _classCallCheck),
            /* harmony export */   "b": () => (/* binding */ _objectWithoutProperties),
            /* harmony export */   "c": () => (/* binding */ _typeof),
            /* harmony export */   "d": () => (/* binding */ _inherits),
            /* harmony export */   "e": () => (/* binding */ _createSuper),
            /* harmony export */   "f": () => (/* binding */ _slicedToArray),
            /* harmony export */   "g": () => (/* binding */ _get),
            /* harmony export */   "h": () => (/* binding */ _getPrototypeOf),
            /* harmony export */   "i": () => (/* binding */ _set),
            /* harmony export */   "j": () => (/* binding */ _toConsumableArray)
            /* harmony export */ });
        function _typeof(obj) {
            "@babel/helpers - typeof";

            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
                writable: false
            });
            return Constructor;
        }

        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }

            return obj;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            Object.defineProperty(subClass, "prototype", {
                writable: false
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }

        function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;

            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                return true;
            } catch (e) {
                return false;
            }
        }

        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null) return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;

            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
            }

            return target;
        }

        function _objectWithoutProperties(source, excluded) {
            if (source == null) return {};

            var target = _objectWithoutPropertiesLoose(source, excluded);

            var key, i;

            if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                for (i = 0; i < sourceSymbolKeys.length; i++) {
                    key = sourceSymbolKeys[i];
                    if (excluded.indexOf(key) >= 0) continue;
                    if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                    target[key] = source[key];
                }
            }

            return target;
        }

        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return self;
        }

        function _possibleConstructorReturn(self, call) {
            if (call && (typeof call === "object" || typeof call === "function")) {
                return call;
            } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
            }

            return _assertThisInitialized(self);
        }

        function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();

            return function _createSuperInternal() {
                var Super = _getPrototypeOf(Derived),
                    result;

                if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;

                    result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                    result = Super.apply(this, arguments);
                }

                return _possibleConstructorReturn(this, result);
            };
        }

        function _superPropBase(object, property) {
            while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf(object);
                if (object === null) break;
            }

            return object;
        }

        function _get() {
            if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get.bind();
            } else {
                _get = function _get(target, property, receiver) {
                    var base = _superPropBase(target, property);

                    if (!base) return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);

                    if (desc.get) {
                        return desc.get.call(arguments.length < 3 ? target : receiver);
                    }

                    return desc.value;
                };
            }

            return _get.apply(this, arguments);
        }

        function set(target, property, value, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.set) {
                set = Reflect.set;
            } else {
                set = function set(target, property, value, receiver) {
                    var base = _superPropBase(target, property);

                    var desc;

                    if (base) {
                        desc = Object.getOwnPropertyDescriptor(base, property);

                        if (desc.set) {
                            desc.set.call(receiver, value);
                            return true;
                        } else if (!desc.writable) {
                            return false;
                        }
                    }

                    desc = Object.getOwnPropertyDescriptor(receiver, property);

                    if (desc) {
                        if (!desc.writable) {
                            return false;
                        }

                        desc.value = value;
                        Object.defineProperty(receiver, property, desc);
                    } else {
                        _defineProperty(receiver, property, value);
                    }

                    return true;
                };
            }

            return set(target, property, value, receiver);
        }

        function _set(target, property, value, receiver, isStrict) {
            var s = set(target, property, value, receiver || target);

            if (!s && isStrict) {
                throw new Error('failed to set property');
            }

            return value;
        }

        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }

        function _toConsumableArray(arr) {
            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }

        function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }

        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }

        function _iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }

        function _iterableToArrayLimit(arr, i) {
            var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

            if (_i == null) return;
            var _arr = [];
            var _n = true;
            var _d = false;

            var _s, _e;

            try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }

        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;

            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

            return arr2;
        }

        function _nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }




        /***/ }),

    /***/ "./node_modules/imask/esm/controls/html-contenteditable-mask-element.js":
    /*!******************************************************************************!*\
  !*** ./node_modules/imask/esm/controls/html-contenteditable-mask-element.js ***!
  \******************************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ HTMLContenteditableMaskElement)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _html_mask_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html-mask-element.js */ "./node_modules/imask/esm/controls/html-mask-element.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _mask_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mask-element.js */ "./node_modules/imask/esm/controls/mask-element.js");





        var HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(HTMLContenteditableMaskElement, _HTMLMaskElement);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(HTMLContenteditableMaskElement);

            function HTMLContenteditableMaskElement() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, HTMLContenteditableMaskElement);

                return _super.apply(this, arguments);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(HTMLContenteditableMaskElement, [{
                key: "_unsafeSelectionStart",
                get:
                    /**
                     Returns HTMLElement selection start
                     @override
                     */
                    function get() {
                        var root = this.rootElement;
                        var selection = root.getSelection && root.getSelection();
                        var anchorOffset = selection && selection.anchorOffset;
                        var focusOffset = selection && selection.focusOffset;

                        if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {
                            return anchorOffset;
                        }

                        return focusOffset;
                    }
                /**
                 Returns HTMLElement selection end
                 @override
                 */

            }, {
                key: "_unsafeSelectionEnd",
                get: function get() {
                    var root = this.rootElement;
                    var selection = root.getSelection && root.getSelection();
                    var anchorOffset = selection && selection.anchorOffset;
                    var focusOffset = selection && selection.focusOffset;

                    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {
                        return anchorOffset;
                    }

                    return focusOffset;
                }
                /**
                 Sets HTMLElement selection
                 @override
                 */

            }, {
                key: "_unsafeSelect",
                value: function _unsafeSelect(start, end) {
                    if (!this.rootElement.createRange) return;
                    var range = this.rootElement.createRange();
                    range.setStart(this.input.firstChild || this.input, start);
                    range.setEnd(this.input.lastChild || this.input, end);
                    var root = this.rootElement;
                    var selection = root.getSelection && root.getSelection();

                    if (selection) {
                        selection.removeAllRanges();
                        selection.addRange(range);
                    }
                }
                /**
                 HTMLElement value
                 @override
                 */

            }, {
                key: "value",
                get: function get() {
                    // $FlowFixMe
                    return this.input.textContent;
                },
                set: function set(value) {
                    this.input.textContent = value;
                }
            }]);

            return HTMLContenteditableMaskElement;
        }(_html_mask_element_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_2__["default"].HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;




        /***/ }),

    /***/ "./node_modules/imask/esm/controls/html-mask-element.js":
    /*!**************************************************************!*\
  !*** ./node_modules/imask/esm/controls/html-mask-element.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ HTMLMaskElement)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _mask_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mask-element.js */ "./node_modules/imask/esm/controls/mask-element.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");




        /** Bridge between HTMLElement and {@link Masked} */

        var HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(HTMLMaskElement, _MaskElement);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(HTMLMaskElement);

            /** Mapping between HTMLElement events and mask internal events */

            /** HTMLElement to use mask on */

            /**
             @param {HTMLInputElement|HTMLTextAreaElement} input
             */
            function HTMLMaskElement(input) {
                var _this;

                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, HTMLMaskElement);

                _this = _super.call(this);
                _this.input = input;
                _this._handlers = {};
                return _this;
            }
            /** */
            // $FlowFixMe https://github.com/facebook/flow/issues/2839


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(HTMLMaskElement, [{
                key: "rootElement",
                get: function get() {
                    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;

                    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;
                }
                /**
                 Is element in focus
                 @readonly
                 */

            }, {
                key: "isActive",
                get: function get() {
                    //$FlowFixMe
                    return this.input === this.rootElement.activeElement;
                }
                /**
                 Returns HTMLElement selection start
                 @override
                 */

            }, {
                key: "_unsafeSelectionStart",
                get: function get() {
                    return this.input.selectionStart;
                }
                /**
                 Returns HTMLElement selection end
                 @override
                 */

            }, {
                key: "_unsafeSelectionEnd",
                get: function get() {
                    return this.input.selectionEnd;
                }
                /**
                 Sets HTMLElement selection
                 @override
                 */

            }, {
                key: "_unsafeSelect",
                value: function _unsafeSelect(start, end) {
                    this.input.setSelectionRange(start, end);
                }
                /**
                 HTMLElement value
                 @override
                 */

            }, {
                key: "value",
                get: function get() {
                    return this.input.value;
                },
                set: function set(value) {
                    this.input.value = value;
                }
                /**
                 Binds HTMLElement events to mask internal events
                 @override
                 */

            }, {
                key: "bindEvents",
                value: function bindEvents(handlers) {
                    var _this2 = this;

                    Object.keys(handlers).forEach(function (event) {
                        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);
                    });
                }
                /**
                 Unbinds HTMLElement events to mask internal events
                 @override
                 */

            }, {
                key: "unbindEvents",
                value: function unbindEvents() {
                    var _this3 = this;

                    Object.keys(this._handlers).forEach(function (event) {
                        return _this3._toggleEventHandler(event);
                    });
                }
                /** */

            }, {
                key: "_toggleEventHandler",
                value: function _toggleEventHandler(event, handler) {
                    if (this._handlers[event]) {
                        this.input.removeEventListener(event, this._handlers[event]);
                        delete this._handlers[event];
                    }

                    if (handler) {
                        this.input.addEventListener(event, handler);
                        this._handlers[event] = handler;
                    }
                }
            }]);

            return HTMLMaskElement;
        }(_mask_element_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        HTMLMaskElement.EVENTS_MAP = {
            selectionChange: 'keydown',
            input: 'input',
            drop: 'drop',
            click: 'click',
            focus: 'focus',
            commit: 'blur'
        };
        _core_holder_js__WEBPACK_IMPORTED_MODULE_2__["default"].HTMLMaskElement = HTMLMaskElement;




        /***/ }),

    /***/ "./node_modules/imask/esm/controls/input.js":
    /*!**************************************************!*\
  !*** ./node_modules/imask/esm/controls/input.js ***!
  \**************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ InputMask)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_action_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/action-details.js */ "./node_modules/imask/esm/core/action-details.js");
        /* harmony import */ var _masked_date_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../masked/date.js */ "./node_modules/imask/esm/masked/date.js");
        /* harmony import */ var _masked_factory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../masked/factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _mask_element_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mask-element.js */ "./node_modules/imask/esm/controls/mask-element.js");
        /* harmony import */ var _html_mask_element_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./html-mask-element.js */ "./node_modules/imask/esm/controls/html-mask-element.js");
        /* harmony import */ var _html_contenteditable_mask_element_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./html-contenteditable-mask-element.js */ "./node_modules/imask/esm/controls/html-contenteditable-mask-element.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _masked_pattern_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../masked/pattern.js */ "./node_modules/imask/esm/masked/pattern.js");
        /* harmony import */ var _masked_base_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../masked/base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _masked_pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../masked/pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _masked_pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../masked/pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _masked_pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../masked/pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _masked_pattern_cursor_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../masked/pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");
        /* harmony import */ var _masked_regexp_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../masked/regexp.js */ "./node_modules/imask/esm/masked/regexp.js");
        /* harmony import */ var _masked_range_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../masked/range.js */ "./node_modules/imask/esm/masked/range.js");




















        var _excluded = ["mask"];
        /** Listens to element events and controls changes between element and {@link Masked} */

        var InputMask = /*#__PURE__*/function () {
            /**
             View element
             @readonly
             */

            /**
             Internal {@link Masked} model
             @readonly
             */

            /**
             @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el
             @param {Object} opts
             */
            function InputMask(el, opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, InputMask);

                this.el = el instanceof _mask_element_js__WEBPACK_IMPORTED_MODULE_5__["default"] ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new _html_contenteditable_mask_element_js__WEBPACK_IMPORTED_MODULE_7__["default"](el) : new _html_mask_element_js__WEBPACK_IMPORTED_MODULE_6__["default"](el);
                this.masked = (0,_masked_factory_js__WEBPACK_IMPORTED_MODULE_4__["default"])(opts);
                this._listeners = {};
                this._value = '';
                this._unmaskedValue = '';
                this._saveSelection = this._saveSelection.bind(this);
                this._onInput = this._onInput.bind(this);
                this._onChange = this._onChange.bind(this);
                this._onDrop = this._onDrop.bind(this);
                this._onFocus = this._onFocus.bind(this);
                this._onClick = this._onClick.bind(this);
                this.alignCursor = this.alignCursor.bind(this);
                this.alignCursorFriendly = this.alignCursorFriendly.bind(this);

                this._bindEvents(); // refresh


                this.updateValue();

                this._onChange();
            }
            /** Read or update mask */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(InputMask, [{
                key: "mask",
                get: function get() {
                    return this.masked.mask;
                },
                set: function set(mask) {
                    if (this.maskEquals(mask)) return; // $FlowFixMe No ideas ... after update

                    if (!(mask instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_8__["default"].Masked) && this.masked.constructor === (0,_masked_factory_js__WEBPACK_IMPORTED_MODULE_4__.maskedClass)(mask)) {
                        this.masked.updateOptions({
                            mask: mask
                        });
                        return;
                    }

                    var masked = (0,_masked_factory_js__WEBPACK_IMPORTED_MODULE_4__["default"])({
                        mask: mask
                    });
                    masked.unmaskedValue = this.masked.unmaskedValue;
                    this.masked = masked;
                }
                /** Raw value */

            }, {
                key: "maskEquals",
                value: function maskEquals(mask) {
                    var _this$masked;

                    return mask == null || ((_this$masked = this.masked) === null || _this$masked === void 0 ? void 0 : _this$masked.maskEquals(mask));
                }
            }, {
                key: "value",
                get: function get() {
                    return this._value;
                },
                set: function set(str) {
                    if (this.value === str) return;
                    this.masked.value = str;
                    this.updateControl();
                    this.alignCursor();
                }
                /** Unmasked value */

            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this._unmaskedValue;
                },
                set: function set(str) {
                    if (this.unmaskedValue === str) return;
                    this.masked.unmaskedValue = str;
                    this.updateControl();
                    this.alignCursor();
                }
                /** Typed unmasked value */

            }, {
                key: "typedValue",
                get: function get() {
                    return this.masked.typedValue;
                },
                set: function set(val) {
                    if (this.masked.typedValueEquals(val)) return;
                    this.masked.typedValue = val;
                    this.updateControl();
                    this.alignCursor();
                }
                /**
                 Starts listening to element events
                 @protected
                 */

            }, {
                key: "_bindEvents",
                value: function _bindEvents() {
                    this.el.bindEvents({
                        selectionChange: this._saveSelection,
                        input: this._onInput,
                        drop: this._onDrop,
                        click: this._onClick,
                        focus: this._onFocus,
                        commit: this._onChange
                    });
                }
                /**
                 Stops listening to element events
                 @protected
                 */

            }, {
                key: "_unbindEvents",
                value: function _unbindEvents() {
                    if (this.el) this.el.unbindEvents();
                }
                /**
                 Fires custom event
                 @protected
                 */

            }, {
                key: "_fireEvent",
                value: function _fireEvent(ev) {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }

                    var listeners = this._listeners[ev];
                    if (!listeners) return;
                    listeners.forEach(function (l) {
                        return l.apply(void 0, args);
                    });
                }
                /**
                 Current selection start
                 @readonly
                 */

            }, {
                key: "selectionStart",
                get: function get() {
                    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;
                }
                /** Current cursor position */

            }, {
                key: "cursorPos",
                get: function get() {
                    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;
                },
                set: function set(pos) {
                    if (!this.el || !this.el.isActive) return;
                    this.el.select(pos, pos);

                    this._saveSelection();
                }
                /**
                 Stores current selection
                 @protected
                 */

            }, {
                key: "_saveSelection",
                value: function
                    /* ev */
                    _saveSelection() {
                    if (this.value !== this.el.value) {
                        console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console
                    }

                    this._selection = {
                        start: this.selectionStart,
                        end: this.cursorPos
                    };
                }
                /** Syncronizes model value from view */

            }, {
                key: "updateValue",
                value: function updateValue() {
                    this.masked.value = this.el.value;
                    this._value = this.masked.value;
                }
                /** Syncronizes view from model value, fires change events */

            }, {
                key: "updateControl",
                value: function updateControl() {
                    var newUnmaskedValue = this.masked.unmaskedValue;
                    var newValue = this.masked.value;
                    var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;
                    this._unmaskedValue = newUnmaskedValue;
                    this._value = newValue;
                    if (this.el.value !== newValue) this.el.value = newValue;
                    if (isChanged) this._fireChangeEvents();
                }
                /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */

            }, {
                key: "updateOptions",
                value: function updateOptions(opts) {
                    var mask = opts.mask,
                        restOpts = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.b)(opts, _excluded);

                    var updateMask = !this.maskEquals(mask);
                    var updateOpts = !(0,_core_utils_js__WEBPACK_IMPORTED_MODULE_1__.objectIncludes)(this.masked, restOpts);
                    if (updateMask) this.mask = mask;
                    if (updateOpts) this.masked.updateOptions(restOpts);
                    if (updateMask || updateOpts) this.updateControl();
                }
                /** Updates cursor */

            }, {
                key: "updateCursor",
                value: function updateCursor(cursorPos) {
                    if (cursorPos == null) return;
                    this.cursorPos = cursorPos; // also queue change cursor for mobile browsers

                    this._delayUpdateCursor(cursorPos);
                }
                /**
                 Delays cursor update to support mobile browsers
                 @private
                 */

            }, {
                key: "_delayUpdateCursor",
                value: function _delayUpdateCursor(cursorPos) {
                    var _this = this;

                    this._abortUpdateCursor();

                    this._changingCursorPos = cursorPos;
                    this._cursorChanging = setTimeout(function () {
                        if (!_this.el) return; // if was destroyed

                        _this.cursorPos = _this._changingCursorPos;

                        _this._abortUpdateCursor();
                    }, 10);
                }
                /**
                 Fires custom events
                 @protected
                 */

            }, {
                key: "_fireChangeEvents",
                value: function _fireChangeEvents() {
                    this._fireEvent('accept', this._inputEvent);

                    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);
                }
                /**
                 Aborts delayed cursor update
                 @private
                 */

            }, {
                key: "_abortUpdateCursor",
                value: function _abortUpdateCursor() {
                    if (this._cursorChanging) {
                        clearTimeout(this._cursorChanging);
                        delete this._cursorChanging;
                    }
                }
                /** Aligns cursor to nearest available position */

            }, {
                key: "alignCursor",
                value: function alignCursor() {
                    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT));
                }
                /** Aligns cursor only if selection is empty */

            }, {
                key: "alignCursorFriendly",
                value: function alignCursorFriendly() {
                    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected

                    this.alignCursor();
                }
                /** Adds listener on custom event */

            }, {
                key: "on",
                value: function on(ev, handler) {
                    if (!this._listeners[ev]) this._listeners[ev] = [];

                    this._listeners[ev].push(handler);

                    return this;
                }
                /** Removes custom event listener */

            }, {
                key: "off",
                value: function off(ev, handler) {
                    if (!this._listeners[ev]) return this;

                    if (!handler) {
                        delete this._listeners[ev];
                        return this;
                    }

                    var hIndex = this._listeners[ev].indexOf(handler);

                    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);
                    return this;
                }
                /** Handles view input event */

            }, {
                key: "_onInput",
                value: function _onInput(e) {
                    this._inputEvent = e;

                    this._abortUpdateCursor(); // fix strange IE behavior


                    if (!this._selection) return this.updateValue();
                    var details = new _core_action_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]( // new state
                        this.el.value, this.cursorPos, // old state
                        this.value, this._selection);
                    var oldRawValue = this.masked.rawInputValue;
                    var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {
                        input: true,
                        raw: true
                    }).offset; // force align in remove direction only if no input chars were removed
                    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)

                    var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE;
                    var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);
                    if (removeDirection !== _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE);
                    this.updateControl();
                    this.updateCursor(cursorPos);
                    delete this._inputEvent;
                }
                /** Handles view change event and commits model value */

            }, {
                key: "_onChange",
                value: function _onChange() {
                    if (this.value !== this.el.value) {
                        this.updateValue();
                    }

                    this.masked.doCommit();
                    this.updateControl();

                    this._saveSelection();
                }
                /** Handles view drop event, prevents by default */

            }, {
                key: "_onDrop",
                value: function _onDrop(ev) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                /** Restore last selection on focus */

            }, {
                key: "_onFocus",
                value: function _onFocus(ev) {
                    this.alignCursorFriendly();
                }
                /** Restore last selection on focus */

            }, {
                key: "_onClick",
                value: function _onClick(ev) {
                    this.alignCursorFriendly();
                }
                /** Unbind view events and removes element reference */

            }, {
                key: "destroy",
                value: function destroy() {
                    this._unbindEvents(); // $FlowFixMe why not do so?


                    this._listeners.length = 0; // $FlowFixMe

                    delete this.el;
                }
            }]);

            return InputMask;
        }();
        _core_holder_js__WEBPACK_IMPORTED_MODULE_8__["default"].InputMask = InputMask;




        /***/ }),

    /***/ "./node_modules/imask/esm/controls/mask-element.js":
    /*!*********************************************************!*\
  !*** ./node_modules/imask/esm/controls/mask-element.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskElement)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");



        /**
         Generic element API to use with mask
         @interface
         */
        var MaskElement = /*#__PURE__*/function () {
            function MaskElement() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskElement);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskElement, [{
                key: "selectionStart",
                get:
                /** */

                /** */

                /** */

                    /** Safely returns selection start */
                    function get() {
                        var start;

                        try {
                            start = this._unsafeSelectionStart;
                        } catch (e) {}

                        return start != null ? start : this.value.length;
                    }
                /** Safely returns selection end */

            }, {
                key: "selectionEnd",
                get: function get() {
                    var end;

                    try {
                        end = this._unsafeSelectionEnd;
                    } catch (e) {}

                    return end != null ? end : this.value.length;
                }
                /** Safely sets element selection */

            }, {
                key: "select",
                value: function select(start, end) {
                    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;

                    try {
                        this._unsafeSelect(start, end);
                    } catch (e) {}
                }
                /** Should be overriden in subclasses */

            }, {
                key: "_unsafeSelect",
                value: function _unsafeSelect(start, end) {}
                /** Should be overriden in subclasses */

            }, {
                key: "isActive",
                get: function get() {
                    return false;
                }
                /** Should be overriden in subclasses */

            }, {
                key: "bindEvents",
                value: function bindEvents(handlers) {}
                /** Should be overriden in subclasses */

            }, {
                key: "unbindEvents",
                value: function unbindEvents() {}
            }]);

            return MaskElement;
        }();
        _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskElement = MaskElement;




        /***/ }),

    /***/ "./node_modules/imask/esm/core/action-details.js":
    /*!*******************************************************!*\
  !*** ./node_modules/imask/esm/core/action-details.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ ActionDetails)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _change_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./change-details.js */ "./node_modules/imask/esm/core/change-details.js");




        /** Provides details of changing input */

        var ActionDetails = /*#__PURE__*/function () {
            /** Current input value */

            /** Current cursor position */

            /** Old input value */

            /** Old selection */
            function ActionDetails(value, cursorPos, oldValue, oldSelection) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, ActionDetails);

                this.value = value;
                this.cursorPos = cursorPos;
                this.oldValue = oldValue;
                this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)

                while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {
                    --this.oldSelection.start;
                }
            }
            /**
             Start changing position
             @readonly
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(ActionDetails, [{
                key: "startChangePos",
                get: function get() {
                    return Math.min(this.cursorPos, this.oldSelection.start);
                }
                /**
                 Inserted symbols count
                 @readonly
                 */

            }, {
                key: "insertedCount",
                get: function get() {
                    return this.cursorPos - this.startChangePos;
                }
                /**
                 Inserted symbols
                 @readonly
                 */

            }, {
                key: "inserted",
                get: function get() {
                    return this.value.substr(this.startChangePos, this.insertedCount);
                }
                /**
                 Removed symbols count
                 @readonly
                 */

            }, {
                key: "removedCount",
                get: function get() {
                    // Math.max for opposite operation
                    return Math.max(this.oldSelection.end - this.startChangePos || // for Delete
                        this.oldValue.length - this.value.length, 0);
                }
                /**
                 Removed symbols
                 @readonly
                 */

            }, {
                key: "removed",
                get: function get() {
                    return this.oldValue.substr(this.startChangePos, this.removedCount);
                }
                /**
                 Unchanged head symbols
                 @readonly
                 */

            }, {
                key: "head",
                get: function get() {
                    return this.value.substring(0, this.startChangePos);
                }
                /**
                 Unchanged tail symbols
                 @readonly
                 */

            }, {
                key: "tail",
                get: function get() {
                    return this.value.substring(this.startChangePos + this.insertedCount);
                }
                /**
                 Remove direction
                 @readonly
                 */

            }, {
                key: "removeDirection",
                get: function get() {
                    if (!this.removedCount || this.insertedCount) return _utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE; // align right if delete at right

                    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) && // if not range removed (event with backspace)
                    this.oldSelection.end === this.oldSelection.start ? _utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.RIGHT : _utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT;
                }
            }]);

            return ActionDetails;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/core/change-details.js":
    /*!*******************************************************!*\
  !*** ./node_modules/imask/esm/core/change-details.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ ChangeDetails)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");


        /**
         Provides details of changing model value
         @param {Object} [details]
         @param {string} [details.inserted] - Inserted symbols
         @param {boolean} [details.skip] - Can skip chars
         @param {number} [details.removeCount] - Removed symbols count
         @param {number} [details.tailShift] - Additional offset if any changes occurred before tail
         */
        var ChangeDetails = /*#__PURE__*/function () {
            /** Inserted symbols */

            /** Can skip chars */

            /** Additional offset if any changes occurred before tail */

            /** Raw inserted is used by dynamic mask */
            function ChangeDetails(details) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, ChangeDetails);

                Object.assign(this, {
                    inserted: '',
                    rawInserted: '',
                    skip: false,
                    tailShift: 0
                }, details);
            }
            /**
             Aggregate changes
             @returns {ChangeDetails} `this`
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(ChangeDetails, [{
                key: "aggregate",
                value: function aggregate(details) {
                    this.rawInserted += details.rawInserted;
                    this.skip = this.skip || details.skip;
                    this.inserted += details.inserted;
                    this.tailShift += details.tailShift;
                    return this;
                }
                /** Total offset considering all changes */

            }, {
                key: "offset",
                get: function get() {
                    return this.tailShift + this.inserted.length;
                }
            }]);

            return ChangeDetails;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/core/continuous-tail-details.js":
    /*!****************************************************************!*\
  !*** ./node_modules/imask/esm/core/continuous-tail-details.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ ContinuousTailDetails)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");


        /** Provides details of continuous extracted tail */
        var ContinuousTailDetails = /*#__PURE__*/function () {
            /** Tail value as string */

            /** Tail start position */

            /** Start position */
            function ContinuousTailDetails() {
                var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var stop = arguments.length > 2 ? arguments[2] : undefined;

                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, ContinuousTailDetails);

                this.value = value;
                this.from = from;
                this.stop = stop;
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(ContinuousTailDetails, [{
                key: "toString",
                value: function toString() {
                    return this.value;
                }
            }, {
                key: "extend",
                value: function extend(tail) {
                    this.value += String(tail);
                }
            }, {
                key: "appendTo",
                value: function appendTo(masked) {
                    return masked.append(this.toString(), {
                        tail: true
                    }).aggregate(masked._appendPlaceholder());
                }
            }, {
                key: "state",
                get: function get() {
                    return {
                        value: this.value,
                        from: this.from,
                        stop: this.stop
                    };
                },
                set: function set(state) {
                    Object.assign(this, state);
                }
            }, {
                key: "unshift",
                value: function unshift(beforePos) {
                    if (!this.value.length || beforePos != null && this.from >= beforePos) return '';
                    var shiftChar = this.value[0];
                    this.value = this.value.slice(1);
                    return shiftChar;
                }
            }, {
                key: "shift",
                value: function shift() {
                    if (!this.value.length) return '';
                    var shiftChar = this.value[this.value.length - 1];
                    this.value = this.value.slice(0, -1);
                    return shiftChar;
                }
            }]);

            return ContinuousTailDetails;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/core/holder.js":
    /*!***********************************************!*\
  !*** ./node_modules/imask/esm/core/holder.js ***!
  \***********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ IMask)
            /* harmony export */ });
        /**
         * Applies mask on element.
         * @constructor
         * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask
         * @param {Object} opts - Custom mask options
         * @return {InputMask}
         */
        function IMask(el) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            // currently available only for input-like elements
            return new IMask.InputMask(el, opts);
        }




        /***/ }),

    /***/ "./node_modules/imask/esm/core/utils.js":
    /*!**********************************************!*\
  !*** ./node_modules/imask/esm/core/utils.js ***!
  \**********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "DIRECTION": () => (/* binding */ DIRECTION),
            /* harmony export */   "escapeRegExp": () => (/* binding */ escapeRegExp),
            /* harmony export */   "forceDirection": () => (/* binding */ forceDirection),
            /* harmony export */   "indexInDirection": () => (/* binding */ indexInDirection),
            /* harmony export */   "isString": () => (/* binding */ isString),
            /* harmony export */   "normalizePrepare": () => (/* binding */ normalizePrepare),
            /* harmony export */   "objectIncludes": () => (/* binding */ objectIncludes),
            /* harmony export */   "posInDirection": () => (/* binding */ posInDirection)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _change_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./change-details.js */ "./node_modules/imask/esm/core/change-details.js");



        /** Checks if value is string */

        function isString(str) {
            return typeof str === 'string' || str instanceof String;
        }
        /**
         Direction
         @prop {string} NONE
         @prop {string} LEFT
         @prop {string} FORCE_LEFT
         @prop {string} RIGHT
         @prop {string} FORCE_RIGHT
         */

        var DIRECTION = {
            NONE: 'NONE',
            LEFT: 'LEFT',
            FORCE_LEFT: 'FORCE_LEFT',
            RIGHT: 'RIGHT',
            FORCE_RIGHT: 'FORCE_RIGHT'
        };
        /**
         Direction
         @enum {string}
         */

        /** Returns next char index in direction */
        function indexInDirection(pos, direction) {
            if (direction === DIRECTION.LEFT) --pos;
            return pos;
        }
        /** Returns next char position in direction */

        function posInDirection(pos, direction) {
            switch (direction) {
                case DIRECTION.LEFT:
                case DIRECTION.FORCE_LEFT:
                    return --pos;

                case DIRECTION.RIGHT:
                case DIRECTION.FORCE_RIGHT:
                    return ++pos;

                default:
                    return pos;
            }
        }
        /** */

        function forceDirection(direction) {
            switch (direction) {
                case DIRECTION.LEFT:
                    return DIRECTION.FORCE_LEFT;

                case DIRECTION.RIGHT:
                    return DIRECTION.FORCE_RIGHT;

                default:
                    return direction;
            }
        }
        /** Escapes regular expression control chars */

        function escapeRegExp(str) {
            return str.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
        }
        function normalizePrepare(prep) {
            return Array.isArray(prep) ? prep : [prep, new _change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]()];
        } // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes

        function objectIncludes(b, a) {
            if (a === b) return true;
            var arrA = Array.isArray(a),
                arrB = Array.isArray(b),
                i;

            if (arrA && arrB) {
                if (a.length != b.length) return false;

                for (i = 0; i < a.length; i++) {
                    if (!objectIncludes(a[i], b[i])) return false;
                }

                return true;
            }

            if (arrA != arrB) return false;

            if (a && b && (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.c)(a) === 'object' && (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.c)(b) === 'object') {
                var dateA = a instanceof Date,
                    dateB = b instanceof Date;
                if (dateA && dateB) return a.getTime() == b.getTime();
                if (dateA != dateB) return false;
                var regexpA = a instanceof RegExp,
                    regexpB = b instanceof RegExp;
                if (regexpA && regexpB) return a.toString() == b.toString();
                if (regexpA != regexpB) return false;
                var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;

                for (i = 0; i < keys.length; i++) {
                    // $FlowFixMe ... ???
                    if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
                }

                for (i = 0; i < keys.length; i++) {
                    if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;
                }

                return true;
            } else if (a && b && typeof a === 'function' && typeof b === 'function') {
                return a.toString() === b.toString();
            }

            return false;
        }
        /** Selection range */




        /***/ }),

    /***/ "./node_modules/imask/esm/index.js":
    /*!*****************************************!*\
  !*** ./node_modules/imask/esm/index.js ***!
  \*****************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "HTMLContenteditableMaskElement": () => (/* reexport safe */ _controls_html_contenteditable_mask_element_js__WEBPACK_IMPORTED_MODULE_14__["default"]),
            /* harmony export */   "HTMLMaskElement": () => (/* reexport safe */ _controls_html_mask_element_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
            /* harmony export */   "InputMask": () => (/* reexport safe */ _controls_input_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
            /* harmony export */   "MaskElement": () => (/* reexport safe */ _controls_mask_element_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
            /* harmony export */   "Masked": () => (/* reexport safe */ _masked_base_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
            /* harmony export */   "MaskedDate": () => (/* reexport safe */ _masked_date_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
            /* harmony export */   "MaskedDynamic": () => (/* reexport safe */ _masked_dynamic_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
            /* harmony export */   "MaskedEnum": () => (/* reexport safe */ _masked_enum_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
            /* harmony export */   "MaskedFunction": () => (/* reexport safe */ _masked_function_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
            /* harmony export */   "MaskedNumber": () => (/* reexport safe */ _masked_number_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
            /* harmony export */   "MaskedPattern": () => (/* reexport safe */ _masked_pattern_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
            /* harmony export */   "MaskedRange": () => (/* reexport safe */ _masked_range_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
            /* harmony export */   "MaskedRegExp": () => (/* reexport safe */ _masked_regexp_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
            /* harmony export */   "PIPE_TYPE": () => (/* reexport safe */ _masked_pipe_js__WEBPACK_IMPORTED_MODULE_15__.PIPE_TYPE),
            /* harmony export */   "createMask": () => (/* reexport safe */ _masked_factory_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
            /* harmony export */   "createPipe": () => (/* reexport safe */ _masked_pipe_js__WEBPACK_IMPORTED_MODULE_15__.createPipe),
            /* harmony export */   "default": () => (/* reexport safe */ _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
            /* harmony export */   "pipe": () => (/* reexport safe */ _masked_pipe_js__WEBPACK_IMPORTED_MODULE_15__.pipe)
            /* harmony export */ });
        /* harmony import */ var _controls_input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls/input.js */ "./node_modules/imask/esm/controls/input.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _masked_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./masked/base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _masked_pattern_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./masked/pattern.js */ "./node_modules/imask/esm/masked/pattern.js");
        /* harmony import */ var _masked_enum_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./masked/enum.js */ "./node_modules/imask/esm/masked/enum.js");
        /* harmony import */ var _masked_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./masked/range.js */ "./node_modules/imask/esm/masked/range.js");
        /* harmony import */ var _masked_number_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./masked/number.js */ "./node_modules/imask/esm/masked/number.js");
        /* harmony import */ var _masked_date_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./masked/date.js */ "./node_modules/imask/esm/masked/date.js");
        /* harmony import */ var _masked_regexp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./masked/regexp.js */ "./node_modules/imask/esm/masked/regexp.js");
        /* harmony import */ var _masked_function_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./masked/function.js */ "./node_modules/imask/esm/masked/function.js");
        /* harmony import */ var _masked_dynamic_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./masked/dynamic.js */ "./node_modules/imask/esm/masked/dynamic.js");
        /* harmony import */ var _masked_factory_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./masked/factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _controls_mask_element_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./controls/mask-element.js */ "./node_modules/imask/esm/controls/mask-element.js");
        /* harmony import */ var _controls_html_mask_element_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./controls/html-mask-element.js */ "./node_modules/imask/esm/controls/html-mask-element.js");
        /* harmony import */ var _controls_html_contenteditable_mask_element_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./controls/html-contenteditable-mask-element.js */ "./node_modules/imask/esm/controls/html-contenteditable-mask-element.js");
        /* harmony import */ var _masked_pipe_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./masked/pipe.js */ "./node_modules/imask/esm/masked/pipe.js");
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_action_details_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./core/action-details.js */ "./node_modules/imask/esm/core/action-details.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _masked_pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./masked/pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _masked_pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./masked/pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _masked_pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./masked/pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _masked_pattern_cursor_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./masked/pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");



























        try {
            globalThis.IMask = _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"];
        } catch (e) {}


        /***/ }),

    /***/ "./node_modules/imask/esm/masked/base.js":
    /*!***********************************************!*\
  !*** ./node_modules/imask/esm/masked/base.js ***!
  \***********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Masked)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");






        /** Supported mask type */

        /** Provides common masking stuff */
        var Masked = /*#__PURE__*/function () {
            // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773

            /** @type {Mask} */

            /** */
            // $FlowFixMe no ideas

            /** Transforms value before mask processing */

            /** Validates if value is acceptable */

            /** Does additional processing in the end of editing */

            /** Format typed value to string */

            /** Parse strgin to get typed value */

            /** Enable characters overwriting */

            /** */

            /** */
            function Masked(opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, Masked);

                this._value = '';

                this._update(Object.assign({}, Masked.DEFAULTS, opts));

                this.isInitialized = true;
            }
            /** Sets and applies new options */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(Masked, [{
                key: "updateOptions",
                value: function updateOptions(opts) {
                    if (!Object.keys(opts).length) return; // $FlowFixMe

                    this.withValueRefresh(this._update.bind(this, opts));
                }
                /**
                 Sets new options
                 @protected
                 */

            }, {
                key: "_update",
                value: function _update(opts) {
                    Object.assign(this, opts);
                }
                /** Mask state */

            }, {
                key: "state",
                get: function get() {
                    return {
                        _value: this.value
                    };
                },
                set: function set(state) {
                    this._value = state._value;
                }
                /** Resets value */

            }, {
                key: "reset",
                value: function reset() {
                    this._value = '';
                }
                /** */

            }, {
                key: "value",
                get: function get() {
                    return this._value;
                },
                set: function set(value) {
                    this.resolve(value);
                }
                /** Resolve new value */

            }, {
                key: "resolve",
                value: function resolve(value) {
                    this.reset();
                    this.append(value, {
                        input: true
                    }, '');
                    this.doCommit();
                    return this.value;
                }
                /** */

            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this.value;
                },
                set: function set(value) {
                    this.reset();
                    this.append(value, {}, '');
                    this.doCommit();
                }
                /** */

            }, {
                key: "typedValue",
                get: function get() {
                    return this.doParse(this.value);
                },
                set: function set(value) {
                    this.value = this.doFormat(value);
                }
                /** Value that includes raw user input */

            }, {
                key: "rawInputValue",
                get: function get() {
                    return this.extractInput(0, this.value.length, {
                        raw: true
                    });
                },
                set: function set(value) {
                    this.reset();
                    this.append(value, {
                        raw: true
                    }, '');
                    this.doCommit();
                }
                /** */

            }, {
                key: "isComplete",
                get: function get() {
                    return true;
                }
                /** */

            }, {
                key: "isFilled",
                get: function get() {
                    return this.isComplete;
                }
                /** Finds nearest input position in direction */

            }, {
                key: "nearestInputPos",
                value: function nearestInputPos(cursorPos, direction) {
                    return cursorPos;
                }
                /** Extracts value in range considering flags */

            }, {
                key: "extractInput",
                value: function extractInput() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    return this.value.slice(fromPos, toPos);
                }
                /** Extracts tail in range */

            }, {
                key: "extractTail",
                value: function extractTail() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    return new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_2__["default"](this.extractInput(fromPos, toPos), fromPos);
                }
                /** Appends tail */
                // $FlowFixMe no ideas

            }, {
                key: "appendTail",
                value: function appendTail(tail) {
                    if ((0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.isString)(tail)) tail = new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_2__["default"](String(tail));
                    return tail.appendTo(this);
                }
                /** Appends char */

            }, {
                key: "_appendCharRaw",
                value: function _appendCharRaw(ch) {
                    if (!ch) return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                    this._value += ch;
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
                        inserted: ch,
                        rawInserted: ch
                    });
                }
                /** Appends char */

            }, {
                key: "_appendChar",
                value: function _appendChar(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var checkTail = arguments.length > 2 ? arguments[2] : undefined;
                    var consistentState = this.state;
                    var details;

                    var _normalizePrepare = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.normalizePrepare)(this.doPrepare(ch, flags));

                    var _normalizePrepare2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_normalizePrepare, 2);

                    ch = _normalizePrepare2[0];
                    details = _normalizePrepare2[1];
                    details = details.aggregate(this._appendCharRaw(ch, flags));

                    if (details.inserted) {
                        var consistentTail;
                        var appended = this.doValidate(flags) !== false;

                        if (appended && checkTail != null) {
                            // validation ok, check tail
                            var beforeTailState = this.state;

                            if (this.overwrite === true) {
                                consistentTail = checkTail.state;
                                checkTail.unshift(this.value.length);
                            }

                            var tailDetails = this.appendTail(checkTail);
                            appended = tailDetails.rawInserted === checkTail.toString(); // not ok, try shift

                            if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {
                                this.state = beforeTailState;
                                consistentTail = checkTail.state;
                                checkTail.shift();
                                tailDetails = this.appendTail(checkTail);
                                appended = tailDetails.rawInserted === checkTail.toString();
                            } // if ok, rollback state after tail


                            if (appended && tailDetails.inserted) this.state = beforeTailState;
                        } // revert all if something went wrong


                        if (!appended) {
                            details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                            this.state = consistentState;
                            if (checkTail && consistentTail) checkTail.state = consistentTail;
                        }
                    }

                    return details;
                }
                /** Appends optional placeholder at end */

            }, {
                key: "_appendPlaceholder",
                value: function _appendPlaceholder() {
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                }
                /** Appends optional eager placeholder at end */

            }, {
                key: "_appendEager",
                value: function _appendEager() {
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                }
                /** Appends symbols considering flags */
                // $FlowFixMe no ideas

            }, {
                key: "append",
                value: function append(str, flags, tail) {
                    if (!(0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.isString)(str)) throw new Error('value should be string');
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                    var checkTail = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.isString)(tail) ? new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_2__["default"](String(tail)) : tail;
                    if (flags !== null && flags !== void 0 && flags.tail) flags._beforeTailState = this.state;

                    for (var ci = 0; ci < str.length; ++ci) {
                        details.aggregate(this._appendChar(str[ci], flags, checkTail));
                    } // append tail but aggregate only tailShift


                    if (checkTail != null) {
                        details.tailShift += this.appendTail(checkTail).tailShift; // TODO it's a good idea to clear state after appending ends
                        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)
                        // this._resetBeforeTailState();
                    }

                    if (this.eager && flags !== null && flags !== void 0 && flags.input && str) {
                        details.aggregate(this._appendEager());
                    }

                    return details;
                }
                /** */

            }, {
                key: "remove",
                value: function remove() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                }
                /** Calls function and reapplies current value */

            }, {
                key: "withValueRefresh",
                value: function withValueRefresh(fn) {
                    if (this._refreshing || !this.isInitialized) return fn();
                    this._refreshing = true;
                    var rawInput = this.rawInputValue;
                    var value = this.value;
                    var ret = fn();
                    this.rawInputValue = rawInput; // append lost trailing chars at end

                    if (this.value && this.value !== value && value.indexOf(this.value) === 0) {
                        this.append(value.slice(this.value.length), {}, '');
                    }

                    delete this._refreshing;
                    return ret;
                }
                /** */

            }, {
                key: "runIsolated",
                value: function runIsolated(fn) {
                    if (this._isolated || !this.isInitialized) return fn(this);
                    this._isolated = true;
                    var state = this.state;
                    var ret = fn(this);
                    this.state = state;
                    delete this._isolated;
                    return ret;
                }
                /**
                 Prepares string before mask processing
                 @protected
                 */

            }, {
                key: "doPrepare",
                value: function doPrepare(str) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    return this.prepare ? this.prepare(str, this, flags) : str;
                }
                /**
                 Validates if value is acceptable
                 @protected
                 */

            }, {
                key: "doValidate",
                value: function doValidate(flags) {
                    return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));
                }
                /**
                 Does additional processing in the end of editing
                 @protected
                 */

            }, {
                key: "doCommit",
                value: function doCommit() {
                    if (this.commit) this.commit(this.value, this);
                }
                /** */

            }, {
                key: "doFormat",
                value: function doFormat(value) {
                    return this.format ? this.format(value, this) : value;
                }
                /** */

            }, {
                key: "doParse",
                value: function doParse(str) {
                    return this.parse ? this.parse(str, this) : str;
                }
                /** */

            }, {
                key: "splice",
                value: function splice(start, deleteCount, inserted, removeDirection) {
                    var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
                        input: true
                    };
                    var tailPos = start + deleteCount;
                    var tail = this.extractTail(tailPos);
                    var oldRawValue;

                    if (this.eager) {
                        removeDirection = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.forceDirection)(removeDirection);
                        oldRawValue = this.extractInput(0, tailPos, {
                            raw: true
                        });
                    }

                    var startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !this.eager ? _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.NONE : removeDirection);
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
                        tailShift: startChangePos - start // adjust tailShift if start was aligned

                    }).aggregate(this.remove(startChangePos));

                    if (this.eager && removeDirection !== _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.NONE && oldRawValue === this.rawInputValue) {
                        if (removeDirection === _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.FORCE_LEFT) {
                            var valLength;

                            while (oldRawValue === this.rawInputValue && (valLength = this.value.length)) {
                                details.aggregate(new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
                                    tailShift: -1
                                })).aggregate(this.remove(valLength - 1));
                            }
                        } else if (removeDirection === _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.FORCE_RIGHT) {
                            tail.unshift();
                        }
                    }

                    return details.aggregate(this.append(inserted, flags, tail));
                }
            }, {
                key: "maskEquals",
                value: function maskEquals(mask) {
                    return this.mask === mask;
                }
            }, {
                key: "typedValueEquals",
                value: function typedValueEquals(value) {
                    var tval = this.typedValue;
                    return value === tval || Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) || this.doFormat(value) === this.doFormat(this.typedValue);
                }
            }]);

            return Masked;
        }();
        Masked.DEFAULTS = {
            format: function format(v) {
                return v;
            },
            parse: function parse(v) {
                return v;
            }
        };
        Masked.EMPTY_VALUES = [undefined, null, ''];
        _core_holder_js__WEBPACK_IMPORTED_MODULE_4__["default"].Masked = Masked;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/date.js":
    /*!***********************************************!*\
  !*** ./node_modules/imask/esm/masked/date.js ***!
  \***********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedDate)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pattern.js */ "./node_modules/imask/esm/masked/pattern.js");
        /* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range.js */ "./node_modules/imask/esm/masked/range.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _pattern_cursor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");
        /* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./regexp.js */ "./node_modules/imask/esm/masked/regexp.js");















        /** Date mask */

        var MaskedDate = /*#__PURE__*/function (_MaskedPattern) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedDate, _MaskedPattern);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedDate);

            /** Pattern mask for date according to {@link MaskedDate#format} */

            /** Start date */

            /** End date */

            /** */

            /**
             @param {Object} opts
             */
            function MaskedDate(opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedDate);

                return _super.call(this, Object.assign({}, MaskedDate.DEFAULTS, opts));
            }
            /**
             @override
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedDate, [{
                key: "_update",
                value: function _update(opts) {
                    if (opts.mask === Date) delete opts.mask;
                    if (opts.pattern) opts.mask = opts.pattern;
                    var blocks = opts.blocks;
                    opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block

                    if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();
                    if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();

                    if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {
                        opts.blocks.m.from = opts.min.getMonth() + 1;
                        opts.blocks.m.to = opts.max.getMonth() + 1;

                        if (opts.blocks.m.from === opts.blocks.m.to) {
                            opts.blocks.d.from = opts.min.getDate();
                            opts.blocks.d.to = opts.max.getDate();
                        }
                    }

                    Object.assign(opts.blocks, this.blocks, blocks); // add autofix

                    Object.keys(opts.blocks).forEach(function (bk) {
                        var b = opts.blocks[bk];
                        if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;
                    });

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDate.prototype), "_update", this).call(this, opts);
                }
                /**
                 @override
                 */

            }, {
                key: "doValidate",
                value: function doValidate() {
                    var _get2;

                    var date = this.date;

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return (_get2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDate.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));
                }
                /** Checks if date is exists */

            }, {
                key: "isDateExist",
                value: function isDateExist(str) {
                    return this.format(this.parse(str, this), this).indexOf(str) >= 0;
                }
                /** Parsed Date */

            }, {
                key: "date",
                get: function get() {
                    return this.typedValue;
                },
                set: function set(date) {
                    this.typedValue = date;
                }
                /**
                 @override
                 */

            }, {
                key: "typedValue",
                get: function get() {
                    return this.isComplete ? (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDate.prototype), "typedValue", this) : null;
                },
                set: function set(value) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDate.prototype), "typedValue", value, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "maskEquals",
                value: function maskEquals(mask) {
                    return mask === Date || (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDate.prototype), "maskEquals", this).call(this, mask);
                }
            }]);

            return MaskedDate;
        }(_pattern_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        MaskedDate.DEFAULTS = {
            pattern: 'd{.}`m{.}`Y',
            format: function format(date) {
                if (!date) return '';
                var day = String(date.getDate()).padStart(2, '0');
                var month = String(date.getMonth() + 1).padStart(2, '0');
                var year = date.getFullYear();
                return [day, month, year].join('.');
            },
            parse: function parse(str) {
                var _str$split = str.split('.'),
                    _str$split2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_str$split, 3),
                    day = _str$split2[0],
                    month = _str$split2[1],
                    year = _str$split2[2];

                return new Date(year, month - 1, day);
            }
        };

        MaskedDate.GET_DEFAULT_BLOCKS = function () {
            return {
                d: {
                    mask: _range_js__WEBPACK_IMPORTED_MODULE_2__["default"],
                    from: 1,
                    to: 31,
                    maxLength: 2
                },
                m: {
                    mask: _range_js__WEBPACK_IMPORTED_MODULE_2__["default"],
                    from: 1,
                    to: 12,
                    maxLength: 2
                },
                Y: {
                    mask: _range_js__WEBPACK_IMPORTED_MODULE_2__["default"],
                    from: 1900,
                    to: 9999
                }
            };
        };

        _core_holder_js__WEBPACK_IMPORTED_MODULE_3__["default"].MaskedDate = MaskedDate;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/dynamic.js":
    /*!**************************************************!*\
  !*** ./node_modules/imask/esm/masked/dynamic.js ***!
  \**************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedDynamic)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");








        var _excluded = ["compiledMasks", "currentMaskRef", "currentMask"];

        /** Dynamic mask for choosing apropriate mask in run-time */
        var MaskedDynamic = /*#__PURE__*/function (_Masked) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedDynamic, _Masked);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedDynamic);

            /** Currently chosen mask */

            /** Compliled {@link Masked} options */

            /** Chooses {@link Masked} depending on input value */

            /**
             @param {Object} opts
             */
            function MaskedDynamic(opts) {
                var _this;

                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedDynamic);

                _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));
                _this.currentMask = null;
                return _this;
            }
            /**
             @override
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedDynamic, [{
                key: "_update",
                value: function _update(opts) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "_update", this).call(this, opts);

                    if ('mask' in opts) {
                        // mask could be totally dynamic with only `dispatch` option
                        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {
                            return (0,_factory_js__WEBPACK_IMPORTED_MODULE_2__["default"])(m);
                        }) : [];
                    }
                }
                /**
                 @override
                 */

            }, {
                key: "_appendCharRaw",
                value: function _appendCharRaw(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    var details = this._applyDispatch(ch, flags);

                    if (this.currentMask) {
                        details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));
                    }

                    return details;
                }
            }, {
                key: "_applyDispatch",
                value: function _applyDispatch() {
                    var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;
                    var inputValue = this.rawInputValue;
                    var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system
                        flags._beforeTailState._rawInputValue : inputValue;
                    var tailValue = inputValue.slice(insertValue.length);
                    var prevMask = this.currentMask;
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                    var prevMaskState = prevMask === null || prevMask === void 0 ? void 0 : prevMask.state; // clone flags to prevent overwriting `_beforeTailState`

                    this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch

                    if (this.currentMask) {
                        if (this.currentMask !== prevMask) {
                            // if mask changed reapply input
                            this.currentMask.reset();

                            if (insertValue) {
                                // $FlowFixMe - it's ok, we don't change current mask above
                                var d = this.currentMask.append(insertValue, {
                                    raw: true
                                });
                                details.tailShift = d.inserted.length - prevValueBeforeTail.length;
                            }

                            if (tailValue) {
                                // $FlowFixMe - it's ok, we don't change current mask above
                                details.tailShift += this.currentMask.append(tailValue, {
                                    raw: true,
                                    tail: true
                                }).tailShift;
                            }
                        } else {
                            // Dispatch can do something bad with state, so
                            // restore prev mask state
                            this.currentMask.state = prevMaskState;
                        }
                    }

                    return details;
                }
            }, {
                key: "_appendPlaceholder",
                value: function _appendPlaceholder() {
                    var details = this._applyDispatch.apply(this, arguments);

                    if (this.currentMask) {
                        details.aggregate(this.currentMask._appendPlaceholder());
                    }

                    return details;
                }
                /**
                 @override
                 */

            }, {
                key: "_appendEager",
                value: function _appendEager() {
                    var details = this._applyDispatch.apply(this, arguments);

                    if (this.currentMask) {
                        details.aggregate(this.currentMask._appendEager());
                    }

                    return details;
                }
            }, {
                key: "currentMaskFlags",
                value: function currentMaskFlags(flags) {
                    var _flags$_beforeTailSta, _flags$_beforeTailSta2;

                    return Object.assign({}, flags, {
                        _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) === null || _flags$_beforeTailSta === void 0 ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) === null || _flags$_beforeTailSta2 === void 0 ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "doDispatch",
                value: function doDispatch(appended) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    return this.dispatch(appended, this, flags);
                }
                /**
                 @override
                 */

            }, {
                key: "doValidate",
                value: function doValidate(flags) {
                    return (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "doValidate", this).call(this, flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));
                }
                /**
                 @override
                 */

            }, {
                key: "doPrepare",
                value: function doPrepare(str) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    var _normalizePrepare = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_4__.normalizePrepare)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "doPrepare", this).call(this, str, flags)),
                        _normalizePrepare2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_normalizePrepare, 2),
                        s = _normalizePrepare2[0],
                        details = _normalizePrepare2[1];

                    if (this.currentMask) {
                        var currentDetails;

                        var _normalizePrepare3 = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_4__.normalizePrepare)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "doPrepare", this).call(this, s, this.currentMaskFlags(flags)));

                        var _normalizePrepare4 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_normalizePrepare3, 2);

                        s = _normalizePrepare4[0];
                        currentDetails = _normalizePrepare4[1];
                        details = details.aggregate(currentDetails);
                    }

                    return [s, details];
                }
                /**
                 @override
                 */

            }, {
                key: "reset",
                value: function reset() {
                    var _this$currentMask;

                    (_this$currentMask = this.currentMask) === null || _this$currentMask === void 0 ? void 0 : _this$currentMask.reset();
                    this.compiledMasks.forEach(function (m) {
                        return m.reset();
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "value",
                get: function get() {
                    return this.currentMask ? this.currentMask.value : '';
                },
                set: function set(value) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "value", value, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this.currentMask ? this.currentMask.unmaskedValue : '';
                },
                set: function set(unmaskedValue) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "unmaskedValue", unmaskedValue, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "typedValue",
                get: function get() {
                    return this.currentMask ? this.currentMask.typedValue : '';
                } // probably typedValue should not be used with dynamic
                ,
                set: function set(value) {
                    var unmaskedValue = String(value); // double check it

                    if (this.currentMask) {
                        this.currentMask.typedValue = value;
                        unmaskedValue = this.currentMask.unmaskedValue;
                    }

                    this.unmaskedValue = unmaskedValue;
                }
                /**
                 @override
                 */

            }, {
                key: "isComplete",
                get: function get() {
                    var _this$currentMask2;

                    return Boolean((_this$currentMask2 = this.currentMask) === null || _this$currentMask2 === void 0 ? void 0 : _this$currentMask2.isComplete);
                }
                /**
                 @override
                 */

            }, {
                key: "isFilled",
                get: function get() {
                    var _this$currentMask3;

                    return Boolean((_this$currentMask3 = this.currentMask) === null || _this$currentMask3 === void 0 ? void 0 : _this$currentMask3.isFilled);
                }
                /**
                 @override
                 */

            }, {
                key: "remove",
                value: function remove() {
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();

                    if (this.currentMask) {
                        var _this$currentMask4;

                        details.aggregate((_this$currentMask4 = this.currentMask).remove.apply(_this$currentMask4, arguments)) // update with dispatch
                            .aggregate(this._applyDispatch());
                    }

                    return details;
                }
                /**
                 @override
                 */

            }, {
                key: "state",
                get: function get() {
                    var _this$currentMask5;

                    return Object.assign({}, (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "state", this), {
                        _rawInputValue: this.rawInputValue,
                        compiledMasks: this.compiledMasks.map(function (m) {
                            return m.state;
                        }),
                        currentMaskRef: this.currentMask,
                        currentMask: (_this$currentMask5 = this.currentMask) === null || _this$currentMask5 === void 0 ? void 0 : _this$currentMask5.state
                    });
                },
                set: function set(state) {
                    var compiledMasks = state.compiledMasks,
                        currentMaskRef = state.currentMaskRef,
                        currentMask = state.currentMask,
                        maskedState = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.b)(state, _excluded);

                    this.compiledMasks.forEach(function (m, mi) {
                        return m.state = compiledMasks[mi];
                    });

                    if (currentMaskRef != null) {
                        this.currentMask = currentMaskRef;
                        this.currentMask.state = currentMask;
                    }

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "state", maskedState, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "extractInput",
                value: function extractInput() {
                    var _this$currentMask6;

                    return this.currentMask ? (_this$currentMask6 = this.currentMask).extractInput.apply(_this$currentMask6, arguments) : '';
                }
                /**
                 @override
                 */

            }, {
                key: "extractTail",
                value: function extractTail() {
                    var _this$currentMask7, _get2;

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return this.currentMask ? (_this$currentMask7 = this.currentMask).extractTail.apply(_this$currentMask7, args) : (_get2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "extractTail", this)).call.apply(_get2, [this].concat(args));
                }
                /**
                 @override
                 */

            }, {
                key: "doCommit",
                value: function doCommit() {
                    if (this.currentMask) this.currentMask.doCommit();

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "doCommit", this).call(this);
                }
                /**
                 @override
                 */

            }, {
                key: "nearestInputPos",
                value: function nearestInputPos() {
                    var _this$currentMask8, _get3;

                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }

                    return this.currentMask ? (_this$currentMask8 = this.currentMask).nearestInputPos.apply(_this$currentMask8, args) : (_get3 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "nearestInputPos", this)).call.apply(_get3, [this].concat(args));
                }
            }, {
                key: "overwrite",
                get: function get() {
                    return this.currentMask ? this.currentMask.overwrite : (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "overwrite", this);
                },
                set: function set(overwrite) {
                    console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings');
                }
            }, {
                key: "eager",
                get: function get() {
                    return this.currentMask ? this.currentMask.eager : (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedDynamic.prototype), "eager", this);
                },
                set: function set(eager) {
                    console.warn('"eager" option is not available in dynamic mask, use this option in siblings');
                }
                /**
                 @override
                 */

            }, {
                key: "maskEquals",
                value: function maskEquals(mask) {
                    return Array.isArray(mask) && this.compiledMasks.every(function (m, mi) {
                        var _mask$mi;

                        return m.maskEquals((_mask$mi = mask[mi]) === null || _mask$mi === void 0 ? void 0 : _mask$mi.mask);
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "typedValueEquals",
                value: function typedValueEquals(value) {
                    var _this$currentMask9;

                    return Boolean((_this$currentMask9 = this.currentMask) === null || _this$currentMask9 === void 0 ? void 0 : _this$currentMask9.typedValueEquals(value));
                }
            }]);

            return MaskedDynamic;
        }(_base_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
        MaskedDynamic.DEFAULTS = {
            dispatch: function dispatch(appended, masked, flags) {
                if (!masked.compiledMasks.length) return;
                var inputValue = masked.rawInputValue; // simulate input

                var inputs = masked.compiledMasks.map(function (m, index) {
                    m.reset();
                    m.append(inputValue, {
                        raw: true
                    });
                    m.append(appended, masked.currentMaskFlags(flags));
                    var weight = m.rawInputValue.length;
                    return {
                        weight: weight,
                        index: index
                    };
                }); // pop masks with longer values first

                inputs.sort(function (i1, i2) {
                    return i2.weight - i1.weight;
                });
                return masked.compiledMasks[inputs[0].index];
            }
        };
        _core_holder_js__WEBPACK_IMPORTED_MODULE_5__["default"].MaskedDynamic = MaskedDynamic;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/enum.js":
    /*!***********************************************!*\
  !*** ./node_modules/imask/esm/masked/enum.js ***!
  \***********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedEnum)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pattern.js */ "./node_modules/imask/esm/masked/pattern.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _pattern_cursor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");
        /* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./regexp.js */ "./node_modules/imask/esm/masked/regexp.js");














        /** Pattern which validates enum values */

        var MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedEnum, _MaskedPattern);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedEnum);

            function MaskedEnum() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedEnum);

                return _super.apply(this, arguments);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedEnum, [{
                key: "_update",
                value:
                    /**
                     @override
                     @param {Object} opts
                     */
                    function _update(opts) {
                        // TODO type
                        if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);

                        (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedEnum.prototype), "_update", this).call(this, opts);
                    }
                /**
                 @override
                 */

            }, {
                key: "doValidate",
                value: function doValidate() {
                    var _this = this,
                        _get2;

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return this.enum.some(function (e) {
                        return e.indexOf(_this.unmaskedValue) >= 0;
                    }) && (_get2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedEnum.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args));
                }
            }]);

            return MaskedEnum;
        }(_pattern_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_2__["default"].MaskedEnum = MaskedEnum;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/factory.js":
    /*!**************************************************!*\
  !*** ./node_modules/imask/esm/masked/factory.js ***!
  \**************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ createMask),
            /* harmony export */   "maskedClass": () => (/* binding */ maskedClass)
            /* harmony export */ });
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");





        /** Get Masked class by mask type */

        function maskedClass(mask) {
            if (mask == null) {
                throw new Error('mask property should be defined');
            } // $FlowFixMe


            if (mask instanceof RegExp) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedRegExp; // $FlowFixMe

            if ((0,_core_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(mask)) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedPattern; // $FlowFixMe

            if (mask instanceof Date || mask === Date) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedDate; // $FlowFixMe

            if (mask instanceof Number || typeof mask === 'number' || mask === Number) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedNumber; // $FlowFixMe

            if (Array.isArray(mask) || mask === Array) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedDynamic; // $FlowFixMe

            if (_core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked && mask.prototype instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked) return mask; // $FlowFixMe

            if (mask instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked) return mask.constructor; // $FlowFixMe

            if (mask instanceof Function) return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].MaskedFunction;
            console.warn('Mask not found for mask', mask); // eslint-disable-line no-console
            // $FlowFixMe

            return _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked;
        }
        /** Creates new {@link Masked} depending on mask type */

        function createMask(opts) {
            // $FlowFixMe
            if (_core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked && opts instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked) return opts;
            opts = Object.assign({}, opts);
            var mask = opts.mask; // $FlowFixMe

            if (_core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked && mask instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].Masked) return mask;
            var MaskedClass = maskedClass(mask);
            if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');
            return new MaskedClass(opts);
        }
        _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].createMask = createMask;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/function.js":
    /*!***************************************************!*\
  !*** ./node_modules/imask/esm/masked/function.js ***!
  \***************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedFunction)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");







        /** Masking by custom Function */

        var MaskedFunction = /*#__PURE__*/function (_Masked) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedFunction, _Masked);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedFunction);

            function MaskedFunction() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedFunction);

                return _super.apply(this, arguments);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedFunction, [{
                key: "_update",
                value:
                    /**
                     @override
                     @param {Object} opts
                     */
                    function _update(opts) {
                        if (opts.mask) opts.validate = opts.mask;

                        (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedFunction.prototype), "_update", this).call(this, opts);
                    }
            }]);

            return MaskedFunction;
        }(_base_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_2__["default"].MaskedFunction = MaskedFunction;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/number.js":
    /*!*************************************************!*\
  !*** ./node_modules/imask/esm/masked/number.js ***!
  \*************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedNumber)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");







        /**
         Number mask
         @param {Object} opts
         @param {string} opts.radix - Single char
         @param {string} opts.thousandsSeparator - Single char
         @param {Array<string>} opts.mapToRadix - Array of single chars
         @param {number} opts.min
         @param {number} opts.max
         @param {number} opts.scale - Digits after point
         @param {boolean} opts.signed - Allow negative
         @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing
         @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing
         */
        var MaskedNumber = /*#__PURE__*/function (_Masked) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedNumber, _Masked);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedNumber);

            /** Single char */

            /** Single char */

            /** Array of single chars */

            /** */

            /** */

            /** Digits after point */

            /** */

            /** Flag to remove leading and trailing zeros in the end of editing */

            /** Flag to pad trailing zeros after point in the end of editing */
            function MaskedNumber(opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedNumber);

                return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));
            }
            /**
             @override
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedNumber, [{
                key: "_update",
                value: function _update(opts) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "_update", this).call(this, opts);

                    this._updateRegExps();
                }
                /** */

            }, {
                key: "_updateRegExps",
                value: function _updateRegExps() {
                    // use different regexp to process user input (more strict, input suffix) and tail shifting
                    var start = '^' + (this.allowNegative ? '[+|\\-]?' : '');
                    var midInput = '(0|([1-9]+\\d*))?';
                    var mid = '\\d*';
                    var end = (this.scale ? '(' + (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(this.radix) + '\\d{0,' + this.scale + '})?' : '') + '$';
                    this._numberRegExpInput = new RegExp(start + midInput + end);
                    this._numberRegExp = new RegExp(start + mid + end);
                    this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(_core_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp).join('') + ']', 'g');
                    this._thousandsSeparatorRegExp = new RegExp((0,_core_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(this.thousandsSeparator), 'g');
                }
                /** */

            }, {
                key: "_removeThousandsSeparators",
                value: function _removeThousandsSeparators(value) {
                    return value.replace(this._thousandsSeparatorRegExp, '');
                }
                /** */

            }, {
                key: "_insertThousandsSeparators",
                value: function _insertThousandsSeparators(value) {
                    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
                    var parts = value.split(this.radix);
                    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, this.thousandsSeparator);
                    return parts.join(this.radix);
                }
                /**
                 @override
                 */

            }, {
                key: "doPrepare",
                value: function doPrepare(ch) {
                    var _get2;

                    ch = ch.replace(this._mapToRadixRegExp, this.radix);

                    var noSepCh = this._removeThousandsSeparators(ch);

                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }

                    var _normalizePrepare = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_1__.normalizePrepare)((_get2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "doPrepare", this)).call.apply(_get2, [this, noSepCh].concat(args))),
                        _normalizePrepare2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_normalizePrepare, 2),
                        prepCh = _normalizePrepare2[0],
                        details = _normalizePrepare2[1];

                    if (ch && !noSepCh) details.skip = true;
                    return [prepCh, details];
                }
                /** */

            }, {
                key: "_separatorsCount",
                value: function _separatorsCount(to) {
                    var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                    var count = 0;

                    for (var pos = 0; pos < to; ++pos) {
                        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {
                            ++count;
                            if (extendOnSeparators) to += this.thousandsSeparator.length;
                        }
                    }

                    return count;
                }
                /** */

            }, {
                key: "_separatorsCountFromSlice",
                value: function _separatorsCountFromSlice() {
                    var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;
                    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);
                }
                /**
                 @override
                 */

            }, {
                key: "extractInput",
                value: function extractInput() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    var flags = arguments.length > 2 ? arguments[2] : undefined;

                    var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);

                    var _this$_adjustRangeWit2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_this$_adjustRangeWit, 2);

                    fromPos = _this$_adjustRangeWit2[0];
                    toPos = _this$_adjustRangeWit2[1];
                    return this._removeThousandsSeparators((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "extractInput", this).call(this, fromPos, toPos, flags));
                }
                /**
                 @override
                 */

            }, {
                key: "_appendCharRaw",
                value: function _appendCharRaw(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    if (!this.thousandsSeparator) return (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "_appendCharRaw", this).call(this, ch, flags);
                    var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;

                    var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);

                    this._value = this._removeThousandsSeparators(this.value);

                    var appendDetails = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "_appendCharRaw", this).call(this, ch, flags);

                    this._value = this._insertThousandsSeparators(this._value);
                    var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;

                    var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);

                    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;
                    appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;
                    return appendDetails;
                }
                /** */

            }, {
                key: "_findSeparatorAround",
                value: function _findSeparatorAround(pos) {
                    if (this.thousandsSeparator) {
                        var searchFrom = pos - this.thousandsSeparator.length + 1;
                        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);
                        if (separatorPos <= pos) return separatorPos;
                    }

                    return -1;
                }
            }, {
                key: "_adjustRangeWithSeparators",
                value: function _adjustRangeWithSeparators(from, to) {
                    var separatorAroundFromPos = this._findSeparatorAround(from);

                    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;

                    var separatorAroundToPos = this._findSeparatorAround(to);

                    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;
                    return [from, to];
                }
                /**
                 @override
                 */

            }, {
                key: "remove",
                value: function remove() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;

                    var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);

                    var _this$_adjustRangeWit4 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_this$_adjustRangeWit3, 2);

                    fromPos = _this$_adjustRangeWit4[0];
                    toPos = _this$_adjustRangeWit4[1];
                    var valueBeforePos = this.value.slice(0, fromPos);
                    var valueAfterPos = this.value.slice(toPos);

                    var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);

                    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));

                    var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);

                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]({
                        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "nearestInputPos",
                value: function nearestInputPos(cursorPos, direction) {
                    if (!this.thousandsSeparator) return cursorPos;

                    switch (direction) {
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_LEFT:
                        {
                            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);

                            if (separatorAtLeftPos >= 0) {
                                var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;

                                if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_LEFT) {
                                    return separatorAtLeftPos;
                                }
                            }

                            break;
                        }

                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.RIGHT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_RIGHT:
                        {
                            var separatorAtRightPos = this._findSeparatorAround(cursorPos);

                            if (separatorAtRightPos >= 0) {
                                return separatorAtRightPos + this.thousandsSeparator.length;
                            }
                        }
                    }

                    return cursorPos;
                }
                /**
                 @override
                 */

            }, {
                key: "doValidate",
                value: function doValidate(flags) {
                    var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string

                    var valid = regexp.test(this._removeThousandsSeparators(this.value));

                    if (valid) {
                        // validate as number
                        var number = this.number;
                        valid = valid && !isNaN(number) && ( // check min bound for negative values
                            this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values
                            this.max == null || this.max <= 0 || this.number <= this.max);
                    }

                    return valid && (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "doValidate", this).call(this, flags);
                }
                /**
                 @override
                 */

            }, {
                key: "doCommit",
                value: function doCommit() {
                    if (this.value) {
                        var number = this.number;
                        var validnum = number; // check bounds

                        if (this.min != null) validnum = Math.max(validnum, this.min);
                        if (this.max != null) validnum = Math.min(validnum, this.max);
                        if (validnum !== number) this.unmaskedValue = String(validnum);
                        var formatted = this.value;
                        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);
                        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);
                        this._value = formatted;
                    }

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "doCommit", this).call(this);
                }
                /** */

            }, {
                key: "_normalizeZeros",
                value: function _normalizeZeros(value) {
                    var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros


                    parts[0] = parts[0].replace(/^(\D*)(0*)(\d*)/, function (match, sign, zeros, num) {
                        return sign + num;
                    }); // add leading zero

                    if (value.length && !/\d$/.test(parts[0])) parts[0] = parts[0] + '0';

                    if (parts.length > 1) {
                        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros

                        if (!parts[1].length) parts.length = 1; // remove fractional
                    }

                    return this._insertThousandsSeparators(parts.join(this.radix));
                }
                /** */

            }, {
                key: "_padFractionalZeros",
                value: function _padFractionalZeros(value) {
                    if (!value) return value;
                    var parts = value.split(this.radix);
                    if (parts.length < 2) parts.push('');
                    parts[1] = parts[1].padEnd(this.scale, '0');
                    return parts.join(this.radix);
                }
                /**
                 @override
                 */

            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');
                },
                set: function set(unmaskedValue) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "unmaskedValue", unmaskedValue.replace('.', this.radix), this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "typedValue",
                get: function get() {
                    return Number(this.unmaskedValue);
                },
                set: function set(n) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "unmaskedValue", String(n), this, true);
                }
                /** Parsed Number */

            }, {
                key: "number",
                get: function get() {
                    return this.typedValue;
                },
                set: function set(number) {
                    this.typedValue = number;
                }
                /**
                 Is negative allowed
                 @readonly
                 */

            }, {
                key: "allowNegative",
                get: function get() {
                    return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;
                }
                /**
                 @override
                 */

            }, {
                key: "typedValueEquals",
                value: function typedValueEquals(value) {
                    // handle  0 -> '' case (typed = 0 even if value = '')
                    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
                    return ((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedNumber.prototype), "typedValueEquals", this).call(this, value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');
                }
            }]);

            return MaskedNumber;
        }(_base_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
        MaskedNumber.DEFAULTS = {
            radix: ',',
            thousandsSeparator: '',
            mapToRadix: ['.'],
            scale: 2,
            signed: false,
            normalizeZeros: true,
            padFractionalZeros: false
        };
        MaskedNumber.EMPTY_VALUES = [].concat((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.j)(_base_js__WEBPACK_IMPORTED_MODULE_3__["default"].EMPTY_VALUES), [0]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_4__["default"].MaskedNumber = MaskedNumber;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pattern.js":
    /*!**************************************************!*\
  !*** ./node_modules/imask/esm/masked/pattern.js ***!
  \**************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedPattern)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _pattern_cursor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./regexp.js */ "./node_modules/imask/esm/masked/regexp.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");













        var _excluded = ["_blocks"];

        /**
         Pattern mask
         @param {Object} opts
         @param {Object} opts.blocks
         @param {Object} opts.definitions
         @param {string} opts.placeholderChar
         @param {boolean} opts.lazy
         */
        var MaskedPattern = /*#__PURE__*/function (_Masked) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedPattern, _Masked);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedPattern);

            /** */

            /** */

            /** Single char for empty input */

            /** Show placeholder only when needed */
            function MaskedPattern() {
                var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedPattern);

                // TODO type $Shape<MaskedPatternOptions>={} does not work
                opts.definitions = Object.assign({}, _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_INPUT_DEFINITIONS, opts.definitions);
                return _super.call(this, Object.assign({}, MaskedPattern.DEFAULTS, opts));
            }
            /**
             @override
             @param {Object} opts
             */


            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedPattern, [{
                key: "_update",
                value: function _update() {
                    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    opts.definitions = Object.assign({}, this.definitions, opts.definitions);

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "_update", this).call(this, opts);

                    this._rebuildMask();
                }
                /** */

            }, {
                key: "_rebuildMask",
                value: function _rebuildMask() {
                    var _this = this;

                    var defs = this.definitions;
                    this._blocks = [];
                    this._stops = [];
                    this._maskedBlocks = {};
                    var pattern = this.mask;
                    if (!pattern || !defs) return;
                    var unmaskingBlock = false;
                    var optionalBlock = false;

                    for (var i = 0; i < pattern.length; ++i) {
                        if (this.blocks) {
                            var _ret = function () {
                                var p = pattern.slice(i);
                                var bNames = Object.keys(_this.blocks).filter(function (bName) {
                                    return p.indexOf(bName) === 0;
                                }); // order by key length

                                bNames.sort(function (a, b) {
                                    return b.length - a.length;
                                }); // use block name with max length

                                var bName = bNames[0];

                                if (bName) {
                                    // $FlowFixMe no ideas
                                    var maskedBlock = (0,_factory_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({
                                        parent: _this,
                                        lazy: _this.lazy,
                                        eager: _this.eager,
                                        placeholderChar: _this.placeholderChar,
                                        overwrite: _this.overwrite
                                    }, _this.blocks[bName]));

                                    if (maskedBlock) {
                                        _this._blocks.push(maskedBlock); // store block index


                                        if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];

                                        _this._maskedBlocks[bName].push(_this._blocks.length - 1);
                                    }

                                    i += bName.length - 1;
                                    return "continue";
                                }
                            }();

                            if (_ret === "continue") continue;
                        }

                        var char = pattern[i];
                        var isInput = (char in defs);

                        if (char === MaskedPattern.STOP_CHAR) {
                            this._stops.push(this._blocks.length);

                            continue;
                        }

                        if (char === '{' || char === '}') {
                            unmaskingBlock = !unmaskingBlock;
                            continue;
                        }

                        if (char === '[' || char === ']') {
                            optionalBlock = !optionalBlock;
                            continue;
                        }

                        if (char === MaskedPattern.ESCAPE_CHAR) {
                            ++i;
                            char = pattern[i];
                            if (!char) break;
                            isInput = false;
                        }

                        var def = isInput ? new _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_4__["default"]({
                            parent: this,
                            lazy: this.lazy,
                            eager: this.eager,
                            placeholderChar: this.placeholderChar,
                            mask: defs[char],
                            isOptional: optionalBlock
                        }) : new _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_5__["default"]({
                            char: char,
                            eager: this.eager,
                            isUnmasking: unmaskingBlock
                        });

                        this._blocks.push(def);
                    }
                }
                /**
                 @override
                 */

            }, {
                key: "state",
                get: function get() {
                    return Object.assign({}, (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "state", this), {
                        _blocks: this._blocks.map(function (b) {
                            return b.state;
                        })
                    });
                },
                set: function set(state) {
                    var _blocks = state._blocks,
                        maskedState = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.b)(state, _excluded);

                    this._blocks.forEach(function (b, bi) {
                        return b.state = _blocks[bi];
                    });

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "state", maskedState, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "reset",
                value: function reset() {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "reset", this).call(this);

                    this._blocks.forEach(function (b) {
                        return b.reset();
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "isComplete",
                get: function get() {
                    return this._blocks.every(function (b) {
                        return b.isComplete;
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "isFilled",
                get: function get() {
                    return this._blocks.every(function (b) {
                        return b.isFilled;
                    });
                }
            }, {
                key: "isFixed",
                get: function get() {
                    return this._blocks.every(function (b) {
                        return b.isFixed;
                    });
                }
            }, {
                key: "isOptional",
                get: function get() {
                    return this._blocks.every(function (b) {
                        return b.isOptional;
                    });
                }
                /**
                 @override
                 */

            }, {
                key: "doCommit",
                value: function doCommit() {
                    this._blocks.forEach(function (b) {
                        return b.doCommit();
                    });

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "doCommit", this).call(this);
                }
                /**
                 @override
                 */

            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this._blocks.reduce(function (str, b) {
                        return str += b.unmaskedValue;
                    }, '');
                },
                set: function set(unmaskedValue) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "unmaskedValue", unmaskedValue, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "value",
                get: function get() {
                    // TODO return _value when not in change?
                    return this._blocks.reduce(function (str, b) {
                        return str += b.value;
                    }, '');
                },
                set: function set(value) {
                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.i)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "value", value, this, true);
                }
                /**
                 @override
                 */

            }, {
                key: "appendTail",
                value: function appendTail(tail) {
                    return (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "appendTail", this).call(this, tail).aggregate(this._appendPlaceholder());
                }
                /**
                 @override
                 */

            }, {
                key: "_appendEager",
                value: function _appendEager() {
                    var _this$_mapPosToBlock;

                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                    var startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.value.length)) === null || _this$_mapPosToBlock === void 0 ? void 0 : _this$_mapPosToBlock.index;
                    if (startBlockIndex == null) return details; // TODO test if it works for nested pattern masks

                    if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;

                    for (var bi = startBlockIndex; bi < this._blocks.length; ++bi) {
                        var d = this._blocks[bi]._appendEager();

                        if (!d.inserted) break;
                        details.aggregate(d);
                    }

                    return details;
                }
                /**
                 @override
                 */

            }, {
                key: "_appendCharRaw",
                value: function _appendCharRaw(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    var blockIter = this._mapPosToBlock(this.value.length);

                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                    if (!blockIter) return details;

                    for (var bi = blockIter.index;; ++bi) {
                        var _flags$_beforeTailSta, _flags$_beforeTailSta2;

                        var _block = this._blocks[bi];
                        if (!_block) break;

                        var blockDetails = _block._appendChar(ch, Object.assign({}, flags, {
                            _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) === null || _flags$_beforeTailSta === void 0 ? void 0 : (_flags$_beforeTailSta2 = _flags$_beforeTailSta._blocks) === null || _flags$_beforeTailSta2 === void 0 ? void 0 : _flags$_beforeTailSta2[bi]
                        }));

                        var skip = blockDetails.skip;
                        details.aggregate(blockDetails);
                        if (skip || blockDetails.rawInserted) break; // go next char
                    }

                    return details;
                }
                /**
                 @override
                 */

            }, {
                key: "extractTail",
                value: function extractTail() {
                    var _this2 = this;

                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    var chunkTail = new _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_6__["default"]();
                    if (fromPos === toPos) return chunkTail;

                    this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {
                        var blockChunk = b.extractTail(bFromPos, bToPos);
                        blockChunk.stop = _this2._findStopBefore(bi);
                        blockChunk.from = _this2._blockStartPos(bi);
                        if (blockChunk instanceof _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_6__["default"]) blockChunk.blockIndex = bi;
                        chunkTail.extend(blockChunk);
                    });

                    return chunkTail;
                }
                /**
                 @override
                 */

            }, {
                key: "extractInput",
                value: function extractInput() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    if (fromPos === toPos) return '';
                    var input = '';

                    this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {
                        input += b.extractInput(fromPos, toPos, flags);
                    });

                    return input;
                }
            }, {
                key: "_findStopBefore",
                value: function _findStopBefore(blockIndex) {
                    var stopBefore;

                    for (var si = 0; si < this._stops.length; ++si) {
                        var stop = this._stops[si];
                        if (stop <= blockIndex) stopBefore = stop;else break;
                    }

                    return stopBefore;
                }
                /** Appends placeholder depending on laziness */

            }, {
                key: "_appendPlaceholder",
                value: function _appendPlaceholder(toBlockIndex) {
                    var _this3 = this;

                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                    if (this.lazy && toBlockIndex == null) return details;

                    var startBlockIter = this._mapPosToBlock(this.value.length);

                    if (!startBlockIter) return details;
                    var startBlockIndex = startBlockIter.index;
                    var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;

                    this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {
                        if (!b.lazy || toBlockIndex != null) {
                            // $FlowFixMe `_blocks` may not be present
                            var args = b._blocks != null ? [b._blocks.length] : [];

                            var bDetails = b._appendPlaceholder.apply(b, args);

                            _this3._value += bDetails.inserted;
                            details.aggregate(bDetails);
                        }
                    });

                    return details;
                }
                /** Finds block in pos */

            }, {
                key: "_mapPosToBlock",
                value: function _mapPosToBlock(pos) {
                    var accVal = '';

                    for (var bi = 0; bi < this._blocks.length; ++bi) {
                        var _block2 = this._blocks[bi];
                        var blockStartPos = accVal.length;
                        accVal += _block2.value;

                        if (pos <= accVal.length) {
                            return {
                                index: bi,
                                offset: pos - blockStartPos
                            };
                        }
                    }
                }
                /** */

            }, {
                key: "_blockStartPos",
                value: function _blockStartPos(blockIndex) {
                    return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {
                        return pos += b.value.length;
                    }, 0);
                }
                /** */

            }, {
                key: "_forEachBlocksInRange",
                value: function _forEachBlocksInRange(fromPos) {
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    var fn = arguments.length > 2 ? arguments[2] : undefined;

                    var fromBlockIter = this._mapPosToBlock(fromPos);

                    if (fromBlockIter) {
                        var toBlockIter = this._mapPosToBlock(toPos); // process first block


                        var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;
                        var fromBlockStartPos = fromBlockIter.offset;
                        var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;
                        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);

                        if (toBlockIter && !isSameBlock) {
                            // process intermediate blocks
                            for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {
                                fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);
                            } // process last block


                            fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);
                        }
                    }
                }
                /**
                 @override
                 */

            }, {
                key: "remove",
                value: function remove() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;

                    var removeDetails = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedPattern.prototype), "remove", this).call(this, fromPos, toPos);

                    this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {
                        removeDetails.aggregate(b.remove(bFromPos, bToPos));
                    });

                    return removeDetails;
                }
                /**
                 @override
                 */

            }, {
                key: "nearestInputPos",
                value: function nearestInputPos(cursorPos) {
                    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE;
                    if (!this._blocks.length) return 0;
                    var cursor = new _pattern_cursor_js__WEBPACK_IMPORTED_MODULE_7__["default"](this, cursorPos);

                    if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE) {
                        // -------------------------------------------------
                        // NONE should only go out from fixed to the right!
                        // -------------------------------------------------
                        if (cursor.pushRightBeforeInput()) return cursor.pos;
                        cursor.popState();
                        if (cursor.pushLeftBeforeInput()) return cursor.pos;
                        return this.value.length;
                    } // FORCE is only about a|* otherwise is 0


                    if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT || direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_LEFT) {
                        // try to break fast when *|a
                        if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT) {
                            cursor.pushRightBeforeFilled();
                            if (cursor.ok && cursor.pos === cursorPos) return cursorPos;
                            cursor.popState();
                        } // forward flow


                        cursor.pushLeftBeforeInput();
                        cursor.pushLeftBeforeRequired();
                        cursor.pushLeftBeforeFilled(); // backward flow

                        if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT) {
                            cursor.pushRightBeforeInput();
                            cursor.pushRightBeforeRequired();
                            if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
                            cursor.popState();
                            if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
                            cursor.popState();
                        }

                        if (cursor.ok) return cursor.pos;
                        if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_LEFT) return 0;
                        cursor.popState();
                        if (cursor.ok) return cursor.pos;
                        cursor.popState();
                        if (cursor.ok) return cursor.pos; // cursor.popState();
                        // if (
                        //   cursor.pushRightBeforeInput() &&
                        //   // TODO HACK for lazy if has aligned left inside fixed and has came to the start - use start position
                        //   (!this.lazy || this.extractInput())
                        // ) return cursor.pos;

                        return 0;
                    }

                    if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.RIGHT || direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_RIGHT) {
                        // forward flow
                        cursor.pushRightBeforeInput();
                        cursor.pushRightBeforeRequired();
                        if (cursor.pushRightBeforeFilled()) return cursor.pos;
                        if (direction === _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_RIGHT) return this.value.length; // backward flow

                        cursor.popState();
                        if (cursor.ok) return cursor.pos;
                        cursor.popState();
                        if (cursor.ok) return cursor.pos;
                        return this.nearestInputPos(cursorPos, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT);
                    }

                    return cursorPos;
                }
                /** Get block by name */

            }, {
                key: "maskedBlock",
                value: function maskedBlock(name) {
                    return this.maskedBlocks(name)[0];
                }
                /** Get all blocks by name */

            }, {
                key: "maskedBlocks",
                value: function maskedBlocks(name) {
                    var _this4 = this;

                    var indices = this._maskedBlocks[name];
                    if (!indices) return [];
                    return indices.map(function (gi) {
                        return _this4._blocks[gi];
                    });
                }
            }]);

            return MaskedPattern;
        }(_base_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
        MaskedPattern.DEFAULTS = {
            lazy: true,
            placeholderChar: '_'
        };
        MaskedPattern.STOP_CHAR = '`';
        MaskedPattern.ESCAPE_CHAR = '\\';
        MaskedPattern.InputDefinition = _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_4__["default"];
        MaskedPattern.FixedDefinition = _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_5__["default"];
        _core_holder_js__WEBPACK_IMPORTED_MODULE_9__["default"].MaskedPattern = MaskedPattern;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/imask/esm/masked/pattern/chunk-tail-details.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ ChunksTailDetails)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/holder.js */ "./node_modules/imask/esm/core/holder.js");






        var _excluded = ["chunks"];

        var ChunksTailDetails = /*#__PURE__*/function () {
            /** */
            function ChunksTailDetails() {
                var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, ChunksTailDetails);

                this.chunks = chunks;
                this.from = from;
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(ChunksTailDetails, [{
                key: "toString",
                value: function toString() {
                    return this.chunks.map(String).join('');
                } // $FlowFixMe no ideas

            }, {
                key: "extend",
                value: function extend(tailChunk) {
                    if (!String(tailChunk)) return;
                    if ((0,_core_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(tailChunk)) tailChunk = new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"](String(tailChunk));
                    var lastChunk = this.chunks[this.chunks.length - 1];
                    var extendLast = lastChunk && ( // if stops are same or tail has no stop
                            lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk
                        tailChunk.from === lastChunk.from + lastChunk.toString().length;

                    if (tailChunk instanceof _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"]) {
                        // check the ability to extend previous chunk
                        if (extendLast) {
                            // extend previous chunk
                            lastChunk.extend(tailChunk.toString());
                        } else {
                            // append new chunk
                            this.chunks.push(tailChunk);
                        }
                    } else if (tailChunk instanceof ChunksTailDetails) {
                        if (tailChunk.stop == null) {
                            // unwrap floating chunks to parent, keeping `from` pos
                            var firstTailChunk;

                            while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {
                                firstTailChunk = tailChunk.chunks.shift();
                                firstTailChunk.from += tailChunk.from;
                                this.extend(firstTailChunk);
                            }
                        } // if tail chunk still has value


                        if (tailChunk.toString()) {
                            // if chunks contains stops, then popup stop to container
                            tailChunk.stop = tailChunk.blockIndex;
                            this.chunks.push(tailChunk);
                        }
                    }
                }
            }, {
                key: "appendTo",
                value: function appendTo(masked) {
                    // $FlowFixMe
                    if (!(masked instanceof _core_holder_js__WEBPACK_IMPORTED_MODULE_4__["default"].MaskedPattern)) {
                        var tail = new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"](this.toString());
                        return tail.appendTo(masked);
                    }

                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();

                    for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {
                        var chunk = this.chunks[ci];

                        var lastBlockIter = masked._mapPosToBlock(masked.value.length);

                        var stop = chunk.stop;
                        var chunkBlock = void 0;

                        if (stop != null && ( // if block not found or stop is behind lastBlock
                            !lastBlockIter || lastBlockIter.index <= stop)) {
                            if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist
                                masked._stops.indexOf(stop) >= 0) {
                                details.aggregate(masked._appendPlaceholder(stop));
                            }

                            chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];
                        }

                        if (chunkBlock) {
                            var tailDetails = chunkBlock.appendTail(chunk);
                            tailDetails.skip = false; // always ignore skip, it will be set on last

                            details.aggregate(tailDetails);
                            masked._value += tailDetails.inserted; // get not inserted chars

                            var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);
                            if (remainChars) details.aggregate(masked.append(remainChars, {
                                tail: true
                            }));
                        } else {
                            details.aggregate(masked.append(chunk.toString(), {
                                tail: true
                            }));
                        }
                    }
                    return details;
                }
            }, {
                key: "state",
                get: function get() {
                    return {
                        chunks: this.chunks.map(function (c) {
                            return c.state;
                        }),
                        from: this.from,
                        stop: this.stop,
                        blockIndex: this.blockIndex
                    };
                },
                set: function set(state) {
                    var chunks = state.chunks,
                        props = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.b)(state, _excluded);

                    Object.assign(this, props);
                    this.chunks = chunks.map(function (cstate) {
                        var chunk = "chunks" in cstate ? new ChunksTailDetails() : new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"](); // $FlowFixMe already checked above

                        chunk.state = cstate;
                        return chunk;
                    });
                }
            }, {
                key: "unshift",
                value: function unshift(beforePos) {
                    if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';
                    var chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;
                    var ci = 0;

                    while (ci < this.chunks.length) {
                        var chunk = this.chunks[ci];
                        var shiftChar = chunk.unshift(chunkShiftPos);

                        if (chunk.toString()) {
                            // chunk still contains value
                            // but not shifted - means no more available chars to shift
                            if (!shiftChar) break;
                            ++ci;
                        } else {
                            // clean if chunk has no value
                            this.chunks.splice(ci, 1);
                        }

                        if (shiftChar) return shiftChar;
                    }

                    return '';
                }
            }, {
                key: "shift",
                value: function shift() {
                    if (!this.chunks.length) return '';
                    var ci = this.chunks.length - 1;

                    while (0 <= ci) {
                        var chunk = this.chunks[ci];
                        var shiftChar = chunk.shift();

                        if (chunk.toString()) {
                            // chunk still contains value
                            // but not shifted - means no more available chars to shift
                            if (!shiftChar) break;
                            --ci;
                        } else {
                            // clean if chunk has no value
                            this.chunks.splice(ci, 1);
                        }

                        if (shiftChar) return shiftChar;
                    }

                    return '';
                }
            }]);

            return ChunksTailDetails;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pattern/cursor.js":
    /*!*********************************************************!*\
  !*** ./node_modules/imask/esm/masked/pattern/cursor.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ PatternCursor)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");




        var PatternCursor = /*#__PURE__*/function () {
            function PatternCursor(masked, pos) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, PatternCursor);

                this.masked = masked;
                this._log = [];

                var _ref = masked._mapPosToBlock(pos) || (pos < 0 ? // first
                        {
                            index: 0,
                            offset: 0
                        } : // last
                        {
                            index: this.masked._blocks.length,
                            offset: 0
                        }),
                    offset = _ref.offset,
                    index = _ref.index;

                this.offset = offset;
                this.index = index;
                this.ok = false;
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(PatternCursor, [{
                key: "block",
                get: function get() {
                    return this.masked._blocks[this.index];
                }
            }, {
                key: "pos",
                get: function get() {
                    return this.masked._blockStartPos(this.index) + this.offset;
                }
            }, {
                key: "state",
                get: function get() {
                    return {
                        index: this.index,
                        offset: this.offset,
                        ok: this.ok
                    };
                },
                set: function set(s) {
                    Object.assign(this, s);
                }
            }, {
                key: "pushState",
                value: function pushState() {
                    this._log.push(this.state);
                }
            }, {
                key: "popState",
                value: function popState() {
                    var s = this._log.pop();

                    this.state = s;
                    return s;
                }
            }, {
                key: "bindBlock",
                value: function bindBlock() {
                    if (this.block) return;

                    if (this.index < 0) {
                        this.index = 0;
                        this.offset = 0;
                    }

                    if (this.index >= this.masked._blocks.length) {
                        this.index = this.masked._blocks.length - 1;
                        this.offset = this.block.value.length;
                    }
                }
            }, {
                key: "_pushLeft",
                value: function _pushLeft(fn) {
                    this.pushState();

                    for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) === null || _this$block === void 0 ? void 0 : _this$block.value.length) || 0) {
                        var _this$block;

                        if (fn()) return this.ok = true;
                    }

                    return this.ok = false;
                }
            }, {
                key: "_pushRight",
                value: function _pushRight(fn) {
                    this.pushState();

                    for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {
                        if (fn()) return this.ok = true;
                    }

                    return this.ok = false;
                }
            }, {
                key: "pushLeftBeforeFilled",
                value: function pushLeftBeforeFilled() {
                    var _this = this;

                    return this._pushLeft(function () {
                        if (_this.block.isFixed || !_this.block.value) return;
                        _this.offset = _this.block.nearestInputPos(_this.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_LEFT);
                        if (_this.offset !== 0) return true;
                    });
                }
            }, {
                key: "pushLeftBeforeInput",
                value: function pushLeftBeforeInput() {
                    var _this2 = this;

                    // cases:
                    // filled input: 00|
                    // optional empty input: 00[]|
                    // nested block: XX<[]>|
                    return this._pushLeft(function () {
                        if (_this2.block.isFixed) return;
                        _this2.offset = _this2.block.nearestInputPos(_this2.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT);
                        return true;
                    });
                }
            }, {
                key: "pushLeftBeforeRequired",
                value: function pushLeftBeforeRequired() {
                    var _this3 = this;

                    return this._pushLeft(function () {
                        if (_this3.block.isFixed || _this3.block.isOptional && !_this3.block.value) return;
                        _this3.offset = _this3.block.nearestInputPos(_this3.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.LEFT);
                        return true;
                    });
                }
            }, {
                key: "pushRightBeforeFilled",
                value: function pushRightBeforeFilled() {
                    var _this4 = this;

                    return this._pushRight(function () {
                        if (_this4.block.isFixed || !_this4.block.value) return;
                        _this4.offset = _this4.block.nearestInputPos(_this4.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.FORCE_RIGHT);
                        if (_this4.offset !== _this4.block.value.length) return true;
                    });
                }
            }, {
                key: "pushRightBeforeInput",
                value: function pushRightBeforeInput() {
                    var _this5 = this;

                    return this._pushRight(function () {
                        if (_this5.block.isFixed) return; // const o = this.offset;

                        _this5.offset = _this5.block.nearestInputPos(_this5.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE); // HACK cases like (STILL DOES NOT WORK FOR NESTED)
                        // aa|X
                        // aa<X|[]>X_    - this will not work
                        // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;

                        return true;
                    });
                }
            }, {
                key: "pushRightBeforeRequired",
                value: function pushRightBeforeRequired() {
                    var _this6 = this;

                    return this._pushRight(function () {
                        if (_this6.block.isFixed || _this6.block.isOptional && !_this6.block.value) return; // TODO check |[*]XX_

                        _this6.offset = _this6.block.nearestInputPos(_this6.offset, _core_utils_js__WEBPACK_IMPORTED_MODULE_1__.DIRECTION.NONE);
                        return true;
                    });
                }
            }]);

            return PatternCursor;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pattern/fixed-definition.js":
    /*!*******************************************************************!*\
  !*** ./node_modules/imask/esm/masked/pattern/fixed-definition.js ***!
  \*******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ PatternFixedDefinition)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");





        var PatternFixedDefinition = /*#__PURE__*/function () {
            /** */

            /** */

            /** */

            /** */

            /** */

            /** */
            function PatternFixedDefinition(opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, PatternFixedDefinition);

                Object.assign(this, opts);
                this._value = '';
                this.isFixed = true;
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(PatternFixedDefinition, [{
                key: "value",
                get: function get() {
                    return this._value;
                }
            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this.isUnmasking ? this.value : '';
                }
            }, {
                key: "reset",
                value: function reset() {
                    this._isRawInput = false;
                    this._value = '';
                }
            }, {
                key: "remove",
                value: function remove() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;
                    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);
                    if (!this._value) this._isRawInput = false;
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                }
            }, {
                key: "nearestInputPos",
                value: function nearestInputPos(cursorPos) {
                    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.NONE;
                    var minPos = 0;
                    var maxPos = this._value.length;

                    switch (direction) {
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.LEFT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.FORCE_LEFT:
                            return minPos;

                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.NONE:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.RIGHT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_2__.DIRECTION.FORCE_RIGHT:
                        default:
                            return maxPos;
                    }
                }
            }, {
                key: "extractInput",
                value: function extractInput() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;
                    var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';
                }
            }, {
                key: "isComplete",
                get: function get() {
                    return true;
                }
            }, {
                key: "isFilled",
                get: function get() {
                    return Boolean(this._value);
                }
            }, {
                key: "_appendChar",
                value: function _appendChar(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                    if (this._value) return details;
                    var appended = this.char === ch;
                    var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !this.eager) && !flags.tail;
                    if (isResolved) details.rawInserted = this.char;
                    this._value = details.inserted = this.char;
                    this._isRawInput = isResolved && (flags.raw || flags.input);
                    return details;
                }
            }, {
                key: "_appendEager",
                value: function _appendEager() {
                    return this._appendChar(this.char, {
                        tail: true
                    });
                }
            }, {
                key: "_appendPlaceholder",
                value: function _appendPlaceholder() {
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
                    if (this._value) return details;
                    this._value = details.inserted = this.char;
                    return details;
                }
            }, {
                key: "extractTail",
                value: function extractTail() {
                    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    return new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"]('');
                } // $FlowFixMe no ideas

            }, {
                key: "appendTail",
                value: function appendTail(tail) {
                    if ((0,_core_utils_js__WEBPACK_IMPORTED_MODULE_2__.isString)(tail)) tail = new _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_3__["default"](String(tail));
                    return tail.appendTo(this);
                }
            }, {
                key: "append",
                value: function append(str, flags, tail) {
                    var details = this._appendChar(str[0], flags);

                    if (tail != null) {
                        details.tailShift += this.appendTail(tail).tailShift;
                    }

                    return details;
                }
            }, {
                key: "doCommit",
                value: function doCommit() {}
            }, {
                key: "state",
                get: function get() {
                    return {
                        _value: this._value,
                        _isRawInput: this._isRawInput
                    };
                },
                set: function set(state) {
                    Object.assign(this, state);
                }
            }]);

            return PatternFixedDefinition;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pattern/input-definition.js":
    /*!*******************************************************************!*\
  !*** ./node_modules/imask/esm/masked/pattern/input-definition.js ***!
  \*******************************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "DEFAULT_INPUT_DEFINITIONS": () => (/* binding */ DEFAULT_INPUT_DEFINITIONS),
            /* harmony export */   "default": () => (/* binding */ PatternInputDefinition)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/holder.js */ "./node_modules/imask/esm/core/holder.js");






        var _excluded = ["mask"];
        var DEFAULT_INPUT_DEFINITIONS = {
            '0': /\d/,
            'a': /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
            // http://stackoverflow.com/a/22075070
            '*': /./
        };
        /** */

        var PatternInputDefinition = /*#__PURE__*/function () {
            /** */

            /** */

            /** */

            /** */

            /** */

            /** */

            /** */
            function PatternInputDefinition(opts) {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, PatternInputDefinition);

                var mask = opts.mask,
                    blockOpts = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.b)(opts, _excluded);

                this.masked = (0,_factory_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
                    mask: mask
                });
                Object.assign(this, blockOpts);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(PatternInputDefinition, [{
                key: "reset",
                value: function reset() {
                    this.isFilled = false;
                    this.masked.reset();
                }
            }, {
                key: "remove",
                value: function remove() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;

                    if (fromPos === 0 && toPos >= 1) {
                        this.isFilled = false;
                        return this.masked.remove(fromPos, toPos);
                    }

                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                }
            }, {
                key: "value",
                get: function get() {
                    return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');
                }
            }, {
                key: "unmaskedValue",
                get: function get() {
                    return this.masked.unmaskedValue;
                }
            }, {
                key: "isComplete",
                get: function get() {
                    return Boolean(this.masked.value) || this.isOptional;
                }
            }, {
                key: "_appendChar",
                value: function _appendChar(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    if (this.isFilled) return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                    var state = this.masked.state; // simulate input

                    var details = this.masked._appendChar(ch, flags);

                    if (details.inserted && this.doValidate(flags) === false) {
                        details.inserted = details.rawInserted = '';
                        this.masked.state = state;
                    }

                    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {
                        details.inserted = this.placeholderChar;
                    }

                    details.skip = !details.inserted && !this.isOptional;
                    this.isFilled = Boolean(details.inserted);
                    return details;
                }
            }, {
                key: "append",
                value: function append() {
                    var _this$masked;

                    // TODO probably should be done via _appendChar
                    return (_this$masked = this.masked).append.apply(_this$masked, arguments);
                }
            }, {
                key: "_appendPlaceholder",
                value: function _appendPlaceholder() {
                    var details = new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                    if (this.isFilled || this.isOptional) return details;
                    this.isFilled = true;
                    details.inserted = this.placeholderChar;
                    return details;
                }
            }, {
                key: "_appendEager",
                value: function _appendEager() {
                    return new _core_change_details_js__WEBPACK_IMPORTED_MODULE_2__["default"]();
                }
            }, {
                key: "extractTail",
                value: function extractTail() {
                    var _this$masked2;

                    return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);
                }
            }, {
                key: "appendTail",
                value: function appendTail() {
                    var _this$masked3;

                    return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);
                }
            }, {
                key: "extractInput",
                value: function extractInput() {
                    var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;
                    var flags = arguments.length > 2 ? arguments[2] : undefined;
                    return this.masked.extractInput(fromPos, toPos, flags);
                }
            }, {
                key: "nearestInputPos",
                value: function nearestInputPos(cursorPos) {
                    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.NONE;
                    var minPos = 0;
                    var maxPos = this.value.length;
                    var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);

                    switch (direction) {
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.LEFT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.FORCE_LEFT:
                            return this.isComplete ? boundPos : minPos;

                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.RIGHT:
                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.FORCE_RIGHT:
                            return this.isComplete ? boundPos : maxPos;

                        case _core_utils_js__WEBPACK_IMPORTED_MODULE_3__.DIRECTION.NONE:
                        default:
                            return boundPos;
                    }
                }
            }, {
                key: "doValidate",
                value: function doValidate() {
                    var _this$masked4, _this$parent;

                    return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));
                }
            }, {
                key: "doCommit",
                value: function doCommit() {
                    this.masked.doCommit();
                }
            }, {
                key: "state",
                get: function get() {
                    return {
                        masked: this.masked.state,
                        isFilled: this.isFilled
                    };
                },
                set: function set(state) {
                    this.masked.state = state.masked;
                    this.isFilled = state.isFilled;
                }
            }]);

            return PatternInputDefinition;
        }();




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/pipe.js":
    /*!***********************************************!*\
  !*** ./node_modules/imask/esm/masked/pipe.js ***!
  \***********************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "PIPE_TYPE": () => (/* binding */ PIPE_TYPE),
            /* harmony export */   "createPipe": () => (/* binding */ createPipe),
            /* harmony export */   "pipe": () => (/* binding */ pipe)
            /* harmony export */ });
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");






        /** Mask pipe source and destination types */

        var PIPE_TYPE = {
            MASKED: 'value',
            UNMASKED: 'unmaskedValue',
            TYPED: 'typedValue'
        };
        /** Creates new pipe function depending on mask type, source and destination options */

        function createPipe(mask) {
            var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;
            var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;
            var masked = (0,_factory_js__WEBPACK_IMPORTED_MODULE_0__["default"])(mask);
            return function (value) {
                return masked.runIsolated(function (m) {
                    m[from] = value;
                    return m[to];
                });
            };
        }
        /** Pipes value through mask depending on mask type, source and destination options */

        function pipe(value) {
            for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                pipeArgs[_key - 1] = arguments[_key];
            }

            return createPipe.apply(void 0, pipeArgs)(value);
        }
        _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].PIPE_TYPE = PIPE_TYPE;
        _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].createPipe = createPipe;
        _core_holder_js__WEBPACK_IMPORTED_MODULE_1__["default"].pipe = pipe;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/range.js":
    /*!************************************************!*\
  !*** ./node_modules/imask/esm/masked/range.js ***!
  \************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedRange)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pattern.js */ "./node_modules/imask/esm/masked/pattern.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _pattern_input_definition_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pattern/input-definition.js */ "./node_modules/imask/esm/masked/pattern/input-definition.js");
        /* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./factory.js */ "./node_modules/imask/esm/masked/factory.js");
        /* harmony import */ var _pattern_fixed_definition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pattern/fixed-definition.js */ "./node_modules/imask/esm/masked/pattern/fixed-definition.js");
        /* harmony import */ var _pattern_chunk_tail_details_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pattern/chunk-tail-details.js */ "./node_modules/imask/esm/masked/pattern/chunk-tail-details.js");
        /* harmony import */ var _pattern_cursor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pattern/cursor.js */ "./node_modules/imask/esm/masked/pattern/cursor.js");
        /* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./regexp.js */ "./node_modules/imask/esm/masked/regexp.js");














        /** Pattern which accepts ranges */

        var MaskedRange = /*#__PURE__*/function (_MaskedPattern) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedRange, _MaskedPattern);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedRange);

            function MaskedRange() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedRange);

                return _super.apply(this, arguments);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedRange, [{
                key: "_matchFrom",
                get:
                /**
                 Optionally sets max length of pattern.
                 Used when pattern length is longer then `to` param length. Pads zeros at start in this case.
                 */

                /** Min bound */

                /** Max bound */

                    /** */
                    function get() {
                        return this.maxLength - String(this.from).length;
                    }
                /**
                 @override
                 */

            }, {
                key: "_update",
                value: function _update(opts) {
                    // TODO type
                    opts = Object.assign({
                        to: this.to || 0,
                        from: this.from || 0,
                        maxLength: this.maxLength || 0
                    }, opts);
                    var maxLength = String(opts.to).length;
                    if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);
                    opts.maxLength = maxLength;
                    var fromStr = String(opts.from).padStart(maxLength, '0');
                    var toStr = String(opts.to).padStart(maxLength, '0');
                    var sameCharsCount = 0;

                    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {
                        ++sameCharsCount;
                    }

                    opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\0') + '0'.repeat(maxLength - sameCharsCount);

                    (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedRange.prototype), "_update", this).call(this, opts);
                }
                /**
                 @override
                 */

            }, {
                key: "isComplete",
                get: function get() {
                    return (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedRange.prototype), "isComplete", this) && Boolean(this.value);
                }
            }, {
                key: "boundaries",
                value: function boundaries(str) {
                    var minstr = '';
                    var maxstr = '';

                    var _ref = str.match(/^(\D*)(\d*)(\D*)/) || [],
                        _ref2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_ref, 3),
                        placeholder = _ref2[1],
                        num = _ref2[2];

                    if (num) {
                        minstr = '0'.repeat(placeholder.length) + num;
                        maxstr = '9'.repeat(placeholder.length) + num;
                    }

                    minstr = minstr.padEnd(this.maxLength, '0');
                    maxstr = maxstr.padEnd(this.maxLength, '9');
                    return [minstr, maxstr];
                } // TODO str is a single char everytime

                /**
                 @override
                 */

            }, {
                key: "doPrepare",
                value: function doPrepare(ch) {
                    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var details;

                    var _normalizePrepare = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_2__.normalizePrepare)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedRange.prototype), "doPrepare", this).call(this, ch.replace(/\D/g, ''), flags));

                    var _normalizePrepare2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_normalizePrepare, 2);

                    ch = _normalizePrepare2[0];
                    details = _normalizePrepare2[1];
                    if (!this.autofix || !ch) return ch;
                    var fromStr = String(this.from).padStart(this.maxLength, '0');
                    var toStr = String(this.to).padStart(this.maxLength, '0');
                    var nextVal = this.value + ch;
                    if (nextVal.length > this.maxLength) return '';

                    var _this$boundaries = this.boundaries(nextVal),
                        _this$boundaries2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_this$boundaries, 2),
                        minstr = _this$boundaries2[0],
                        maxstr = _this$boundaries2[1];

                    if (Number(maxstr) < this.from) return fromStr[nextVal.length - 1];

                    if (Number(minstr) > this.to) {
                        if (this.autofix === 'pad' && nextVal.length < this.maxLength) {
                            return ['', details.aggregate(this.append(fromStr[nextVal.length - 1] + ch, flags))];
                        }

                        return toStr[nextVal.length - 1];
                    }

                    return ch;
                }
                /**
                 @override
                 */

            }, {
                key: "doValidate",
                value: function doValidate() {
                    var _get2;

                    var str = this.value;
                    var firstNonZero = str.search(/[^0]/);
                    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;

                    var _this$boundaries3 = this.boundaries(str),
                        _this$boundaries4 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.f)(_this$boundaries3, 2),
                        minstr = _this$boundaries4[0],
                        maxstr = _this$boundaries4[1];

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedRange.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args));
                }
            }]);

            return MaskedRange;
        }(_pattern_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_3__["default"].MaskedRange = MaskedRange;




        /***/ }),

    /***/ "./node_modules/imask/esm/masked/regexp.js":
    /*!*************************************************!*\
  !*** ./node_modules/imask/esm/masked/regexp.js ***!
  \*************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ MaskedRegExp)
            /* harmony export */ });
        /* harmony import */ var _rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_rollupPluginBabelHelpers-67bba7fb.js */ "./node_modules/imask/esm/_rollupPluginBabelHelpers-67bba7fb.js");
        /* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/imask/esm/masked/base.js");
        /* harmony import */ var _core_holder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/holder.js */ "./node_modules/imask/esm/core/holder.js");
        /* harmony import */ var _core_change_details_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/change-details.js */ "./node_modules/imask/esm/core/change-details.js");
        /* harmony import */ var _core_continuous_tail_details_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/continuous-tail-details.js */ "./node_modules/imask/esm/core/continuous-tail-details.js");
        /* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/utils.js */ "./node_modules/imask/esm/core/utils.js");







        /** Masking by RegExp */

        var MaskedRegExp = /*#__PURE__*/function (_Masked) {
            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.d)(MaskedRegExp, _Masked);

            var _super = (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.e)(MaskedRegExp);

            function MaskedRegExp() {
                (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, MaskedRegExp);

                return _super.apply(this, arguments);
            }

            (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__._)(MaskedRegExp, [{
                key: "_update",
                value:
                    /**
                     @override
                     @param {Object} opts
                     */
                    function _update(opts) {
                        if (opts.mask) opts.validate = function (value) {
                            return value.search(opts.mask) >= 0;
                        };

                        (0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.g)((0,_rollupPluginBabelHelpers_67bba7fb_js__WEBPACK_IMPORTED_MODULE_0__.h)(MaskedRegExp.prototype), "_update", this).call(this, opts);
                    }
            }]);

            return MaskedRegExp;
        }(_base_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
        _core_holder_js__WEBPACK_IMPORTED_MODULE_2__["default"].MaskedRegExp = MaskedRegExp;




        /***/ }),

    /***/ "./node_modules/rope-sequence/dist/index.es.js":
    /*!*****************************************************!*\
  !*** ./node_modules/rope-sequence/dist/index.es.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        var GOOD_LEAF_SIZE = 200;

// :: class<T> A rope sequence is a persistent sequence data structure
// that supports appending, prepending, and slicing without doing a
// full copy. It is represented as a mostly-balanced tree.
        var RopeSequence = function RopeSequence () {};

        RopeSequence.prototype.append = function append (other) {
            if (!other.length) { return this }
            other = RopeSequence.from(other);

            return (!this.length && other) ||
                (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
                (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
                this.appendInner(other)
        };

// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
// Prepend an array or other rope to this one, returning a new rope.
        RopeSequence.prototype.prepend = function prepend (other) {
            if (!other.length) { return this }
            return RopeSequence.from(other).append(this)
        };

        RopeSequence.prototype.appendInner = function appendInner (other) {
            return new Append(this, other)
        };

// :: (?number, ?number) → RopeSequence<T>
// Create a rope repesenting a sub-sequence of this rope.
        RopeSequence.prototype.slice = function slice (from, to) {
            if ( from === void 0 ) from = 0;
            if ( to === void 0 ) to = this.length;

            if (from >= to) { return RopeSequence.empty }
            return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
        };

// :: (number) → T
// Retrieve the element at the given position from this rope.
        RopeSequence.prototype.get = function get (i) {
            if (i < 0 || i >= this.length) { return undefined }
            return this.getInner(i)
        };

// :: ((element: T, index: number) → ?bool, ?number, ?number)
// Call the given function for each element between the given
// indices. This tends to be more efficient than looping over the
// indices and calling `get`, because it doesn't have to descend the
// tree for every element.
        RopeSequence.prototype.forEach = function forEach (f, from, to) {
            if ( from === void 0 ) from = 0;
            if ( to === void 0 ) to = this.length;

            if (from <= to)
            { this.forEachInner(f, from, to, 0); }
            else
            { this.forEachInvertedInner(f, from, to, 0); }
        };

// :: ((element: T, index: number) → U, ?number, ?number) → [U]
// Map the given functions over the elements of the rope, producing
// a flat array.
        RopeSequence.prototype.map = function map (f, from, to) {
            if ( from === void 0 ) from = 0;
            if ( to === void 0 ) to = this.length;

            var result = [];
            this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
            return result
        };

// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
// Create a rope representing the given array, or return the rope
// itself if a rope was given.
        RopeSequence.from = function from (values) {
            if (values instanceof RopeSequence) { return values }
            return values && values.length ? new Leaf(values) : RopeSequence.empty
        };

        var Leaf = /*@__PURE__*/(function (RopeSequence) {
            function Leaf(values) {
                RopeSequence.call(this);
                this.values = values;
            }

            if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
            Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
            Leaf.prototype.constructor = Leaf;

            var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

            Leaf.prototype.flatten = function flatten () {
                return this.values
            };

            Leaf.prototype.sliceInner = function sliceInner (from, to) {
                if (from == 0 && to == this.length) { return this }
                return new Leaf(this.values.slice(from, to))
            };

            Leaf.prototype.getInner = function getInner (i) {
                return this.values[i]
            };

            Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
                for (var i = from; i < to; i++)
                { if (f(this.values[i], start + i) === false) { return false } }
            };

            Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
                for (var i = from - 1; i >= to; i--)
                { if (f(this.values[i], start + i) === false) { return false } }
            };

            Leaf.prototype.leafAppend = function leafAppend (other) {
                if (this.length + other.length <= GOOD_LEAF_SIZE)
                { return new Leaf(this.values.concat(other.flatten())) }
            };

            Leaf.prototype.leafPrepend = function leafPrepend (other) {
                if (this.length + other.length <= GOOD_LEAF_SIZE)
                { return new Leaf(other.flatten().concat(this.values)) }
            };

            prototypeAccessors.length.get = function () { return this.values.length };

            prototypeAccessors.depth.get = function () { return 0 };

            Object.defineProperties( Leaf.prototype, prototypeAccessors );

            return Leaf;
        }(RopeSequence));

// :: RopeSequence
// The empty rope sequence.
        RopeSequence.empty = new Leaf([]);

        var Append = /*@__PURE__*/(function (RopeSequence) {
            function Append(left, right) {
                RopeSequence.call(this);
                this.left = left;
                this.right = right;
                this.length = left.length + right.length;
                this.depth = Math.max(left.depth, right.depth) + 1;
            }

            if ( RopeSequence ) Append.__proto__ = RopeSequence;
            Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
            Append.prototype.constructor = Append;

            Append.prototype.flatten = function flatten () {
                return this.left.flatten().concat(this.right.flatten())
            };

            Append.prototype.getInner = function getInner (i) {
                return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
            };

            Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
                var leftLen = this.left.length;
                if (from < leftLen &&
                    this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
                { return false }
                if (to > leftLen &&
                    this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
                { return false }
            };

            Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
                var leftLen = this.left.length;
                if (from > leftLen &&
                    this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
                { return false }
                if (to < leftLen &&
                    this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
                { return false }
            };

            Append.prototype.sliceInner = function sliceInner (from, to) {
                if (from == 0 && to == this.length) { return this }
                var leftLen = this.left.length;
                if (to <= leftLen) { return this.left.slice(from, to) }
                if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
                return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
            };

            Append.prototype.leafAppend = function leafAppend (other) {
                var inner = this.right.leafAppend(other);
                if (inner) { return new Append(this.left, inner) }
            };

            Append.prototype.leafPrepend = function leafPrepend (other) {
                var inner = this.left.leafPrepend(other);
                if (inner) { return new Append(inner, this.right) }
            };

            Append.prototype.appendInner = function appendInner (other) {
                if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
                { return new Append(this.left, new Append(this.right, other)) }
                return new Append(this, other)
            };

            return Append;
        }(RopeSequence));

        var ropeSequence = RopeSequence;

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ropeSequence);


        /***/ }),

    /***/ "./node_modules/tippy.js/dist/tippy.esm.js":
    /*!*************************************************!*\
  !*** ./node_modules/tippy.js/dist/tippy.esm.js ***!
  \*************************************************/
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "animateFill": () => (/* binding */ animateFill),
            /* harmony export */   "createSingleton": () => (/* binding */ createSingleton),
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
            /* harmony export */   "delegate": () => (/* binding */ delegate),
            /* harmony export */   "followCursor": () => (/* binding */ followCursor),
            /* harmony export */   "hideAll": () => (/* binding */ hideAll),
            /* harmony export */   "inlinePositioning": () => (/* binding */ inlinePositioning),
            /* harmony export */   "roundArrow": () => (/* binding */ ROUND_ARROW),
            /* harmony export */   "sticky": () => (/* binding */ sticky)
            /* harmony export */ });
        /* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");
        /**!
         * tippy.js v6.2.5
         * (c) 2017-2020 atomiks
         * MIT License
         */


        var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
        var BOX_CLASS = "tippy-box";
        var CONTENT_CLASS = "tippy-content";
        var BACKDROP_CLASS = "tippy-backdrop";
        var ARROW_CLASS = "tippy-arrow";
        var SVG_ARROW_CLASS = "tippy-svg-arrow";
        var TOUCH_OPTIONS = {
            passive: true,
            capture: true
        };

        function hasOwnProperty(obj, key) {
            return {}.hasOwnProperty.call(obj, key);
        }
        function getValueAtIndexOrReturn(value, index, defaultValue) {
            if (Array.isArray(value)) {
                var v = value[index];
                return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
            }

            return value;
        }
        function isType(value, type) {
            var str = {}.toString.call(value);
            return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
        }
        function invokeWithArgsOrReturn(value, args) {
            return typeof value === 'function' ? value.apply(void 0, args) : value;
        }
        function debounce(fn, ms) {
            // Avoid wrapping in `setTimeout` if ms is 0 anyway
            if (ms === 0) {
                return fn;
            }

            var timeout;
            return function (arg) {
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                    fn(arg);
                }, ms);
            };
        }
        function removeProperties(obj, keys) {
            var clone = Object.assign({}, obj);
            keys.forEach(function (key) {
                delete clone[key];
            });
            return clone;
        }
        function splitBySpaces(value) {
            return value.split(/\s+/).filter(Boolean);
        }
        function normalizeToArray(value) {
            return [].concat(value);
        }
        function pushIfUnique(arr, value) {
            if (arr.indexOf(value) === -1) {
                arr.push(value);
            }
        }
        function unique(arr) {
            return arr.filter(function (item, index) {
                return arr.indexOf(item) === index;
            });
        }
        function getBasePlacement(placement) {
            return placement.split('-')[0];
        }
        function arrayFrom(value) {
            return [].slice.call(value);
        }
        function removeUndefinedProps(obj) {
            return Object.keys(obj).reduce(function (acc, key) {
                if (obj[key] !== undefined) {
                    acc[key] = obj[key];
                }

                return acc;
            }, {});
        }

        function div() {
            return document.createElement('div');
        }
        function isElement(value) {
            return ['Element', 'Fragment'].some(function (type) {
                return isType(value, type);
            });
        }
        function isNodeList(value) {
            return isType(value, 'NodeList');
        }
        function isMouseEvent(value) {
            return isType(value, 'MouseEvent');
        }
        function isReferenceElement(value) {
            return !!(value && value._tippy && value._tippy.reference === value);
        }
        function getArrayOfElements(value) {
            if (isElement(value)) {
                return [value];
            }

            if (isNodeList(value)) {
                return arrayFrom(value);
            }

            if (Array.isArray(value)) {
                return value;
            }

            return arrayFrom(document.querySelectorAll(value));
        }
        function setTransitionDuration(els, value) {
            els.forEach(function (el) {
                if (el) {
                    el.style.transitionDuration = value + "ms";
                }
            });
        }
        function setVisibilityState(els, state) {
            els.forEach(function (el) {
                if (el) {
                    el.setAttribute('data-state', state);
                }
            });
        }
        function getOwnerDocument(elementOrElements) {
            var _normalizeToArray = normalizeToArray(elementOrElements),
                element = _normalizeToArray[0];

            return element ? element.ownerDocument || document : document;
        }
        function isCursorOutsideInteractiveBorder(popperTreeData, event) {
            var clientX = event.clientX,
                clientY = event.clientY;
            return popperTreeData.every(function (_ref) {
                var popperRect = _ref.popperRect,
                    popperState = _ref.popperState,
                    props = _ref.props;
                var interactiveBorder = props.interactiveBorder;
                var basePlacement = getBasePlacement(popperState.placement);
                var offsetData = popperState.modifiersData.offset;

                if (!offsetData) {
                    return true;
                }

                var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
                var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
                var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
                var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
                var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
                var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
                var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
                var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
                return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
            });
        }
        function updateTransitionEndListener(box, action, listener) {
            var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
            // `webkitTransitionEnd`...

            ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
                box[method](event, listener);
            });
        }

        var currentInput = {
            isTouch: false
        };
        var lastMouseMoveTime = 0;
        /**
         * When a `touchstart` event is fired, it's assumed the user is using touch
         * input. We'll bind a `mousemove` event listener to listen for mouse input in
         * the future. This way, the `isTouch` property is fully dynamic and will handle
         * hybrid devices that use a mix of touch + mouse input.
         */

        function onDocumentTouchStart() {
            if (currentInput.isTouch) {
                return;
            }

            currentInput.isTouch = true;

            if (window.performance) {
                document.addEventListener('mousemove', onDocumentMouseMove);
            }
        }
        /**
         * When two `mousemove` event are fired consecutively within 20ms, it's assumed
         * the user is using mouse input again. `mousemove` can fire on touch devices as
         * well, but very rarely that quickly.
         */

        function onDocumentMouseMove() {
            var now = performance.now();

            if (now - lastMouseMoveTime < 20) {
                currentInput.isTouch = false;
                document.removeEventListener('mousemove', onDocumentMouseMove);
            }

            lastMouseMoveTime = now;
        }
        /**
         * When an element is in focus and has a tippy, leaving the tab/window and
         * returning causes it to show again. For mouse users this is unexpected, but
         * for keyboard use it makes sense.
         * TODO: find a better technique to solve this problem
         */

        function onWindowBlur() {
            var activeElement = document.activeElement;

            if (isReferenceElement(activeElement)) {
                var instance = activeElement._tippy;

                if (activeElement.blur && !instance.state.isVisible) {
                    activeElement.blur();
                }
            }
        }
        function bindGlobalEventListeners() {
            document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
            window.addEventListener('blur', onWindowBlur);
        }

        var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
        var ua = isBrowser ? navigator.userAgent : '';
        var isIE = /MSIE |Trident\//.test(ua);

        function createMemoryLeakWarning(method) {
            var txt = method === 'destroy' ? 'n already-' : ' ';
            return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
        }
        function clean(value) {
            var spacesAndTabs = /[ \t]{2,}/g;
            var lineStartWithSpaces = /^[ \t]*/gm;
            return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
        }

        function getDevMessage(message) {
            return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
        }

        function getFormattedMessage(message) {
            return [getDevMessage(message), // title
                'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
                'line-height: 1.5', // footer
                'color: #a6a095;'];
        } // Assume warnings and errors never have the same message

        var visitedMessages;

        if (true) {
            resetVisitedMessages();
        }

        function resetVisitedMessages() {
            visitedMessages = new Set();
        }
        function warnWhen(condition, message) {
            if (condition && !visitedMessages.has(message)) {
                var _console;

                visitedMessages.add(message);

                (_console = console).warn.apply(_console, getFormattedMessage(message));
            }
        }
        function errorWhen(condition, message) {
            if (condition && !visitedMessages.has(message)) {
                var _console2;

                visitedMessages.add(message);

                (_console2 = console).error.apply(_console2, getFormattedMessage(message));
            }
        }
        function validateTargets(targets) {
            var didPassFalsyValue = !targets;
            var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
            errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
            errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
        }

        var pluginProps = {
            animateFill: false,
            followCursor: false,
            inlinePositioning: false,
            sticky: false
        };
        var renderProps = {
            allowHTML: false,
            animation: 'fade',
            arrow: true,
            content: '',
            inertia: false,
            maxWidth: 350,
            role: 'tooltip',
            theme: '',
            zIndex: 9999
        };
        var defaultProps = Object.assign({
            appendTo: function appendTo() {
                return document.body;
            },
            aria: {
                content: 'auto',
                expanded: 'auto'
            },
            delay: 0,
            duration: [300, 250],
            getReferenceClientRect: null,
            hideOnClick: true,
            ignoreAttributes: false,
            interactive: false,
            interactiveBorder: 2,
            interactiveDebounce: 0,
            moveTransition: '',
            offset: [0, 10],
            onAfterUpdate: function onAfterUpdate() {},
            onBeforeUpdate: function onBeforeUpdate() {},
            onCreate: function onCreate() {},
            onDestroy: function onDestroy() {},
            onHidden: function onHidden() {},
            onHide: function onHide() {},
            onMount: function onMount() {},
            onShow: function onShow() {},
            onShown: function onShown() {},
            onTrigger: function onTrigger() {},
            onUntrigger: function onUntrigger() {},
            onClickOutside: function onClickOutside() {},
            placement: 'top',
            plugins: [],
            popperOptions: {},
            render: null,
            showOnCreate: false,
            touch: true,
            trigger: 'mouseenter focus',
            triggerTarget: null
        }, pluginProps, {}, renderProps);
        var defaultKeys = Object.keys(defaultProps);
        var setDefaultProps = function setDefaultProps(partialProps) {
            /* istanbul ignore else */
            if (true) {
                validateProps(partialProps, []);
            }

            var keys = Object.keys(partialProps);
            keys.forEach(function (key) {
                defaultProps[key] = partialProps[key];
            });
        };
        function getExtendedPassedProps(passedProps) {
            var plugins = passedProps.plugins || [];
            var pluginProps = plugins.reduce(function (acc, plugin) {
                var name = plugin.name,
                    defaultValue = plugin.defaultValue;

                if (name) {
                    acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
                }

                return acc;
            }, {});
            return Object.assign({}, passedProps, {}, pluginProps);
        }
        function getDataAttributeProps(reference, plugins) {
            var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
                plugins: plugins
            }))) : defaultKeys;
            var props = propKeys.reduce(function (acc, key) {
                var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

                if (!valueAsString) {
                    return acc;
                }

                if (key === 'content') {
                    acc[key] = valueAsString;
                } else {
                    try {
                        acc[key] = JSON.parse(valueAsString);
                    } catch (e) {
                        acc[key] = valueAsString;
                    }
                }

                return acc;
            }, {});
            return props;
        }
        function evaluateProps(reference, props) {
            var out = Object.assign({}, props, {
                content: invokeWithArgsOrReturn(props.content, [reference])
            }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
            out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);
            out.aria = {
                expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
                content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
            };
            return out;
        }
        function validateProps(partialProps, plugins) {
            if (partialProps === void 0) {
                partialProps = {};
            }

            if (plugins === void 0) {
                plugins = [];
            }

            var keys = Object.keys(partialProps);
            keys.forEach(function (prop) {
                var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
                var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

                if (didPassUnknownProp) {
                    didPassUnknownProp = plugins.filter(function (plugin) {
                        return plugin.name === prop;
                    }).length === 0;
                }

                warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
            });
        }

        var innerHTML = function innerHTML() {
            return 'innerHTML';
        };

        function dangerouslySetInnerHTML(element, html) {
            element[innerHTML()] = html;
        }

        function createArrowElement(value) {
            var arrow = div();

            if (value === true) {
                arrow.className = ARROW_CLASS;
            } else {
                arrow.className = SVG_ARROW_CLASS;

                if (isElement(value)) {
                    arrow.appendChild(value);
                } else {
                    dangerouslySetInnerHTML(arrow, value);
                }
            }

            return arrow;
        }

        function setContent(content, props) {
            if (isElement(props.content)) {
                dangerouslySetInnerHTML(content, '');
                content.appendChild(props.content);
            } else if (typeof props.content !== 'function') {
                if (props.allowHTML) {
                    dangerouslySetInnerHTML(content, props.content);
                } else {
                    content.textContent = props.content;
                }
            }
        }
        function getChildren(popper) {
            var box = popper.firstElementChild;
            var boxChildren = arrayFrom(box.children);
            return {
                box: box,
                content: boxChildren.find(function (node) {
                    return node.classList.contains(CONTENT_CLASS);
                }),
                arrow: boxChildren.find(function (node) {
                    return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
                }),
                backdrop: boxChildren.find(function (node) {
                    return node.classList.contains(BACKDROP_CLASS);
                })
            };
        }
        function render(instance) {
            var popper = div();
            var box = div();
            box.className = BOX_CLASS;
            box.setAttribute('data-state', 'hidden');
            box.setAttribute('tabindex', '-1');
            var content = div();
            content.className = CONTENT_CLASS;
            content.setAttribute('data-state', 'hidden');
            setContent(content, instance.props);
            popper.appendChild(box);
            box.appendChild(content);
            onUpdate(instance.props, instance.props);

            function onUpdate(prevProps, nextProps) {
                var _getChildren = getChildren(popper),
                    box = _getChildren.box,
                    content = _getChildren.content,
                    arrow = _getChildren.arrow;

                if (nextProps.theme) {
                    box.setAttribute('data-theme', nextProps.theme);
                } else {
                    box.removeAttribute('data-theme');
                }

                if (typeof nextProps.animation === 'string') {
                    box.setAttribute('data-animation', nextProps.animation);
                } else {
                    box.removeAttribute('data-animation');
                }

                if (nextProps.inertia) {
                    box.setAttribute('data-inertia', '');
                } else {
                    box.removeAttribute('data-inertia');
                }

                box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

                if (nextProps.role) {
                    box.setAttribute('role', nextProps.role);
                } else {
                    box.removeAttribute('role');
                }

                if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
                    setContent(content, instance.props);
                }

                if (nextProps.arrow) {
                    if (!arrow) {
                        box.appendChild(createArrowElement(nextProps.arrow));
                    } else if (prevProps.arrow !== nextProps.arrow) {
                        box.removeChild(arrow);
                        box.appendChild(createArrowElement(nextProps.arrow));
                    }
                } else if (arrow) {
                    box.removeChild(arrow);
                }
            }

            return {
                popper: popper,
                onUpdate: onUpdate
            };
        } // Runtime check to identify if the render function is the default one; this
// way we can apply default CSS transitions logic and it can be tree-shaken away

        render.$$tippy = true;

        var idCounter = 1;
        var mouseMoveListeners = []; // Used by `hideAll()`

        var mountedInstances = [];
        function createTippy(reference, passedProps) {
            var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
            // 🔒 Private members
            // ===========================================================================

            var showTimeout;
            var hideTimeout;
            var scheduleHideAnimationFrame;
            var isVisibleFromClick = false;
            var didHideDueToDocumentMouseDown = false;
            var didTouchMove = false;
            var ignoreOnFirstUpdate = false;
            var lastTriggerEvent;
            var currentTransitionEndListener;
            var onFirstUpdate;
            var listeners = [];
            var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
            var currentTarget;
            var doc = getOwnerDocument(props.triggerTarget || reference); // ===========================================================================
            // 🔑 Public members
            // ===========================================================================

            var id = idCounter++;
            var popperInstance = null;
            var plugins = unique(props.plugins);
            var state = {
                // Is the instance currently enabled?
                isEnabled: true,
                // Is the tippy currently showing and not transitioning out?
                isVisible: false,
                // Has the instance been destroyed?
                isDestroyed: false,
                // Is the tippy currently mounted to the DOM?
                isMounted: false,
                // Has the tippy finished transitioning in?
                isShown: false
            };
            var instance = {
                // properties
                id: id,
                reference: reference,
                popper: div(),
                popperInstance: popperInstance,
                props: props,
                state: state,
                plugins: plugins,
                // methods
                clearDelayTimeouts: clearDelayTimeouts,
                setProps: setProps,
                setContent: setContent,
                show: show,
                hide: hide,
                hideWithInteractivity: hideWithInteractivity,
                enable: enable,
                disable: disable,
                unmount: unmount,
                destroy: destroy
            }; // TODO: Investigate why this early return causes a TDZ error in the tests —
            // it doesn't seem to happen in the browser

            /* istanbul ignore if */

            if (!props.render) {
                if (true) {
                    errorWhen(true, 'render() function has not been supplied.');
                }

                return instance;
            } // ===========================================================================
            // Initial mutations
            // ===========================================================================


            var _props$render = props.render(instance),
                popper = _props$render.popper,
                onUpdate = _props$render.onUpdate;

            popper.setAttribute('data-tippy-root', '');
            popper.id = "tippy-" + instance.id;
            instance.popper = popper;
            reference._tippy = instance;
            popper._tippy = instance;
            var pluginsHooks = plugins.map(function (plugin) {
                return plugin.fn(instance);
            });
            var hasAriaExpanded = reference.hasAttribute('aria-expanded');
            addListeners();
            handleAriaExpandedAttribute();
            handleStyles();
            invokeHook('onCreate', [instance]);

            if (props.showOnCreate) {
                scheduleShow();
            } // Prevent a tippy with a delay from hiding if the cursor left then returned
            // before it started hiding


            popper.addEventListener('mouseenter', function () {
                if (instance.props.interactive && instance.state.isVisible) {
                    instance.clearDelayTimeouts();
                }
            });
            popper.addEventListener('mouseleave', function (event) {
                if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
                    doc.addEventListener('mousemove', debouncedOnMouseMove);
                    debouncedOnMouseMove(event);
                }
            });
            return instance; // ===========================================================================
            // 🔒 Private methods
            // ===========================================================================

            function getNormalizedTouchSettings() {
                var touch = instance.props.touch;
                return Array.isArray(touch) ? touch : [touch, 0];
            }

            function getIsCustomTouchBehavior() {
                return getNormalizedTouchSettings()[0] === 'hold';
            }

            function getIsDefaultRenderFn() {
                var _instance$props$rende;

                // @ts-ignore
                return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
            }

            function getCurrentTarget() {
                return currentTarget || reference;
            }

            function getDefaultTemplateChildren() {
                return getChildren(popper);
            }

            function getDelay(isShow) {
                // For touch or keyboard input, force `0` delay for UX reasons
                // Also if the instance is mounted but not visible (transitioning out),
                // ignore delay
                if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
                    return 0;
                }

                return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
            }

            function handleStyles() {
                popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';
                popper.style.zIndex = "" + instance.props.zIndex;
            }

            function invokeHook(hook, args, shouldInvokePropsHook) {
                if (shouldInvokePropsHook === void 0) {
                    shouldInvokePropsHook = true;
                }

                pluginsHooks.forEach(function (pluginHooks) {
                    if (pluginHooks[hook]) {
                        pluginHooks[hook].apply(void 0, args);
                    }
                });

                if (shouldInvokePropsHook) {
                    var _instance$props;

                    (_instance$props = instance.props)[hook].apply(_instance$props, args);
                }
            }

            function handleAriaContentAttribute() {
                var aria = instance.props.aria;

                if (!aria.content) {
                    return;
                }

                var attr = "aria-" + aria.content;
                var id = popper.id;
                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                    var currentValue = node.getAttribute(attr);

                    if (instance.state.isVisible) {
                        node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
                    } else {
                        var nextValue = currentValue && currentValue.replace(id, '').trim();

                        if (nextValue) {
                            node.setAttribute(attr, nextValue);
                        } else {
                            node.removeAttribute(attr);
                        }
                    }
                });
            }

            function handleAriaExpandedAttribute() {
                if (hasAriaExpanded || !instance.props.aria.expanded) {
                    return;
                }

                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                    if (instance.props.interactive) {
                        node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
                    } else {
                        node.removeAttribute('aria-expanded');
                    }
                });
            }

            function cleanupInteractiveMouseListeners() {
                doc.removeEventListener('mousemove', debouncedOnMouseMove);
                mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
                    return listener !== debouncedOnMouseMove;
                });
            }

            function onDocumentPress(event) {
                // Moved finger to scroll instead of an intentional tap outside
                if (currentInput.isTouch) {
                    if (didTouchMove || event.type === 'mousedown') {
                        return;
                    }
                } // Clicked on interactive popper


                if (instance.props.interactive && popper.contains(event.target)) {
                    return;
                } // Clicked on the event listeners target


                if (getCurrentTarget().contains(event.target)) {
                    if (currentInput.isTouch) {
                        return;
                    }

                    if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
                        return;
                    }
                } else {
                    invokeHook('onClickOutside', [instance, event]);
                }

                if (instance.props.hideOnClick === true) {
                    isVisibleFromClick = false;
                    instance.clearDelayTimeouts();
                    instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
                    // currentTarget. This lets a tippy with `focus` trigger know that it
                    // should not show

                    didHideDueToDocumentMouseDown = true;
                    setTimeout(function () {
                        didHideDueToDocumentMouseDown = false;
                    }); // The listener gets added in `scheduleShow()`, but this may be hiding it
                    // before it shows, and hide()'s early bail-out behavior can prevent it
                    // from being cleaned up

                    if (!instance.state.isMounted) {
                        removeDocumentPress();
                    }
                }
            }

            function onTouchMove() {
                didTouchMove = true;
            }

            function onTouchStart() {
                didTouchMove = false;
            }

            function addDocumentPress() {
                doc.addEventListener('mousedown', onDocumentPress, true);
                doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
                doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
                doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
            }

            function removeDocumentPress() {
                doc.removeEventListener('mousedown', onDocumentPress, true);
                doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
                doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
                doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
            }

            function onTransitionedOut(duration, callback) {
                onTransitionEnd(duration, function () {
                    if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
                        callback();
                    }
                });
            }

            function onTransitionedIn(duration, callback) {
                onTransitionEnd(duration, callback);
            }

            function onTransitionEnd(duration, callback) {
                var box = getDefaultTemplateChildren().box;

                function listener(event) {
                    if (event.target === box) {
                        updateTransitionEndListener(box, 'remove', listener);
                        callback();
                    }
                } // Make callback synchronous if duration is 0
                // `transitionend` won't fire otherwise


                if (duration === 0) {
                    return callback();
                }

                updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
                updateTransitionEndListener(box, 'add', listener);
                currentTransitionEndListener = listener;
            }

            function on(eventType, handler, options) {
                if (options === void 0) {
                    options = false;
                }

                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                    node.addEventListener(eventType, handler, options);
                    listeners.push({
                        node: node,
                        eventType: eventType,
                        handler: handler,
                        options: options
                    });
                });
            }

            function addListeners() {
                if (getIsCustomTouchBehavior()) {
                    on('touchstart', onTrigger, {
                        passive: true
                    });
                    on('touchend', onMouseLeave, {
                        passive: true
                    });
                }

                splitBySpaces(instance.props.trigger).forEach(function (eventType) {
                    if (eventType === 'manual') {
                        return;
                    }

                    on(eventType, onTrigger);

                    switch (eventType) {
                        case 'mouseenter':
                            on('mouseleave', onMouseLeave);
                            break;

                        case 'focus':
                            on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
                            break;

                        case 'focusin':
                            on('focusout', onBlurOrFocusOut);
                            break;
                    }
                });
            }

            function removeListeners() {
                listeners.forEach(function (_ref) {
                    var node = _ref.node,
                        eventType = _ref.eventType,
                        handler = _ref.handler,
                        options = _ref.options;
                    node.removeEventListener(eventType, handler, options);
                });
                listeners = [];
            }

            function onTrigger(event) {
                var _lastTriggerEvent;

                var shouldScheduleClickHide = false;

                if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
                    return;
                }

                var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
                lastTriggerEvent = event;
                currentTarget = event.currentTarget;
                handleAriaExpandedAttribute();

                if (!instance.state.isVisible && isMouseEvent(event)) {
                    // If scrolling, `mouseenter` events can be fired if the cursor lands
                    // over a new target, but `mousemove` events don't get fired. This
                    // causes interactive tooltips to get stuck open until the cursor is
                    // moved
                    mouseMoveListeners.forEach(function (listener) {
                        return listener(event);
                    });
                } // Toggle show/hide when clicking click-triggered tooltips


                if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
                    shouldScheduleClickHide = true;
                } else {
                    scheduleShow(event);
                }

                if (event.type === 'click') {
                    isVisibleFromClick = !shouldScheduleClickHide;
                }

                if (shouldScheduleClickHide && !wasFocused) {
                    scheduleHide(event);
                }
            }

            function onMouseMove(event) {
                var target = event.target;
                var isCursorOverReferenceOrPopper = reference.contains(target) || popper.contains(target);

                if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
                    return;
                }

                var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
                    var _instance$popperInsta;

                    var instance = popper._tippy;
                    var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

                    if (state) {
                        return {
                            popperRect: popper.getBoundingClientRect(),
                            popperState: state,
                            props: props
                        };
                    }

                    return null;
                }).filter(Boolean);

                if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
                    cleanupInteractiveMouseListeners();
                    scheduleHide(event);
                }
            }

            function onMouseLeave(event) {
                var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

                if (shouldBail) {
                    return;
                }

                if (instance.props.interactive) {
                    instance.hideWithInteractivity(event);
                    return;
                }

                scheduleHide(event);
            }

            function onBlurOrFocusOut(event) {
                if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
                    return;
                } // If focus was moved to within the popper


                if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
                    return;
                }

                scheduleHide(event);
            }

            function isEventListenerStopped(event) {
                return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
            }

            function createPopperInstance() {
                destroyPopperInstance();
                var _instance$props2 = instance.props,
                    popperOptions = _instance$props2.popperOptions,
                    placement = _instance$props2.placement,
                    offset = _instance$props2.offset,
                    getReferenceClientRect = _instance$props2.getReferenceClientRect,
                    moveTransition = _instance$props2.moveTransition;
                var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
                var computedReference = getReferenceClientRect ? {
                    getBoundingClientRect: getReferenceClientRect,
                    contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
                } : reference;
                var tippyModifier = {
                    name: '$$tippy',
                    enabled: true,
                    phase: 'beforeWrite',
                    requires: ['computeStyles'],
                    fn: function fn(_ref2) {
                        var state = _ref2.state;

                        if (getIsDefaultRenderFn()) {
                            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                                box = _getDefaultTemplateCh.box;

                            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
                                if (attr === 'placement') {
                                    box.setAttribute('data-placement', state.placement);
                                } else {
                                    if (state.attributes.popper["data-popper-" + attr]) {
                                        box.setAttribute("data-" + attr, '');
                                    } else {
                                        box.removeAttribute("data-" + attr);
                                    }
                                }
                            });
                            state.attributes.popper = {};
                        }
                    }
                };
                var modifiers = [{
                    name: 'offset',
                    options: {
                        offset: offset
                    }
                }, {
                    name: 'preventOverflow',
                    options: {
                        padding: {
                            top: 2,
                            bottom: 2,
                            left: 5,
                            right: 5
                        }
                    }
                }, {
                    name: 'flip',
                    options: {
                        padding: 5
                    }
                }, {
                    name: 'computeStyles',
                    options: {
                        adaptive: !moveTransition
                    }
                }, tippyModifier];

                if (getIsDefaultRenderFn() && arrow) {
                    modifiers.push({
                        name: 'arrow',
                        options: {
                            element: arrow,
                            padding: 3
                        }
                    });
                }

                modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
                instance.popperInstance = (0,_popperjs_core__WEBPACK_IMPORTED_MODULE_0__.createPopper)(computedReference, popper, Object.assign({}, popperOptions, {
                    placement: placement,
                    onFirstUpdate: onFirstUpdate,
                    modifiers: modifiers
                }));
            }

            function destroyPopperInstance() {
                if (instance.popperInstance) {
                    instance.popperInstance.destroy();
                    instance.popperInstance = null;
                }
            }

            function mount() {
                var appendTo = instance.props.appendTo;
                var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
                // it's directly after the reference element so the elements inside the
                // tippy can be tabbed to
                // If there are clipping issues, the user can specify a different appendTo
                // and ensure focus management is handled correctly manually

                var node = getCurrentTarget();

                if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
                    parentNode = node.parentNode;
                } else {
                    parentNode = invokeWithArgsOrReturn(appendTo, [node]);
                } // The popper element needs to exist on the DOM before its position can be
                // updated as Popper needs to read its dimensions


                if (!parentNode.contains(popper)) {
                    parentNode.appendChild(popper);
                }

                createPopperInstance();
                /* istanbul ignore else */

                if (true) {
                    // Accessibility check
                    warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
                }
            }

            function getNestedPopperTree() {
                return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
            }

            function scheduleShow(event) {
                instance.clearDelayTimeouts();

                if (event) {
                    invokeHook('onTrigger', [instance, event]);
                }

                addDocumentPress();
                var delay = getDelay(true);

                var _getNormalizedTouchSe = getNormalizedTouchSettings(),
                    touchValue = _getNormalizedTouchSe[0],
                    touchDelay = _getNormalizedTouchSe[1];

                if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
                    delay = touchDelay;
                }

                if (delay) {
                    showTimeout = setTimeout(function () {
                        instance.show();
                    }, delay);
                } else {
                    instance.show();
                }
            }

            function scheduleHide(event) {
                instance.clearDelayTimeouts();
                invokeHook('onUntrigger', [instance, event]);

                if (!instance.state.isVisible) {
                    removeDocumentPress();
                    return;
                } // For interactive tippies, scheduleHide is added to a document.body handler
                // from onMouseLeave so must intercept scheduled hides from mousemove/leave
                // events when trigger contains mouseenter and click, and the tip is
                // currently shown as a result of a click.


                if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
                    return;
                }

                var delay = getDelay(false);

                if (delay) {
                    hideTimeout = setTimeout(function () {
                        if (instance.state.isVisible) {
                            instance.hide();
                        }
                    }, delay);
                } else {
                    // Fixes a `transitionend` problem when it fires 1 frame too
                    // late sometimes, we don't want hide() to be called.
                    scheduleHideAnimationFrame = requestAnimationFrame(function () {
                        instance.hide();
                    });
                }
            } // ===========================================================================
            // 🔑 Public methods
            // ===========================================================================


            function enable() {
                instance.state.isEnabled = true;
            }

            function disable() {
                // Disabling the instance should also hide it
                // https://github.com/atomiks/tippy.js-react/issues/106
                instance.hide();
                instance.state.isEnabled = false;
            }

            function clearDelayTimeouts() {
                clearTimeout(showTimeout);
                clearTimeout(hideTimeout);
                cancelAnimationFrame(scheduleHideAnimationFrame);
            }

            function setProps(partialProps) {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
                }

                if (instance.state.isDestroyed) {
                    return;
                }

                invokeHook('onBeforeUpdate', [instance, partialProps]);
                removeListeners();
                var prevProps = instance.props;
                var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {
                    ignoreAttributes: true
                }));
                instance.props = nextProps;
                addListeners();

                if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
                    cleanupInteractiveMouseListeners();
                    debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
                } // Ensure stale aria-expanded attributes are removed


                if (prevProps.triggerTarget && !nextProps.triggerTarget) {
                    normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
                        node.removeAttribute('aria-expanded');
                    });
                } else if (nextProps.triggerTarget) {
                    reference.removeAttribute('aria-expanded');
                }

                handleAriaExpandedAttribute();
                handleStyles();

                if (onUpdate) {
                    onUpdate(prevProps, nextProps);
                }

                if (instance.popperInstance) {
                    createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
                    // and the nested ones get re-rendered first.
                    // https://github.com/atomiks/tippyjs-react/issues/177
                    // TODO: find a cleaner / more efficient solution(!)

                    getNestedPopperTree().forEach(function (nestedPopper) {
                        // React (and other UI libs likely) requires a rAF wrapper as it flushes
                        // its work in one
                        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
                    });
                }

                invokeHook('onAfterUpdate', [instance, partialProps]);
            }

            function setContent(content) {
                instance.setProps({
                    content: content
                });
            }

            function show() {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
                } // Early bail-out


                var isAlreadyVisible = instance.state.isVisible;
                var isDestroyed = instance.state.isDestroyed;
                var isDisabled = !instance.state.isEnabled;
                var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
                var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

                if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
                    return;
                } // Normalize `disabled` behavior across browsers.
                // Firefox allows events on disabled elements, but Chrome doesn't.
                // Using a wrapper element (i.e. <span>) is recommended.


                if (getCurrentTarget().hasAttribute('disabled')) {
                    return;
                }

                invokeHook('onShow', [instance], false);

                if (instance.props.onShow(instance) === false) {
                    return;
                }

                instance.state.isVisible = true;

                if (getIsDefaultRenderFn()) {
                    popper.style.visibility = 'visible';
                }

                handleStyles();
                addDocumentPress();

                if (!instance.state.isMounted) {
                    popper.style.transition = 'none';
                } // If flipping to the opposite side after hiding at least once, the
                // animation will use the wrong placement without resetting the duration


                if (getIsDefaultRenderFn()) {
                    var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
                        box = _getDefaultTemplateCh2.box,
                        content = _getDefaultTemplateCh2.content;

                    setTransitionDuration([box, content], 0);
                }

                onFirstUpdate = function onFirstUpdate() {
                    if (!instance.state.isVisible || ignoreOnFirstUpdate) {
                        return;
                    }

                    ignoreOnFirstUpdate = true; // reflow

                    void popper.offsetHeight;
                    popper.style.transition = instance.props.moveTransition;

                    if (getIsDefaultRenderFn() && instance.props.animation) {
                        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
                            _box = _getDefaultTemplateCh3.box,
                            _content = _getDefaultTemplateCh3.content;

                        setTransitionDuration([_box, _content], duration);
                        setVisibilityState([_box, _content], 'visible');
                    }

                    handleAriaContentAttribute();
                    handleAriaExpandedAttribute();
                    pushIfUnique(mountedInstances, instance);
                    instance.state.isMounted = true;
                    invokeHook('onMount', [instance]);

                    if (instance.props.animation && getIsDefaultRenderFn()) {
                        onTransitionedIn(duration, function () {
                            instance.state.isShown = true;
                            invokeHook('onShown', [instance]);
                        });
                    }
                };

                mount();
            }

            function hide() {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
                } // Early bail-out


                var isAlreadyHidden = !instance.state.isVisible;
                var isDestroyed = instance.state.isDestroyed;
                var isDisabled = !instance.state.isEnabled;
                var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

                if (isAlreadyHidden || isDestroyed || isDisabled) {
                    return;
                }

                invokeHook('onHide', [instance], false);

                if (instance.props.onHide(instance) === false) {
                    return;
                }

                instance.state.isVisible = false;
                instance.state.isShown = false;
                ignoreOnFirstUpdate = false;

                if (getIsDefaultRenderFn()) {
                    popper.style.visibility = 'hidden';
                }

                cleanupInteractiveMouseListeners();
                removeDocumentPress();
                handleStyles();

                if (getIsDefaultRenderFn()) {
                    var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
                        box = _getDefaultTemplateCh4.box,
                        content = _getDefaultTemplateCh4.content;

                    if (instance.props.animation) {
                        setTransitionDuration([box, content], duration);
                        setVisibilityState([box, content], 'hidden');
                    }
                }

                handleAriaContentAttribute();
                handleAriaExpandedAttribute();

                if (instance.props.animation) {
                    if (getIsDefaultRenderFn()) {
                        onTransitionedOut(duration, instance.unmount);
                    }
                } else {
                    instance.unmount();
                }
            }

            function hideWithInteractivity(event) {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
                }

                doc.addEventListener('mousemove', debouncedOnMouseMove);
                pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
                debouncedOnMouseMove(event);
            }

            function unmount() {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
                }

                if (instance.state.isVisible) {
                    instance.hide();
                }

                if (!instance.state.isMounted) {
                    return;
                }

                destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
                // tree by default. This seems mainly for interactive tippies, but we should
                // find a workaround if possible

                getNestedPopperTree().forEach(function (nestedPopper) {
                    nestedPopper._tippy.unmount();
                });

                if (popper.parentNode) {
                    popper.parentNode.removeChild(popper);
                }

                mountedInstances = mountedInstances.filter(function (i) {
                    return i !== instance;
                });
                instance.state.isMounted = false;
                invokeHook('onHidden', [instance]);
            }

            function destroy() {
                /* istanbul ignore else */
                if (true) {
                    warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
                }

                if (instance.state.isDestroyed) {
                    return;
                }

                instance.clearDelayTimeouts();
                instance.unmount();
                removeListeners();
                delete reference._tippy;
                instance.state.isDestroyed = true;
                invokeHook('onDestroy', [instance]);
            }
        }

        function tippy(targets, optionalProps) {
            if (optionalProps === void 0) {
                optionalProps = {};
            }

            var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
            /* istanbul ignore else */

            if (true) {
                validateTargets(targets);
                validateProps(optionalProps, plugins);
            }

            bindGlobalEventListeners();
            var passedProps = Object.assign({}, optionalProps, {
                plugins: plugins
            });
            var elements = getArrayOfElements(targets);
            /* istanbul ignore else */

            if (true) {
                var isSingleContentElement = isElement(passedProps.content);
                var isMoreThanOneReferenceElement = elements.length > 1;
                warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
            }

            var instances = elements.reduce(function (acc, reference) {
                var instance = reference && createTippy(reference, passedProps);

                if (instance) {
                    acc.push(instance);
                }

                return acc;
            }, []);
            return isElement(targets) ? instances[0] : instances;
        }

        tippy.defaultProps = defaultProps;
        tippy.setDefaultProps = setDefaultProps;
        tippy.currentInput = currentInput;
        var hideAll = function hideAll(_temp) {
            var _ref = _temp === void 0 ? {} : _temp,
                excludedReferenceOrInstance = _ref.exclude,
                duration = _ref.duration;

            mountedInstances.forEach(function (instance) {
                var isExcluded = false;

                if (excludedReferenceOrInstance) {
                    isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
                }

                if (!isExcluded) {
                    var originalDuration = instance.props.duration;
                    instance.setProps({
                        duration: duration
                    });
                    instance.hide();

                    if (!instance.state.isDestroyed) {
                        instance.setProps({
                            duration: originalDuration
                        });
                    }
                }
            });
        };

        var createSingleton = function createSingleton(tippyInstances, optionalProps) {
            if (optionalProps === void 0) {
                optionalProps = {};
            }

            /* istanbul ignore else */
            if (true) {
                errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));
            }

            var mutTippyInstances = tippyInstances;
            var references = [];
            var currentTarget;
            var overrides = optionalProps.overrides;

            function setReferences() {
                references = mutTippyInstances.map(function (instance) {
                    return instance.reference;
                });
            }

            function enableInstances(isEnabled) {
                mutTippyInstances.forEach(function (instance) {
                    if (isEnabled) {
                        instance.enable();
                    } else {
                        instance.disable();
                    }
                });
            }

            enableInstances(false);
            setReferences();
            var singleton = {
                fn: function fn() {
                    return {
                        onDestroy: function onDestroy() {
                            enableInstances(true);
                        },
                        onTrigger: function onTrigger(instance, event) {
                            var target = event.currentTarget;
                            var index = references.indexOf(target); // bail-out

                            if (target === currentTarget) {
                                return;
                            }

                            currentTarget = target;
                            var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {
                                acc[prop] = mutTippyInstances[index].props[prop];
                                return acc;
                            }, {});
                            instance.setProps(Object.assign({}, overrideProps, {
                                getReferenceClientRect: function getReferenceClientRect() {
                                    return target.getBoundingClientRect();
                                }
                            }));
                        }
                    };
                }
            };
            var instance = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {
                plugins: [singleton].concat(optionalProps.plugins || []),
                triggerTarget: references
            }));
            var originalSetProps = instance.setProps;

            instance.setProps = function (props) {
                overrides = props.overrides || overrides;
                originalSetProps(props);
            };

            instance.setInstances = function (nextInstances) {
                enableInstances(true);
                mutTippyInstances = nextInstances;
                enableInstances(false);
                setReferences();
                instance.setProps({
                    triggerTarget: references
                });
            };

            return instance;
        };

        var BUBBLING_EVENTS_MAP = {
            mouseover: 'mouseenter',
            focusin: 'focus',
            click: 'click'
        };
        /**
         * Creates a delegate instance that controls the creation of tippy instances
         * for child elements (`target` CSS selector).
         */

        function delegate(targets, props) {
            /* istanbul ignore else */
            if (true) {
                errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));
            }

            var listeners = [];
            var childTippyInstances = [];
            var target = props.target;
            var nativeProps = removeProperties(props, ['target']);
            var parentProps = Object.assign({}, nativeProps, {
                trigger: 'manual',
                touch: false
            });
            var childProps = Object.assign({}, nativeProps, {
                showOnCreate: true
            });
            var returnValue = tippy(targets, parentProps);
            var normalizedReturnValue = normalizeToArray(returnValue);

            function onTrigger(event) {
                if (!event.target) {
                    return;
                }

                var targetNode = event.target.closest(target);

                if (!targetNode) {
                    return;
                } // Get relevant trigger with fallbacks:
                // 1. Check `data-tippy-trigger` attribute on target node
                // 2. Fallback to `trigger` passed to `delegate()`
                // 3. Fallback to `defaultProps.trigger`


                var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore

                if (targetNode._tippy) {
                    return;
                }

                if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {
                    return;
                }

                if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type])) {
                    return;
                }

                var instance = tippy(targetNode, childProps);

                if (instance) {
                    childTippyInstances = childTippyInstances.concat(instance);
                }
            }

            function on(node, eventType, handler, options) {
                if (options === void 0) {
                    options = false;
                }

                node.addEventListener(eventType, handler, options);
                listeners.push({
                    node: node,
                    eventType: eventType,
                    handler: handler,
                    options: options
                });
            }

            function addEventListeners(instance) {
                var reference = instance.reference;
                on(reference, 'touchstart', onTrigger);
                on(reference, 'mouseover', onTrigger);
                on(reference, 'focusin', onTrigger);
                on(reference, 'click', onTrigger);
            }

            function removeEventListeners() {
                listeners.forEach(function (_ref) {
                    var node = _ref.node,
                        eventType = _ref.eventType,
                        handler = _ref.handler,
                        options = _ref.options;
                    node.removeEventListener(eventType, handler, options);
                });
                listeners = [];
            }

            function applyMutations(instance) {
                var originalDestroy = instance.destroy;

                instance.destroy = function (shouldDestroyChildInstances) {
                    if (shouldDestroyChildInstances === void 0) {
                        shouldDestroyChildInstances = true;
                    }

                    if (shouldDestroyChildInstances) {
                        childTippyInstances.forEach(function (instance) {
                            instance.destroy();
                        });
                    }

                    childTippyInstances = [];
                    removeEventListeners();
                    originalDestroy();
                };

                addEventListeners(instance);
            }

            normalizedReturnValue.forEach(applyMutations);
            return returnValue;
        }

        var animateFill = {
            name: 'animateFill',
            defaultValue: false,
            fn: function fn(instance) {
                var _instance$props$rende;

                // @ts-ignore
                if (!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy)) {
                    if (true) {
                        errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');
                    }

                    return {};
                }

                var _getChildren = getChildren(instance.popper),
                    box = _getChildren.box,
                    content = _getChildren.content;

                var backdrop = instance.props.animateFill ? createBackdropElement() : null;
                return {
                    onCreate: function onCreate() {
                        if (backdrop) {
                            box.insertBefore(backdrop, box.firstElementChild);
                            box.setAttribute('data-animatefill', '');
                            box.style.overflow = 'hidden';
                            instance.setProps({
                                arrow: false,
                                animation: 'shift-away'
                            });
                        }
                    },
                    onMount: function onMount() {
                        if (backdrop) {
                            var transitionDuration = box.style.transitionDuration;
                            var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
                            // tooltip element. `clip-path` is the other alternative but is not
                            // well-supported and is buggy on some devices.

                            content.style.transitionDelay = Math.round(duration / 10) + "ms";
                            backdrop.style.transitionDuration = transitionDuration;
                            setVisibilityState([backdrop], 'visible');
                        }
                    },
                    onShow: function onShow() {
                        if (backdrop) {
                            backdrop.style.transitionDuration = '0ms';
                        }
                    },
                    onHide: function onHide() {
                        if (backdrop) {
                            setVisibilityState([backdrop], 'hidden');
                        }
                    }
                };
            }
        };

        function createBackdropElement() {
            var backdrop = div();
            backdrop.className = BACKDROP_CLASS;
            setVisibilityState([backdrop], 'hidden');
            return backdrop;
        }

        var mouseCoords = {
            clientX: 0,
            clientY: 0
        };
        var activeInstances = [];

        function storeMouseCoords(_ref) {
            var clientX = _ref.clientX,
                clientY = _ref.clientY;
            mouseCoords = {
                clientX: clientX,
                clientY: clientY
            };
        }

        function addMouseCoordsListener(doc) {
            doc.addEventListener('mousemove', storeMouseCoords);
        }

        function removeMouseCoordsListener(doc) {
            doc.removeEventListener('mousemove', storeMouseCoords);
        }

        var followCursor = {
            name: 'followCursor',
            defaultValue: false,
            fn: function fn(instance) {
                var reference = instance.reference;
                var doc = getOwnerDocument(instance.props.triggerTarget || reference);
                var isInternalUpdate = false;
                var wasFocusEvent = false;
                var isUnmounted = true;
                var prevProps = instance.props;

                function getIsInitialBehavior() {
                    return instance.props.followCursor === 'initial' && instance.state.isVisible;
                }

                function addListener() {
                    doc.addEventListener('mousemove', onMouseMove);
                }

                function removeListener() {
                    doc.removeEventListener('mousemove', onMouseMove);
                }

                function unsetGetReferenceClientRect() {
                    isInternalUpdate = true;
                    instance.setProps({
                        getReferenceClientRect: null
                    });
                    isInternalUpdate = false;
                }

                function onMouseMove(event) {
                    // If the instance is interactive, avoid updating the position unless it's
                    // over the reference element
                    var isCursorOverReference = event.target ? reference.contains(event.target) : true;
                    var followCursor = instance.props.followCursor;
                    var clientX = event.clientX,
                        clientY = event.clientY;
                    var rect = reference.getBoundingClientRect();
                    var relativeX = clientX - rect.left;
                    var relativeY = clientY - rect.top;

                    if (isCursorOverReference || !instance.props.interactive) {
                        instance.setProps({
                            getReferenceClientRect: function getReferenceClientRect() {
                                var rect = reference.getBoundingClientRect();
                                var x = clientX;
                                var y = clientY;

                                if (followCursor === 'initial') {
                                    x = rect.left + relativeX;
                                    y = rect.top + relativeY;
                                }

                                var top = followCursor === 'horizontal' ? rect.top : y;
                                var right = followCursor === 'vertical' ? rect.right : x;
                                var bottom = followCursor === 'horizontal' ? rect.bottom : y;
                                var left = followCursor === 'vertical' ? rect.left : x;
                                return {
                                    width: right - left,
                                    height: bottom - top,
                                    top: top,
                                    right: right,
                                    bottom: bottom,
                                    left: left
                                };
                            }
                        });
                    }
                }

                function create() {
                    if (instance.props.followCursor) {
                        activeInstances.push({
                            instance: instance,
                            doc: doc
                        });
                        addMouseCoordsListener(doc);
                    }
                }

                function destroy() {
                    activeInstances = activeInstances.filter(function (data) {
                        return data.instance !== instance;
                    });

                    if (activeInstances.filter(function (data) {
                        return data.doc === doc;
                    }).length === 0) {
                        removeMouseCoordsListener(doc);
                    }
                }

                return {
                    onCreate: create,
                    onDestroy: destroy,
                    onBeforeUpdate: function onBeforeUpdate() {
                        prevProps = instance.props;
                    },
                    onAfterUpdate: function onAfterUpdate(_, _ref2) {
                        var followCursor = _ref2.followCursor;

                        if (isInternalUpdate) {
                            return;
                        }

                        if (followCursor !== undefined && prevProps.followCursor !== followCursor) {
                            destroy();

                            if (followCursor) {
                                create();

                                if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {
                                    addListener();
                                }
                            } else {
                                removeListener();
                                unsetGetReferenceClientRect();
                            }
                        }
                    },
                    onMount: function onMount() {
                        if (instance.props.followCursor) {
                            if (isUnmounted) {
                                onMouseMove(mouseCoords);
                                isUnmounted = false;
                            }

                            if (!wasFocusEvent && !getIsInitialBehavior()) {
                                addListener();
                            }
                        }
                    },
                    onTrigger: function onTrigger(_, _ref3) {
                        var type = _ref3.type;
                        wasFocusEvent = type === 'focus';
                    },
                    onHidden: function onHidden() {
                        if (instance.props.followCursor) {
                            unsetGetReferenceClientRect();
                            removeListener();
                            isUnmounted = true;
                        }
                    }
                };
            }
        };

        function getProps(props, modifier) {
            var _props$popperOptions;

            return {
                popperOptions: Object.assign({}, props.popperOptions, {
                    modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {
                        var name = _ref.name;
                        return name !== modifier.name;
                    }), [modifier])
                })
            };
        }

        var inlinePositioning = {
            name: 'inlinePositioning',
            defaultValue: false,
            fn: function fn(instance) {
                var reference = instance.reference;

                function isEnabled() {
                    return !!instance.props.inlinePositioning;
                }

                var placement;
                var cursorRectIndex = -1;
                var isInternalUpdate = false;
                var modifier = {
                    name: 'tippyInlinePositioning',
                    enabled: true,
                    phase: 'afterWrite',
                    fn: function fn(_ref2) {
                        var state = _ref2.state;

                        if (isEnabled()) {
                            if (placement !== state.placement) {
                                instance.setProps({
                                    getReferenceClientRect: function getReferenceClientRect() {
                                        return _getReferenceClientRect(state.placement);
                                    }
                                });
                            }

                            placement = state.placement;
                        }
                    }
                };

                function _getReferenceClientRect(placement) {
                    return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);
                }

                function setInternalProps(partialProps) {
                    isInternalUpdate = true;
                    instance.setProps(partialProps);
                    isInternalUpdate = false;
                }

                function addModifier() {
                    if (!isInternalUpdate) {
                        setInternalProps(getProps(instance.props, modifier));
                    }
                }

                return {
                    onCreate: addModifier,
                    onAfterUpdate: addModifier,
                    onTrigger: function onTrigger(_, event) {
                        if (isMouseEvent(event)) {
                            var rects = arrayFrom(instance.reference.getClientRects());
                            var cursorRect = rects.find(function (rect) {
                                return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;
                            });
                            cursorRectIndex = rects.indexOf(cursorRect);
                        }
                    },
                    onUntrigger: function onUntrigger() {
                        cursorRectIndex = -1;
                    }
                };
            }
        };
        function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {
            // Not an inline element, or placement is not yet known
            if (clientRects.length < 2 || currentBasePlacement === null) {
                return boundingRect;
            } // There are two rects and they are disjoined


            if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {
                return clientRects[cursorRectIndex] || boundingRect;
            }

            switch (currentBasePlacement) {
                case 'top':
                case 'bottom':
                {
                    var firstRect = clientRects[0];
                    var lastRect = clientRects[clientRects.length - 1];
                    var isTop = currentBasePlacement === 'top';
                    var top = firstRect.top;
                    var bottom = lastRect.bottom;
                    var left = isTop ? firstRect.left : lastRect.left;
                    var right = isTop ? firstRect.right : lastRect.right;
                    var width = right - left;
                    var height = bottom - top;
                    return {
                        top: top,
                        bottom: bottom,
                        left: left,
                        right: right,
                        width: width,
                        height: height
                    };
                }

                case 'left':
                case 'right':
                {
                    var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {
                        return rects.left;
                    }));
                    var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {
                        return rects.right;
                    }));
                    var measureRects = clientRects.filter(function (rect) {
                        return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
                    });
                    var _top = measureRects[0].top;
                    var _bottom = measureRects[measureRects.length - 1].bottom;
                    var _left = minLeft;
                    var _right = maxRight;

                    var _width = _right - _left;

                    var _height = _bottom - _top;

                    return {
                        top: _top,
                        bottom: _bottom,
                        left: _left,
                        right: _right,
                        width: _width,
                        height: _height
                    };
                }

                default:
                {
                    return boundingRect;
                }
            }
        }

        var sticky = {
            name: 'sticky',
            defaultValue: false,
            fn: function fn(instance) {
                var reference = instance.reference,
                    popper = instance.popper;

                function getReference() {
                    return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
                }

                function shouldCheck(value) {
                    return instance.props.sticky === true || instance.props.sticky === value;
                }

                var prevRefRect = null;
                var prevPopRect = null;

                function updatePosition() {
                    var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
                    var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;

                    if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
                        if (instance.popperInstance) {
                            instance.popperInstance.update();
                        }
                    }

                    prevRefRect = currentRefRect;
                    prevPopRect = currentPopRect;

                    if (instance.state.isMounted) {
                        requestAnimationFrame(updatePosition);
                    }
                }

                return {
                    onMount: function onMount() {
                        if (instance.props.sticky) {
                            updatePosition();
                        }
                    }
                };
            }
        };

        function areRectsDifferent(rectA, rectB) {
            if (rectA && rectB) {
                return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
            }

            return true;
        }

        tippy.setDefaultProps({
            render: render
        });

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tippy);

//# sourceMappingURL=tippy.esm.js.map


        /***/ }),

    /***/ "./node_modules/@tiptap/core/node_modules/prosemirror-transform/dist/index.js":
    /*!************************************************************************************!*\
  !*** ./node_modules/@tiptap/core/node_modules/prosemirror-transform/dist/index.js ***!
  \************************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "AddMarkStep": () => (/* binding */ AddMarkStep),
            /* harmony export */   "MapResult": () => (/* binding */ MapResult),
            /* harmony export */   "Mapping": () => (/* binding */ Mapping),
            /* harmony export */   "RemoveMarkStep": () => (/* binding */ RemoveMarkStep),
            /* harmony export */   "ReplaceAroundStep": () => (/* binding */ ReplaceAroundStep),
            /* harmony export */   "ReplaceStep": () => (/* binding */ ReplaceStep),
            /* harmony export */   "Step": () => (/* binding */ Step),
            /* harmony export */   "StepMap": () => (/* binding */ StepMap),
            /* harmony export */   "StepResult": () => (/* binding */ StepResult),
            /* harmony export */   "Transform": () => (/* binding */ Transform),
            /* harmony export */   "TransformError": () => (/* binding */ TransformError),
            /* harmony export */   "canJoin": () => (/* binding */ canJoin),
            /* harmony export */   "canSplit": () => (/* binding */ canSplit),
            /* harmony export */   "dropPoint": () => (/* binding */ dropPoint),
            /* harmony export */   "findWrapping": () => (/* binding */ findWrapping),
            /* harmony export */   "insertPoint": () => (/* binding */ insertPoint),
            /* harmony export */   "joinPoint": () => (/* binding */ joinPoint),
            /* harmony export */   "liftTarget": () => (/* binding */ liftTarget),
            /* harmony export */   "replaceStep": () => (/* binding */ replaceStep)
            /* harmony export */ });
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");


// Recovery values encode a range index and an offset. They are
// represented as numbers, because tons of them will be created when
// mapping, for example, a large number of decorations. The number's
// lower 16 bits provide the index, the remaining bits the offset.
//
// Note: We intentionally don't use bit shift operators to en- and
// decode these, since those clip to 32 bits, which we might in rare
// cases want to overflow. A 64-bit float can represent 48-bit
// integers precisely.
        const lower16 = 0xffff;
        const factor16 = Math.pow(2, 16);
        function makeRecover(index, offset) { return index + offset * factor16; }
        function recoverIndex(value) { return value & lower16; }
        function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
        const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
        /**
         An object representing a mapped position with extra
         information.
         */
        class MapResult {
            /**
             @internal
             */
            constructor(
                /**
                 The mapped version of the position.
                 */
                pos,
                /**
                 @internal
                 */
                delInfo,
                /**
                 @internal
                 */
                recover) {
                this.pos = pos;
                this.delInfo = delInfo;
                this.recover = recover;
            }
            /**
             Tells you whether the position was deleted, that is, whether the
             step removed the token on the side queried (via the `assoc`)
             argument from the document.
             */
            get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
            /**
             Tells you whether the token before the mapped position was deleted.
             */
            get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
            /**
             True when the token after the mapped position was deleted.
             */
            get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
            /**
             Tells whether any of the steps mapped through deletes across the
             position (including both the token before and after the
             position).
             */
            get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
        }
        /**
         A map describing the deletions and insertions made by a step, which
         can be used to find the correspondence between positions in the
         pre-step version of a document and the same position in the
         post-step version.
         */
        class StepMap {
            /**
             Create a position map. The modifications to the document are
             represented as an array of numbers, in which each group of three
             represents a modified chunk as `[start, oldSize, newSize]`.
             */
            constructor(
                /**
                 @internal
                 */
                ranges,
                /**
                 @internal
                 */
                inverted = false) {
                this.ranges = ranges;
                this.inverted = inverted;
                if (!ranges.length && StepMap.empty)
                    return StepMap.empty;
            }
            /**
             @internal
             */
            recover(value) {
                let diff = 0, index = recoverIndex(value);
                if (!this.inverted)
                    for (let i = 0; i < index; i++)
                        diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
                return this.ranges[index * 3] + diff + recoverOffset(value);
            }
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            map(pos, assoc = 1) { return this._map(pos, assoc, true); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                    if (pos <= end) {
                        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                        let result = start + diff + (side < 0 ? 0 : newSize);
                        if (simple)
                            return result;
                        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                        let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                        if (assoc < 0 ? pos != start : pos != end)
                            del |= DEL_SIDE;
                        return new MapResult(result, del, recover);
                    }
                    diff += newSize - oldSize;
                }
                return simple ? pos + diff : new MapResult(pos + diff, 0, null);
            }
            /**
             @internal
             */
            touches(pos, recover) {
                let diff = 0, index = recoverIndex(recover);
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                    if (pos <= end && i == index * 3)
                        return true;
                    diff += this.ranges[i + newIndex] - oldSize;
                }
                return false;
            }
            /**
             Calls the given function on each of the changed ranges included in
             this map.
             */
            forEach(f) {
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                    diff += newSize - oldSize;
                }
            }
            /**
             Create an inverted version of this map. The result can be used to
             map positions in the post-step document to the pre-step document.
             */
            invert() {
                return new StepMap(this.ranges, !this.inverted);
            }
            /**
             @internal
             */
            toString() {
                return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
            }
            /**
             Create a map that moves all positions by offset `n` (which may be
             negative). This can be useful when applying steps meant for a
             sub-document to a larger document, or vice-versa.
             */
            static offset(n) {
                return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
            }
        }
        /**
         A StepMap that contains no changed ranges.
         */
        StepMap.empty = new StepMap([]);
        /**
         A mapping represents a pipeline of zero or more [step
         maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
         handling mapping positions through a series of steps in which some
         steps are inverted versions of earlier steps. (This comes up when
         ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
         collaboration or history management.)
         */
        class Mapping {
            /**
             Create a new mapping with the given position maps.
             */
            constructor(
                /**
                 The step maps in this mapping.
                 */
                maps = [],
                /**
                 @internal
                 */
                mirror,
                /**
                 The starting position in the `maps` array, used when `map` or
                 `mapResult` is called.
                 */
                from = 0,
                /**
                 The end position in the `maps` array.
                 */
                to = maps.length) {
                this.maps = maps;
                this.mirror = mirror;
                this.from = from;
                this.to = to;
            }
            /**
             Create a mapping that maps only through a part of this one.
             */
            slice(from = 0, to = this.maps.length) {
                return new Mapping(this.maps, this.mirror, from, to);
            }
            /**
             @internal
             */
            copy() {
                return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
            }
            /**
             Add a step map to the end of this mapping. If `mirrors` is
             given, it should be the index of the step map that is the mirror
             image of this one.
             */
            appendMap(map, mirrors) {
                this.to = this.maps.push(map);
                if (mirrors != null)
                    this.setMirror(this.maps.length - 1, mirrors);
            }
            /**
             Add all the step maps in a given mapping to this one (preserving
             mirroring information).
             */
            appendMapping(mapping) {
                for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
                }
            }
            /**
             Finds the offset of the step map that mirrors the map at the
             given offset, in this mapping (as per the second argument to
             `appendMap`).
             */
            getMirror(n) {
                if (this.mirror)
                    for (let i = 0; i < this.mirror.length; i++)
                        if (this.mirror[i] == n)
                            return this.mirror[i + (i % 2 ? -1 : 1)];
            }
            /**
             @internal
             */
            setMirror(n, m) {
                if (!this.mirror)
                    this.mirror = [];
                this.mirror.push(n, m);
            }
            /**
             Append the inverse of the given mapping to this one.
             */
            appendMappingInverted(mapping) {
                for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
                }
            }
            /**
             Create an inverted version of this mapping.
             */
            invert() {
                let inverse = new Mapping;
                inverse.appendMappingInverted(this);
                return inverse;
            }
            /**
             Map a position through this mapping.
             */
            map(pos, assoc = 1) {
                if (this.mirror)
                    return this._map(pos, assoc, true);
                for (let i = this.from; i < this.to; i++)
                    pos = this.maps[i].map(pos, assoc);
                return pos;
            }
            /**
             Map a position through this mapping, returning a mapping
             result.
             */
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let delInfo = 0;
                for (let i = this.from; i < this.to; i++) {
                    let map = this.maps[i], result = map.mapResult(pos, assoc);
                    if (result.recover != null) {
                        let corr = this.getMirror(i);
                        if (corr != null && corr > i && corr < this.to) {
                            i = corr;
                            pos = this.maps[corr].recover(result.recover);
                            continue;
                        }
                    }
                    delInfo |= result.delInfo;
                    pos = result.pos;
                }
                return simple ? pos : new MapResult(pos, delInfo, null);
            }
        }

        const stepsByID = Object.create(null);
        /**
         A step object represents an atomic change. It generally applies
         only to the document it was created for, since the positions
         stored in it will only make sense for that document.

         New steps are defined by creating classes that extend `Step`,
         overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
         methods, and registering your class with a unique
         JSON-serialization identifier using
         [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
         */
        class Step {
            /**
             Get the step map that represents the changes made by this step,
             and which can be used to transform between positions in the old
             and the new document.
             */
            getMap() { return StepMap.empty; }
            /**
             Try to merge this step with another one, to be applied directly
             after it. Returns the merged step when possible, null if the
             steps can't be merged.
             */
            merge(other) { return null; }
            /**
             Deserialize a step from its JSON representation. Will call
             through to the step class' own implementation of this method.
             */
            static fromJSON(schema, json) {
                if (!json || !json.stepType)
                    throw new RangeError("Invalid input for Step.fromJSON");
                let type = stepsByID[json.stepType];
                if (!type)
                    throw new RangeError(`No step type ${json.stepType} defined`);
                return type.fromJSON(schema, json);
            }
            /**
             To be able to serialize steps to JSON, each step needs a string
             ID to attach to its JSON representation. Use this method to
             register an ID for your step classes. Try to pick something
             that's unlikely to clash with steps from other modules.
             */
            static jsonID(id, stepClass) {
                if (id in stepsByID)
                    throw new RangeError("Duplicate use of step JSON ID " + id);
                stepsByID[id] = stepClass;
                stepClass.prototype.jsonID = id;
                return stepClass;
            }
        }
        /**
         The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
         new document or a failure value.
         */
        class StepResult {
            /**
             @internal
             */
            constructor(
                /**
                 The transformed document, if successful.
                 */
                doc,
                /**
                 The failure message, if unsuccessful.
                 */
                failed) {
                this.doc = doc;
                this.failed = failed;
            }
            /**
             Create a successful step result.
             */
            static ok(doc) { return new StepResult(doc, null); }
            /**
             Create a failed step result.
             */
            static fail(message) { return new StepResult(null, message); }
            /**
             Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
             arguments. Create a successful result if it succeeds, and a
             failed one if it throws a `ReplaceError`.
             */
            static fromReplace(doc, from, to, slice) {
                try {
                    return StepResult.ok(doc.replace(from, to, slice));
                }
                catch (e) {
                    if (e instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError)
                        return StepResult.fail(e.message);
                    throw e;
                }
            }
        }

        function mapFragment(fragment, f, parent) {
            let mapped = [];
            for (let i = 0; i < fragment.childCount; i++) {
                let child = fragment.child(i);
                if (child.content.size)
                    child = child.copy(mapFragment(child.content, f, child));
                if (child.isInline)
                    child = f(child, parent, i);
                mapped.push(child);
            }
            return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(mapped);
        }
        /**
         Add a mark to all inline content between two positions.
         */
        class AddMarkStep extends Step {
            /**
             Create a mark step.
             */
            constructor(
                /**
                 The start of the marked range.
                 */
                from,
                /**
                 The end of the marked range.
                 */
                to,
                /**
                 The mark to add.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
                let parent = $from.node($from.sharedDepth(this.to));
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, (node, parent) => {
                    if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                        return node;
                    return node.mark(this.mark.addToSet(node.marks));
                }, parent), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new RemoveMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new AddMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof AddMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "addMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for AddMarkStep.fromJSON");
                return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("addMark", AddMarkStep);
        /**
         Remove a mark from all inline content between two positions.
         */
        class RemoveMarkStep extends Step {
            /**
             Create a mark-removing step.
             */
            constructor(
                /**
                 The start of the unmarked range.
                 */
                from,
                /**
                 The end of the unmarked range.
                 */
                to,
                /**
                 The mark to remove.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to);
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, node => {
                    return node.mark(this.mark.removeFromSet(node.marks));
                }, doc), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new AddMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new RemoveMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof RemoveMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "removeMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
                return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("removeMark", RemoveMarkStep);

        /**
         Replace a part of the document with a slice of new content.
         */
        class ReplaceStep extends Step {
            /**
             The given `slice` should fit the 'gap' between `from` and
             `to`—the depths must line up, and the surrounding nodes must be
             able to be joined with the open sides of the slice. When
             `structure` is true, the step will fail if the content between
             from and to is not just a sequence of closing and then opening
             tokens (this is to guard against rebased replace steps
             overwriting something they weren't supposed to).
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.slice = slice;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && contentBetween(doc, this.from, this.to))
                    return StepResult.fail("Structure replace would overwrite content");
                return StepResult.fromReplace(doc, this.from, this.to, this.slice);
            }
            getMap() {
                return new StepMap([this.from, this.to - this.from, this.slice.size]);
            }
            invert(doc) {
                return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deletedAcross && to.deletedAcross)
                    return null;
                return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
            }
            merge(other) {
                if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                    return null;
                if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                    return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
                }
                else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                    return new ReplaceStep(other.from, this.to, slice, this.structure);
                }
                else {
                    return null;
                }
            }
            toJSON() {
                let json = { stepType: "replace", from: this.from, to: this.to };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for ReplaceStep.fromJSON");
                return new ReplaceStep(json.from, json.to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), !!json.structure);
            }
        }
        Step.jsonID("replace", ReplaceStep);
        /**
         Replace a part of the document with a slice of content, but
         preserve a range of the replaced content by moving it into the
         slice.
         */
        class ReplaceAroundStep extends Step {
            /**
             Create a replace-around step with the given range and gap.
             `insert` should be the point in the slice into which the content
             of the gap should be moved. `structure` has the same meaning as
             it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The start of preserved range.
                 */
                gapFrom,
                /**
                 The end of preserved range.
                 */
                gapTo,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 The position in the slice where the preserved range should be
                 inserted.
                 */
                insert,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.gapFrom = gapFrom;
                this.gapTo = gapTo;
                this.slice = slice;
                this.insert = insert;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                    contentBetween(doc, this.gapTo, this.to)))
                    return StepResult.fail("Structure gap-replace would overwrite content");
                let gap = doc.slice(this.gapFrom, this.gapTo);
                if (gap.openStart || gap.openEnd)
                    return StepResult.fail("Gap is not a flat range");
                let inserted = this.slice.insertAt(this.insert, gap.content);
                if (!inserted)
                    return StepResult.fail("Content does not fit in gap");
                return StepResult.fromReplace(doc, this.from, this.to, inserted);
            }
            getMap() {
                return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                    this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
            }
            invert(doc) {
                let gap = this.gapTo - this.gapFrom;
                return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
                if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                    return null;
                return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
            }
            toJSON() {
                let json = { stepType: "replaceAround", from: this.from, to: this.to,
                    gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number" ||
                    typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                    throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
                return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
            }
        }
        Step.jsonID("replaceAround", ReplaceAroundStep);
        function contentBetween(doc, from, to) {
            let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
            while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
                depth--;
                dist--;
            }
            if (dist > 0) {
                let next = $from.node(depth).maybeChild($from.indexAfter(depth));
                while (dist > 0) {
                    if (!next || next.isLeaf)
                        return true;
                    next = next.firstChild;
                    dist--;
                }
            }
            return false;
        }

        function addMark(tr, from, to, mark) {
            let removed = [], added = [];
            let removing, adding;
            tr.doc.nodesBetween(from, to, (node, pos, parent) => {
                if (!node.isInline)
                    return;
                let marks = node.marks;
                if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                    let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                    let newSet = mark.addToSet(marks);
                    for (let i = 0; i < marks.length; i++) {
                        if (!marks[i].isInSet(newSet)) {
                            if (removing && removing.to == start && removing.mark.eq(marks[i]))
                                removing.to = end;
                            else
                                removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                        }
                    }
                    if (adding && adding.to == start)
                        adding.to = end;
                    else
                        added.push(adding = new AddMarkStep(start, end, mark));
                }
            });
            removed.forEach(s => tr.step(s));
            added.forEach(s => tr.step(s));
        }
        function removeMark(tr, from, to, mark) {
            let matched = [], step = 0;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (!node.isInline)
                    return;
                step++;
                let toRemove = null;
                if (mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType) {
                    let set = node.marks, found;
                    while (found = mark.isInSet(set)) {
                        (toRemove || (toRemove = [])).push(found);
                        set = found.removeFromSet(set);
                    }
                }
                else if (mark) {
                    if (mark.isInSet(node.marks))
                        toRemove = [mark];
                }
                else {
                    toRemove = node.marks;
                }
                if (toRemove && toRemove.length) {
                    let end = Math.min(pos + node.nodeSize, to);
                    for (let i = 0; i < toRemove.length; i++) {
                        let style = toRemove[i], found;
                        for (let j = 0; j < matched.length; j++) {
                            let m = matched[j];
                            if (m.step == step - 1 && style.eq(matched[j].style))
                                found = m;
                        }
                        if (found) {
                            found.to = end;
                            found.step = step;
                        }
                        else {
                            matched.push({ style, from: Math.max(pos, from), to: end, step });
                        }
                    }
                }
            });
            matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
        }
        function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
            let node = tr.doc.nodeAt(pos);
            let delSteps = [], cur = pos + 1;
            for (let i = 0; i < node.childCount; i++) {
                let child = node.child(i), end = cur + child.nodeSize;
                let allowed = match.matchType(child.type);
                if (!allowed) {
                    delSteps.push(new ReplaceStep(cur, end, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty));
                }
                else {
                    match = allowed;
                    for (let j = 0; j < child.marks.length; j++)
                        if (!parentType.allowsMarkType(child.marks[j].type))
                            tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
                }
                cur = end;
            }
            if (!match.validEnd) {
                let fill = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                tr.replace(cur, cur, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(fill, 0, 0));
            }
            for (let i = delSteps.length - 1; i >= 0; i--)
                tr.step(delSteps[i]);
        }

        function canCut(node, start, end) {
            return (start == 0 || node.canReplace(start, node.childCount)) &&
                (end == node.childCount || node.canReplace(0, end));
        }
        /**
         Try to find a target depth to which the content in the given range
         can be lifted. Will not go across
         [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
         */
        function liftTarget(range) {
            let parent = range.parent;
            let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
            for (let depth = range.depth;; --depth) {
                let node = range.$from.node(depth);
                let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
                if (depth < range.depth && node.canReplace(index, endIndex, content))
                    return depth;
                if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                    break;
            }
            return null;
        }
        function lift(tr, range, target) {
            let { $from, $to, depth } = range;
            let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
            let start = gapStart, end = gapEnd;
            let before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openStart = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $from.index(d) > 0) {
                    splitting = true;
                    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(before));
                    openStart++;
                }
                else {
                    start--;
                }
            let after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openEnd = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $to.after(d + 1) < $to.end(d)) {
                    splitting = true;
                    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($to.node(d).copy(after));
                    openEnd++;
                }
                else {
                    end++;
                }
            tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
        }
        /**
         Try to find a valid way to wrap the content in the given range in a
         node of the given type. May introduce extra nodes around and inside
         the wrapper node, if necessary. Returns null if no valid wrapping
         could be found. When `innerRange` is given, that range's content is
         used as the content to fit into the wrapping, instead of the
         content of `range`.
         */
        function findWrapping(range, nodeType, attrs = null, innerRange = range) {
            let around = findWrappingOutside(range, nodeType);
            let inner = around && findWrappingInside(innerRange, nodeType);
            if (!inner)
                return null;
            return around.map(withAttrs)
                .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
        }
        function withAttrs(type) { return { type, attrs: null }; }
        function findWrappingOutside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let around = parent.contentMatchAt(startIndex).findWrapping(type);
            if (!around)
                return null;
            let outer = around.length ? around[0] : type;
            return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
        }
        function findWrappingInside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let inner = parent.child(startIndex);
            let inside = type.contentMatch.findWrapping(inner.type);
            if (!inside)
                return null;
            let lastType = inside.length ? inside[inside.length - 1] : type;
            let innerMatch = lastType.contentMatch;
            for (let i = startIndex; innerMatch && i < endIndex; i++)
                innerMatch = innerMatch.matchType(parent.child(i).type);
            if (!innerMatch || !innerMatch.validEnd)
                return null;
            return inside;
        }
        function wrap(tr, range, wrappers) {
            let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let i = wrappers.length - 1; i >= 0; i--) {
                if (content.size) {
                    let match = wrappers[i].type.contentMatch.matchFragment(content);
                    if (!match || !match.validEnd)
                        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
                }
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
            }
            let start = range.start, end = range.end;
            tr.step(new ReplaceAroundStep(start, end, start, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));
        }
        function setBlockType(tr, from, to, type, attrs) {
            if (!type.isTextblock)
                throw new RangeError("Type given to setBlockType should be a textblock");
            let mapFrom = tr.steps.length;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                    // Ensure all markup that isn't allowed in the new node type is cleared
                    tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
                    let mapping = tr.mapping.slice(mapFrom);
                    let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                    tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                    return false;
                }
            });
        }
        function canChangeType(doc, pos, type) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return $pos.parent.canReplaceWith(index, index + 1, type);
        }
        /**
         Change the type, attributes, and/or marks of the node at `pos`.
         When `type` isn't given, the existing node type is preserved,
         */
        function setNodeMarkup(tr, pos, type, attrs, marks) {
            let node = tr.doc.nodeAt(pos);
            if (!node)
                throw new RangeError("No node at given position");
            if (!type)
                type = node.type;
            let newNode = type.create(attrs, null, marks || node.marks);
            if (node.isLeaf)
                return tr.replaceWith(pos, pos + node.nodeSize, newNode);
            if (!type.validContent(node.content))
                throw new RangeError("Invalid content for node type " + type.name);
            tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(newNode), 0, 0), 1, true));
        }
        /**
         Check whether splitting at the given position is allowed.
         */
        function canSplit(doc, pos, depth = 1, typesAfter) {
            let $pos = doc.resolve(pos), base = $pos.depth - depth;
            let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
            if (base < 0 || $pos.parent.type.spec.isolating ||
                !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
                !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
                return false;
            for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
                let node = $pos.node(d), index = $pos.index(d);
                if (node.type.spec.isolating)
                    return false;
                let rest = node.content.cutByIndex(index, node.childCount);
                let after = (typesAfter && typesAfter[i]) || node;
                if (after != node)
                    rest = rest.replaceChild(0, after.type.create(after.attrs));
                if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                    return false;
            }
            let index = $pos.indexAfter(base);
            let baseType = typesAfter && typesAfter[0];
            return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
        }
        function split(tr, pos, depth = 1, typesAfter) {
            let $pos = tr.doc.resolve(pos), before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
                before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($pos.node(d).copy(before));
                let typeAfter = typesAfter && typesAfter[i];
                after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
            }
            tr.step(new ReplaceStep(pos, pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), depth, depth), true));
        }
        /**
         Test whether the blocks before and after a given position can be
         joined.
         */
        function canJoin(doc, pos) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return joinable($pos.nodeBefore, $pos.nodeAfter) &&
                $pos.parent.canReplace(index, index + 1);
        }
        function joinable(a, b) {
            return !!(a && b && !a.isLeaf && a.canAppend(b));
        }
        /**
         Find an ancestor of the given position that can be joined to the
         block before (or after if `dir` is positive). Returns the joinable
         point, if any.
         */
        function joinPoint(doc, pos, dir = -1) {
            let $pos = doc.resolve(pos);
            for (let d = $pos.depth;; d--) {
                let before, after, index = $pos.index(d);
                if (d == $pos.depth) {
                    before = $pos.nodeBefore;
                    after = $pos.nodeAfter;
                }
                else if (dir > 0) {
                    before = $pos.node(d + 1);
                    index++;
                    after = $pos.node(d).maybeChild(index);
                }
                else {
                    before = $pos.node(d).maybeChild(index - 1);
                    after = $pos.node(d + 1);
                }
                if (before && !before.isTextblock && joinable(before, after) &&
                    $pos.node(d).canReplace(index, index + 1))
                    return pos;
                if (d == 0)
                    break;
                pos = dir < 0 ? $pos.before(d) : $pos.after(d);
            }
        }
        function join(tr, pos, depth) {
            let step = new ReplaceStep(pos - depth, pos + depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, true);
            tr.step(step);
        }
        /**
         Try to find a point where a node of the given type can be inserted
         near `pos`, by searching up the node hierarchy when `pos` itself
         isn't a valid place but is at the start or end of a node. Return
         null if no position was found.
         */
        function insertPoint(doc, pos, nodeType) {
            let $pos = doc.resolve(pos);
            if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
                return pos;
            if ($pos.parentOffset == 0)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.index(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.before(d + 1);
                    if (index > 0)
                        return null;
                }
            if ($pos.parentOffset == $pos.parent.content.size)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.indexAfter(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.after(d + 1);
                    if (index < $pos.node(d).childCount)
                        return null;
                }
            return null;
        }
        /**
         Finds a position at or around the given position where the given
         slice can be inserted. Will look at parent nodes' nearest boundary
         and try there, even if the original position wasn't directly at the
         start or end of that node. Returns null when no position was found.
         */
        function dropPoint(doc, pos, slice) {
            let $pos = doc.resolve(pos);
            if (!slice.content.size)
                return pos;
            let content = slice.content;
            for (let i = 0; i < slice.openStart; i++)
                content = content.firstChild.content;
            for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
                for (let d = $pos.depth; d >= 0; d--) {
                    let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                    let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                    let parent = $pos.node(d), fits = false;
                    if (pass == 1) {
                        fits = parent.canReplace(insertPos, insertPos, content);
                    }
                    else {
                        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                    }
                    if (fits)
                        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
                }
            }
            return null;
        }

        /**
         ‘Fit’ a slice into a given position in the document, producing a
         [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
         there's no meaningful way to insert the slice here, or inserting it
         would be a no-op (an empty slice over an empty range).
         */
        function replaceStep(doc, from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
            if (from == to && !slice.size)
                return null;
            let $from = doc.resolve(from), $to = doc.resolve(to);
            // Optimization -- avoid work if it's obvious that it's not needed.
            if (fitsTrivially($from, $to, slice))
                return new ReplaceStep(from, to, slice);
            return new Fitter($from, $to, slice).fit();
        }
        function fitsTrivially($from, $to, slice) {
            return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
                $from.parent.canReplace($from.index(), $to.index(), slice.content);
        }
// Algorithm for 'placing' the elements of a slice into a gap:
//
// We consider the content of each node that is open to the left to be
// independently placeable. I.e. in <p("foo"), p("bar")>, when the
// paragraph on the left is open, "foo" can be placed (somewhere on
// the left side of the replacement gap) independently from p("bar").
//
// This class tracks the state of the placement progress in the
// following properties:
//
//  - `frontier` holds a stack of `{type, match}` objects that
//    represent the open side of the replacement. It starts at
//    `$from`, then moves forward as content is placed, and is finally
//    reconciled with `$to`.
//
//  - `unplaced` is a slice that represents the content that hasn't
//    been placed yet.
//
//  - `placed` is a fragment of placed content. Its open-start value
//    is implicit in `$from`, and its open-end value in `frontier`.
        class Fitter {
            constructor($from, $to, unplaced) {
                this.$from = $from;
                this.$to = $to;
                this.unplaced = unplaced;
                this.frontier = [];
                this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                for (let i = 0; i <= $from.depth; i++) {
                    let node = $from.node(i);
                    this.frontier.push({
                        type: node.type,
                        match: node.contentMatchAt($from.indexAfter(i))
                    });
                }
                for (let i = $from.depth; i > 0; i--)
                    this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(i).copy(this.placed));
            }
            get depth() { return this.frontier.length - 1; }
            fit() {
                // As long as there's unplaced content, try to place some of it.
                // If that fails, either increase the open score of the unplaced
                // slice, or drop nodes from it, and then try again.
                while (this.unplaced.size) {
                    let fit = this.findFittable();
                    if (fit)
                        this.placeNodes(fit);
                    else
                        this.openMore() || this.dropNode();
                }
                // When there's inline content directly after the frontier _and_
                // directly after `this.$to`, we must generate a `ReplaceAround`
                // step that pulls that content into the node after the frontier.
                // That means the fitting must be done to the end of the textblock
                // node after `this.$to`, not `this.$to` itself.
                let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
                let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
                if (!$to)
                    return null;
                // If closing to `$to` succeeded, create a step
                let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
                while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                    content = content.firstChild.content;
                    openStart--;
                    openEnd--;
                }
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);
                if (moveInline > -1)
                    return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
                if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                    return new ReplaceStep($from.pos, $to.pos, slice);
                return null;
            }
            // Find a position on the start spine of `this.unplaced` that has
            // content that can be moved somewhere on the frontier. Returns two
            // depths, one for the slice and one for the frontier.
            findFittable() {
                // Only try wrapping nodes (pass 2) after finding a place without
                // wrapping failed.
                for (let pass = 1; pass <= 2; pass++) {
                    for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                        let fragment, parent = null;
                        if (sliceDepth) {
                            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                            fragment = parent.content;
                        }
                        else {
                            fragment = this.unplaced.content;
                        }
                        let first = fragment.firstChild;
                        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                            let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                            // In pass 1, if the next node matches, or there is no next
                            // node but the parents look compatible, we've found a
                            // place.
                            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(first), false))
                                : parent && type.compatibleContent(parent.type)))
                                return { sliceDepth, frontierDepth, parent, inject };
                                // In pass 2, look for a set of wrapping nodes that make
                            // `first` fit here.
                            else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                                return { sliceDepth, frontierDepth, parent, wrap };
                            // Don't continue looking further up if the parent node
                            // would fit here.
                            if (parent && match.matchType(parent.type))
                                break;
                        }
                    }
                }
            }
            openMore() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (!inner.childCount || inner.firstChild.isLeaf)
                    return false;
                this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
                return true;
            }
            dropNode() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (inner.childCount <= 1 && openStart > 0) {
                    let openAtEnd = content.size - openStart <= openStart + inner.size;
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
                }
                else {
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
                }
            }
            // Move content from the unplaced slice at `sliceDepth` to the
            // frontier node at `frontierDepth`. Close that frontier node when
            // applicable.
            placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
                while (this.depth > frontierDepth)
                    this.closeFrontierNode();
                if (wrap)
                    for (let i = 0; i < wrap.length; i++)
                        this.openFrontierNode(wrap[i]);
                let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
                let openStart = slice.openStart - sliceDepth;
                let taken = 0, add = [];
                let { match, type } = this.frontier[frontierDepth];
                if (inject) {
                    for (let i = 0; i < inject.childCount; i++)
                        add.push(inject.child(i));
                    match = match.matchFragment(inject);
                }
                // Computes the amount of (end) open nodes at the end of the
                // fragment. When 0, the parent is open, but no more. When
                // negative, nothing is open.
                let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
                // Scan over the fragment, fitting as many child nodes as
                // possible.
                while (taken < fragment.childCount) {
                    let next = fragment.child(taken), matches = match.matchType(next.type);
                    if (!matches)
                        break;
                    taken++;
                    if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                        match = matches;
                        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                    }
                }
                let toEnd = taken == fragment.childCount;
                if (!toEnd)
                    openEndCount = -1;
                this.placed = addToFragment(this.placed, frontierDepth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(add));
                this.frontier[frontierDepth].match = match;
                // If the parent types match, and the entire node was moved, and
                // it's not open, close this frontier node right away.
                if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                    this.closeFrontierNode();
                // Add new frontier nodes for any open nodes at the end.
                for (let i = 0, cur = fragment; i < openEndCount; i++) {
                    let node = cur.lastChild;
                    this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                    cur = node.content;
                }
                // Update `this.unplaced`. Drop the entire node from which we
                // placed it we got to its end, otherwise just drop the placed
                // nodes.
                this.unplaced = !toEnd ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                    : sliceDepth == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
            }
            mustMoveInline() {
                if (!this.$to.parent.isTextblock)
                    return -1;
                let top = this.frontier[this.depth], level;
                if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                    (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                    return -1;
                let { depth } = this.$to, after = this.$to.after(depth);
                while (depth > 1 && after == this.$to.end(--depth))
                    ++after;
                return after;
            }
            findCloseLevel($to) {
                scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                    let { match, type } = this.frontier[i];
                    let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                    let fit = contentAfterFits($to, i, type, match, dropInner);
                    if (!fit)
                        continue;
                    for (let d = i - 1; d >= 0; d--) {
                        let { match, type } = this.frontier[d];
                        let matches = contentAfterFits($to, d, type, match, true);
                        if (!matches || matches.childCount)
                            continue scan;
                    }
                    return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
                }
            }
            close($to) {
                let close = this.findCloseLevel($to);
                if (!close)
                    return null;
                while (this.depth > close.depth)
                    this.closeFrontierNode();
                if (close.fit.childCount)
                    this.placed = addToFragment(this.placed, close.depth, close.fit);
                $to = close.move;
                for (let d = close.depth + 1; d <= $to.depth; d++) {
                    let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                    this.openFrontierNode(node.type, node.attrs, add);
                }
                return $to;
            }
            openFrontierNode(type, attrs = null, content) {
                let top = this.frontier[this.depth];
                top.match = top.match.matchType(type);
                this.placed = addToFragment(this.placed, this.depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, content)));
                this.frontier.push({ type, match: type.contentMatch });
            }
            closeFrontierNode() {
                let open = this.frontier.pop();
                let add = open.match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                if (add.childCount)
                    this.placed = addToFragment(this.placed, this.frontier.length, add);
            }
        }
        function dropFromFragment(fragment, depth, count) {
            if (depth == 0)
                return fragment.cutByIndex(count, fragment.childCount);
            return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
        }
        function addToFragment(fragment, depth, content) {
            if (depth == 0)
                return fragment.append(content);
            return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
        }
        function contentAt(fragment, depth) {
            for (let i = 0; i < depth; i++)
                fragment = fragment.firstChild.content;
            return fragment;
        }
        function closeNodeStart(node, openStart, openEnd) {
            if (openStart <= 0)
                return node;
            let frag = node.content;
            if (openStart > 1)
                frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
            if (openStart > 0) {
                frag = node.type.contentMatch.fillBefore(frag).append(frag);
                if (openEnd <= 0)
                    frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return node.copy(frag);
        }
        function contentAfterFits($to, depth, type, match, open) {
            let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
            if (index == node.childCount && !type.compatibleContent(node.type))
                return null;
            let fit = match.fillBefore(node.content, true, index);
            return fit && !invalidMarks(type, node.content, index) ? fit : null;
        }
        function invalidMarks(type, fragment, start) {
            for (let i = start; i < fragment.childCount; i++)
                if (!type.allowsMarks(fragment.child(i).marks))
                    return true;
            return false;
        }
        function definesContent(type) {
            return type.spec.defining || type.spec.definingForContent;
        }
        function replaceRange(tr, from, to, slice) {
            if (!slice.size)
                return tr.deleteRange(from, to);
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            if (fitsTrivially($from, $to, slice))
                return tr.step(new ReplaceStep(from, to, slice));
            let targetDepths = coveredDepths($from, tr.doc.resolve(to));
            // Can't replace the whole document, so remove 0 if it's present
            if (targetDepths[targetDepths.length - 1] == 0)
                targetDepths.pop();
            // Negative numbers represent not expansion over the whole node at
            // that depth, but replacing from $from.before(-D) to $to.pos.
            let preferredTarget = -($from.depth + 1);
            targetDepths.unshift(preferredTarget);
            // This loop picks a preferred target depth, if one of the covering
            // depths is not outside of a defining node, and adds negative
            // depths for any depth that has $from at its start and does not
            // cross a defining node.
            for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
                let spec = $from.node(d).type.spec;
                if (spec.defining || spec.definingAsContext || spec.isolating)
                    break;
                if (targetDepths.indexOf(d) > -1)
                    preferredTarget = d;
                else if ($from.before(d) == pos)
                    targetDepths.splice(1, 0, -d);
            }
            // Try to fit each possible depth of the slice into each possible
            // target depth, starting with the preferred depths.
            let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
            let leftNodes = [], preferredDepth = slice.openStart;
            for (let content = slice.content, i = 0;; i++) {
                let node = content.firstChild;
                leftNodes.push(node);
                if (i == slice.openStart)
                    break;
                content = node.content;
            }
            // Back up preferredDepth to cover defining textblocks directly
            // above it, possibly skipping a non-defining textblock.
            for (let d = preferredDepth - 1; d >= 0; d--) {
                let type = leftNodes[d].type, def = definesContent(type);
                if (def && $from.node(preferredTargetIndex).type != type)
                    preferredDepth = d;
                else if (def || !type.isTextblock)
                    break;
            }
            for (let j = slice.openStart; j >= 0; j--) {
                let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
                let insert = leftNodes[openDepth];
                if (!insert)
                    continue;
                for (let i = 0; i < targetDepths.length; i++) {
                    // Loop over possible expansion levels, starting with the
                    // preferred one
                    let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                    if (targetDepth < 0) {
                        expand = false;
                        targetDepth = -targetDepth;
                    }
                    let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                    if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                        return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
                }
            }
            let startSteps = tr.steps.length;
            for (let i = targetDepths.length - 1; i >= 0; i--) {
                tr.replace(from, to, slice);
                if (tr.steps.length > startSteps)
                    break;
                let depth = targetDepths[i];
                if (depth < 0)
                    continue;
                from = $from.before(depth);
                to = $to.after(depth);
            }
        }
        function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
            if (depth < oldOpen) {
                let first = fragment.firstChild;
                fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
            }
            if (depth > newOpen) {
                let match = parent.contentMatchAt(0);
                let start = match.fillBefore(fragment).append(fragment);
                fragment = start.append(match.matchFragment(start).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return fragment;
        }
        function replaceRangeWith(tr, from, to, node) {
            if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
                let point = insertPoint(tr.doc, from, node.type);
                if (point != null)
                    from = to = point;
            }
            tr.replaceRange(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node), 0, 0));
        }
        function deleteRange(tr, from, to) {
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            let covered = coveredDepths($from, $to);
            for (let i = 0; i < covered.length; i++) {
                let depth = covered[i], last = i == covered.length - 1;
                if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                    return tr.delete($from.start(depth), $to.end(depth));
                if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                    return tr.delete($from.before(depth), $to.after(depth));
            }
            for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
                if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                    return tr.delete($from.before(d), to);
            }
            tr.delete(from, to);
        }
// Returns an array of all depths for which $from - $to spans the
// whole content of the nodes at that depth.
        function coveredDepths($from, $to) {
            let result = [], minDepth = Math.min($from.depth, $to.depth);
            for (let d = minDepth; d >= 0; d--) {
                let start = $from.start(d);
                if (start < $from.pos - ($from.depth - d) ||
                    $to.end(d) > $to.pos + ($to.depth - d) ||
                    $from.node(d).type.spec.isolating ||
                    $to.node(d).type.spec.isolating)
                    break;
                if (start == $to.start(d) ||
                    (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                        d && $to.start(d - 1) == start - 1))
                    result.push(d);
            }
            return result;
        }

        /**
         @internal
         */
        let TransformError = class extends Error {
        };
        TransformError = function TransformError(message) {
            let err = Error.call(this, message);
            err.__proto__ = TransformError.prototype;
            return err;
        };
        TransformError.prototype = Object.create(Error.prototype);
        TransformError.prototype.constructor = TransformError;
        TransformError.prototype.name = "TransformError";
        /**
         Abstraction to build up and track an array of
         [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

         Most transforming methods return the `Transform` object itself, so
         that they can be chained.
         */
        class Transform {
            /**
             Create a transform that starts with the given document.
             */
            constructor(
                /**
                 The current document (the result of applying the steps in the
                 transform).
                 */
                doc) {
                this.doc = doc;
                /**
                 The steps in this transform.
                 */
                this.steps = [];
                /**
                 The documents before each of the steps.
                 */
                this.docs = [];
                /**
                 A mapping with the maps for each of the steps in this transform.
                 */
                this.mapping = new Mapping;
            }
            /**
             The starting document.
             */
            get before() { return this.docs.length ? this.docs[0] : this.doc; }
            /**
             Apply a new step in this transform, saving the result. Throws an
             error when the step fails.
             */
            step(step) {
                let result = this.maybeStep(step);
                if (result.failed)
                    throw new TransformError(result.failed);
                return this;
            }
            /**
             Try to apply a step in this transformation, ignoring it if it
             fails. Returns the step result.
             */
            maybeStep(step) {
                let result = step.apply(this.doc);
                if (!result.failed)
                    this.addStep(step, result.doc);
                return result;
            }
            /**
             True when the document has been changed (when there are any
             steps).
             */
            get docChanged() {
                return this.steps.length > 0;
            }
            /**
             @internal
             */
            addStep(step, doc) {
                this.docs.push(this.doc);
                this.steps.push(step);
                this.mapping.appendMap(step.getMap());
                this.doc = doc;
            }
            /**
             Replace the part of the document between `from` and `to` with the
             given `slice`.
             */
            replace(from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                let step = replaceStep(this.doc, from, to, slice);
                if (step)
                    this.step(step);
                return this;
            }
            /**
             Replace the given range with the given content, which may be a
             fragment, node, or array of nodes.
             */
            replaceWith(from, to, content) {
                return this.replace(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(content), 0, 0));
            }
            /**
             Delete the content between the given positions.
             */
            delete(from, to) {
                return this.replace(from, to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty);
            }
            /**
             Insert the given content at the given position.
             */
            insert(pos, content) {
                return this.replaceWith(pos, pos, content);
            }
            /**
             Replace a range of the document with a given slice, using
             `from`, `to`, and the slice's
             [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
             than fixed start and end points. This method may grow the
             replaced area or close open nodes in the slice in order to get a
             fit that is more in line with WYSIWYG expectations, by dropping
             fully covered parent nodes of the replaced region when they are
             marked [non-defining as
             context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
             open parent node from the slice that _is_ marked as [defining
             its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).

             This is the method, for example, to handle paste. The similar
             [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
             primitive tool which will _not_ move the start and end of its given
             range, and is useful in situations where you need more precise
             control over what happens.
             */
            replaceRange(from, to, slice) {
                replaceRange(this, from, to, slice);
                return this;
            }
            /**
             Replace the given range with a node, but use `from` and `to` as
             hints, rather than precise positions. When from and to are the same
             and are at the start or end of a parent node in which the given
             node doesn't fit, this method may _move_ them out towards a parent
             that does allow the given node to be placed. When the given range
             completely covers a parent node, this method may completely replace
             that parent node.
             */
            replaceRangeWith(from, to, node) {
                replaceRangeWith(this, from, to, node);
                return this;
            }
            /**
             Delete the given range, expanding it to cover fully covered
             parent nodes until a valid replace is found.
             */
            deleteRange(from, to) {
                deleteRange(this, from, to);
                return this;
            }
            /**
             Split the content in the given range off from its parent, if there
             is sibling content before or after it, and move it up the tree to
             the depth specified by `target`. You'll probably want to use
             [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
             sure the lift is valid.
             */
            lift(range, target) {
                lift(this, range, target);
                return this;
            }
            /**
             Join the blocks around the given position. If depth is 2, their
             last and first siblings are also joined, and so on.
             */
            join(pos, depth = 1) {
                join(this, pos, depth);
                return this;
            }
            /**
             Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
             The wrappers are assumed to be valid in this position, and should
             probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
             */
            wrap(range, wrappers) {
                wrap(this, range, wrappers);
                return this;
            }
            /**
             Set the type of all textblocks (partly) between `from` and `to` to
             the given node type with the given attributes.
             */
            setBlockType(from, to = from, type, attrs = null) {
                setBlockType(this, from, to, type, attrs);
                return this;
            }
            /**
             Change the type, attributes, and/or marks of the node at `pos`.
             When `type` isn't given, the existing node type is preserved,
             */
            setNodeMarkup(pos, type, attrs = null, marks = []) {
                setNodeMarkup(this, pos, type, attrs, marks);
                return this;
            }
            /**
             Split the node at the given position, and optionally, if `depth` is
             greater than one, any number of nodes above that. By default, the
             parts split off will inherit the node type of the original node.
             This can be changed by passing an array of types and attributes to
             use after the split.
             */
            split(pos, depth = 1, typesAfter) {
                split(this, pos, depth, typesAfter);
                return this;
            }
            /**
             Add the given mark to the inline content between `from` and `to`.
             */
            addMark(from, to, mark) {
                addMark(this, from, to, mark);
                return this;
            }
            /**
             Remove marks from inline nodes between `from` and `to`. When
             `mark` is a single mark, remove precisely that mark. When it is
             a mark type, remove all marks of that type. When it is null,
             remove all marks of any type.
             */
            removeMark(from, to, mark) {
                removeMark(this, from, to, mark);
                return this;
            }
            /**
             Removes all marks and nodes from the content of the node at
             `pos` that don't match the given new parent node type. Accepts
             an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
             third argument.
             */
            clearIncompatible(pos, parentType, match) {
                clearIncompatible(this, pos, parentType, match);
                return this;
            }
        }




        /***/ }),

    /***/ "./node_modules/@tiptap/core/node_modules/prosemirror-view/dist/index.js":
    /*!*******************************************************************************!*\
  !*** ./node_modules/@tiptap/core/node_modules/prosemirror-view/dist/index.js ***!
  \*******************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Decoration": () => (/* binding */ Decoration),
            /* harmony export */   "DecorationSet": () => (/* binding */ DecorationSet),
            /* harmony export */   "EditorView": () => (/* binding */ EditorView),
            /* harmony export */   "__endComposition": () => (/* binding */ __endComposition),
            /* harmony export */   "__parseFromClipboard": () => (/* binding */ __parseFromClipboard),
            /* harmony export */   "__serializeForClipboard": () => (/* binding */ __serializeForClipboard)
            /* harmony export */ });
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/@tiptap/core/node_modules/prosemirror-view/node_modules/prosemirror-transform/dist/index.js");




        const nav = typeof navigator != "undefined" ? navigator : null;
        const doc = typeof document != "undefined" ? document : null;
        const agent = (nav && nav.userAgent) || "";
        const ie_edge = /Edge\/(\d+)/.exec(agent);
        const ie_upto10 = /MSIE \d/.exec(agent);
        const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
        const ie = !!(ie_upto10 || ie_11up || ie_edge);
        const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
        const gecko = !ie && /gecko\/(\d+)/i.test(agent);
        gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
        const _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
        const chrome = !!_chrome;
        const chrome_version = _chrome ? +_chrome[1] : 0;
        const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
// Is true for both iOS and iPadOS for convenience
        const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
        const mac = ios || (nav ? /Mac/.test(nav.platform) : false);
        const android = /Android \d/.test(agent);
        const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
        const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

        const domIndex = function (node) {
            for (var index = 0;; index++) {
                node = node.previousSibling;
                if (!node)
                    return index;
            }
        };
        const parentNode = function (node) {
            let parent = node.assignedSlot || node.parentNode;
            return parent && parent.nodeType == 11 ? parent.host : parent;
        };
        let reusedRange = null;
// Note that this will always return the same range, because DOM range
// objects are every expensive, and keep slowing down subsequent DOM
// updates, for some reason.
        const textRange = function (node, from, to) {
            let range = reusedRange || (reusedRange = document.createRange());
            range.setEnd(node, to == null ? node.nodeValue.length : to);
            range.setStart(node, from || 0);
            return range;
        };
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
        const isEquivalentPosition = function (node, off, targetNode, targetOff) {
            return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
                scanFor(node, off, targetNode, targetOff, 1));
        };
        const atomElements = /^(img|br|input|textarea|hr)$/i;
        function scanFor(node, off, targetNode, targetOff, dir) {
            for (;;) {
                if (node == targetNode && off == targetOff)
                    return true;
                if (off == (dir < 0 ? 0 : nodeSize(node))) {
                    let parent = node.parentNode;
                    if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                        node.contentEditable == "false")
                        return false;
                    off = domIndex(node) + (dir < 0 ? 0 : 1);
                    node = parent;
                }
                else if (node.nodeType == 1) {
                    node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                    if (node.contentEditable == "false")
                        return false;
                    off = dir < 0 ? nodeSize(node) : 0;
                }
                else {
                    return false;
                }
            }
        }
        function nodeSize(node) {
            return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
        }
        function isOnEdge(node, offset, parent) {
            for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
                if (node == parent)
                    return true;
                let index = domIndex(node);
                node = node.parentNode;
                if (!node)
                    return false;
                atStart = atStart && index == 0;
                atEnd = atEnd && index == nodeSize(node);
            }
        }
        function hasBlockDesc(dom) {
            let desc;
            for (let cur = dom; cur; cur = cur.parentNode)
                if (desc = cur.pmViewDesc)
                    break;
            return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
        }
// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
// (isCollapsed inappropriately returns true in shadow dom)
        const selectionCollapsed = function (domSel) {
            let collapsed = domSel.isCollapsed;
            if (collapsed && chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
                collapsed = false;
            return collapsed;
        };
        function keyEvent(keyCode, key) {
            let event = document.createEvent("Event");
            event.initEvent("keydown", true, true);
            event.keyCode = keyCode;
            event.key = event.code = key;
            return event;
        }

        function windowRect(doc) {
            return { left: 0, right: doc.documentElement.clientWidth,
                top: 0, bottom: doc.documentElement.clientHeight };
        }
        function getSide(value, side) {
            return typeof value == "number" ? value : value[side];
        }
        function clientRect(node) {
            let rect = node.getBoundingClientRect();
            // Adjust for elements with style "transform: scale()"
            let scaleX = (rect.width / node.offsetWidth) || 1;
            let scaleY = (rect.height / node.offsetHeight) || 1;
            // Make sure scrollbar width isn't included in the rectangle
            return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
                top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
        }
        function scrollRectIntoView(view, rect, startDOM) {
            let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
            let doc = view.dom.ownerDocument;
            for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
                if (!parent)
                    break;
                if (parent.nodeType != 1)
                    continue;
                let elt = parent;
                let atTop = elt == doc.body;
                let bounding = atTop ? windowRect(doc) : clientRect(elt);
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
                    moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
                else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
                    moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
                if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
                    moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
                else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
                    moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
                if (moveX || moveY) {
                    if (atTop) {
                        doc.defaultView.scrollBy(moveX, moveY);
                    }
                    else {
                        let startX = elt.scrollLeft, startY = elt.scrollTop;
                        if (moveY)
                            elt.scrollTop += moveY;
                        if (moveX)
                            elt.scrollLeft += moveX;
                        let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                        rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
                    }
                }
                if (atTop)
                    break;
            }
        }
// Store the scroll position of the editor's parent nodes, along with
// the top position of an element near the top of the editor, which
// will be used to make sure the visible viewport remains stable even
// when the size of the content above changes.
        function storeScrollPos(view) {
            let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
            let refDOM, refTop;
            for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
                let dom = view.root.elementFromPoint(x, y);
                if (!dom || dom == view.dom || !view.dom.contains(dom))
                    continue;
                let localRect = dom.getBoundingClientRect();
                if (localRect.top >= startY - 20) {
                    refDOM = dom;
                    refTop = localRect.top;
                    break;
                }
            }
            return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
        }
        function scrollStack(dom) {
            let stack = [], doc = dom.ownerDocument;
            for (let cur = dom; cur; cur = parentNode(cur)) {
                stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
                if (dom == doc)
                    break;
            }
            return stack;
        }
// Reset the scroll position of the editor's parent nodes to that what
// it was before, when storeScrollPos was called.
        function resetScrollPos({ refDOM, refTop, stack }) {
            let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
            restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
        }
        function restoreScrollStack(stack, dTop) {
            for (let i = 0; i < stack.length; i++) {
                let { dom, top, left } = stack[i];
                if (dom.scrollTop != top + dTop)
                    dom.scrollTop = top + dTop;
                if (dom.scrollLeft != left)
                    dom.scrollLeft = left;
            }
        }
        let preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
        function focusPreventScroll(dom) {
            if (dom.setActive)
                return dom.setActive(); // in IE
            if (preventScrollSupported)
                return dom.focus(preventScrollSupported);
            let stored = scrollStack(dom);
            dom.focus(preventScrollSupported == null ? {
                get preventScroll() {
                    preventScrollSupported = { preventScroll: true };
                    return true;
                }
            } : undefined);
            if (!preventScrollSupported) {
                preventScrollSupported = false;
                restoreScrollStack(stored, 0);
            }
        }
        function findOffsetInNode(node, coords) {
            let closest, dxClosest = 2e8, coordsClosest, offset = 0;
            let rowBot = coords.top, rowTop = coords.top;
            for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
                let rects;
                if (child.nodeType == 1)
                    rects = child.getClientRects();
                else if (child.nodeType == 3)
                    rects = textRange(child).getClientRects();
                else
                    continue;
                for (let i = 0; i < rects.length; i++) {
                    let rect = rects[i];
                    if (rect.top <= rowBot && rect.bottom >= rowTop) {
                        rowBot = Math.max(rect.bottom, rowBot);
                        rowTop = Math.min(rect.top, rowTop);
                        let dx = rect.left > coords.left ? rect.left - coords.left
                            : rect.right < coords.left ? coords.left - rect.right : 0;
                        if (dx < dxClosest) {
                            closest = child;
                            dxClosest = dx;
                            coordsClosest = dx && closest.nodeType == 3 ? {
                                left: rect.right < coords.left ? rect.right : rect.left,
                                top: coords.top
                            } : coords;
                            if (child.nodeType == 1 && dx)
                                offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                            continue;
                        }
                    }
                    if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                        coords.left >= rect.left && coords.top >= rect.bottom))
                        offset = childIndex + 1;
                }
            }
            if (closest && closest.nodeType == 3)
                return findOffsetInText(closest, coordsClosest);
            if (!closest || (dxClosest && closest.nodeType == 1))
                return { node, offset };
            return findOffsetInNode(closest, coordsClosest);
        }
        function findOffsetInText(node, coords) {
            let len = node.nodeValue.length;
            let range = document.createRange();
            for (let i = 0; i < len; i++) {
                range.setEnd(node, i + 1);
                range.setStart(node, i);
                let rect = singleRect(range, 1);
                if (rect.top == rect.bottom)
                    continue;
                if (inRect(coords, rect))
                    return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
            }
            return { node, offset: 0 };
        }
        function inRect(coords, rect) {
            return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
                coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
        }
        function targetKludge(dom, coords) {
            let parent = dom.parentNode;
            if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
                return parent;
            return dom;
        }
        function posFromElement(view, elt, coords) {
            let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
            if (node.nodeType == 1 && !node.firstChild) {
                let rect = node.getBoundingClientRect();
                bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
            }
            return view.docView.posFromDOM(node, offset, bias);
        }
        function posFromCaret(view, node, offset, coords) {
            // Browser (in caretPosition/RangeFromPoint) will agressively
            // normalize towards nearby inline nodes. Since we are interested in
            // positions between block nodes too, we first walk up the hierarchy
            // of nodes to see if there are block nodes that the coordinates
            // fall outside of. If so, we take the position before/after that
            // block. If not, we call `posFromDOM` on the raw node/offset.
            let outside = -1;
            for (let cur = node;;) {
                if (cur == view.dom)
                    break;
                let desc = view.docView.nearestDesc(cur, true);
                if (!desc)
                    return null;
                if (desc.node.isBlock && desc.parent) {
                    let rect = desc.dom.getBoundingClientRect();
                    if (rect.left > coords.left || rect.top > coords.top)
                        outside = desc.posBefore;
                    else if (rect.right < coords.left || rect.bottom < coords.top)
                        outside = desc.posAfter;
                    else
                        break;
                }
                cur = desc.dom.parentNode;
            }
            return outside > -1 ? outside : view.docView.posFromDOM(node, offset, 1);
        }
        function elementFromPoint(element, coords, box) {
            let len = element.childNodes.length;
            if (len && box.top < box.bottom) {
                for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
                    let child = element.childNodes[i];
                    if (child.nodeType == 1) {
                        let rects = child.getClientRects();
                        for (let j = 0; j < rects.length; j++) {
                            let rect = rects[j];
                            if (inRect(coords, rect))
                                return elementFromPoint(child, coords, rect);
                        }
                    }
                    if ((i = (i + 1) % len) == startI)
                        break;
                }
            }
            return element;
        }
// Given an x,y position on the editor, get the position in the document.
        function posAtCoords(view, coords) {
            let doc = view.dom.ownerDocument, node, offset = 0;
            if (doc.caretPositionFromPoint) {
                try { // Firefox throws for this call in hard-to-predict circumstances (#994)
                    let pos = doc.caretPositionFromPoint(coords.left, coords.top);
                    if (pos)
                        ({ offsetNode: node, offset } = pos);
                }
                catch (_) { }
            }
            if (!node && doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(coords.left, coords.top);
                if (range)
                    ({ startContainer: node, startOffset: offset } = range);
            }
            let elt = (view.root.elementFromPoint ? view.root : doc)
                .elementFromPoint(coords.left, coords.top + 1);
            let pos;
            if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
                let box = view.dom.getBoundingClientRect();
                if (!inRect(coords, box))
                    return null;
                elt = elementFromPoint(view.dom, coords, box);
                if (!elt)
                    return null;
            }
            // Safari's caretRangeFromPoint returns nonsense when on a draggable element
            if (safari) {
                for (let p = elt; node && p; p = parentNode(p))
                    if (p.draggable)
                        node = undefined;
            }
            elt = targetKludge(elt, coords);
            if (node) {
                if (gecko && node.nodeType == 1) {
                    // Firefox will sometimes return offsets into <input> nodes, which
                    // have no actual children, from caretPositionFromPoint (#953)
                    offset = Math.min(offset, node.childNodes.length);
                    // It'll also move the returned position before image nodes,
                    // even if those are behind it.
                    if (offset < node.childNodes.length) {
                        let next = node.childNodes[offset], box;
                        if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                            box.bottom > coords.top)
                            offset++;
                    }
                }
                // Suspiciously specific kludge to work around caret*FromPoint
                // never returning a position at the end of the document
                if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                    coords.top > node.lastChild.getBoundingClientRect().bottom)
                    pos = view.state.doc.content.size;
                    // Ignore positions directly after a BR, since caret*FromPoint
                    // 'round up' positions that would be more accurately placed
                // before the BR node.
                else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
                    pos = posFromCaret(view, node, offset, coords);
            }
            if (pos == null)
                pos = posFromElement(view, elt, coords);
            let desc = view.docView.nearestDesc(elt, true);
            return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
        }
        function singleRect(target, bias) {
            let rects = target.getClientRects();
            return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
        }
        const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
// Given a position in the document model, get a bounding box of the
// character at that position, relative to the window.
        function coordsAtPos(view, pos, side) {
            let { node, offset } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
            let supportEmptyRange = webkit || gecko;
            if (node.nodeType == 3) {
                // These browsers support querying empty text ranges. Prefer that in
                // bidi context or when at the end of a node.
                if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
                    let rect = singleRect(textRange(node, offset, offset), side);
                    // Firefox returns bad results (the position before the space)
                    // when querying a position directly after line-broken
                    // whitespace. Detect this situation and and kludge around it
                    if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                        if (rectBefore.top == rect.top) {
                            let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                            if (rectAfter.top != rect.top)
                                return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                        }
                    }
                    return rect;
                }
                else {
                    let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
                    if (side < 0 && !offset) {
                        to++;
                        takeSide = -1;
                    }
                    else if (side >= 0 && offset == node.nodeValue.length) {
                        from--;
                        takeSide = 1;
                    }
                    else if (side < 0) {
                        from--;
                    }
                    else {
                        to++;
                    }
                    return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0);
                }
            }
            // Return a horizontal line in block context
            if (!view.state.doc.resolve(pos).parent.inlineContent) {
                if (offset && (side < 0 || offset == nodeSize(node))) {
                    let before = node.childNodes[offset - 1];
                    if (before.nodeType == 1)
                        return flattenH(before.getBoundingClientRect(), false);
                }
                if (offset < nodeSize(node)) {
                    let after = node.childNodes[offset];
                    if (after.nodeType == 1)
                        return flattenH(after.getBoundingClientRect(), true);
                }
                return flattenH(node.getBoundingClientRect(), side >= 0);
            }
            // Inline, not in text node (this is not Bidi-safe)
            if (offset && (side < 0 || offset == nodeSize(node))) {
                let before = node.childNodes[offset - 1];
                let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
                    // BR nodes tend to only return the rectangle before them.
                    // Only use them if they are the last element in their parent
                    : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
                if (target)
                    return flattenV(singleRect(target, 1), false);
            }
            if (offset < nodeSize(node)) {
                let after = node.childNodes[offset];
                while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
                    after = after.nextSibling;
                let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
                    : after.nodeType == 1 ? after : null;
                if (target)
                    return flattenV(singleRect(target, -1), true);
            }
            // All else failed, just try to get a rectangle for the target node
            return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
        }
        function flattenV(rect, left) {
            if (rect.width == 0)
                return rect;
            let x = left ? rect.left : rect.right;
            return { top: rect.top, bottom: rect.bottom, left: x, right: x };
        }
        function flattenH(rect, top) {
            if (rect.height == 0)
                return rect;
            let y = top ? rect.top : rect.bottom;
            return { top: y, bottom: y, left: rect.left, right: rect.right };
        }
        function withFlushedState(view, state, f) {
            let viewState = view.state, active = view.root.activeElement;
            if (viewState != state)
                view.updateState(state);
            if (active != view.dom)
                view.focus();
            try {
                return f();
            }
            finally {
                if (viewState != state)
                    view.updateState(viewState);
                if (active != view.dom && active)
                    active.focus();
            }
        }
// Whether vertical position motion in a given direction
// from a position would leave a text block.
        function endOfTextblockVertical(view, state, dir) {
            let sel = state.selection;
            let $pos = dir == "up" ? sel.$from : sel.$to;
            return withFlushedState(view, state, () => {
                let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
                for (;;) {
                    let nearest = view.docView.nearestDesc(dom, true);
                    if (!nearest)
                        break;
                    if (nearest.node.isBlock) {
                        dom = nearest.dom;
                        break;
                    }
                    dom = nearest.dom.parentNode;
                }
                let coords = coordsAtPos(view, $pos.pos, 1);
                for (let child = dom.firstChild; child; child = child.nextSibling) {
                    let boxes;
                    if (child.nodeType == 1)
                        boxes = child.getClientRects();
                    else if (child.nodeType == 3)
                        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                    else
                        continue;
                    for (let i = 0; i < boxes.length; i++) {
                        let box = boxes[i];
                        if (box.bottom > box.top + 1 &&
                            (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                                : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                            return false;
                    }
                }
                return true;
            });
        }
        const maybeRTL = /[\u0590-\u08ac]/;
        function endOfTextblockHorizontal(view, state, dir) {
            let { $head } = state.selection;
            if (!$head.parent.isTextblock)
                return false;
            let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
            let sel = view.domSelection();
            // If the textblock is all LTR, or the browser doesn't support
            // Selection.modify (Edge), fall back to a primitive approach
            if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
                return dir == "left" || dir == "backward" ? atStart : atEnd;
            return withFlushedState(view, state, () => {
                // This is a huge hack, but appears to be the best we can
                // currently do: use `Selection.modify` to move the selection by
                // one character, and see if that moves the cursor out of the
                // textblock (or doesn't move it at all, when at the start/end of
                // the document).
                let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset;
                let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
                ;
                sel.modify("move", dir, "character");
                let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
                let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||
                    (oldNode == sel.focusNode && oldOff == sel.focusOffset);
                // Restore the previous selection
                sel.removeAllRanges();
                sel.addRange(oldRange);
                if (oldBidiLevel != null)
                    sel.caretBidiLevel = oldBidiLevel;
                return result;
            });
        }
        let cachedState = null;
        let cachedDir = null;
        let cachedResult = false;
        function endOfTextblock(view, state, dir) {
            if (cachedState == state && cachedDir == dir)
                return cachedResult;
            cachedState = state;
            cachedDir = dir;
            return cachedResult = dir == "up" || dir == "down"
                ? endOfTextblockVertical(view, state, dir)
                : endOfTextblockHorizontal(view, state, dir);
        }

// View descriptions are data structures that describe the DOM that is
// used to represent the editor's content. They are used for:
//
// - Incremental redrawing when the document changes
//
// - Figuring out what part of the document a given DOM position
//   corresponds to
//
// - Wiring in custom implementations of the editing interface for a
//   given node
//
// They form a doubly-linked mutable tree, starting at `view.docView`.
        const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
// Superclass for the various kinds of descriptions. Defines their
// basic structure and shared methods.
        class ViewDesc {
            constructor(parent, children, dom,
                        // This is the node that holds the child views. It may be null for
                        // descs that don't have children.
                        contentDOM) {
                this.parent = parent;
                this.children = children;
                this.dom = dom;
                this.contentDOM = contentDOM;
                this.dirty = NOT_DIRTY;
                // An expando property on the DOM node provides a link back to its
                // description.
                dom.pmViewDesc = this;
            }
            // Used to check whether a given description corresponds to a
            // widget/mark/node.
            matchesWidget(widget) { return false; }
            matchesMark(mark) { return false; }
            matchesNode(node, outerDeco, innerDeco) { return false; }
            matchesHack(nodeName) { return false; }
            // When parsing in-editor content (in domchange.js), we allow
            // descriptions to determine the parse rules that should be used to
            // parse them.
            parseRule() { return null; }
            // Used by the editor's event handler to ignore events that come
            // from certain descs.
            stopEvent(event) { return false; }
            // The size of the content represented by this desc.
            get size() {
                let size = 0;
                for (let i = 0; i < this.children.length; i++)
                    size += this.children[i].size;
                return size;
            }
            // For block nodes, this represents the space taken up by their
            // start/end tokens.
            get border() { return 0; }
            destroy() {
                this.parent = undefined;
                if (this.dom.pmViewDesc == this)
                    this.dom.pmViewDesc = undefined;
                for (let i = 0; i < this.children.length; i++)
                    this.children[i].destroy();
            }
            posBeforeChild(child) {
                for (let i = 0, pos = this.posAtStart;; i++) {
                    let cur = this.children[i];
                    if (cur == child)
                        return pos;
                    pos += cur.size;
                }
            }
            get posBefore() {
                return this.parent.posBeforeChild(this);
            }
            get posAtStart() {
                return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
            }
            get posAfter() {
                return this.posBefore + this.size;
            }
            get posAtEnd() {
                return this.posAtStart + this.size - 2 * this.border;
            }
            localPosFromDOM(dom, offset, bias) {
                // If the DOM position is in the content, use the child desc after
                // it to figure out a position.
                if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
                    if (bias < 0) {
                        let domBefore, desc;
                        if (dom == this.contentDOM) {
                            domBefore = dom.childNodes[offset - 1];
                        }
                        else {
                            while (dom.parentNode != this.contentDOM)
                                dom = dom.parentNode;
                            domBefore = dom.previousSibling;
                        }
                        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                            domBefore = domBefore.previousSibling;
                        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
                    }
                    else {
                        let domAfter, desc;
                        if (dom == this.contentDOM) {
                            domAfter = dom.childNodes[offset];
                        }
                        else {
                            while (dom.parentNode != this.contentDOM)
                                dom = dom.parentNode;
                            domAfter = dom.nextSibling;
                        }
                        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                            domAfter = domAfter.nextSibling;
                        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
                    }
                }
                // Otherwise, use various heuristics, falling back on the bias
                // parameter, to determine whether to return the position at the
                // start or at the end of this view desc.
                let atEnd;
                if (dom == this.dom && this.contentDOM) {
                    atEnd = offset > domIndex(this.contentDOM);
                }
                else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
                    atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
                }
                else if (this.dom.firstChild) {
                    if (offset == 0)
                        for (let search = dom;; search = search.parentNode) {
                            if (search == this.dom) {
                                atEnd = false;
                                break;
                            }
                            if (search.previousSibling)
                                break;
                        }
                    if (atEnd == null && offset == dom.childNodes.length)
                        for (let search = dom;; search = search.parentNode) {
                            if (search == this.dom) {
                                atEnd = true;
                                break;
                            }
                            if (search.nextSibling)
                                break;
                        }
                }
                return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
            }
            // Scan up the dom finding the first desc that is a descendant of
            // this one.
            nearestDesc(dom, onlyNodes = false) {
                for (let first = true, cur = dom; cur; cur = cur.parentNode) {
                    let desc = this.getDesc(cur), nodeDOM;
                    if (desc && (!onlyNodes || desc.node)) {
                        // If dom is outside of this desc's nodeDOM, don't count it.
                        if (first && (nodeDOM = desc.nodeDOM) &&
                            !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                            first = false;
                        else
                            return desc;
                    }
                }
            }
            getDesc(dom) {
                let desc = dom.pmViewDesc;
                for (let cur = desc; cur; cur = cur.parent)
                    if (cur == this)
                        return desc;
            }
            posFromDOM(dom, offset, bias) {
                for (let scan = dom; scan; scan = scan.parentNode) {
                    let desc = this.getDesc(scan);
                    if (desc)
                        return desc.localPosFromDOM(dom, offset, bias);
                }
                return -1;
            }
            // Find the desc for the node after the given pos, if any. (When a
            // parent node overrode rendering, there might not be one.)
            descAt(pos) {
                for (let i = 0, offset = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (offset == pos && end != offset) {
                        while (!child.border && child.children.length)
                            child = child.children[0];
                        return child;
                    }
                    if (pos < end)
                        return child.descAt(pos - offset - child.border);
                    offset = end;
                }
            }
            domFromPos(pos, side) {
                if (!this.contentDOM)
                    return { node: this.dom, offset: 0 };
                // First find the position in the child array
                let i = 0, offset = 0;
                for (let curPos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = curPos + child.size;
                    if (end > pos || child instanceof TrailingHackViewDesc) {
                        offset = pos - curPos;
                        break;
                    }
                    curPos = end;
                }
                // If this points into the middle of a child, call through
                if (offset)
                    return this.children[i].domFromPos(offset - this.children[i].border, side);
                // Go back if there were any zero-length widgets with side >= 0 before this point
                for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
                // Scan towards the first useable node
                if (side <= 0) {
                    let prev, enter = true;
                    for (;; i--, enter = false) {
                        prev = i ? this.children[i - 1] : null;
                        if (!prev || prev.dom.parentNode == this.contentDOM)
                            break;
                    }
                    if (prev && side && enter && !prev.border && !prev.domAtom)
                        return prev.domFromPos(prev.size, side);
                    return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
                }
                else {
                    let next, enter = true;
                    for (;; i++, enter = false) {
                        next = i < this.children.length ? this.children[i] : null;
                        if (!next || next.dom.parentNode == this.contentDOM)
                            break;
                    }
                    if (next && enter && !next.border && !next.domAtom)
                        return next.domFromPos(0, side);
                    return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
                }
            }
            // Used to find a DOM range in a single parent for a given changed
            // range.
            parseRange(from, to, base = 0) {
                if (this.children.length == 0)
                    return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
                let fromOffset = -1, toOffset = -1;
                for (let offset = base, i = 0;; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (fromOffset == -1 && from <= end) {
                        let childBase = offset + child.border;
                        // FIXME maybe descend mark views to parse a narrower range?
                        if (from >= childBase && to <= end - child.border && child.node &&
                            child.contentDOM && this.contentDOM.contains(child.contentDOM))
                            return child.parseRange(from, to, childBase);
                        from = offset;
                        for (let j = i; j > 0; j--) {
                            let prev = this.children[j - 1];
                            if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                                fromOffset = domIndex(prev.dom) + 1;
                                break;
                            }
                            from -= prev.size;
                        }
                        if (fromOffset == -1)
                            fromOffset = 0;
                    }
                    if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                        to = end;
                        for (let j = i + 1; j < this.children.length; j++) {
                            let next = this.children[j];
                            if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                                toOffset = domIndex(next.dom);
                                break;
                            }
                            to += next.size;
                        }
                        if (toOffset == -1)
                            toOffset = this.contentDOM.childNodes.length;
                        break;
                    }
                    offset = end;
                }
                return { node: this.contentDOM, from, to, fromOffset, toOffset };
            }
            emptyChildAt(side) {
                if (this.border || !this.contentDOM || !this.children.length)
                    return false;
                let child = this.children[side < 0 ? 0 : this.children.length - 1];
                return child.size == 0 || child.emptyChildAt(side);
            }
            domAfterPos(pos) {
                let { node, offset } = this.domFromPos(pos, 0);
                if (node.nodeType != 1 || offset == node.childNodes.length)
                    throw new RangeError("No node after pos " + pos);
                return node.childNodes[offset];
            }
            // View descs are responsible for setting any selection that falls
            // entirely inside of them, so that custom implementations can do
            // custom things with the selection. Note that this falls apart when
            // a selection starts in such a node and ends in another, in which
            // case we just use whatever domFromPos produces as a best effort.
            setSelection(anchor, head, root, force = false) {
                // If the selection falls entirely in a child, give it to that child
                let from = Math.min(anchor, head), to = Math.max(anchor, head);
                for (let i = 0, offset = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (from > offset && to < end)
                        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
                    offset = end;
                }
                let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
                let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
                let domSel = root.getSelection();
                let brKludge = false;
                // On Firefox, using Selection.collapse to put the cursor after a
                // BR node for some reason doesn't always work (#1073). On Safari,
                // the cursor sometimes inexplicable visually lags behind its
                // reported position in such situations (#1092).
                if ((gecko || safari) && anchor == head) {
                    let { node, offset } = anchorDOM;
                    if (node.nodeType == 3) {
                        brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                        // Issue #1128
                        if (brKludge && offset == node.nodeValue.length) {
                            for (let scan = node, after; scan; scan = scan.parentNode) {
                                if (after = scan.nextSibling) {
                                    if (after.nodeName == "BR")
                                        anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                                    break;
                                }
                                let desc = scan.pmViewDesc;
                                if (desc && desc.node && desc.node.isBlock)
                                    break;
                            }
                        }
                    }
                    else {
                        let prev = node.childNodes[offset - 1];
                        brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
                    }
                }
                // Firefox can act strangely when the selection is in front of an
                // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
                if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
                    let after = domSel.focusNode.childNodes[domSel.focusOffset];
                    if (after && after.contentEditable == "false")
                        force = true;
                }
                if (!(force || brKludge && safari) &&
                    isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
                    isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
                    return;
                // Selection.extend can be used to create an 'inverted' selection
                // (one where the focus is before the anchor), but not all
                // browsers support it yet.
                let domSelExtended = false;
                if ((domSel.extend || anchor == head) && !brKludge) {
                    domSel.collapse(anchorDOM.node, anchorDOM.offset);
                    try {
                        if (anchor != head)
                            domSel.extend(headDOM.node, headDOM.offset);
                        domSelExtended = true;
                    }
                    catch (err) {
                        // In some cases with Chrome the selection is empty after calling
                        // collapse, even when it should be valid. This appears to be a bug, but
                        // it is difficult to isolate. If this happens fallback to the old path
                        // without using extend.
                        if (!(err instanceof DOMException))
                            throw err;
                        // declare global: DOMException
                    }
                }
                if (!domSelExtended) {
                    if (anchor > head) {
                        let tmp = anchorDOM;
                        anchorDOM = headDOM;
                        headDOM = tmp;
                    }
                    let range = document.createRange();
                    range.setEnd(headDOM.node, headDOM.offset);
                    range.setStart(anchorDOM.node, anchorDOM.offset);
                    domSel.removeAllRanges();
                    domSel.addRange(range);
                }
            }
            ignoreMutation(mutation) {
                return !this.contentDOM && mutation.type != "selection";
            }
            get contentLost() {
                return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
            }
            // Remove a subtree of the element tree that has been touched
            // by a DOM change, so that the next update will redraw it.
            markDirty(from, to) {
                for (let offset = 0, i = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                        let startInside = offset + child.border, endInside = end - child.border;
                        if (from >= startInside && to <= endInside) {
                            this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                            if (from == startInside && to == endInside &&
                                (child.contentLost || child.dom.parentNode != this.contentDOM))
                                child.dirty = NODE_DIRTY;
                            else
                                child.markDirty(from - startInside, to - startInside);
                            return;
                        }
                        else {
                            child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                                ? CONTENT_DIRTY : NODE_DIRTY;
                        }
                    }
                    offset = end;
                }
                this.dirty = CONTENT_DIRTY;
            }
            markParentsDirty() {
                let level = 1;
                for (let node = this.parent; node; node = node.parent, level++) {
                    let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
                    if (node.dirty < dirty)
                        node.dirty = dirty;
                }
            }
            get domAtom() { return false; }
            get ignoreForCoords() { return false; }
        }
// A widget desc represents a widget decoration, which is a DOM node
// drawn between the document nodes.
        class WidgetViewDesc extends ViewDesc {
            constructor(parent, widget, view, pos) {
                let self, dom = widget.type.toDOM;
                if (typeof dom == "function")
                    dom = dom(view, () => {
                        if (!self)
                            return pos;
                        if (self.parent)
                            return self.parent.posBeforeChild(self);
                    });
                if (!widget.type.spec.raw) {
                    if (dom.nodeType != 1) {
                        let wrap = document.createElement("span");
                        wrap.appendChild(dom);
                        dom = wrap;
                    }
                    dom.contentEditable = "false";
                    dom.classList.add("ProseMirror-widget");
                }
                super(parent, [], dom, null);
                this.widget = widget;
                this.widget = widget;
                self = this;
            }
            matchesWidget(widget) {
                return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
            }
            parseRule() { return { ignore: true }; }
            stopEvent(event) {
                let stop = this.widget.spec.stopEvent;
                return stop ? stop(event) : false;
            }
            ignoreMutation(mutation) {
                return mutation.type != "selection" || this.widget.spec.ignoreSelection;
            }
            destroy() {
                this.widget.type.destroy(this.dom);
                super.destroy();
            }
            get domAtom() { return true; }
            get side() { return this.widget.type.side; }
        }
        class CompositionViewDesc extends ViewDesc {
            constructor(parent, dom, textDOM, text) {
                super(parent, [], dom, null);
                this.textDOM = textDOM;
                this.text = text;
            }
            get size() { return this.text.length; }
            localPosFromDOM(dom, offset) {
                if (dom != this.textDOM)
                    return this.posAtStart + (offset ? this.size : 0);
                return this.posAtStart + offset;
            }
            domFromPos(pos) {
                return { node: this.textDOM, offset: pos };
            }
            ignoreMutation(mut) {
                return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
            }
        }
// A mark desc represents a mark. May have multiple children,
// depending on how the mark is split. Note that marks are drawn using
// a fixed nesting order, for simplicity and predictability, so in
// some cases they will be split more often than would appear
// necessary.
        class MarkViewDesc extends ViewDesc {
            constructor(parent, mark, dom, contentDOM) {
                super(parent, [], dom, contentDOM);
                this.mark = mark;
            }
            static create(parent, mark, inline, view) {
                let custom = view.nodeViews[mark.type.name];
                let spec = custom && custom(mark, view, inline);
                if (!spec || !spec.dom)
                    spec = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
                return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
            }
            parseRule() {
                if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
                    return null;
                return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || undefined };
            }
            matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
            markDirty(from, to) {
                super.markDirty(from, to);
                // Move dirty info to nearest node view
                if (this.dirty != NOT_DIRTY) {
                    let parent = this.parent;
                    while (!parent.node)
                        parent = parent.parent;
                    if (parent.dirty < this.dirty)
                        parent.dirty = this.dirty;
                    this.dirty = NOT_DIRTY;
                }
            }
            slice(from, to, view) {
                let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
                let nodes = this.children, size = this.size;
                if (to < size)
                    nodes = replaceNodes(nodes, to, size, view);
                if (from > 0)
                    nodes = replaceNodes(nodes, 0, from, view);
                for (let i = 0; i < nodes.length; i++)
                    nodes[i].parent = copy;
                copy.children = nodes;
                return copy;
            }
        }
// Node view descs are the main, most common type of view desc, and
// correspond to an actual node in the document. Unlike mark descs,
// they populate their child array themselves.
        class NodeViewDesc extends ViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
                super(parent, [], dom, contentDOM);
                this.node = node;
                this.outerDeco = outerDeco;
                this.innerDeco = innerDeco;
                this.nodeDOM = nodeDOM;
                if (contentDOM)
                    this.updateChildren(view, pos);
            }
            // By default, a node is rendered using the `toDOM` method from the
            // node type spec. But client code can use the `nodeViews` spec to
            // supply a custom node view, which can influence various aspects of
            // the way the node works.
            //
            // (Using subclassing for this was intentionally decided against,
            // since it'd require exposing a whole slew of finicky
            // implementation details to the user code that they probably will
            // never need.)
            static create(parent, node, outerDeco, innerDeco, view, pos) {
                let custom = view.nodeViews[node.type.name], descObj;
                let spec = custom && custom(node, view, () => {
                    // (This is a function that allows the custom view to find its
                    // own position)
                    if (!descObj)
                        return pos;
                    if (descObj.parent)
                        return descObj.parent.posBeforeChild(descObj);
                }, outerDeco, innerDeco);
                let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
                if (node.isText) {
                    if (!dom)
                        dom = document.createTextNode(node.text);
                    else if (dom.nodeType != 3)
                        throw new RangeError("Text must be rendered as a DOM text node");
                }
                else if (!dom) {
                    ({ dom, contentDOM } = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
                }
                if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                    if (!dom.hasAttribute("contenteditable"))
                        dom.contentEditable = "false";
                    if (node.type.spec.draggable)
                        dom.draggable = true;
                }
                let nodeDOM = dom;
                dom = applyOuterDeco(dom, outerDeco, node);
                if (spec)
                    return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
                else if (node.isText)
                    return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
                else
                    return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
            }
            parseRule() {
                // Experimental kludge to allow opt-in re-parsing of nodes
                if (this.node.type.spec.reparseInView)
                    return null;
                // FIXME the assumption that this can always return the current
                // attrs means that if the user somehow manages to change the
                // attrs in the dom, that won't be picked up. Not entirely sure
                // whether this is a problem
                let rule = { node: this.node.type.name, attrs: this.node.attrs };
                if (this.node.type.whitespace == "pre")
                    rule.preserveWhitespace = "full";
                if (!this.contentDOM) {
                    rule.getContent = () => this.node.content;
                }
                else if (!this.contentLost) {
                    rule.contentElement = this.contentDOM;
                }
                else {
                    // Chrome likes to randomly recreate parent nodes when
                    // backspacing things. When that happens, this tries to find the
                    // new parent.
                    for (let i = this.children.length - 1; i >= 0; i--) {
                        let child = this.children[i];
                        if (this.dom.contains(child.dom.parentNode)) {
                            rule.contentElement = child.dom.parentNode;
                            break;
                        }
                    }
                    if (!rule.contentElement)
                        rule.getContent = () => prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                }
                return rule;
            }
            matchesNode(node, outerDeco, innerDeco) {
                return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                    sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
            }
            get size() { return this.node.nodeSize; }
            get border() { return this.node.isLeaf ? 0 : 1; }
            // Syncs `this.children` to match `this.node.content` and the local
            // decorations, possibly introducing nesting for marks. Then, in a
            // separate step, syncs the DOM inside `this.contentDOM` to
            // `this.children`.
            updateChildren(view, pos) {
                let inline = this.node.inlineContent, off = pos;
                let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
                let localComposition = composition && composition.pos > -1 ? composition : null;
                let compositionInChild = composition && composition.pos < 0;
                let updater = new ViewTreeUpdater(this, localComposition && localComposition.node);
                iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
                    if (widget.spec.marks)
                        updater.syncToMarks(widget.spec.marks, inline, view);
                    else if (widget.type.side >= 0 && !insideNode)
                        updater.syncToMarks(i == this.node.childCount ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark.none : this.node.child(i).marks, inline, view);
                    // If the next node is a desc matching this widget, reuse it,
                    // otherwise insert the widget as a new view desc.
                    updater.placeWidget(widget, view, off);
                }, (child, outerDeco, innerDeco, i) => {
                    // Make sure the wrapping mark descs match the node's marks.
                    updater.syncToMarks(child.marks, inline, view);
                    // Try several strategies for drawing this node
                    let compIndex;
                    if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
                    else if (compositionInChild && view.state.selection.from > off &&
                        view.state.selection.to < off + child.nodeSize &&
                        (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                        updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
                    else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ;
                    else {
                        // Add it as a new view
                        updater.addNode(child, outerDeco, innerDeco, view, off);
                    }
                    off += child.nodeSize;
                });
                // Drop all remaining descs after the current position.
                updater.syncToMarks([], inline, view);
                if (this.node.isTextblock)
                    updater.addTextblockHacks();
                updater.destroyRest();
                // Sync the DOM if anything changed
                if (updater.changed || this.dirty == CONTENT_DIRTY) {
                    // May have to protect focused DOM from being changed if a composition is active
                    if (localComposition)
                        this.protectLocalComposition(view, localComposition);
                    renderDescs(this.contentDOM, this.children, view);
                    if (ios)
                        iosHacks(this.dom);
                }
            }
            localCompositionInfo(view, pos) {
                // Only do something if both the selection and a focused text node
                // are inside of this node
                let { from, to } = view.state.selection;
                if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || from < pos || to > pos + this.node.content.size)
                    return null;
                let sel = view.domSelection();
                let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
                if (!textNode || !this.dom.contains(textNode.parentNode))
                    return null;
                if (this.node.inlineContent) {
                    // Find the text in the focused node in the node, stop if it's not
                    // there (may have been modified through other means, in which
                    // case it should overwritten)
                    let text = textNode.nodeValue;
                    let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
                    return textPos < 0 ? null : { node: textNode, pos: textPos, text };
                }
                else {
                    return { node: textNode, pos: -1, text: "" };
                }
            }
            protectLocalComposition(view, { node, pos, text }) {
                // The node is already part of a local view desc, leave it there
                if (this.getDesc(node))
                    return;
                // Create a composition view for the orphaned nodes
                let topNode = node;
                for (;; topNode = topNode.parentNode) {
                    if (topNode.parentNode == this.contentDOM)
                        break;
                    while (topNode.previousSibling)
                        topNode.parentNode.removeChild(topNode.previousSibling);
                    while (topNode.nextSibling)
                        topNode.parentNode.removeChild(topNode.nextSibling);
                    if (topNode.pmViewDesc)
                        topNode.pmViewDesc = undefined;
                }
                let desc = new CompositionViewDesc(this, topNode, node, text);
                view.input.compositionNodes.push(desc);
                // Patch up this.children to contain the composition view
                this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
            }
            // If this desc must be updated to match the given node decoration,
            // do so and return true.
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY ||
                    !node.sameMarkup(this.node))
                    return false;
                this.updateInner(node, outerDeco, innerDeco, view);
                return true;
            }
            updateInner(node, outerDeco, innerDeco, view) {
                this.updateOuterDeco(outerDeco);
                this.node = node;
                this.innerDeco = innerDeco;
                if (this.contentDOM)
                    this.updateChildren(view, this.posAtStart);
                this.dirty = NOT_DIRTY;
            }
            updateOuterDeco(outerDeco) {
                if (sameOuterDeco(outerDeco, this.outerDeco))
                    return;
                let needsWrap = this.nodeDOM.nodeType != 1;
                let oldDOM = this.dom;
                this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
                if (this.dom != oldDOM) {
                    oldDOM.pmViewDesc = undefined;
                    this.dom.pmViewDesc = this;
                }
                this.outerDeco = outerDeco;
            }
            // Mark this node as being the selected node.
            selectNode() {
                if (this.nodeDOM.nodeType == 1)
                    this.nodeDOM.classList.add("ProseMirror-selectednode");
                if (this.contentDOM || !this.node.type.spec.draggable)
                    this.dom.draggable = true;
            }
            // Remove selected node marking from this node.
            deselectNode() {
                if (this.nodeDOM.nodeType == 1)
                    this.nodeDOM.classList.remove("ProseMirror-selectednode");
                if (this.contentDOM || !this.node.type.spec.draggable)
                    this.dom.removeAttribute("draggable");
            }
            get domAtom() { return this.node.isAtom; }
        }
// Create a view desc for the top-level document node, to be exported
// and used by the view class.
        function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
            applyOuterDeco(dom, outerDeco, doc);
            return new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
        }
        class TextViewDesc extends NodeViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
                super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
            }
            parseRule() {
                let skip = this.nodeDOM.parentNode;
                while (skip && skip != this.dom && !skip.pmIsDeco)
                    skip = skip.parentNode;
                return { skip: (skip || true) };
            }
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                    !node.sameMarkup(this.node))
                    return false;
                this.updateOuterDeco(outerDeco);
                if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                    this.nodeDOM.nodeValue = node.text;
                    if (view.trackWrites == this.nodeDOM)
                        view.trackWrites = null;
                }
                this.node = node;
                this.dirty = NOT_DIRTY;
                return true;
            }
            inParent() {
                let parentDOM = this.parent.contentDOM;
                for (let n = this.nodeDOM; n; n = n.parentNode)
                    if (n == parentDOM)
                        return true;
                return false;
            }
            domFromPos(pos) {
                return { node: this.nodeDOM, offset: pos };
            }
            localPosFromDOM(dom, offset, bias) {
                if (dom == this.nodeDOM)
                    return this.posAtStart + Math.min(offset, this.node.text.length);
                return super.localPosFromDOM(dom, offset, bias);
            }
            ignoreMutation(mutation) {
                return mutation.type != "characterData" && mutation.type != "selection";
            }
            slice(from, to, view) {
                let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
                return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
            }
            markDirty(from, to) {
                super.markDirty(from, to);
                if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
                    this.dirty = NODE_DIRTY;
            }
            get domAtom() { return false; }
        }
// A dummy desc used to tag trailing BR or IMG nodes created to work
// around contentEditable terribleness.
        class TrailingHackViewDesc extends ViewDesc {
            parseRule() { return { ignore: true }; }
            matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
            get domAtom() { return true; }
            get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
        }
// A separate subclass is used for customized node views, so that the
// extra checks only have to be made for nodes that are actually
// customized.
        class CustomNodeViewDesc extends NodeViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
                super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
                this.spec = spec;
            }
            // A custom `update` method gets to decide whether the update goes
            // through. If it does, and there's a `contentDOM` node, our logic
            // updates the children.
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY)
                    return false;
                if (this.spec.update) {
                    let result = this.spec.update(node, outerDeco, innerDeco);
                    if (result)
                        this.updateInner(node, outerDeco, innerDeco, view);
                    return result;
                }
                else if (!this.contentDOM && !node.isLeaf) {
                    return false;
                }
                else {
                    return super.update(node, outerDeco, innerDeco, view);
                }
            }
            selectNode() {
                this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
            }
            deselectNode() {
                this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
            }
            setSelection(anchor, head, root, force) {
                this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                    : super.setSelection(anchor, head, root, force);
            }
            destroy() {
                if (this.spec.destroy)
                    this.spec.destroy();
                super.destroy();
            }
            stopEvent(event) {
                return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
            }
            ignoreMutation(mutation) {
                return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
            }
        }
// Sync the content of the given DOM node with the nodes associated
// with the given array of view descs, recursing into mark descs
// because this should sync the subtree for a whole node at a time.
        function renderDescs(parentDOM, descs, view) {
            let dom = parentDOM.firstChild, written = false;
            for (let i = 0; i < descs.length; i++) {
                let desc = descs[i], childDOM = desc.dom;
                if (childDOM.parentNode == parentDOM) {
                    while (childDOM != dom) {
                        dom = rm(dom);
                        written = true;
                    }
                    dom = dom.nextSibling;
                }
                else {
                    written = true;
                    parentDOM.insertBefore(childDOM, dom);
                }
                if (desc instanceof MarkViewDesc) {
                    let pos = dom ? dom.previousSibling : parentDOM.lastChild;
                    renderDescs(desc.contentDOM, desc.children, view);
                    dom = pos ? pos.nextSibling : parentDOM.firstChild;
                }
            }
            while (dom) {
                dom = rm(dom);
                written = true;
            }
            if (written && view.trackWrites == parentDOM)
                view.trackWrites = null;
        }
        const OuterDecoLevel = function (nodeName) {
            if (nodeName)
                this.nodeName = nodeName;
        };
        OuterDecoLevel.prototype = Object.create(null);
        const noDeco = [new OuterDecoLevel];
        function computeOuterDeco(outerDeco, node, needsWrap) {
            if (outerDeco.length == 0)
                return noDeco;
            let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
            for (let i = 0; i < outerDeco.length; i++) {
                let attrs = outerDeco[i].type.attrs;
                if (!attrs)
                    continue;
                if (attrs.nodeName)
                    result.push(top = new OuterDecoLevel(attrs.nodeName));
                for (let name in attrs) {
                    let val = attrs[name];
                    if (val == null)
                        continue;
                    if (needsWrap && result.length == 1)
                        result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                    if (name == "class")
                        top.class = (top.class ? top.class + " " : "") + val;
                    else if (name == "style")
                        top.style = (top.style ? top.style + ";" : "") + val;
                    else if (name != "nodeName")
                        top[name] = val;
                }
            }
            return result;
        }
        function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
            // Shortcut for trivial case
            if (prevComputed == noDeco && curComputed == noDeco)
                return nodeDOM;
            let curDOM = nodeDOM;
            for (let i = 0; i < curComputed.length; i++) {
                let deco = curComputed[i], prev = prevComputed[i];
                if (i) {
                    let parent;
                    if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                        (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                        curDOM = parent;
                    }
                    else {
                        parent = document.createElement(deco.nodeName);
                        parent.pmIsDeco = true;
                        parent.appendChild(curDOM);
                        prev = noDeco[0];
                        curDOM = parent;
                    }
                }
                patchAttributes(curDOM, prev || noDeco[0], deco);
            }
            return curDOM;
        }
        function patchAttributes(dom, prev, cur) {
            for (let name in prev)
                if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
                    dom.removeAttribute(name);
            for (let name in cur)
                if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
                    dom.setAttribute(name, cur[name]);
            if (prev.class != cur.class) {
                let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
                let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
                for (let i = 0; i < prevList.length; i++)
                    if (curList.indexOf(prevList[i]) == -1)
                        dom.classList.remove(prevList[i]);
                for (let i = 0; i < curList.length; i++)
                    if (prevList.indexOf(curList[i]) == -1)
                        dom.classList.add(curList[i]);
                if (dom.classList.length == 0)
                    dom.removeAttribute("class");
            }
            if (prev.style != cur.style) {
                if (prev.style) {
                    let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                    while (m = prop.exec(prev.style))
                        dom.style.removeProperty(m[1]);
                }
                if (cur.style)
                    dom.style.cssText += cur.style;
            }
        }
        function applyOuterDeco(dom, deco, node) {
            return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
        }
        function sameOuterDeco(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!a[i].type.eq(b[i].type))
                    return false;
            return true;
        }
// Remove a DOM node and return its next sibling.
        function rm(dom) {
            let next = dom.nextSibling;
            dom.parentNode.removeChild(dom);
            return next;
        }
// Helper class for incrementally updating a tree of mark descs and
// the widget and node descs inside of them.
        class ViewTreeUpdater {
            constructor(top, lock) {
                this.lock = lock;
                // Index into `this.top`'s child array, represents the current
                // update position.
                this.index = 0;
                // When entering a mark, the current top and index are pushed
                // onto this.
                this.stack = [];
                // Tracks whether anything was changed
                this.changed = false;
                this.top = top;
                this.preMatch = preMatch(top.node.content, top);
            }
            // Destroy and remove the children between the given indices in
            // `this.top`.
            destroyBetween(start, end) {
                if (start == end)
                    return;
                for (let i = start; i < end; i++)
                    this.top.children[i].destroy();
                this.top.children.splice(start, end - start);
                this.changed = true;
            }
            // Destroy all remaining children in `this.top`.
            destroyRest() {
                this.destroyBetween(this.index, this.top.children.length);
            }
            // Sync the current stack of mark descs with the given array of
            // marks, reusing existing mark descs when possible.
            syncToMarks(marks, inline, view) {
                let keep = 0, depth = this.stack.length >> 1;
                let maxKeep = Math.min(depth, marks.length);
                while (keep < maxKeep &&
                (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                    .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
                    keep++;
                while (keep < depth) {
                    this.destroyRest();
                    this.top.dirty = NOT_DIRTY;
                    this.index = this.stack.pop();
                    this.top = this.stack.pop();
                    depth--;
                }
                while (depth < marks.length) {
                    this.stack.push(this.top, this.index + 1);
                    let found = -1;
                    for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                        if (this.top.children[i].matchesMark(marks[depth])) {
                            found = i;
                            break;
                        }
                    }
                    if (found > -1) {
                        if (found > this.index) {
                            this.changed = true;
                            this.destroyBetween(this.index, found);
                        }
                        this.top = this.top.children[this.index];
                    }
                    else {
                        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                        this.top.children.splice(this.index, 0, markDesc);
                        this.top = markDesc;
                        this.changed = true;
                    }
                    this.index = 0;
                    depth++;
                }
            }
            // Try to find a node desc matching the given data. Skip over it and
            // return true when successful.
            findNodeMatch(node, outerDeco, innerDeco, index) {
                let found = -1, targetDesc;
                if (index >= this.preMatch.index &&
                    (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
                    targetDesc.matchesNode(node, outerDeco, innerDeco)) {
                    found = this.top.children.indexOf(targetDesc, this.index);
                }
                else {
                    for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                        let child = this.top.children[i];
                        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                            found = i;
                            break;
                        }
                    }
                }
                if (found < 0)
                    return false;
                this.destroyBetween(this.index, found);
                this.index++;
                return true;
            }
            updateNodeAt(node, outerDeco, innerDeco, index, view) {
                let child = this.top.children[index];
                if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
                    child.dirty = CONTENT_DIRTY;
                if (!child.update(node, outerDeco, innerDeco, view))
                    return false;
                this.destroyBetween(this.index, index);
                this.index = index + 1;
                return true;
            }
            findIndexWithChild(domNode) {
                for (;;) {
                    let parent = domNode.parentNode;
                    if (!parent)
                        return -1;
                    if (parent == this.top.contentDOM) {
                        let desc = domNode.pmViewDesc;
                        if (desc)
                            for (let i = this.index; i < this.top.children.length; i++) {
                                if (this.top.children[i] == desc)
                                    return i;
                            }
                        return -1;
                    }
                    domNode = parent;
                }
            }
            // Try to update the next node, if any, to the given data. Checks
            // pre-matches to avoid overwriting nodes that could still be used.
            updateNextNode(node, outerDeco, innerDeco, view, index) {
                for (let i = this.index; i < this.top.children.length; i++) {
                    let next = this.top.children[i];
                    if (next instanceof NodeViewDesc) {
                        let preMatch = this.preMatch.matched.get(next);
                        if (preMatch != null && preMatch != index)
                            return false;
                        let nextDOM = next.dom;
                        // Can't update if nextDOM is or contains this.lock, except if
                        // it's a text node whose content already matches the new text
                        // and whose decorations match the new ones.
                        let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&
                            !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                                next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                        if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                            this.destroyBetween(this.index, i);
                            if (next.dom != nextDOM)
                                this.changed = true;
                            this.index++;
                            return true;
                        }
                        break;
                    }
                }
                return false;
            }
            // Insert the node as a newly created node desc.
            addNode(node, outerDeco, innerDeco, view, pos) {
                this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
                this.changed = true;
            }
            placeWidget(widget, view, pos) {
                let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
                if (next && next.matchesWidget(widget) &&
                    (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
                    this.index++;
                }
                else {
                    let desc = new WidgetViewDesc(this.top, widget, view, pos);
                    this.top.children.splice(this.index++, 0, desc);
                    this.changed = true;
                }
            }
            // Make sure a textblock looks and behaves correctly in
            // contentEditable.
            addTextblockHacks() {
                let lastChild = this.top.children[this.index - 1], parent = this.top;
                while (lastChild instanceof MarkViewDesc) {
                    parent = lastChild;
                    lastChild = parent.children[parent.children.length - 1];
                }
                if (!lastChild || // Empty textblock
                    !(lastChild instanceof TextViewDesc) ||
                    /\n$/.test(lastChild.node.text)) {
                    // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
                    if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                        this.addHackNode("IMG", parent);
                    this.addHackNode("BR", this.top);
                }
            }
            addHackNode(nodeName, parent) {
                if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
                    this.index++;
                }
                else {
                    let dom = document.createElement(nodeName);
                    if (nodeName == "IMG") {
                        dom.className = "ProseMirror-separator";
                        dom.alt = "";
                    }
                    if (nodeName == "BR")
                        dom.className = "ProseMirror-trailingBreak";
                    let hack = new TrailingHackViewDesc(this.top, [], dom, null);
                    if (parent != this.top)
                        parent.children.push(hack);
                    else
                        parent.children.splice(this.index++, 0, hack);
                    this.changed = true;
                }
            }
        }
// Iterate from the end of the fragment and array of descs to find
// directly matching ones, in order to avoid overeagerly reusing those
// for other nodes. Returns the fragment index of the first node that
// is part of the sequence of matched nodes at the end of the
// fragment.
        function preMatch(frag, parentDesc) {
            let curDesc = parentDesc, descI = curDesc.children.length;
            let fI = frag.childCount, matched = new Map, matches = [];
            outer: while (fI > 0) {
                let desc;
                for (;;) {
                    if (descI) {
                        let next = curDesc.children[descI - 1];
                        if (next instanceof MarkViewDesc) {
                            curDesc = next;
                            descI = next.children.length;
                        }
                        else {
                            desc = next;
                            descI--;
                            break;
                        }
                    }
                    else if (curDesc == parentDesc) {
                        break outer;
                    }
                    else {
                        // FIXME
                        descI = curDesc.parent.children.indexOf(curDesc);
                        curDesc = curDesc.parent;
                    }
                }
                let node = desc.node;
                if (!node)
                    continue;
                if (node != frag.child(fI - 1))
                    break;
                --fI;
                matched.set(desc, fI);
                matches.push(desc);
            }
            return { index: fI, matched, matches: matches.reverse() };
        }
        function compareSide(a, b) {
            return a.type.side - b.type.side;
        }
// This function abstracts iterating over the nodes and decorations in
// a fragment. Calls `onNode` for each node, with its local and child
// decorations. Splits text nodes when there is a decoration starting
// or ending inside of them. Calls `onWidget` for each widget.
        function iterDeco(parent, deco, onWidget, onNode) {
            let locals = deco.locals(parent), offset = 0;
            // Simple, cheap variant for when there are no local decorations
            if (locals.length == 0) {
                for (let i = 0; i < parent.childCount; i++) {
                    let child = parent.child(i);
                    onNode(child, locals, deco.forChild(offset, child), i);
                    offset += child.nodeSize;
                }
                return;
            }
            let decoIndex = 0, active = [], restNode = null;
            for (let parentIndex = 0;;) {
                if (decoIndex < locals.length && locals[decoIndex].to == offset) {
                    let widget = locals[decoIndex++], widgets;
                    while (decoIndex < locals.length && locals[decoIndex].to == offset)
                        (widgets || (widgets = [widget])).push(locals[decoIndex++]);
                    if (widgets) {
                        widgets.sort(compareSide);
                        for (let i = 0; i < widgets.length; i++)
                            onWidget(widgets[i], parentIndex, !!restNode);
                    }
                    else {
                        onWidget(widget, parentIndex, !!restNode);
                    }
                }
                let child, index;
                if (restNode) {
                    index = -1;
                    child = restNode;
                    restNode = null;
                }
                else if (parentIndex < parent.childCount) {
                    index = parentIndex;
                    child = parent.child(parentIndex++);
                }
                else {
                    break;
                }
                for (let i = 0; i < active.length; i++)
                    if (active[i].to <= offset)
                        active.splice(i--, 1);
                while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
                    active.push(locals[decoIndex++]);
                let end = offset + child.nodeSize;
                if (child.isText) {
                    let cutAt = end;
                    if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                        cutAt = locals[decoIndex].from;
                    for (let i = 0; i < active.length; i++)
                        if (active[i].to < cutAt)
                            cutAt = active[i].to;
                    if (cutAt < end) {
                        restNode = child.cut(cutAt - offset);
                        child = child.cut(0, cutAt - offset);
                        end = cutAt;
                        index = -1;
                    }
                }
                let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
                onNode(child, outerDeco, deco.forChild(offset, child), index);
                offset = end;
            }
        }
// List markers in Mobile Safari will mysteriously disappear
// sometimes. This works around that.
        function iosHacks(dom) {
            if (dom.nodeName == "UL" || dom.nodeName == "OL") {
                let oldCSS = dom.style.cssText;
                dom.style.cssText = oldCSS + "; list-style: square !important";
                window.getComputedStyle(dom).listStyle;
                dom.style.cssText = oldCSS;
            }
        }
        function nearbyTextNode(node, offset) {
            for (;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset > 0) {
                    if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
                        return node.childNodes[offset];
                    node = node.childNodes[offset - 1];
                    offset = nodeSize(node);
                }
                else if (node.nodeType == 1 && offset < node.childNodes.length) {
                    node = node.childNodes[offset];
                    offset = 0;
                }
                else {
                    return null;
                }
            }
        }
// Find a piece of text in an inline fragment, overlapping from-to
        function findTextInFragment(frag, text, from, to) {
            for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
                let child = frag.child(i++), childStart = pos;
                pos += child.nodeSize;
                if (!child.isText)
                    continue;
                let str = child.text;
                while (i < frag.childCount) {
                    let next = frag.child(i++);
                    pos += next.nodeSize;
                    if (!next.isText)
                        break;
                    str += next.text;
                }
                if (pos >= from) {
                    let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
                    if (found >= 0 && found + text.length + childStart >= from)
                        return childStart + found;
                    if (from == to && str.length >= (to + text.length) - childStart &&
                        str.slice(to - childStart, to - childStart + text.length) == text)
                        return to;
                }
            }
            return -1;
        }
// Replace range from-to in an array of view descs with replacement
// (may be null to just delete). This goes very much against the grain
// of the rest of this code, which tends to create nodes with the
// right shape in one go, rather than messing with them after
// creation, but is necessary in the composition hack.
        function replaceNodes(nodes, from, to, view, replacement) {
            let result = [];
            for (let i = 0, off = 0; i < nodes.length; i++) {
                let child = nodes[i], start = off, end = off += child.size;
                if (start >= to || end <= from) {
                    result.push(child);
                }
                else {
                    if (start < from)
                        result.push(child.slice(0, from - start, view));
                    if (replacement) {
                        result.push(replacement);
                        replacement = undefined;
                    }
                    if (end > to)
                        result.push(child.slice(to - start, child.size, view));
                }
            }
            return result;
        }

        function selectionFromDOM(view, origin = null) {
            let domSel = view.domSelection(), doc = view.state.doc;
            if (!domSel.focusNode)
                return null;
            let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
            let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
            if (head < 0)
                return null;
            let $head = doc.resolve(head), $anchor, selection;
            if (selectionCollapsed(domSel)) {
                $anchor = $head;
                while (nearestDesc && !nearestDesc.node)
                    nearestDesc = nearestDesc.parent;
                let nearestDescNode = nearestDesc.node;
                if (nearestDesc && nearestDescNode.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
                    && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
                    let pos = nearestDesc.posBefore;
                    selection = new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(head == pos ? $head : doc.resolve(pos));
                }
            }
            else {
                let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
                if (anchor < 0)
                    return null;
                $anchor = doc.resolve(anchor);
            }
            if (!selection) {
                let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
                selection = selectionBetween(view, $anchor, $head, bias);
            }
            return selection;
        }
        function editorOwnsSelection(view) {
            return view.editable ? view.hasFocus() :
                hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
        }
        function selectionToDOM(view, force = false) {
            let sel = view.state.selection;
            syncNodeSelection(view, sel);
            if (!editorOwnsSelection(view))
                return;
            // The delayed drag selection causes issues with Cell Selections
            // in Safari. And the drag selection delay is to workarond issues
            // which only present in Chrome.
            if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
                let domSel = view.domSelection(), curSel = view.domObserver.currentSelection;
                if (domSel.anchorNode && curSel.anchorNode &&
                    isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
                    view.input.mouseDown.delayedSelectionSync = true;
                    view.domObserver.setCurSelection();
                    return;
                }
            }
            view.domObserver.disconnectSelection();
            if (view.cursorWrapper) {
                selectCursorWrapper(view);
            }
            else {
                let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
                if (brokenSelectBetweenUneditable && !(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection)) {
                    if (!sel.$from.parent.inlineContent)
                        resetEditableFrom = temporarilyEditableNear(view, sel.from);
                    if (!sel.empty && !sel.$from.parent.inlineContent)
                        resetEditableTo = temporarilyEditableNear(view, sel.to);
                }
                view.docView.setSelection(anchor, head, view.root, force);
                if (brokenSelectBetweenUneditable) {
                    if (resetEditableFrom)
                        resetEditable(resetEditableFrom);
                    if (resetEditableTo)
                        resetEditable(resetEditableTo);
                }
                if (sel.visible) {
                    view.dom.classList.remove("ProseMirror-hideselection");
                }
                else {
                    view.dom.classList.add("ProseMirror-hideselection");
                    if ("onselectionchange" in document)
                        removeClassOnSelectionChange(view);
                }
            }
            view.domObserver.setCurSelection();
            view.domObserver.connectSelection();
        }
// Kludge to work around Webkit not allowing a selection to start/end
// between non-editable block nodes. We briefly make something
// editable, set the selection, then set it uneditable again.
        const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
        function temporarilyEditableNear(view, pos) {
            let { node, offset } = view.docView.domFromPos(pos, 0);
            let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
            let before = offset ? node.childNodes[offset - 1] : null;
            if (safari && after && after.contentEditable == "false")
                return setEditable(after);
            if ((!after || after.contentEditable == "false") &&
                (!before || before.contentEditable == "false")) {
                if (after)
                    return setEditable(after);
                else if (before)
                    return setEditable(before);
            }
        }
        function setEditable(element) {
            element.contentEditable = "true";
            if (safari && element.draggable) {
                element.draggable = false;
                element.wasDraggable = true;
            }
            return element;
        }
        function resetEditable(element) {
            element.contentEditable = "false";
            if (element.wasDraggable) {
                element.draggable = true;
                element.wasDraggable = null;
            }
        }
        function removeClassOnSelectionChange(view) {
            let doc = view.dom.ownerDocument;
            doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
            let domSel = view.domSelection();
            let node = domSel.anchorNode, offset = domSel.anchorOffset;
            doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
                if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                    doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
                    setTimeout(() => {
                        if (!editorOwnsSelection(view) || view.state.selection.visible)
                            view.dom.classList.remove("ProseMirror-hideselection");
                    }, 20);
                }
            });
        }
        function selectCursorWrapper(view) {
            let domSel = view.domSelection(), range = document.createRange();
            let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
            if (img)
                range.setEnd(node.parentNode, domIndex(node) + 1);
            else
                range.setEnd(node, 0);
            range.collapse(false);
            domSel.removeAllRanges();
            domSel.addRange(range);
            // Kludge to kill 'control selection' in IE11 when selecting an
            // invisible cursor wrapper, since that would result in those weird
            // resize handles and a selection that considers the absolutely
            // positioned wrapper, rather than the root editable node, the
            // focused element.
            if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
                node.disabled = true;
                node.disabled = false;
            }
        }
        function syncNodeSelection(view, sel) {
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {
                let desc = view.docView.descAt(sel.from);
                if (desc != view.lastSelectedViewDesc) {
                    clearNodeSelection(view);
                    if (desc)
                        desc.selectNode();
                    view.lastSelectedViewDesc = desc;
                }
            }
            else {
                clearNodeSelection(view);
            }
        }
// Clear all DOM statefulness of the last node selection.
        function clearNodeSelection(view) {
            if (view.lastSelectedViewDesc) {
                if (view.lastSelectedViewDesc.parent)
                    view.lastSelectedViewDesc.deselectNode();
                view.lastSelectedViewDesc = undefined;
            }
        }
        function selectionBetween(view, $anchor, $head, bias) {
            return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
                || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.between($anchor, $head, bias);
        }
        function hasFocusAndSelection(view) {
            if (view.editable && view.root.activeElement != view.dom)
                return false;
            return hasSelection(view);
        }
        function hasSelection(view) {
            let sel = view.domSelection();
            if (!sel.anchorNode)
                return false;
            try {
                // Firefox will raise 'permission denied' errors when accessing
                // properties of `sel.anchorNode` when it's in a generated CSS
                // element.
                return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                    (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
            }
            catch (_) {
                return false;
            }
        }
        function anchorInRightPlace(view) {
            let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
            let domSel = view.domSelection();
            return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
        }

        function moveSelectionBlock(state, dir) {
            let { $anchor, $head } = state.selection;
            let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
            let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
            return $start && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom($start, dir);
        }
        function apply(view, sel) {
            view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
            return true;
        }
        function selectHorizontally(view, dir, mods) {
            let sel = view.state.selection;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {
                if (!sel.empty || mods.indexOf("s") > -1) {
                    return false;
                }
                else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
                    let next = moveSelectionBlock(view.state, dir);
                    if (next && (next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection))
                        return apply(view, next);
                    return false;
                }
                else if (!(mac && mods.indexOf("m") > -1)) {
                    let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                    if (!node || node.isText)
                        return false;
                    let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                    if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                        return false;
                    if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                    }
                    else if (webkit) {
                        // Chrome and Safari will introduce extra pointless cursor
                        // positions around inline uneditable nodes, so we have to
                        // take over and move the cursor past them (#937)
                        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
                    }
                    else {
                        return false;
                    }
                }
            }
            else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && sel.node.isInline) {
                return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(dir > 0 ? sel.$to : sel.$from));
            }
            else {
                let next = moveSelectionBlock(view.state, dir);
                if (next)
                    return apply(view, next);
                return false;
            }
        }
        function nodeLen(node) {
            return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
        }
        function isIgnorable(dom) {
            let desc = dom.pmViewDesc;
            return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
        }
// Make sure the cursor isn't directly after one or more ignored
// nodes, which will confuse the browser's cursor motion logic.
        function skipIgnoredNodesLeft(view) {
            let sel = view.domSelection();
            let node = sel.focusNode, offset = sel.focusOffset;
            if (!node)
                return;
            let moveNode, moveOffset, force = false;
            // Gecko will do odd things when the selection is directly in front
            // of a non-editable node, so in that case, move it into the next
            // node if possible. Issue prosemirror/prosemirror#832.
            if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
                force = true;
            for (;;) {
                if (offset > 0) {
                    if (node.nodeType != 1) {
                        break;
                    }
                    else {
                        let before = node.childNodes[offset - 1];
                        if (isIgnorable(before)) {
                            moveNode = node;
                            moveOffset = --offset;
                        }
                        else if (before.nodeType == 3) {
                            node = before;
                            offset = node.nodeValue.length;
                        }
                        else
                            break;
                    }
                }
                else if (isBlockNode(node)) {
                    break;
                }
                else {
                    let prev = node.previousSibling;
                    while (prev && isIgnorable(prev)) {
                        moveNode = node.parentNode;
                        moveOffset = domIndex(prev);
                        prev = prev.previousSibling;
                    }
                    if (!prev) {
                        node = node.parentNode;
                        if (node == view.dom)
                            break;
                        offset = 0;
                    }
                    else {
                        node = prev;
                        offset = nodeLen(node);
                    }
                }
            }
            if (force)
                setSelFocus(view, sel, node, offset);
            else if (moveNode)
                setSelFocus(view, sel, moveNode, moveOffset);
        }
// Make sure the cursor isn't directly before one or more ignored
// nodes.
        function skipIgnoredNodesRight(view) {
            let sel = view.domSelection();
            let node = sel.focusNode, offset = sel.focusOffset;
            if (!node)
                return;
            let len = nodeLen(node);
            let moveNode, moveOffset;
            for (;;) {
                if (offset < len) {
                    if (node.nodeType != 1)
                        break;
                    let after = node.childNodes[offset];
                    if (isIgnorable(after)) {
                        moveNode = node;
                        moveOffset = ++offset;
                    }
                    else
                        break;
                }
                else if (isBlockNode(node)) {
                    break;
                }
                else {
                    let next = node.nextSibling;
                    while (next && isIgnorable(next)) {
                        moveNode = next.parentNode;
                        moveOffset = domIndex(next) + 1;
                        next = next.nextSibling;
                    }
                    if (!next) {
                        node = node.parentNode;
                        if (node == view.dom)
                            break;
                        offset = len = 0;
                    }
                    else {
                        node = next;
                        offset = 0;
                        len = nodeLen(node);
                    }
                }
            }
            if (moveNode)
                setSelFocus(view, sel, moveNode, moveOffset);
        }
        function isBlockNode(dom) {
            let desc = dom.pmViewDesc;
            return desc && desc.node && desc.node.isBlock;
        }
        function setSelFocus(view, sel, node, offset) {
            if (selectionCollapsed(sel)) {
                let range = document.createRange();
                range.setEnd(node, offset);
                range.setStart(node, offset);
                sel.removeAllRanges();
                sel.addRange(range);
            }
            else if (sel.extend) {
                sel.extend(node, offset);
            }
            view.domObserver.setCurSelection();
            let { state } = view;
            // If no state update ends up happening, reset the selection.
            setTimeout(() => {
                if (view.state == state)
                    selectionToDOM(view);
            }, 50);
        }
// Check whether vertical selection motion would involve node
// selections. If so, apply it (if not, the result is left to the
// browser)
        function selectVertically(view, dir, mods) {
            let sel = view.state.selection;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty || mods.indexOf("s") > -1)
                return false;
            if (mac && mods.indexOf("m") > -1)
                return false;
            let { $from, $to } = sel;
            if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
                let next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection))
                    return apply(view, next);
            }
            if (!$from.parent.inlineContent) {
                let side = dir < 0 ? $from : $to;
                let beyond = sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(side, dir) : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(side, dir);
                return beyond ? apply(view, beyond) : false;
            }
            return false;
        }
        function stopNativeHorizontalDelete(view, dir) {
            if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection))
                return true;
            let { $head, $anchor, empty } = view.state.selection;
            if (!$head.sameParent($anchor))
                return true;
            if (!empty)
                return false;
            if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
                return true;
            let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
            if (nextNode && !nextNode.isText) {
                let tr = view.state.tr;
                if (dir < 0)
                    tr.delete($head.pos - nextNode.nodeSize, $head.pos);
                else
                    tr.delete($head.pos, $head.pos + nextNode.nodeSize);
                view.dispatch(tr);
                return true;
            }
            return false;
        }
        function switchEditable(view, node, state) {
            view.domObserver.stop();
            node.contentEditable = state;
            view.domObserver.start();
        }
// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
// In which Safari (and at some point in the past, Chrome) does really
// wrong things when the down arrow is pressed when the cursor is
// directly at the start of a textblock and has an uneditable node
// after it
        function safariDownArrowBug(view) {
            if (!safari || view.state.selection.$head.parentOffset > 0)
                return false;
            let { focusNode, focusOffset } = view.domSelection();
            if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
                focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
                let child = focusNode.firstChild;
                switchEditable(view, child, "true");
                setTimeout(() => switchEditable(view, child, "false"), 20);
            }
            return false;
        }
// A backdrop key mapping used to make sure we always suppress keys
// that have a dangerous default effect, even if the commands they are
// bound to return false, and to make sure that cursor-motion keys
// find a cursor (as opposed to a node selection) when pressed. For
// cursor-motion keys, the code in the handlers also takes care of
// block selections.
        function getMods(event) {
            let result = "";
            if (event.ctrlKey)
                result += "c";
            if (event.metaKey)
                result += "m";
            if (event.altKey)
                result += "a";
            if (event.shiftKey)
                result += "s";
            return result;
        }
        function captureKeyDown(view, event) {
            let code = event.keyCode, mods = getMods(event);
            if (code == 8 || (mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
                return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
            }
            else if (code == 46 || (mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
                return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
            }
            else if (code == 13 || code == 27) { // Enter, Esc
                return true;
            }
            else if (code == 37 || (mac && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
                return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
            }
            else if (code == 39 || (mac && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
                return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
            }
            else if (code == 38 || (mac && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
                return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
            }
            else if (code == 40 || (mac && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
                return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
            }
            else if (mods == (mac ? "m" : "c") &&
                (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
                return true;
            }
            return false;
        }

        function serializeForClipboard(view, slice) {
            let context = [], { content, openStart, openEnd } = slice;
            while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
                openStart--;
                openEnd--;
                let node = content.firstChild;
                context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
                content = node.content;
            }
            let serializer = view.someProp("clipboardSerializer") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(view.state.schema);
            let doc = detachedDoc(), wrap = doc.createElement("div");
            wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
            let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
            while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
                for (let i = needsWrap.length - 1; i >= 0; i--) {
                    let wrapper = doc.createElement(needsWrap[i]);
                    while (wrap.firstChild)
                        wrapper.appendChild(wrap.firstChild);
                    wrap.appendChild(wrapper);
                    wrappers++;
                }
                firstChild = wrap.firstChild;
            }
            if (firstChild && firstChild.nodeType == 1)
                firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
            let text = view.someProp("clipboardTextSerializer", f => f(slice)) ||
                slice.content.textBetween(0, slice.content.size, "\n\n");
            return { dom: wrap, text };
        }
// Read a slice of content from the clipboard (or drop data).
        function parseFromClipboard(view, text, html, plainText, $context) {
            let inCode = $context.parent.type.spec.code;
            let dom, slice;
            if (!html && !text)
                return null;
            let asText = text && (plainText || inCode || !html);
            if (asText) {
                view.someProp("transformPastedText", f => { text = f(text, inCode || plainText); });
                if (inCode)
                    return text ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty;
                let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText));
                if (parsed) {
                    slice = parsed;
                }
                else {
                    let marks = $context.marks();
                    let { schema } = view.state, serializer = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(schema);
                    dom = document.createElement("div");
                    text.split(/(?:\r\n?|\n)+/).forEach(block => {
                        let p = dom.appendChild(document.createElement("p"));
                        if (block)
                            p.appendChild(serializer.serializeNode(schema.text(block, marks)));
                    });
                }
            }
            else {
                view.someProp("transformPastedHTML", f => { html = f(html); });
                dom = readHTML(html);
                if (webkit)
                    restoreReplacedSpaces(dom);
            }
            let contextNode = dom && dom.querySelector("[data-pm-slice]");
            let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
            if (sliceData && sliceData[3])
                for (let i = +sliceData[3]; i > 0 && dom.firstChild; i--)
                    dom = dom.firstChild;
            if (!slice) {
                let parser = view.someProp("clipboardParser") || view.someProp("domParser") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);
                slice = parser.parseSlice(dom, {
                    preserveWhitespace: !!(asText || sliceData),
                    context: $context,
                    ruleFromNode(dom) {
                        if (dom.nodeName == "BR" && !dom.nextSibling &&
                            dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                            return { ignore: true };
                        return null;
                    }
                });
            }
            if (sliceData) {
                slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
            }
            else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
                slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
                if (slice.openStart || slice.openEnd) {
                    let openStart = 0, openEnd = 0;
                    for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
                    for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
                    slice = closeSlice(slice, openStart, openEnd);
                }
            }
            view.someProp("transformPasted", f => { slice = f(slice); });
            return slice;
        }
        const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
// Takes a slice parsed with parseSlice, which means there hasn't been
// any content-expression checking done on the top nodes, tries to
// find a parent node in the current context that might fit the nodes,
// and if successful, rebuilds the slice so that it fits into that parent.
//
// This addresses the problem that Transform.replace expects a
// coherent slice, and will fail to place a set of siblings that don't
// fit anywhere in the schema.
        function normalizeSiblings(fragment, $context) {
            if (fragment.childCount < 2)
                return fragment;
            for (let d = $context.depth; d >= 0; d--) {
                let parent = $context.node(d);
                let match = parent.contentMatchAt($context.index(d));
                let lastWrap, result = [];
                fragment.forEach(node => {
                    if (!result)
                        return;
                    let wrap = match.findWrapping(node.type), inLast;
                    if (!wrap)
                        return result = null;
                    if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                        result[result.length - 1] = inLast;
                    }
                    else {
                        if (result.length)
                            result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                        let wrapped = withWrappers(node, wrap);
                        result.push(wrapped);
                        match = match.matchType(wrapped.type);
                        lastWrap = wrap;
                    }
                });
                if (result)
                    return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(result);
            }
            return fragment;
        }
        function withWrappers(node, wrap, from = 0) {
            for (let i = wrap.length - 1; i >= from; i--)
                node = wrap[i].create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node));
            return node;
        }
// Used to group adjacent nodes wrapped in similar parents by
// normalizeSiblings into the same parent node
        function addToSibling(wrap, lastWrap, node, sibling, depth) {
            if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
                let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
                if (inner)
                    return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
                let match = sibling.contentMatchAt(sibling.childCount);
                if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
                    return sibling.copy(sibling.content.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(withWrappers(node, wrap, depth + 1))));
            }
        }
        function closeRight(node, depth) {
            if (depth == 0)
                return node;
            let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
            let fill = node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
            return node.copy(fragment.append(fill));
        }
        function closeRange(fragment, side, from, to, depth, openEnd) {
            let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
            if (depth < to - 1)
                inner = closeRange(inner, side, from, to, depth + 1, openEnd);
            if (depth >= from)
                inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
                    : inner.append(node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
        }
        function closeSlice(slice, openStart, openEnd) {
            if (openStart < slice.openStart)
                slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
            if (openEnd < slice.openEnd)
                slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
            return slice;
        }
// Trick from jQuery -- some elements must be wrapped in other
// elements for innerHTML to work. I.e. if you do `div.innerHTML =
// "<td>..</td>"` the table cells are ignored.
        const wrapMap = {
            thead: ["table"],
            tbody: ["table"],
            tfoot: ["table"],
            caption: ["table"],
            colgroup: ["table"],
            col: ["table", "colgroup"],
            tr: ["table", "tbody"],
            td: ["table", "tbody", "tr"],
            th: ["table", "tbody", "tr"]
        };
        let _detachedDoc = null;
        function detachedDoc() {
            return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
        }
        function readHTML(html) {
            let metas = /^(\s*<meta [^>]*>)*/.exec(html);
            if (metas)
                html = html.slice(metas[0].length);
            let elt = detachedDoc().createElement("div");
            let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
            if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
                html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
            elt.innerHTML = html;
            if (wrap)
                for (let i = 0; i < wrap.length; i++)
                    elt = elt.querySelector(wrap[i]) || elt;
            return elt;
        }
// Webkit browsers do some hard-to-predict replacement of regular
// spaces with non-breaking spaces when putting content on the
// clipboard. This tries to convert such non-breaking spaces (which
// will be wrapped in a plain span on Chrome, a span with class
// Apple-converted-space on Safari) back to regular spaces.
        function restoreReplacedSpaces(dom) {
            let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
            for (let i = 0; i < nodes.length; i++) {
                let node = nodes[i];
                if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
                    node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
            }
        }
        function addContext(slice, context) {
            if (!slice.size)
                return slice;
            let schema = slice.content.firstChild.type.schema, array;
            try {
                array = JSON.parse(context);
            }
            catch (e) {
                return slice;
            }
            let { content, openStart, openEnd } = slice;
            for (let i = array.length - 2; i >= 0; i -= 2) {
                let type = schema.nodes[array[i]];
                if (!type || type.hasRequiredAttrs())
                    break;
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(array[i + 1], content));
                openStart++;
                openEnd++;
            }
            return new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);
        }

// A collection of DOM events that occur within the editor, and callback functions
// to invoke when the event fires.
        const handlers = {};
        let editHandlers = {};
        class InputState {
            constructor() {
                this.shiftKey = false;
                this.mouseDown = null;
                this.lastKeyCode = null;
                this.lastKeyCodeTime = 0;
                this.lastClick = { time: 0, x: 0, y: 0, type: "" };
                this.lastSelectionOrigin = null;
                this.lastSelectionTime = 0;
                this.lastIOSEnter = 0;
                this.lastIOSEnterFallbackTimeout = -1;
                this.lastAndroidDelete = 0;
                this.composing = false;
                this.composingTimeout = -1;
                this.compositionNodes = [];
                this.compositionEndedAt = -2e8;
                this.domChangeCount = 0;
                this.eventHandlers = Object.create(null);
                this.hideSelectionGuard = null;
            }
        }
        function initInput(view) {
            for (let event in handlers) {
                let handler = handlers[event];
                view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
                    if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                        (view.editable || !(event.type in editHandlers)))
                        handler(view, event);
                });
            }
            // On Safari, for reasons beyond my understanding, adding an input
            // event handler makes an issue where the composition vanishes when
            // you press enter go away.
            if (safari)
                view.dom.addEventListener("input", () => null);
            ensureListeners(view);
        }
        function setSelectionOrigin(view, origin) {
            view.input.lastSelectionOrigin = origin;
            view.input.lastSelectionTime = Date.now();
        }
        function destroyInput(view) {
            view.domObserver.stop();
            for (let type in view.input.eventHandlers)
                view.dom.removeEventListener(type, view.input.eventHandlers[type]);
            clearTimeout(view.input.composingTimeout);
            clearTimeout(view.input.lastIOSEnterFallbackTimeout);
        }
        function ensureListeners(view) {
            view.someProp("handleDOMEvents", currentHandlers => {
                for (let type in currentHandlers)
                    if (!view.input.eventHandlers[type])
                        view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
            });
        }
        function runCustomHandler(view, event) {
            return view.someProp("handleDOMEvents", handlers => {
                let handler = handlers[event.type];
                return handler ? handler(view, event) || event.defaultPrevented : false;
            });
        }
        function eventBelongsToView(view, event) {
            if (!event.bubbles)
                return true;
            if (event.defaultPrevented)
                return false;
            for (let node = event.target; node != view.dom; node = node.parentNode)
                if (!node || node.nodeType == 11 ||
                    (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
                    return false;
            return true;
        }
        function dispatchEvent(view, event) {
            if (!runCustomHandler(view, event) && handlers[event.type] &&
                (view.editable || !(event.type in editHandlers)))
                handlers[event.type](view, event);
        }
        editHandlers.keydown = (view, _event) => {
            let event = _event;
            view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
            if (inOrNearComposition(view, event))
                return;
            view.input.lastKeyCode = event.keyCode;
            view.input.lastKeyCodeTime = Date.now();
            // Suppress enter key events on Chrome Android, because those tend
            // to be part of a confused sequence of composition events fired,
            // and handling them eagerly tends to corrupt the input.
            if (android && chrome && event.keyCode == 13)
                return;
            if (event.keyCode != 229)
                view.domObserver.forceFlush();
            // On iOS, if we preventDefault enter key presses, the virtual
            // keyboard gets confused. So the hack here is to set a flag that
            // makes the DOM change code recognize that what just happens should
            // be replaced by whatever the Enter key handlers do.
            if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
                let now = Date.now();
                view.input.lastIOSEnter = now;
                view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                    if (view.input.lastIOSEnter == now) {
                        view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                        view.input.lastIOSEnter = 0;
                    }
                }, 200);
            }
            else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
                event.preventDefault();
            }
            else {
                setSelectionOrigin(view, "key");
            }
        };
        editHandlers.keyup = (view, event) => {
            if (event.keyCode == 16)
                view.input.shiftKey = false;
        };
        editHandlers.keypress = (view, _event) => {
            let event = _event;
            if (inOrNearComposition(view, event) || !event.charCode ||
                event.ctrlKey && !event.altKey || mac && event.metaKey)
                return;
            if (view.someProp("handleKeyPress", f => f(view, event))) {
                event.preventDefault();
                return;
            }
            let sel = view.state.selection;
            if (!(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || !sel.$from.sameParent(sel.$to)) {
                let text = String.fromCharCode(event.charCode);
                if (!view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
                    view.dispatch(view.state.tr.insertText(text).scrollIntoView());
                event.preventDefault();
            }
        };
        function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
        function isNear(event, click) {
            let dx = click.x - event.clientX, dy = click.y - event.clientY;
            return dx * dx + dy * dy < 100;
        }
        function runHandlerOnContext(view, propName, pos, inside, event) {
            if (inside == -1)
                return false;
            let $pos = view.state.doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
                    return true;
            }
            return false;
        }
        function updateSelection(view, selection, origin) {
            if (!view.focused)
                view.focus();
            let tr = view.state.tr.setSelection(selection);
            if (origin == "pointer")
                tr.setMeta("pointer", true);
            view.dispatch(tr);
        }
        function selectClickedLeaf(view, inside) {
            if (inside == -1)
                return false;
            let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
            if (node && node.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                updateSelection(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos), "pointer");
                return true;
            }
            return false;
        }
        function selectClickedNode(view, inside) {
            if (inside == -1)
                return false;
            let sel = view.state.selection, selectedNode, selectAt;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection)
                selectedNode = sel.node;
            let $pos = view.state.doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
                if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                    if (selectedNode && sel.$from.depth > 0 &&
                        i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                        selectAt = $pos.before(sel.$from.depth);
                    else
                        selectAt = $pos.before(i);
                    break;
                }
            }
            if (selectAt != null) {
                updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, selectAt), "pointer");
                return true;
            }
            else {
                return false;
            }
        }
        function handleSingleClick(view, pos, inside, event, selectNode) {
            return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
                view.someProp("handleClick", f => f(view, pos, event)) ||
                (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
        }
        function handleDoubleClick(view, pos, inside, event) {
            return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
                view.someProp("handleDoubleClick", f => f(view, pos, event));
        }
        function handleTripleClick(view, pos, inside, event) {
            return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
                view.someProp("handleTripleClick", f => f(view, pos, event)) ||
                defaultTripleClick(view, inside, event);
        }
        function defaultTripleClick(view, inside, event) {
            if (event.button != 0)
                return false;
            let doc = view.state.doc;
            if (inside == -1) {
                if (doc.inlineContent) {
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, 0, doc.content.size), "pointer");
                    return true;
                }
                return false;
            }
            let $pos = doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
                let nodePos = $pos.before(i);
                if (node.inlineContent)
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
                else if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(doc, nodePos), "pointer");
                else
                    continue;
                return true;
            }
        }
        function forceDOMFlush(view) {
            return endComposition(view);
        }
        const selectNodeModifier = mac ? "metaKey" : "ctrlKey";
        handlers.mousedown = (view, _event) => {
            let event = _event;
            view.input.shiftKey = event.shiftKey;
            let flushed = forceDOMFlush(view);
            let now = Date.now(), type = "singleClick";
            if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
                if (view.input.lastClick.type == "singleClick")
                    type = "doubleClick";
                else if (view.input.lastClick.type == "doubleClick")
                    type = "tripleClick";
            }
            view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
            let pos = view.posAtCoords(eventCoords(event));
            if (!pos)
                return;
            if (type == "singleClick") {
                if (view.input.mouseDown)
                    view.input.mouseDown.done();
                view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
            }
            else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
                event.preventDefault();
            }
            else {
                setSelectionOrigin(view, "pointer");
            }
        };
        class MouseDown {
            constructor(view, pos, event, flushed) {
                this.view = view;
                this.pos = pos;
                this.event = event;
                this.flushed = flushed;
                this.delayedSelectionSync = false;
                this.mightDrag = null;
                this.startDoc = view.state.doc;
                this.selectNode = !!event[selectNodeModifier];
                this.allowDefault = event.shiftKey;
                let targetNode, targetPos;
                if (pos.inside > -1) {
                    targetNode = view.state.doc.nodeAt(pos.inside);
                    targetPos = pos.inside;
                }
                else {
                    let $pos = view.state.doc.resolve(pos.pos);
                    targetNode = $pos.parent;
                    targetPos = $pos.depth ? $pos.before() : 0;
                }
                const target = flushed ? null : event.target;
                const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
                this.target = targetDesc ? targetDesc.dom : null;
                let { selection } = view.state;
                if (event.button == 0 &&
                    targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
                    selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && selection.from <= targetPos && selection.to > targetPos)
                    this.mightDrag = {
                        node: targetNode,
                        pos: targetPos,
                        addAttr: !!(this.target && !this.target.draggable),
                        setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
                    };
                if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
                    this.view.domObserver.stop();
                    if (this.mightDrag.addAttr)
                        this.target.draggable = true;
                    if (this.mightDrag.setUneditable)
                        setTimeout(() => {
                            if (this.view.input.mouseDown == this)
                                this.target.setAttribute("contentEditable", "false");
                        }, 20);
                    this.view.domObserver.start();
                }
                view.root.addEventListener("mouseup", this.up = this.up.bind(this));
                view.root.addEventListener("mousemove", this.move = this.move.bind(this));
                setSelectionOrigin(view, "pointer");
            }
            done() {
                this.view.root.removeEventListener("mouseup", this.up);
                this.view.root.removeEventListener("mousemove", this.move);
                if (this.mightDrag && this.target) {
                    this.view.domObserver.stop();
                    if (this.mightDrag.addAttr)
                        this.target.removeAttribute("draggable");
                    if (this.mightDrag.setUneditable)
                        this.target.removeAttribute("contentEditable");
                    this.view.domObserver.start();
                }
                if (this.delayedSelectionSync)
                    setTimeout(() => selectionToDOM(this.view));
                this.view.input.mouseDown = null;
            }
            up(event) {
                this.done();
                if (!this.view.dom.contains(event.target))
                    return;
                let pos = this.pos;
                if (this.view.state.doc != this.startDoc)
                    pos = this.view.posAtCoords(eventCoords(event));
                if (this.allowDefault || !pos) {
                    setSelectionOrigin(this.view, "pointer");
                }
                else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
                    event.preventDefault();
                }
                else if (event.button == 0 &&
                    (this.flushed ||
                        // Safari ignores clicks on draggable elements
                        (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                        // Chrome will sometimes treat a node selection as a
                        // cursor, but still report that the node is selected
                        // when asked through getSelection. You'll then get a
                        // situation where clicking at the point where that
                        // (hidden) cursor is doesn't change the selection, and
                        // thus doesn't get a reaction from ProseMirror. This
                        // works around that.
                        (chrome && !(this.view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) &&
                            Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
                    updateSelection(this.view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
                    event.preventDefault();
                }
                else {
                    setSelectionOrigin(this.view, "pointer");
                }
            }
            move(event) {
                if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                    Math.abs(this.event.y - event.clientY) > 4))
                    this.allowDefault = true;
                setSelectionOrigin(this.view, "pointer");
                if (event.buttons == 0)
                    this.done();
            }
        }
        handlers.touchdown = view => {
            forceDOMFlush(view);
            setSelectionOrigin(view, "pointer");
        };
        handlers.contextmenu = view => forceDOMFlush(view);
        function inOrNearComposition(view, event) {
            if (view.composing)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On Japanese input method editors (IMEs), the Enter key is used to confirm character
            // selection. On Safari, when Enter is pressed, compositionend and keydown events are
            // emitted. The keydown event triggers newline insertion, which we don't want.
            // This method returns true if the keydown event should be ignored.
            // We only ignore it once, as pressing Enter a second time *should* insert a newline.
            // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
            // This guards against the case where compositionend is triggered without the keyboard
            // (e.g. character confirmation may be done with the mouse), and keydown is triggered
            // afterwards- we wouldn't want to ignore the keydown event in this case.
            if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
                view.input.compositionEndedAt = -2e8;
                return true;
            }
            return false;
        }
// Drop active composition after 5 seconds of inactivity on Android
        const timeoutComposition = android ? 5000 : -1;
        editHandlers.compositionstart = editHandlers.compositionupdate = view => {
            if (!view.composing) {
                view.domObserver.flush();
                let { state } = view, $pos = state.selection.$from;
                if (state.selection.empty &&
                    (state.storedMarks ||
                        (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
                    // Need to wrap the cursor in mark nodes different from the ones in the DOM context
                    view.markCursor = view.state.storedMarks || $pos.marks();
                    endComposition(view, true);
                    view.markCursor = null;
                }
                else {
                    endComposition(view);
                    // In firefox, if the cursor is after but outside a marked node,
                    // the inserted text won't inherit the marks. So this moves it
                    // inside if necessary.
                    if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                        let sel = view.domSelection();
                        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                            let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                            if (!before)
                                break;
                            if (before.nodeType == 3) {
                                sel.collapse(before, before.nodeValue.length);
                                break;
                            }
                            else {
                                node = before;
                                offset = -1;
                            }
                        }
                    }
                }
                view.input.composing = true;
            }
            scheduleComposeEnd(view, timeoutComposition);
        };
        editHandlers.compositionend = (view, event) => {
            if (view.composing) {
                view.input.composing = false;
                view.input.compositionEndedAt = event.timeStamp;
                scheduleComposeEnd(view, 20);
            }
        };
        function scheduleComposeEnd(view, delay) {
            clearTimeout(view.input.composingTimeout);
            if (delay > -1)
                view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
        }
        function clearComposition(view) {
            if (view.composing) {
                view.input.composing = false;
                view.input.compositionEndedAt = timestampFromCustomEvent();
            }
            while (view.input.compositionNodes.length > 0)
                view.input.compositionNodes.pop().markParentsDirty();
        }
        function timestampFromCustomEvent() {
            let event = document.createEvent("Event");
            event.initEvent("event", true, true);
            return event.timeStamp;
        }
        /**
         @internal
         */
        function endComposition(view, forceUpdate = false) {
            if (android && view.domObserver.flushingSoon >= 0)
                return;
            view.domObserver.forceFlush();
            clearComposition(view);
            if (forceUpdate || view.docView && view.docView.dirty) {
                let sel = selectionFromDOM(view);
                if (sel && !sel.eq(view.state.selection))
                    view.dispatch(view.state.tr.setSelection(sel));
                else
                    view.updateState(view.state);
                return true;
            }
            return false;
        }
        function captureCopy(view, dom) {
            // The extra wrapper is somehow necessary on IE/Edge to prevent the
            // content from being mangled when it is put onto the clipboard
            if (!view.dom.parentNode)
                return;
            let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
            wrap.appendChild(dom);
            wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
            let sel = getSelection(), range = document.createRange();
            range.selectNodeContents(dom);
            // Done because IE will fire a selectionchange moving the selection
            // to its start when removeAllRanges is called and the editor still
            // has focus (which will mess up the editor's selection state).
            view.dom.blur();
            sel.removeAllRanges();
            sel.addRange(range);
            setTimeout(() => {
                if (wrap.parentNode)
                    wrap.parentNode.removeChild(wrap);
                view.focus();
            }, 50);
        }
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
        const brokenClipboardAPI = (ie && ie_version < 15) ||
            (ios && webkit_version < 604);
        handlers.copy = editHandlers.cut = (view, _event) => {
            let event = _event;
            let sel = view.state.selection, cut = event.type == "cut";
            if (sel.empty)
                return;
            // IE and Edge's clipboard interface is completely broken
            let data = brokenClipboardAPI ? null : event.clipboardData;
            let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
            if (data) {
                event.preventDefault();
                data.clearData();
                data.setData("text/html", dom.innerHTML);
                data.setData("text/plain", text);
            }
            else {
                captureCopy(view, dom);
            }
            if (cut)
                view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
        };
        function sliceSingleNode(slice) {
            return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
        }
        function capturePaste(view, event) {
            if (!view.dom.parentNode)
                return;
            let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
            let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
            if (!plainText)
                target.contentEditable = "true";
            target.style.cssText = "position: fixed; left: -10000px; top: 10px";
            target.focus();
            setTimeout(() => {
                view.focus();
                if (target.parentNode)
                    target.parentNode.removeChild(target);
                if (plainText)
                    doPaste(view, target.value, null, event);
                else
                    doPaste(view, target.textContent, target.innerHTML, event);
            }, 50);
        }
        function doPaste(view, text, html, event) {
            let slice = parseFromClipboard(view, text, html, view.input.shiftKey, view.state.selection.$from);
            if (view.someProp("handlePaste", f => f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty)))
                return true;
            if (!slice)
                return false;
            let singleNode = sliceSingleNode(slice);
            let tr = singleNode
                ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey)
                : view.state.tr.replaceSelection(slice);
            view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
            return true;
        }
        editHandlers.paste = (view, _event) => {
            let event = _event;
            // Handling paste from JavaScript during composition is very poorly
            // handled by browsers, so as a dodgy but preferable kludge, we just
            // let the browser do its native thing there, except on Android,
            // where the editor is almost always composing.
            if (view.composing && !android)
                return;
            let data = brokenClipboardAPI ? null : event.clipboardData;
            if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), event))
                event.preventDefault();
            else
                capturePaste(view, event);
        };
        class Dragging {
            constructor(slice, move) {
                this.slice = slice;
                this.move = move;
            }
        }
        const dragCopyModifier = mac ? "altKey" : "ctrlKey";
        handlers.dragstart = (view, _event) => {
            let event = _event;
            let mouseDown = view.input.mouseDown;
            if (mouseDown)
                mouseDown.done();
            if (!event.dataTransfer)
                return;
            let sel = view.state.selection;
            let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
            if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection ? sel.to - 1 : sel.to)) ;
            else if (mouseDown && mouseDown.mightDrag) {
                view.dispatch(view.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
            }
            else if (event.target && event.target.nodeType == 1) {
                let desc = view.docView.nearestDesc(event.target, true);
                if (desc && desc.node.type.spec.draggable && desc != view.docView)
                    view.dispatch(view.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, desc.posBefore)));
            }
            let slice = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice);
            event.dataTransfer.clearData();
            event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
            // See https://github.com/ProseMirror/prosemirror/issues/1156
            event.dataTransfer.effectAllowed = "copyMove";
            if (!brokenClipboardAPI)
                event.dataTransfer.setData("text/plain", text);
            view.dragging = new Dragging(slice, !event[dragCopyModifier]);
        };
        handlers.dragend = view => {
            let dragging = view.dragging;
            window.setTimeout(() => {
                if (view.dragging == dragging)
                    view.dragging = null;
            }, 50);
        };
        editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
        editHandlers.drop = (view, _event) => {
            let event = _event;
            let dragging = view.dragging;
            view.dragging = null;
            if (!event.dataTransfer)
                return;
            let eventPos = view.posAtCoords(eventCoords(event));
            if (!eventPos)
                return;
            let $mouse = view.state.doc.resolve(eventPos.pos);
            if (!$mouse)
                return;
            let slice = dragging && dragging.slice;
            if (slice) {
                view.someProp("transformPasted", f => { slice = f(slice); });
            }
            else {
                slice = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
            }
            let move = !!(dragging && !event[dragCopyModifier]);
            if (view.someProp("handleDrop", f => f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, move))) {
                event.preventDefault();
                return;
            }
            if (!slice)
                return;
            event.preventDefault();
            let insertPos = slice ? (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__.dropPoint)(view.state.doc, $mouse.pos, slice) : $mouse.pos;
            if (insertPos == null)
                insertPos = $mouse.pos;
            let tr = view.state.tr;
            if (move)
                tr.deleteSelection();
            let pos = tr.mapping.map(insertPos);
            let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
            let beforeInsert = tr.doc;
            if (isNode)
                tr.replaceRangeWith(pos, pos, slice.content.firstChild);
            else
                tr.replaceRange(pos, pos, slice);
            if (tr.doc.eq(beforeInsert))
                return;
            let $pos = tr.doc.resolve(pos);
            if (isNode && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(slice.content.firstChild) &&
                $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
                tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos));
            }
            else {
                let end = tr.mapping.map(insertPos);
                tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
                tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
            }
            view.focus();
            view.dispatch(tr.setMeta("uiEvent", "drop"));
        };
        handlers.focus = view => {
            if (!view.focused) {
                view.domObserver.stop();
                view.dom.classList.add("ProseMirror-focused");
                view.domObserver.start();
                view.focused = true;
                setTimeout(() => {
                    if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelection()))
                        selectionToDOM(view);
                }, 20);
            }
        };
        handlers.blur = (view, _event) => {
            let event = _event;
            if (view.focused) {
                view.domObserver.stop();
                view.dom.classList.remove("ProseMirror-focused");
                view.domObserver.start();
                if (event.relatedTarget && view.dom.contains(event.relatedTarget))
                    view.domObserver.currentSelection.clear();
                view.focused = false;
            }
        };
        handlers.beforeinput = (view, _event) => {
            let event = _event;
            // We should probably do more with beforeinput events, but support
            // is so spotty that I'm still waiting to see where they are going.
            // Very specific hack to deal with backspace sometimes failing on
            // Chrome Android when after an uneditable node.
            if (chrome && android && event.inputType == "deleteContentBackward") {
                view.domObserver.flushSoon();
                let { domChangeCount } = view.input;
                setTimeout(() => {
                    if (view.input.domChangeCount != domChangeCount)
                        return; // Event already had some effect
                    // This bug tends to close the virtual keyboard, so we refocus
                    view.dom.blur();
                    view.focus();
                    if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                        return;
                    let { $cursor } = view.state.selection;
                    // Crude approximation of backspace behavior when no command handled it
                    if ($cursor && $cursor.pos > 0)
                        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
                }, 50);
            }
        };
// Make sure all handlers get registered
        for (let prop in editHandlers)
            handlers[prop] = editHandlers[prop];

        function compareObjs(a, b) {
            if (a == b)
                return true;
            for (let p in a)
                if (a[p] !== b[p])
                    return false;
            for (let p in b)
                if (!(p in a))
                    return false;
            return true;
        }
        class WidgetType {
            constructor(toDOM, spec) {
                this.toDOM = toDOM;
                this.spec = spec || noSpec;
                this.side = this.spec.side || 0;
            }
            map(mapping, span, offset, oldOffset) {
                let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
                return deleted ? null : new Decoration(pos - offset, pos - offset, this);
            }
            valid() { return true; }
            eq(other) {
                return this == other ||
                    (other instanceof WidgetType &&
                        (this.spec.key && this.spec.key == other.spec.key ||
                            this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
            }
            destroy(node) {
                if (this.spec.destroy)
                    this.spec.destroy(node);
            }
        }
        class InlineType {
            constructor(attrs, spec) {
                this.attrs = attrs;
                this.spec = spec || noSpec;
            }
            map(mapping, span, offset, oldOffset) {
                let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
                let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
                return from >= to ? null : new Decoration(from, to, this);
            }
            valid(_, span) { return span.from < span.to; }
            eq(other) {
                return this == other ||
                    (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                        compareObjs(this.spec, other.spec));
            }
            static is(span) { return span.type instanceof InlineType; }
            destroy() { }
        }
        class NodeType {
            constructor(attrs, spec) {
                this.attrs = attrs;
                this.spec = spec || noSpec;
            }
            map(mapping, span, offset, oldOffset) {
                let from = mapping.mapResult(span.from + oldOffset, 1);
                if (from.deleted)
                    return null;
                let to = mapping.mapResult(span.to + oldOffset, -1);
                if (to.deleted || to.pos <= from.pos)
                    return null;
                return new Decoration(from.pos - offset, to.pos - offset, this);
            }
            valid(node, span) {
                let { index, offset } = node.content.findIndex(span.from), child;
                return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
            }
            eq(other) {
                return this == other ||
                    (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                        compareObjs(this.spec, other.spec));
            }
            destroy() { }
        }
        /**
         Decoration objects can be provided to the view through the
         [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
         several variants—see the static members of this class for details.
         */
        class Decoration {
            /**
             @internal
             */
            constructor(
                /**
                 The start position of the decoration.
                 */
                from,
                /**
                 The end position. Will be the same as `from` for [widget
                 decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
                 */
                to,
                /**
                 @internal
                 */
                type) {
                this.from = from;
                this.to = to;
                this.type = type;
            }
            /**
             @internal
             */
            copy(from, to) {
                return new Decoration(from, to, this.type);
            }
            /**
             @internal
             */
            eq(other, offset = 0) {
                return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
            }
            /**
             @internal
             */
            map(mapping, offset, oldOffset) {
                return this.type.map(mapping, this, offset, oldOffset);
            }
            /**
             Creates a widget decoration, which is a DOM node that's shown in
             the document at the given position. It is recommended that you
             delay rendering the widget by passing a function that will be
             called when the widget is actually drawn in a view, but you can
             also directly pass a DOM node. `getPos` can be used to find the
             widget's current document position.
             */
            static widget(pos, toDOM, spec) {
                return new Decoration(pos, pos, new WidgetType(toDOM, spec));
            }
            /**
             Creates an inline decoration, which adds the given attributes to
             each inline node between `from` and `to`.
             */
            static inline(from, to, attrs, spec) {
                return new Decoration(from, to, new InlineType(attrs, spec));
            }
            /**
             Creates a node decoration. `from` and `to` should point precisely
             before and after a node in the document. That node, and only that
             node, will receive the given attributes.
             */
            static node(from, to, attrs, spec) {
                return new Decoration(from, to, new NodeType(attrs, spec));
            }
            /**
             The spec provided when creating this decoration. Can be useful
             if you've stored extra information in that object.
             */
            get spec() { return this.type.spec; }
            /**
             @internal
             */
            get inline() { return this.type instanceof InlineType; }
        }
        const none = [], noSpec = {};
        /**
         A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
         a way that the drawing algorithm can efficiently use and compare
         them. This is a persistent data structure—it is not modified,
         updates create a new value.
         */
        class DecorationSet {
            /**
             @internal
             */
            constructor(local, children) {
                this.local = local.length ? local : none;
                this.children = children.length ? children : none;
            }
            /**
             Create a set of decorations, using the structure of the given
             document.
             */
            static create(doc, decorations) {
                return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
            }
            /**
             Find all decorations in this set which touch the given range
             (including decorations that start or end directly at the
             boundaries) and match the given predicate on their spec. When
             `start` and `end` are omitted, all decorations in the set are
             considered. When `predicate` isn't given, all decorations are
             assumed to match.
             */
            find(start, end, predicate) {
                let result = [];
                this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
                return result;
            }
            findInner(start, end, result, offset, predicate) {
                for (let i = 0; i < this.local.length; i++) {
                    let span = this.local[i];
                    if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                        result.push(span.copy(span.from + offset, span.to + offset));
                }
                for (let i = 0; i < this.children.length; i += 3) {
                    if (this.children[i] < end && this.children[i + 1] > start) {
                        let childOff = this.children[i] + 1;
                        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
                    }
                }
            }
            /**
             Map the set of decorations in response to a change in the
             document.
             */
            map(mapping, doc, options) {
                if (this == empty || mapping.maps.length == 0)
                    return this;
                return this.mapInner(mapping, doc, 0, 0, options || noSpec);
            }
            /**
             @internal
             */
            mapInner(mapping, node, offset, oldOffset, options) {
                let newLocal;
                for (let i = 0; i < this.local.length; i++) {
                    let mapped = this.local[i].map(mapping, offset, oldOffset);
                    if (mapped && mapped.type.valid(node, mapped))
                        (newLocal || (newLocal = [])).push(mapped);
                    else if (options.onRemove)
                        options.onRemove(this.local[i].spec);
                }
                if (this.children.length)
                    return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
                else
                    return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
            }
            /**
             Add the given array of decorations to the ones in the set,
             producing a new set. Needs access to the current document to
             create the appropriate tree structure.
             */
            add(doc, decorations) {
                if (!decorations.length)
                    return this;
                if (this == empty)
                    return DecorationSet.create(doc, decorations);
                return this.addInner(doc, decorations, 0);
            }
            addInner(doc, decorations, offset) {
                let children, childIndex = 0;
                doc.forEach((childNode, childOffset) => {
                    let baseOffset = childOffset + offset, found;
                    if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                        return;
                    if (!children)
                        children = this.children.slice();
                    while (childIndex < children.length && children[childIndex] < childOffset)
                        childIndex += 3;
                    if (children[childIndex] == childOffset)
                        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
                    else
                        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
                    childIndex += 3;
                });
                let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
                for (let i = 0; i < local.length; i++)
                    if (!local[i].type.valid(doc, local[i]))
                        local.splice(i--, 1);
                return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
            }
            /**
             Create a new set that contains the decorations in this set, minus
             the ones in the given array.
             */
            remove(decorations) {
                if (decorations.length == 0 || this == empty)
                    return this;
                return this.removeInner(decorations, 0);
            }
            removeInner(decorations, offset) {
                let children = this.children, local = this.local;
                for (let i = 0; i < children.length; i += 3) {
                    let found;
                    let from = children[i] + offset, to = children[i + 1] + offset;
                    for (let j = 0, span; j < decorations.length; j++)
                        if (span = decorations[j]) {
                            if (span.from > from && span.to < to) {
                                decorations[j] = null;
                                (found || (found = [])).push(span);
                            }
                        }
                    if (!found)
                        continue;
                    if (children == this.children)
                        children = this.children.slice();
                    let removed = children[i + 2].removeInner(found, from + 1);
                    if (removed != empty) {
                        children[i + 2] = removed;
                    }
                    else {
                        children.splice(i, 3);
                        i -= 3;
                    }
                }
                if (local.length)
                    for (let i = 0, span; i < decorations.length; i++)
                        if (span = decorations[i]) {
                            for (let j = 0; j < local.length; j++)
                                if (local[j].eq(span, offset)) {
                                    if (local == this.local)
                                        local = this.local.slice();
                                    local.splice(j--, 1);
                                }
                        }
                if (children == this.children && local == this.local)
                    return this;
                return local.length || children.length ? new DecorationSet(local, children) : empty;
            }
            /**
             @internal
             */
            forChild(offset, node) {
                if (this == empty)
                    return this;
                if (node.isLeaf)
                    return DecorationSet.empty;
                let child, local;
                for (let i = 0; i < this.children.length; i += 3)
                    if (this.children[i] >= offset) {
                        if (this.children[i] == offset)
                            child = this.children[i + 2];
                        break;
                    }
                let start = offset + 1, end = start + node.content.size;
                for (let i = 0; i < this.local.length; i++) {
                    let dec = this.local[i];
                    if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                        if (from < to)
                            (local || (local = [])).push(dec.copy(from, to));
                    }
                }
                if (local) {
                    let localSet = new DecorationSet(local.sort(byPos), none);
                    return child ? new DecorationGroup([localSet, child]) : localSet;
                }
                return child || empty;
            }
            /**
             @internal
             */
            eq(other) {
                if (this == other)
                    return true;
                if (!(other instanceof DecorationSet) ||
                    this.local.length != other.local.length ||
                    this.children.length != other.children.length)
                    return false;
                for (let i = 0; i < this.local.length; i++)
                    if (!this.local[i].eq(other.local[i]))
                        return false;
                for (let i = 0; i < this.children.length; i += 3)
                    if (this.children[i] != other.children[i] ||
                        this.children[i + 1] != other.children[i + 1] ||
                        !this.children[i + 2].eq(other.children[i + 2]))
                        return false;
                return true;
            }
            /**
             @internal
             */
            locals(node) {
                return removeOverlap(this.localsInner(node));
            }
            /**
             @internal
             */
            localsInner(node) {
                if (this == empty)
                    return none;
                if (node.inlineContent || !this.local.some(InlineType.is))
                    return this.local;
                let result = [];
                for (let i = 0; i < this.local.length; i++) {
                    if (!(this.local[i].type instanceof InlineType))
                        result.push(this.local[i]);
                }
                return result;
            }
        }
        /**
         The empty set of decorations.
         */
        DecorationSet.empty = new DecorationSet([], []);
        /**
         @internal
         */
        DecorationSet.removeOverlap = removeOverlap;
        const empty = DecorationSet.empty;
// An abstraction that allows the code dealing with decorations to
// treat multiple DecorationSet objects as if it were a single object
// with (a subset of) the same interface.
        class DecorationGroup {
            constructor(members) {
                this.members = members;
            }
            map(mapping, doc) {
                const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
                return DecorationGroup.from(mappedDecos);
            }
            forChild(offset, child) {
                if (child.isLeaf)
                    return DecorationSet.empty;
                let found = [];
                for (let i = 0; i < this.members.length; i++) {
                    let result = this.members[i].forChild(offset, child);
                    if (result == empty)
                        continue;
                    if (result instanceof DecorationGroup)
                        found = found.concat(result.members);
                    else
                        found.push(result);
                }
                return DecorationGroup.from(found);
            }
            eq(other) {
                if (!(other instanceof DecorationGroup) ||
                    other.members.length != this.members.length)
                    return false;
                for (let i = 0; i < this.members.length; i++)
                    if (!this.members[i].eq(other.members[i]))
                        return false;
                return true;
            }
            locals(node) {
                let result, sorted = true;
                for (let i = 0; i < this.members.length; i++) {
                    let locals = this.members[i].localsInner(node);
                    if (!locals.length)
                        continue;
                    if (!result) {
                        result = locals;
                    }
                    else {
                        if (sorted) {
                            result = result.slice();
                            sorted = false;
                        }
                        for (let j = 0; j < locals.length; j++)
                            result.push(locals[j]);
                    }
                }
                return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
            }
            // Create a group for the given array of decoration sets, or return
            // a single set when possible.
            static from(members) {
                switch (members.length) {
                    case 0: return empty;
                    case 1: return members[0];
                    default: return new DecorationGroup(members);
                }
            }
        }
        function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
            let children = oldChildren.slice();
            // Mark the children that are directly touched by changes, and
            // move those that are after the changes.
            let shift = (oldStart, oldEnd, newStart, newEnd) => {
                for (let i = 0; i < children.length; i += 3) {
                    let end = children[i + 1], dSize;
                    if (end < 0 || oldStart > end + oldOffset)
                        continue;
                    let start = children[i] + oldOffset;
                    if (oldEnd >= start) {
                        children[i + 1] = oldStart <= start ? -2 : -1;
                    }
                    else if (newStart >= offset && (dSize = (newEnd - newStart) - (oldEnd - oldStart))) {
                        children[i] += dSize;
                        children[i + 1] += dSize;
                    }
                }
            };
            for (let i = 0; i < mapping.maps.length; i++)
                mapping.maps[i].forEach(shift);
            // Find the child nodes that still correspond to a single node,
            // recursively call mapInner on them and update their positions.
            let mustRebuild = false;
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] < 0) { // Touched nodes
                    if (children[i + 1] == -2) {
                        mustRebuild = true;
                        children[i + 1] = -1;
                        continue;
                    }
                    let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
                    if (fromLocal < 0 || fromLocal >= node.content.size) {
                        mustRebuild = true;
                        continue;
                    }
                    // Must read oldChildren because children was tagged with -1
                    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
                    let { index, offset: childOffset } = node.content.findIndex(fromLocal);
                    let childNode = node.maybeChild(index);
                    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                        let mapped = children[i + 2]
                            .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                        if (mapped != empty) {
                            children[i] = fromLocal;
                            children[i + 1] = toLocal;
                            children[i + 2] = mapped;
                        }
                        else {
                            children[i + 1] = -2;
                            mustRebuild = true;
                        }
                    }
                    else {
                        mustRebuild = true;
                    }
                }
            // Remaining children must be collected and rebuilt into the appropriate structure
            if (mustRebuild) {
                let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
                let built = buildTree(decorations, node, 0, options);
                newLocal = built.local;
                for (let i = 0; i < children.length; i += 3)
                    if (children[i + 1] < 0) {
                        children.splice(i, 3);
                        i -= 3;
                    }
                for (let i = 0, j = 0; i < built.children.length; i += 3) {
                    let from = built.children[i];
                    while (j < children.length && children[j] < from)
                        j += 3;
                    children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
                }
            }
            return new DecorationSet(newLocal.sort(byPos), children);
        }
        function moveSpans(spans, offset) {
            if (!offset || !spans.length)
                return spans;
            let result = [];
            for (let i = 0; i < spans.length; i++) {
                let span = spans[i];
                result.push(new Decoration(span.from + offset, span.to + offset, span.type));
            }
            return result;
        }
        function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
            // Gather all decorations from the remaining marked children
            function gather(set, oldOffset) {
                for (let i = 0; i < set.local.length; i++) {
                    let mapped = set.local[i].map(mapping, offset, oldOffset);
                    if (mapped)
                        decorations.push(mapped);
                    else if (options.onRemove)
                        options.onRemove(set.local[i].spec);
                }
                for (let i = 0; i < set.children.length; i += 3)
                    gather(set.children[i + 2], set.children[i] + oldOffset + 1);
            }
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] == -1)
                    gather(children[i + 2], oldChildren[i] + oldOffset + 1);
            return decorations;
        }
        function takeSpansForNode(spans, node, offset) {
            if (node.isLeaf)
                return null;
            let end = offset + node.nodeSize, found = null;
            for (let i = 0, span; i < spans.length; i++) {
                if ((span = spans[i]) && span.from > offset && span.to < end) {
                    (found || (found = [])).push(span);
                    spans[i] = null;
                }
            }
            return found;
        }
        function withoutNulls(array) {
            let result = [];
            for (let i = 0; i < array.length; i++)
                if (array[i] != null)
                    result.push(array[i]);
            return result;
        }
// Build up a tree that corresponds to a set of decorations. `offset`
// is a base offset that should be subtracted from the `from` and `to`
// positions in the spans (so that we don't have to allocate new spans
// for recursive calls).
        function buildTree(spans, node, offset, options) {
            let children = [], hasNulls = false;
            node.forEach((childNode, localStart) => {
                let found = takeSpansForNode(spans, childNode, localStart + offset);
                if (found) {
                    hasNulls = true;
                    let subtree = buildTree(found, childNode, offset + localStart + 1, options);
                    if (subtree != empty)
                        children.push(localStart, localStart + childNode.nodeSize, subtree);
                }
            });
            let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
            for (let i = 0; i < locals.length; i++)
                if (!locals[i].type.valid(node, locals[i])) {
                    if (options.onRemove)
                        options.onRemove(locals[i].spec);
                    locals.splice(i--, 1);
                }
            return locals.length || children.length ? new DecorationSet(locals, children) : empty;
        }
// Used to sort decorations so that ones with a low start position
// come first, and within a set with the same start position, those
// with an smaller end position come first.
        function byPos(a, b) {
            return a.from - b.from || a.to - b.to;
        }
// Scan a sorted array of decorations for partially overlapping spans,
// and split those so that only fully overlapping spans are left (to
// make subsequent rendering easier). Will return the input array if
// no partially overlapping spans are found (the common case).
        function removeOverlap(spans) {
            let working = spans;
            for (let i = 0; i < working.length - 1; i++) {
                let span = working[i];
                if (span.from != span.to)
                    for (let j = i + 1; j < working.length; j++) {
                        let next = working[j];
                        if (next.from == span.from) {
                            if (next.to != span.to) {
                                if (working == spans)
                                    working = spans.slice();
                                // Followed by a partially overlapping larger span. Split that
                                // span.
                                working[j] = next.copy(next.from, span.to);
                                insertAhead(working, j + 1, next.copy(span.to, next.to));
                            }
                            continue;
                        }
                        else {
                            if (next.from < span.to) {
                                if (working == spans)
                                    working = spans.slice();
                                // The end of this one overlaps with a subsequent span. Split
                                // this one.
                                working[i] = span.copy(span.from, next.from);
                                insertAhead(working, j, span.copy(next.from, span.to));
                            }
                            break;
                        }
                    }
            }
            return working;
        }
        function insertAhead(array, i, deco) {
            while (i < array.length && byPos(deco, array[i]) > 0)
                i++;
            array.splice(i, 0, deco);
        }
// Get the decorations associated with the current props of a view.
        function viewDecorations(view) {
            let found = [];
            view.someProp("decorations", f => {
                let result = f(view.state);
                if (result && result != empty)
                    found.push(result);
            });
            if (view.cursorWrapper)
                found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
            return DecorationGroup.from(found);
        }

        const observeOptions = {
            childList: true,
            characterData: true,
            characterDataOldValue: true,
            attributes: true,
            attributeOldValue: true,
            subtree: true
        };
// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
        const useCharData = ie && ie_version <= 11;
        class SelectionState {
            constructor() {
                this.anchorNode = null;
                this.anchorOffset = 0;
                this.focusNode = null;
                this.focusOffset = 0;
            }
            set(sel) {
                this.anchorNode = sel.anchorNode;
                this.anchorOffset = sel.anchorOffset;
                this.focusNode = sel.focusNode;
                this.focusOffset = sel.focusOffset;
            }
            clear() {
                this.anchorNode = this.focusNode = null;
            }
            eq(sel) {
                return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
                    sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
            }
        }
        class DOMObserver {
            constructor(view, handleDOMChange) {
                this.view = view;
                this.handleDOMChange = handleDOMChange;
                this.queue = [];
                this.flushingSoon = -1;
                this.observer = null;
                this.currentSelection = new SelectionState;
                this.onCharData = null;
                this.suppressingSelectionUpdates = false;
                this.observer = window.MutationObserver &&
                    new window.MutationObserver(mutations => {
                        for (let i = 0; i < mutations.length; i++)
                            this.queue.push(mutations[i]);
                        // IE11 will sometimes (on backspacing out a single character
                        // text node after a BR node) call the observer callback
                        // before actually updating the DOM, which will cause
                        // ProseMirror to miss the change (see #930)
                        if (ie && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                            m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                            this.flushSoon();
                        else
                            this.flush();
                    });
                if (useCharData) {
                    this.onCharData = e => {
                        this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                        this.flushSoon();
                    };
                }
                this.onSelectionChange = this.onSelectionChange.bind(this);
            }
            flushSoon() {
                if (this.flushingSoon < 0)
                    this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
            }
            forceFlush() {
                if (this.flushingSoon > -1) {
                    window.clearTimeout(this.flushingSoon);
                    this.flushingSoon = -1;
                    this.flush();
                }
            }
            start() {
                if (this.observer)
                    this.observer.observe(this.view.dom, observeOptions);
                if (this.onCharData)
                    this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
                this.connectSelection();
            }
            stop() {
                if (this.observer) {
                    let take = this.observer.takeRecords();
                    if (take.length) {
                        for (let i = 0; i < take.length; i++)
                            this.queue.push(take[i]);
                        window.setTimeout(() => this.flush(), 20);
                    }
                    this.observer.disconnect();
                }
                if (this.onCharData)
                    this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
                this.disconnectSelection();
            }
            connectSelection() {
                this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            }
            disconnectSelection() {
                this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            }
            suppressSelectionUpdates() {
                this.suppressingSelectionUpdates = true;
                setTimeout(() => this.suppressingSelectionUpdates = false, 50);
            }
            onSelectionChange() {
                if (!hasFocusAndSelection(this.view))
                    return;
                if (this.suppressingSelectionUpdates)
                    return selectionToDOM(this.view);
                // Deletions on IE11 fire their events in the wrong order, giving
                // us a selection change event before the DOM changes are
                // reported.
                if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
                    let sel = this.view.domSelection();
                    // Selection.isCollapsed isn't reliable on IE
                    if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                        return this.flushSoon();
                }
                this.flush();
            }
            setCurSelection() {
                this.currentSelection.set(this.view.domSelection());
            }
            ignoreSelectionChange(sel) {
                if (sel.rangeCount == 0)
                    return true;
                let container = sel.getRangeAt(0).commonAncestorContainer;
                let desc = this.view.docView.nearestDesc(container);
                if (desc && desc.ignoreMutation({
                    type: "selection",
                    target: container.nodeType == 3 ? container.parentNode : container
                })) {
                    this.setCurSelection();
                    return true;
                }
            }
            flush() {
                if (!this.view.docView || this.flushingSoon > -1)
                    return;
                let mutations = this.observer ? this.observer.takeRecords() : [];
                if (this.queue.length) {
                    mutations = this.queue.concat(mutations);
                    this.queue.length = 0;
                }
                let sel = this.view.domSelection();
                let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(this.view) && !this.ignoreSelectionChange(sel);
                let from = -1, to = -1, typeOver = false, added = [];
                if (this.view.editable) {
                    for (let i = 0; i < mutations.length; i++) {
                        let result = this.registerMutation(mutations[i], added);
                        if (result) {
                            from = from < 0 ? result.from : Math.min(result.from, from);
                            to = to < 0 ? result.to : Math.max(result.to, to);
                            if (result.typeOver)
                                typeOver = true;
                        }
                    }
                }
                if (gecko && added.length > 1) {
                    let brs = added.filter(n => n.nodeName == "BR");
                    if (brs.length == 2) {
                        let a = brs[0], b = brs[1];
                        if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                            b.remove();
                        else
                            a.remove();
                    }
                }
                if (from > -1 || newSel) {
                    if (from > -1) {
                        this.view.docView.markDirty(from, to);
                        checkCSS(this.view);
                    }
                    this.handleDOMChange(from, to, typeOver, added);
                    if (this.view.docView && this.view.docView.dirty)
                        this.view.updateState(this.view.state);
                    else if (!this.currentSelection.eq(sel))
                        selectionToDOM(this.view);
                    this.currentSelection.set(sel);
                }
            }
            registerMutation(mut, added) {
                // Ignore mutations inside nodes that were already noted as inserted
                if (added.indexOf(mut.target) > -1)
                    return null;
                let desc = this.view.docView.nearestDesc(mut.target);
                if (mut.type == "attributes" &&
                    (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                        // Firefox sometimes fires spurious events for null/empty styles
                        (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
                    return null;
                if (!desc || desc.ignoreMutation(mut))
                    return null;
                if (mut.type == "childList") {
                    for (let i = 0; i < mut.addedNodes.length; i++)
                        added.push(mut.addedNodes[i]);
                    if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                        return { from: desc.posBefore, to: desc.posAfter };
                    let prev = mut.previousSibling, next = mut.nextSibling;
                    if (ie && ie_version <= 11 && mut.addedNodes.length) {
                        // IE11 gives us incorrect next/prev siblings for some
                        // insertions, so if there are added nodes, recompute those
                        for (let i = 0; i < mut.addedNodes.length; i++) {
                            let { previousSibling, nextSibling } = mut.addedNodes[i];
                            if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                                prev = previousSibling;
                            if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                                next = nextSibling;
                        }
                    }
                    let fromOffset = prev && prev.parentNode == mut.target
                        ? domIndex(prev) + 1 : 0;
                    let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
                    let toOffset = next && next.parentNode == mut.target
                        ? domIndex(next) : mut.target.childNodes.length;
                    let to = desc.localPosFromDOM(mut.target, toOffset, 1);
                    return { from, to };
                }
                else if (mut.type == "attributes") {
                    return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
                }
                else { // "characterData"
                    return {
                        from: desc.posAtStart,
                        to: desc.posAtEnd,
                        // An event was generated for a text change that didn't change
                        // any text. Mark the dom change to fall back to assuming the
                        // selection was typed over with an identical value if it can't
                        // find another change.
                        typeOver: mut.target.nodeValue == mut.oldValue
                    };
                }
            }
        }
        let cssChecked = false;
        function checkCSS(view) {
            if (cssChecked)
                return;
            cssChecked = true;
            if (getComputedStyle(view.dom).whiteSpace == "normal")
                console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
        }

// Note that all referencing and parsing is done with the
// start-of-operation selection and document, since that's the one
// that the DOM represents. If any changes came in in the meantime,
// the modification is mapped over those before it is applied, in
// readDOMChange.
        function parseBetween(view, from_, to_) {
            let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
            let domSel = view.domSelection();
            let find;
            let anchor = domSel.anchorNode;
            if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
                find = [{ node: anchor, offset: domSel.anchorOffset }];
                if (!selectionCollapsed(domSel))
                    find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
            }
            // Work around issue in Chrome where backspacing sometimes replaces
            // the deleted content with a random BR node (issues #799, #831)
            if (chrome && view.input.lastKeyCode === 8) {
                for (let off = toOffset; off > fromOffset; off--) {
                    let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                    if (node.nodeName == "BR" && !desc) {
                        toOffset = off;
                        break;
                    }
                    if (!desc || desc.size)
                        break;
                }
            }
            let startDoc = view.state.doc;
            let parser = view.someProp("domParser") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);
            let $from = startDoc.resolve(from);
            let sel = null, doc = parser.parse(parent, {
                topNode: $from.parent,
                topMatch: $from.parent.contentMatchAt($from.index()),
                topOpen: true,
                from: fromOffset,
                to: toOffset,
                preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
                findPositions: find,
                ruleFromNode,
                context: $from
            });
            if (find && find[0].pos != null) {
                let anchor = find[0].pos, head = find[1] && find[1].pos;
                if (head == null)
                    head = anchor;
                sel = { anchor: anchor + from, head: head + from };
            }
            return { doc, sel, from, to };
        }
        function ruleFromNode(dom) {
            let desc = dom.pmViewDesc;
            if (desc) {
                return desc.parseRule();
            }
            else if (dom.nodeName == "BR" && dom.parentNode) {
                // Safari replaces the list item or table cell with a BR
                // directly in the list node (?!) if you delete the last
                // character in a list item or table cell (#708, #862)
                if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                    let skip = document.createElement("div");
                    skip.appendChild(document.createElement("li"));
                    return { skip };
                }
                else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                    return { ignore: true };
                }
            }
            else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
                return { ignore: true };
            }
            return null;
        }
        function readDOMChange(view, from, to, typeOver, addedNodes) {
            if (from < 0) {
                let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
                let newSel = selectionFromDOM(view, origin);
                if (newSel && !view.state.selection.eq(newSel)) {
                    let tr = view.state.tr.setSelection(newSel);
                    if (origin == "pointer")
                        tr.setMeta("pointer", true);
                    else if (origin == "key")
                        tr.scrollIntoView();
                    view.dispatch(tr);
                }
                return;
            }
            let $before = view.state.doc.resolve(from);
            let shared = $before.sharedDepth(to);
            from = $before.before(shared + 1);
            to = view.state.doc.resolve(to).after(shared + 1);
            let sel = view.state.selection;
            let parse = parseBetween(view, from, to);
            // Chrome sometimes leaves the cursor before the inserted text when
            // composing after a cursor wrapper. This moves it forward.
            if (chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from) {
                let text = view.cursorWrapper.deco.type.toDOM.nextSibling;
                let size = text && text.nodeValue ? text.nodeValue.length : 1;
                parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
            }
            let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
            let preferredPos, preferredSide;
            // Prefer anchoring to end when Backspace is pressed
            if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
                preferredPos = view.state.selection.to;
                preferredSide = "end";
            }
            else {
                preferredPos = view.state.selection.from;
                preferredSide = "start";
            }
            view.input.lastKeyCode = null;
            let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
            if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
                addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P") &&
                (!change || change.endA >= change.endB) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
                view.input.lastIOSEnter = 0;
                return;
            }
            if (!change) {
                if (typeOver && sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
                    !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
                    change = { start: sel.from, endA: sel.to, endB: sel.to };
                }
                else {
                    if (parse.sel) {
                        let sel = resolveSelection(view, view.state.doc, parse.sel);
                        if (sel && !sel.eq(view.state.selection))
                            view.dispatch(view.state.tr.setSelection(sel));
                    }
                    return;
                }
            }
            view.input.domChangeCount++;
            // Handle the case where overwriting a selection by typing matches
            // the start or end of the selected content, creating a change
            // that's smaller than what was actually overwritten.
            if (view.state.selection.from < view.state.selection.to &&
                change.start == change.endB &&
                view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {
                if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
                    view.state.selection.from >= parse.from) {
                    change.start = view.state.selection.from;
                }
                else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
                    view.state.selection.to <= parse.to) {
                    change.endB += (view.state.selection.to - change.endA);
                    change.endA = view.state.selection.to;
                }
            }
            // IE11 will insert a non-breaking space _ahead_ of the space after
            // the cursor space when adding a space before another space. When
            // that happened, adjust the change to cover the space instead.
            if (ie && ie_version <= 11 && change.endB == change.start + 1 &&
                change.endA == change.start && change.start > parse.from &&
                parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
                change.start--;
                change.endA--;
                change.endB--;
            }
            let $from = parse.doc.resolveNoCache(change.start - parse.from);
            let $to = parse.doc.resolveNoCache(change.endB - parse.from);
            let $fromA = doc.resolve(change.start);
            let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
            let nextSel;
            // If this looks like the effect of pressing Enter (or was recorded
            // as being an iOS enter press), just dispatch an Enter key instead.
            if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
                        (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
                    (!inlineChange && $from.pos < parse.doc.content.size &&
                        (nextSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
                        nextSel.head == $to.pos)) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
                view.input.lastIOSEnter = 0;
                return;
            }
            // Same for backspace
            if (view.state.selection.anchor > change.start &&
                looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
                if (android && chrome)
                    view.domObserver.suppressSelectionUpdates(); // #820
                return;
            }
            // Chrome Android will occasionally, during composition, delete the
            // entire composition and then immediately insert it again. This is
            // used to detect that situation.
            if (chrome && android && change.endB == change.start)
                view.input.lastAndroidDelete = Date.now();
            // This tries to detect Android virtual keyboard
            // enter-and-pick-suggestion action. That sometimes (see issue
            // #1059) first fires a DOM mutation, before moving the selection to
            // the newly created block. And then, because ProseMirror cleans up
            // the DOM selection, it gives up moving the selection entirely,
            // leaving the cursor in the wrong place. When that happens, we drop
            // the new paragraph from the initial change, and fire a simulated
            // enter key afterwards.
            if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
                parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
                change.endB -= 2;
                $to = parse.doc.resolveNoCache(change.endB - parse.from);
                setTimeout(() => {
                    view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
                }, 20);
            }
            let chFrom = change.start, chTo = change.endA;
            let tr, storedMarks, markChange;
            if (inlineChange) {
                if ($from.pos == $to.pos) { // Deletion
                    // IE11 sometimes weirdly moves the DOM selection around after
                    // backspacing out the first element in a textblock
                    if (ie && ie_version <= 11 && $from.parentOffset == 0) {
                        view.domObserver.suppressSelectionUpdates();
                        setTimeout(() => selectionToDOM(view), 20);
                    }
                    tr = view.state.tr.delete(chFrom, chTo);
                    storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
                }
                else if ( // Adding or removing a mark
                    change.endA == change.endB &&
                    (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
                    tr = view.state.tr;
                    if (markChange.type == "add")
                        tr.addMark(chFrom, chTo, markChange.mark);
                    else
                        tr.removeMark(chFrom, chTo, markChange.mark);
                }
                else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                    // Both positions in the same text node -- simply insert text
                    let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                    if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                        return;
                    tr = view.state.tr.insertText(text, chFrom, chTo);
                }
            }
            if (!tr)
                tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
            if (parse.sel) {
                let sel = resolveSelection(view, tr.doc, parse.sel);
                // Chrome Android will sometimes, during composition, report the
                // selection in the wrong place. If it looks like that is
                // happening, don't update the selection.
                // Edge just doesn't move the cursor forward when you start typing
                // in an empty block or between br nodes.
                if (sel && !(chrome && android && view.composing && sel.empty &&
                    (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
                    (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
                    ie && sel.empty && sel.head == chFrom))
                    tr.setSelection(sel);
            }
            if (storedMarks)
                tr.ensureMarks(storedMarks);
            view.dispatch(tr.scrollIntoView());
        }
        function resolveSelection(view, doc, parsedSel) {
            if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
                return null;
            return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
        }
// Given two same-length, non-empty fragments of inline content,
// determine whether the first could be created from the second by
// removing or adding a single mark type.
        function isMarkChange(cur, prev) {
            let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
            let added = curMarks, removed = prevMarks, type, mark, update;
            for (let i = 0; i < prevMarks.length; i++)
                added = prevMarks[i].removeFromSet(added);
            for (let i = 0; i < curMarks.length; i++)
                removed = curMarks[i].removeFromSet(removed);
            if (added.length == 1 && removed.length == 0) {
                mark = added[0];
                type = "add";
                update = (node) => node.mark(mark.addToSet(node.marks));
            }
            else if (added.length == 0 && removed.length == 1) {
                mark = removed[0];
                type = "remove";
                update = (node) => node.mark(mark.removeFromSet(node.marks));
            }
            else {
                return null;
            }
            let updated = [];
            for (let i = 0; i < prev.childCount; i++)
                updated.push(update(prev.child(i)));
            if (prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated).eq(cur))
                return { mark, type };
        }
        function looksLikeJoin(old, start, end, $newStart, $newEnd) {
            if (!$newStart.parent.isTextblock ||
                // The content must have shrunk
                end - start <= $newEnd.pos - $newStart.pos ||
                // newEnd must point directly at or after the end of the block that newStart points into
                skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
                return false;
            let $start = old.resolve(start);
            // Start must be at the end of a block
            if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
                return false;
            let $next = old.resolve(skipClosingAndOpening($start, true, true));
            // The next textblock must start before end and end near it
            if (!$next.parent.isTextblock || $next.pos > end ||
                skipClosingAndOpening($next, true, false) < end)
                return false;
            // The fragments after the join point must match
            return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
        }
        function skipClosingAndOpening($pos, fromEnd, mayOpen) {
            let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
            while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
                depth--;
                end++;
                fromEnd = false;
            }
            if (mayOpen) {
                let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
                while (next && !next.isLeaf) {
                    next = next.firstChild;
                    end++;
                }
            }
            return end;
        }
        function findDiff(a, b, pos, preferredPos, preferredSide) {
            let start = a.findDiffStart(b, pos);
            if (start == null)
                return null;
            let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
            if (preferredSide == "end") {
                let adjust = Math.max(0, start - Math.min(endA, endB));
                preferredPos -= endA + adjust - start;
            }
            if (endA < start && a.size < b.size) {
                let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
                start -= move;
                endB = start + (endB - endA);
                endA = start;
            }
            else if (endB < start) {
                let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
                start -= move;
                endA = start + (endA - endB);
                endB = start;
            }
            return { start, endA, endB };
        }

        /**
         @internal
         */
        const __serializeForClipboard = serializeForClipboard;
        /**
         @internal
         */
        const __parseFromClipboard = parseFromClipboard;
        /**
         @internal
         */
        const __endComposition = endComposition;
        /**
         An editor view manages the DOM structure that represents an
         editable document. Its state and behavior are determined by its
         [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
         */
        class EditorView {
            /**
             Create a view. `place` may be a DOM node that the editor should
             be appended to, a function that will place it into the document,
             or an object whose `mount` property holds the node to use as the
             document container. If it is `null`, the editor will not be
             added to the document.
             */
            constructor(place, props) {
                this._root = null;
                /**
                 @internal
                 */
                this.focused = false;
                /**
                 Kludge used to work around a Chrome bug @internal
                 */
                this.trackWrites = null;
                this.mounted = false;
                /**
                 @internal
                 */
                this.markCursor = null;
                /**
                 @internal
                 */
                this.cursorWrapper = null;
                /**
                 @internal
                 */
                this.lastSelectedViewDesc = undefined;
                /**
                 @internal
                 */
                this.input = new InputState;
                this.prevDirectPlugins = [];
                this.pluginViews = [];
                /**
                 When editor content is being dragged, this object contains
                 information about the dragged slice and whether it is being
                 copied or moved. At any other time, it is null.
                 */
                this.dragging = null;
                this._props = props;
                this.state = props.state;
                this.directPlugins = props.plugins || [];
                this.directPlugins.forEach(checkStateComponent);
                this.dispatch = this.dispatch.bind(this);
                this.dom = (place && place.mount) || document.createElement("div");
                if (place) {
                    if (place.appendChild)
                        place.appendChild(this.dom);
                    else if (typeof place == "function")
                        place(this.dom);
                    else if (place.mount)
                        this.mounted = true;
                }
                this.editable = getEditable(this);
                updateCursorWrapper(this);
                this.nodeViews = buildNodeViews(this);
                this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
                this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
                this.domObserver.start();
                initInput(this);
                this.updatePluginViews();
            }
            /**
             Holds `true` when a
             [composition](https://w3c.github.io/uievents/#events-compositionevents)
             is active.
             */
            get composing() { return this.input.composing; }
            /**
             The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
             */
            get props() {
                if (this._props.state != this.state) {
                    let prev = this._props;
                    this._props = {};
                    for (let name in prev)
                        this._props[name] = prev[name];
                    this._props.state = this.state;
                }
                return this._props;
            }
            /**
             Update the view's props. Will immediately cause an update to
             the DOM.
             */
            update(props) {
                if (props.handleDOMEvents != this._props.handleDOMEvents)
                    ensureListeners(this);
                this._props = props;
                if (props.plugins) {
                    props.plugins.forEach(checkStateComponent);
                    this.directPlugins = props.plugins;
                }
                this.updateStateInner(props.state, true);
            }
            /**
             Update the view by updating existing props object with the object
             given as argument. Equivalent to `view.update(Object.assign({},
             view.props, props))`.
             */
            setProps(props) {
                let updated = {};
                for (let name in this._props)
                    updated[name] = this._props[name];
                updated.state = this.state;
                for (let name in props)
                    updated[name] = props[name];
                this.update(updated);
            }
            /**
             Update the editor's `state` prop, without touching any of the
             other props.
             */
            updateState(state) {
                this.updateStateInner(state, this.state.plugins != state.plugins);
            }
            updateStateInner(state, reconfigured) {
                let prev = this.state, redraw = false, updateSel = false;
                // When stored marks are added, stop composition, so that they can
                // be displayed.
                if (state.storedMarks && this.composing) {
                    clearComposition(this);
                    updateSel = true;
                }
                this.state = state;
                if (reconfigured) {
                    let nodeViews = buildNodeViews(this);
                    if (changedNodeViews(nodeViews, this.nodeViews)) {
                        this.nodeViews = nodeViews;
                        redraw = true;
                    }
                    ensureListeners(this);
                }
                this.editable = getEditable(this);
                updateCursorWrapper(this);
                let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
                let scroll = reconfigured ? "reset"
                    : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
                let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
                if (updateDoc || !state.selection.eq(prev.selection))
                    updateSel = true;
                let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
                if (updateSel) {
                    this.domObserver.stop();
                    // Work around an issue in Chrome, IE, and Edge where changing
                    // the DOM around an active selection puts it into a broken
                    // state where the thing the user sees differs from the
                    // selection reported by the Selection object (#710, #973,
                    // #1011, #1013, #1035).
                    let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing &&
                        !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
                    if (updateDoc) {
                        // If the node that the selection points into is written to,
                        // Chrome sometimes starts misreporting the selection, so this
                        // tracks that and forces a selection reset when our update
                        // did write to the node.
                        let chromeKludge = chrome ? (this.trackWrites = this.domSelection().focusNode) : null;
                        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                            this.docView.updateOuterDeco([]);
                            this.docView.destroy();
                            this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                        }
                        if (chromeKludge && !this.trackWrites)
                            forceSelUpdate = true;
                    }
                    // Work around for an issue where an update arriving right between
                    // a DOM selection change and the "selectionchange" event for it
                    // can cause a spurious DOM selection update, disrupting mouse
                    // drag selection.
                    if (forceSelUpdate ||
                        !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelection()) && anchorInRightPlace(this))) {
                        selectionToDOM(this, forceSelUpdate);
                    }
                    else {
                        syncNodeSelection(this, state.selection);
                        this.domObserver.setCurSelection();
                    }
                    this.domObserver.start();
                }
                this.updatePluginViews(prev);
                if (scroll == "reset") {
                    this.dom.scrollTop = 0;
                }
                else if (scroll == "to selection") {
                    let startDOM = this.domSelection().focusNode;
                    if (this.someProp("handleScrollToSelection", f => f(this))) ;
                    else if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {
                        let target = this.docView.domAfterPos(state.selection.from);
                        if (target.nodeType == 1)
                            scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
                    }
                    else {
                        scrollRectIntoView(this, this.coordsAtPos(state.selection.head, 1), startDOM);
                    }
                }
                else if (oldScrollPos) {
                    resetScrollPos(oldScrollPos);
                }
            }
            destroyPluginViews() {
                let view;
                while (view = this.pluginViews.pop())
                    if (view.destroy)
                        view.destroy();
            }
            updatePluginViews(prevState) {
                if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
                    this.prevDirectPlugins = this.directPlugins;
                    this.destroyPluginViews();
                    for (let i = 0; i < this.directPlugins.length; i++) {
                        let plugin = this.directPlugins[i];
                        if (plugin.spec.view)
                            this.pluginViews.push(plugin.spec.view(this));
                    }
                    for (let i = 0; i < this.state.plugins.length; i++) {
                        let plugin = this.state.plugins[i];
                        if (plugin.spec.view)
                            this.pluginViews.push(plugin.spec.view(this));
                    }
                }
                else {
                    for (let i = 0; i < this.pluginViews.length; i++) {
                        let pluginView = this.pluginViews[i];
                        if (pluginView.update)
                            pluginView.update(this, prevState);
                    }
                }
            }
            someProp(propName, f) {
                let prop = this._props && this._props[propName], value;
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
                for (let i = 0; i < this.directPlugins.length; i++) {
                    let prop = this.directPlugins[i].props[propName];
                    if (prop != null && (value = f ? f(prop) : prop))
                        return value;
                }
                let plugins = this.state.plugins;
                if (plugins)
                    for (let i = 0; i < plugins.length; i++) {
                        let prop = plugins[i].props[propName];
                        if (prop != null && (value = f ? f(prop) : prop))
                            return value;
                    }
            }
            /**
             Query whether the view has focus.
             */
            hasFocus() {
                return this.root.activeElement == this.dom;
            }
            /**
             Focus the editor.
             */
            focus() {
                this.domObserver.stop();
                if (this.editable)
                    focusPreventScroll(this.dom);
                selectionToDOM(this);
                this.domObserver.start();
            }
            /**
             Get the document root in which the editor exists. This will
             usually be the top-level `document`, but might be a [shadow
             DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
             root if the editor is inside one.
             */
            get root() {
                let cached = this._root;
                if (cached == null)
                    for (let search = this.dom.parentNode; search; search = search.parentNode) {
                        if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                            if (!search.getSelection)
                                Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                            return this._root = search;
                        }
                    }
                return cached || document;
            }
            /**
             Given a pair of viewport coordinates, return the document
             position that corresponds to them. May return null if the given
             coordinates aren't inside of the editor. When an object is
             returned, its `pos` property is the position nearest to the
             coordinates, and its `inside` property holds the position of the
             inner node that the position falls inside of, or -1 if it is at
             the top level, not in any node.
             */
            posAtCoords(coords) {
                return posAtCoords(this, coords);
            }
            /**
             Returns the viewport rectangle at a given document position.
             `left` and `right` will be the same number, as this returns a
             flat cursor-ish rectangle. If the position is between two things
             that aren't directly adjacent, `side` determines which element
             is used. When < 0, the element before the position is used,
             otherwise the element after.
             */
            coordsAtPos(pos, side = 1) {
                return coordsAtPos(this, pos, side);
            }
            /**
             Find the DOM position that corresponds to the given document
             position. When `side` is negative, find the position as close as
             possible to the content before the position. When positive,
             prefer positions close to the content after the position. When
             zero, prefer as shallow a position as possible.

             Note that you should **not** mutate the editor's internal DOM,
             only inspect it (and even that is usually not necessary).
             */
            domAtPos(pos, side = 0) {
                return this.docView.domFromPos(pos, side);
            }
            /**
             Find the DOM node that represents the document node after the
             given position. May return `null` when the position doesn't point
             in front of a node or if the node is inside an opaque node view.

             This is intended to be able to call things like
             `getBoundingClientRect` on that DOM node. Do **not** mutate the
             editor DOM directly, or add styling this way, since that will be
             immediately overriden by the editor as it redraws the node.
             */
            nodeDOM(pos) {
                let desc = this.docView.descAt(pos);
                return desc ? desc.nodeDOM : null;
            }
            /**
             Find the document position that corresponds to a given DOM
             position. (Whenever possible, it is preferable to inspect the
             document structure directly, rather than poking around in the
             DOM, but sometimes—for example when interpreting an event
             target—you don't have a choice.)

             The `bias` parameter can be used to influence which side of a DOM
             node to use when the position is inside a leaf node.
             */
            posAtDOM(node, offset, bias = -1) {
                let pos = this.docView.posFromDOM(node, offset, bias);
                if (pos == null)
                    throw new RangeError("DOM position not inside the editor");
                return pos;
            }
            /**
             Find out whether the selection is at the end of a textblock when
             moving in a given direction. When, for example, given `"left"`,
             it will return true if moving left from the current cursor
             position would leave that position's parent textblock. Will apply
             to the view's current state by default, but it is possible to
             pass a different state.
             */
            endOfTextblock(dir, state) {
                return endOfTextblock(this, state || this.state, dir);
            }
            /**
             Removes the editor from the DOM and destroys all [node
             views](https://prosemirror.net/docs/ref/#view.NodeView).
             */
            destroy() {
                if (!this.docView)
                    return;
                destroyInput(this);
                this.destroyPluginViews();
                if (this.mounted) {
                    this.docView.update(this.state.doc, [], viewDecorations(this), this);
                    this.dom.textContent = "";
                }
                else if (this.dom.parentNode) {
                    this.dom.parentNode.removeChild(this.dom);
                }
                this.docView.destroy();
                this.docView = null;
            }
            /**
             This is true when the view has been
             [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
             used anymore).
             */
            get isDestroyed() {
                return this.docView == null;
            }
            /**
             Used for testing.
             */
            dispatchEvent(event) {
                return dispatchEvent(this, event);
            }
            /**
             Dispatch a transaction. Will call
             [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
             when given, and otherwise defaults to applying the transaction to
             the current state and calling
             [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
             This method is bound to the view instance, so that it can be
             easily passed around.
             */
            dispatch(tr) {
                let dispatchTransaction = this._props.dispatchTransaction;
                if (dispatchTransaction)
                    dispatchTransaction.call(this, tr);
                else
                    this.updateState(this.state.apply(tr));
            }
            /**
             @internal
             */
            domSelection() {
                return this.root.getSelection();
            }
        }
        function computeDocDeco(view) {
            let attrs = Object.create(null);
            attrs.class = "ProseMirror";
            attrs.contenteditable = String(view.editable);
            attrs.translate = "no";
            view.someProp("attributes", value => {
                if (typeof value == "function")
                    value = value(view.state);
                if (value)
                    for (let attr in value) {
                        if (attr == "class")
                            attrs.class += " " + value[attr];
                        if (attr == "style") {
                            attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                        }
                        else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                            attrs[attr] = String(value[attr]);
                    }
            });
            return [Decoration.node(0, view.state.doc.content.size, attrs)];
        }
        function updateCursorWrapper(view) {
            if (view.markCursor) {
                let dom = document.createElement("img");
                dom.className = "ProseMirror-separator";
                dom.setAttribute("mark-placeholder", "true");
                dom.setAttribute("alt", "");
                view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
            }
            else {
                view.cursorWrapper = null;
            }
        }
        function getEditable(view) {
            return !view.someProp("editable", value => value(view.state) === false);
        }
        function selectionContextChanged(sel1, sel2) {
            let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
            return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
        }
        function buildNodeViews(view) {
            let result = Object.create(null);
            function add(obj) {
                for (let prop in obj)
                    if (!Object.prototype.hasOwnProperty.call(result, prop))
                        result[prop] = obj[prop];
            }
            view.someProp("nodeViews", add);
            view.someProp("markViews", add);
            return result;
        }
        function changedNodeViews(a, b) {
            let nA = 0, nB = 0;
            for (let prop in a) {
                if (a[prop] != b[prop])
                    return true;
                nA++;
            }
            for (let _ in b)
                nB++;
            return nA != nB;
        }
        function checkStateComponent(plugin) {
            if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
                throw new RangeError("Plugins passed directly to the view must not have a state component");
        }




        /***/ }),

    /***/ "./node_modules/@tiptap/core/node_modules/prosemirror-view/node_modules/prosemirror-transform/dist/index.js":
    /*!******************************************************************************************************************!*\
  !*** ./node_modules/@tiptap/core/node_modules/prosemirror-view/node_modules/prosemirror-transform/dist/index.js ***!
  \******************************************************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "AddMarkStep": () => (/* binding */ AddMarkStep),
            /* harmony export */   "AddNodeMarkStep": () => (/* binding */ AddNodeMarkStep),
            /* harmony export */   "AttrStep": () => (/* binding */ AttrStep),
            /* harmony export */   "MapResult": () => (/* binding */ MapResult),
            /* harmony export */   "Mapping": () => (/* binding */ Mapping),
            /* harmony export */   "RemoveMarkStep": () => (/* binding */ RemoveMarkStep),
            /* harmony export */   "RemoveNodeMarkStep": () => (/* binding */ RemoveNodeMarkStep),
            /* harmony export */   "ReplaceAroundStep": () => (/* binding */ ReplaceAroundStep),
            /* harmony export */   "ReplaceStep": () => (/* binding */ ReplaceStep),
            /* harmony export */   "Step": () => (/* binding */ Step),
            /* harmony export */   "StepMap": () => (/* binding */ StepMap),
            /* harmony export */   "StepResult": () => (/* binding */ StepResult),
            /* harmony export */   "Transform": () => (/* binding */ Transform),
            /* harmony export */   "TransformError": () => (/* binding */ TransformError),
            /* harmony export */   "canJoin": () => (/* binding */ canJoin),
            /* harmony export */   "canSplit": () => (/* binding */ canSplit),
            /* harmony export */   "dropPoint": () => (/* binding */ dropPoint),
            /* harmony export */   "findWrapping": () => (/* binding */ findWrapping),
            /* harmony export */   "insertPoint": () => (/* binding */ insertPoint),
            /* harmony export */   "joinPoint": () => (/* binding */ joinPoint),
            /* harmony export */   "liftTarget": () => (/* binding */ liftTarget),
            /* harmony export */   "replaceStep": () => (/* binding */ replaceStep)
            /* harmony export */ });
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");


// Recovery values encode a range index and an offset. They are
// represented as numbers, because tons of them will be created when
// mapping, for example, a large number of decorations. The number's
// lower 16 bits provide the index, the remaining bits the offset.
//
// Note: We intentionally don't use bit shift operators to en- and
// decode these, since those clip to 32 bits, which we might in rare
// cases want to overflow. A 64-bit float can represent 48-bit
// integers precisely.
        const lower16 = 0xffff;
        const factor16 = Math.pow(2, 16);
        function makeRecover(index, offset) { return index + offset * factor16; }
        function recoverIndex(value) { return value & lower16; }
        function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
        const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
        /**
         An object representing a mapped position with extra
         information.
         */
        class MapResult {
            /**
             @internal
             */
            constructor(
                /**
                 The mapped version of the position.
                 */
                pos,
                /**
                 @internal
                 */
                delInfo,
                /**
                 @internal
                 */
                recover) {
                this.pos = pos;
                this.delInfo = delInfo;
                this.recover = recover;
            }
            /**
             Tells you whether the position was deleted, that is, whether the
             step removed the token on the side queried (via the `assoc`)
             argument from the document.
             */
            get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
            /**
             Tells you whether the token before the mapped position was deleted.
             */
            get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
            /**
             True when the token after the mapped position was deleted.
             */
            get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
            /**
             Tells whether any of the steps mapped through deletes across the
             position (including both the token before and after the
             position).
             */
            get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
        }
        /**
         A map describing the deletions and insertions made by a step, which
         can be used to find the correspondence between positions in the
         pre-step version of a document and the same position in the
         post-step version.
         */
        class StepMap {
            /**
             Create a position map. The modifications to the document are
             represented as an array of numbers, in which each group of three
             represents a modified chunk as `[start, oldSize, newSize]`.
             */
            constructor(
                /**
                 @internal
                 */
                ranges,
                /**
                 @internal
                 */
                inverted = false) {
                this.ranges = ranges;
                this.inverted = inverted;
                if (!ranges.length && StepMap.empty)
                    return StepMap.empty;
            }
            /**
             @internal
             */
            recover(value) {
                let diff = 0, index = recoverIndex(value);
                if (!this.inverted)
                    for (let i = 0; i < index; i++)
                        diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
                return this.ranges[index * 3] + diff + recoverOffset(value);
            }
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            map(pos, assoc = 1) { return this._map(pos, assoc, true); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                    if (pos <= end) {
                        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                        let result = start + diff + (side < 0 ? 0 : newSize);
                        if (simple)
                            return result;
                        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                        let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                        if (assoc < 0 ? pos != start : pos != end)
                            del |= DEL_SIDE;
                        return new MapResult(result, del, recover);
                    }
                    diff += newSize - oldSize;
                }
                return simple ? pos + diff : new MapResult(pos + diff, 0, null);
            }
            /**
             @internal
             */
            touches(pos, recover) {
                let diff = 0, index = recoverIndex(recover);
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                    if (pos <= end && i == index * 3)
                        return true;
                    diff += this.ranges[i + newIndex] - oldSize;
                }
                return false;
            }
            /**
             Calls the given function on each of the changed ranges included in
             this map.
             */
            forEach(f) {
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                    diff += newSize - oldSize;
                }
            }
            /**
             Create an inverted version of this map. The result can be used to
             map positions in the post-step document to the pre-step document.
             */
            invert() {
                return new StepMap(this.ranges, !this.inverted);
            }
            /**
             @internal
             */
            toString() {
                return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
            }
            /**
             Create a map that moves all positions by offset `n` (which may be
             negative). This can be useful when applying steps meant for a
             sub-document to a larger document, or vice-versa.
             */
            static offset(n) {
                return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
            }
        }
        /**
         A StepMap that contains no changed ranges.
         */
        StepMap.empty = new StepMap([]);
        /**
         A mapping represents a pipeline of zero or more [step
         maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
         handling mapping positions through a series of steps in which some
         steps are inverted versions of earlier steps. (This comes up when
         ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
         collaboration or history management.)
         */
        class Mapping {
            /**
             Create a new mapping with the given position maps.
             */
            constructor(
                /**
                 The step maps in this mapping.
                 */
                maps = [],
                /**
                 @internal
                 */
                mirror,
                /**
                 The starting position in the `maps` array, used when `map` or
                 `mapResult` is called.
                 */
                from = 0,
                /**
                 The end position in the `maps` array.
                 */
                to = maps.length) {
                this.maps = maps;
                this.mirror = mirror;
                this.from = from;
                this.to = to;
            }
            /**
             Create a mapping that maps only through a part of this one.
             */
            slice(from = 0, to = this.maps.length) {
                return new Mapping(this.maps, this.mirror, from, to);
            }
            /**
             @internal
             */
            copy() {
                return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
            }
            /**
             Add a step map to the end of this mapping. If `mirrors` is
             given, it should be the index of the step map that is the mirror
             image of this one.
             */
            appendMap(map, mirrors) {
                this.to = this.maps.push(map);
                if (mirrors != null)
                    this.setMirror(this.maps.length - 1, mirrors);
            }
            /**
             Add all the step maps in a given mapping to this one (preserving
             mirroring information).
             */
            appendMapping(mapping) {
                for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
                }
            }
            /**
             Finds the offset of the step map that mirrors the map at the
             given offset, in this mapping (as per the second argument to
             `appendMap`).
             */
            getMirror(n) {
                if (this.mirror)
                    for (let i = 0; i < this.mirror.length; i++)
                        if (this.mirror[i] == n)
                            return this.mirror[i + (i % 2 ? -1 : 1)];
            }
            /**
             @internal
             */
            setMirror(n, m) {
                if (!this.mirror)
                    this.mirror = [];
                this.mirror.push(n, m);
            }
            /**
             Append the inverse of the given mapping to this one.
             */
            appendMappingInverted(mapping) {
                for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
                }
            }
            /**
             Create an inverted version of this mapping.
             */
            invert() {
                let inverse = new Mapping;
                inverse.appendMappingInverted(this);
                return inverse;
            }
            /**
             Map a position through this mapping.
             */
            map(pos, assoc = 1) {
                if (this.mirror)
                    return this._map(pos, assoc, true);
                for (let i = this.from; i < this.to; i++)
                    pos = this.maps[i].map(pos, assoc);
                return pos;
            }
            /**
             Map a position through this mapping, returning a mapping
             result.
             */
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let delInfo = 0;
                for (let i = this.from; i < this.to; i++) {
                    let map = this.maps[i], result = map.mapResult(pos, assoc);
                    if (result.recover != null) {
                        let corr = this.getMirror(i);
                        if (corr != null && corr > i && corr < this.to) {
                            i = corr;
                            pos = this.maps[corr].recover(result.recover);
                            continue;
                        }
                    }
                    delInfo |= result.delInfo;
                    pos = result.pos;
                }
                return simple ? pos : new MapResult(pos, delInfo, null);
            }
        }

        const stepsByID = Object.create(null);
        /**
         A step object represents an atomic change. It generally applies
         only to the document it was created for, since the positions
         stored in it will only make sense for that document.

         New steps are defined by creating classes that extend `Step`,
         overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
         methods, and registering your class with a unique
         JSON-serialization identifier using
         [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
         */
        class Step {
            /**
             Get the step map that represents the changes made by this step,
             and which can be used to transform between positions in the old
             and the new document.
             */
            getMap() { return StepMap.empty; }
            /**
             Try to merge this step with another one, to be applied directly
             after it. Returns the merged step when possible, null if the
             steps can't be merged.
             */
            merge(other) { return null; }
            /**
             Deserialize a step from its JSON representation. Will call
             through to the step class' own implementation of this method.
             */
            static fromJSON(schema, json) {
                if (!json || !json.stepType)
                    throw new RangeError("Invalid input for Step.fromJSON");
                let type = stepsByID[json.stepType];
                if (!type)
                    throw new RangeError(`No step type ${json.stepType} defined`);
                return type.fromJSON(schema, json);
            }
            /**
             To be able to serialize steps to JSON, each step needs a string
             ID to attach to its JSON representation. Use this method to
             register an ID for your step classes. Try to pick something
             that's unlikely to clash with steps from other modules.
             */
            static jsonID(id, stepClass) {
                if (id in stepsByID)
                    throw new RangeError("Duplicate use of step JSON ID " + id);
                stepsByID[id] = stepClass;
                stepClass.prototype.jsonID = id;
                return stepClass;
            }
        }
        /**
         The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
         new document or a failure value.
         */
        class StepResult {
            /**
             @internal
             */
            constructor(
                /**
                 The transformed document, if successful.
                 */
                doc,
                /**
                 The failure message, if unsuccessful.
                 */
                failed) {
                this.doc = doc;
                this.failed = failed;
            }
            /**
             Create a successful step result.
             */
            static ok(doc) { return new StepResult(doc, null); }
            /**
             Create a failed step result.
             */
            static fail(message) { return new StepResult(null, message); }
            /**
             Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
             arguments. Create a successful result if it succeeds, and a
             failed one if it throws a `ReplaceError`.
             */
            static fromReplace(doc, from, to, slice) {
                try {
                    return StepResult.ok(doc.replace(from, to, slice));
                }
                catch (e) {
                    if (e instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError)
                        return StepResult.fail(e.message);
                    throw e;
                }
            }
        }

        function mapFragment(fragment, f, parent) {
            let mapped = [];
            for (let i = 0; i < fragment.childCount; i++) {
                let child = fragment.child(i);
                if (child.content.size)
                    child = child.copy(mapFragment(child.content, f, child));
                if (child.isInline)
                    child = f(child, parent, i);
                mapped.push(child);
            }
            return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(mapped);
        }
        /**
         Add a mark to all inline content between two positions.
         */
        class AddMarkStep extends Step {
            /**
             Create a mark step.
             */
            constructor(
                /**
                 The start of the marked range.
                 */
                from,
                /**
                 The end of the marked range.
                 */
                to,
                /**
                 The mark to add.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
                let parent = $from.node($from.sharedDepth(this.to));
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, (node, parent) => {
                    if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                        return node;
                    return node.mark(this.mark.addToSet(node.marks));
                }, parent), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new RemoveMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new AddMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof AddMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "addMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for AddMarkStep.fromJSON");
                return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("addMark", AddMarkStep);
        /**
         Remove a mark from all inline content between two positions.
         */
        class RemoveMarkStep extends Step {
            /**
             Create a mark-removing step.
             */
            constructor(
                /**
                 The start of the unmarked range.
                 */
                from,
                /**
                 The end of the unmarked range.
                 */
                to,
                /**
                 The mark to remove.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to);
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, node => {
                    return node.mark(this.mark.removeFromSet(node.marks));
                }, doc), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new AddMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new RemoveMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof RemoveMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "removeMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
                return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("removeMark", RemoveMarkStep);
        /**
         Add a mark to a specific node.
         */
        class AddNodeMarkStep extends Step {
            /**
             Create a node mark step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The mark to add.
                 */
                mark) {
                super();
                this.pos = pos;
                this.mark = mark;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at mark step's position");
                let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            invert(doc) {
                let node = doc.nodeAt(this.pos);
                if (node) {
                    let newSet = this.mark.addToSet(node.marks);
                    if (newSet.length == node.marks.length) {
                        for (let i = 0; i < node.marks.length; i++)
                            if (!node.marks[i].isInSet(newSet))
                                return new AddNodeMarkStep(this.pos, node.marks[i]);
                        return new AddNodeMarkStep(this.pos, this.mark);
                    }
                }
                return new RemoveNodeMarkStep(this.pos, this.mark);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
            }
            toJSON() {
                return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.pos != "number")
                    throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
                return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("addNodeMark", AddNodeMarkStep);
        /**
         Remove a mark from a specific node.
         */
        class RemoveNodeMarkStep extends Step {
            /**
             Create a mark-removing step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The mark to remove.
                 */
                mark) {
                super();
                this.pos = pos;
                this.mark = mark;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at mark step's position");
                let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            invert(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node || !this.mark.isInSet(node.marks))
                    return this;
                return new AddNodeMarkStep(this.pos, this.mark);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
            }
            toJSON() {
                return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.pos != "number")
                    throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
                return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

        /**
         Replace a part of the document with a slice of new content.
         */
        class ReplaceStep extends Step {
            /**
             The given `slice` should fit the 'gap' between `from` and
             `to`—the depths must line up, and the surrounding nodes must be
             able to be joined with the open sides of the slice. When
             `structure` is true, the step will fail if the content between
             from and to is not just a sequence of closing and then opening
             tokens (this is to guard against rebased replace steps
             overwriting something they weren't supposed to).
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.slice = slice;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && contentBetween(doc, this.from, this.to))
                    return StepResult.fail("Structure replace would overwrite content");
                return StepResult.fromReplace(doc, this.from, this.to, this.slice);
            }
            getMap() {
                return new StepMap([this.from, this.to - this.from, this.slice.size]);
            }
            invert(doc) {
                return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deletedAcross && to.deletedAcross)
                    return null;
                return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
            }
            merge(other) {
                if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                    return null;
                if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                    return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
                }
                else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                    return new ReplaceStep(other.from, this.to, slice, this.structure);
                }
                else {
                    return null;
                }
            }
            toJSON() {
                let json = { stepType: "replace", from: this.from, to: this.to };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for ReplaceStep.fromJSON");
                return new ReplaceStep(json.from, json.to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), !!json.structure);
            }
        }
        Step.jsonID("replace", ReplaceStep);
        /**
         Replace a part of the document with a slice of content, but
         preserve a range of the replaced content by moving it into the
         slice.
         */
        class ReplaceAroundStep extends Step {
            /**
             Create a replace-around step with the given range and gap.
             `insert` should be the point in the slice into which the content
             of the gap should be moved. `structure` has the same meaning as
             it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The start of preserved range.
                 */
                gapFrom,
                /**
                 The end of preserved range.
                 */
                gapTo,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 The position in the slice where the preserved range should be
                 inserted.
                 */
                insert,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.gapFrom = gapFrom;
                this.gapTo = gapTo;
                this.slice = slice;
                this.insert = insert;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                    contentBetween(doc, this.gapTo, this.to)))
                    return StepResult.fail("Structure gap-replace would overwrite content");
                let gap = doc.slice(this.gapFrom, this.gapTo);
                if (gap.openStart || gap.openEnd)
                    return StepResult.fail("Gap is not a flat range");
                let inserted = this.slice.insertAt(this.insert, gap.content);
                if (!inserted)
                    return StepResult.fail("Content does not fit in gap");
                return StepResult.fromReplace(doc, this.from, this.to, inserted);
            }
            getMap() {
                return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                    this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
            }
            invert(doc) {
                let gap = this.gapTo - this.gapFrom;
                return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
                if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                    return null;
                return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
            }
            toJSON() {
                let json = { stepType: "replaceAround", from: this.from, to: this.to,
                    gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number" ||
                    typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                    throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
                return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
            }
        }
        Step.jsonID("replaceAround", ReplaceAroundStep);
        function contentBetween(doc, from, to) {
            let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
            while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
                depth--;
                dist--;
            }
            if (dist > 0) {
                let next = $from.node(depth).maybeChild($from.indexAfter(depth));
                while (dist > 0) {
                    if (!next || next.isLeaf)
                        return true;
                    next = next.firstChild;
                    dist--;
                }
            }
            return false;
        }

        function addMark(tr, from, to, mark) {
            let removed = [], added = [];
            let removing, adding;
            tr.doc.nodesBetween(from, to, (node, pos, parent) => {
                if (!node.isInline)
                    return;
                let marks = node.marks;
                if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                    let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                    let newSet = mark.addToSet(marks);
                    for (let i = 0; i < marks.length; i++) {
                        if (!marks[i].isInSet(newSet)) {
                            if (removing && removing.to == start && removing.mark.eq(marks[i]))
                                removing.to = end;
                            else
                                removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                        }
                    }
                    if (adding && adding.to == start)
                        adding.to = end;
                    else
                        added.push(adding = new AddMarkStep(start, end, mark));
                }
            });
            removed.forEach(s => tr.step(s));
            added.forEach(s => tr.step(s));
        }
        function removeMark(tr, from, to, mark) {
            let matched = [], step = 0;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (!node.isInline)
                    return;
                step++;
                let toRemove = null;
                if (mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType) {
                    let set = node.marks, found;
                    while (found = mark.isInSet(set)) {
                        (toRemove || (toRemove = [])).push(found);
                        set = found.removeFromSet(set);
                    }
                }
                else if (mark) {
                    if (mark.isInSet(node.marks))
                        toRemove = [mark];
                }
                else {
                    toRemove = node.marks;
                }
                if (toRemove && toRemove.length) {
                    let end = Math.min(pos + node.nodeSize, to);
                    for (let i = 0; i < toRemove.length; i++) {
                        let style = toRemove[i], found;
                        for (let j = 0; j < matched.length; j++) {
                            let m = matched[j];
                            if (m.step == step - 1 && style.eq(matched[j].style))
                                found = m;
                        }
                        if (found) {
                            found.to = end;
                            found.step = step;
                        }
                        else {
                            matched.push({ style, from: Math.max(pos, from), to: end, step });
                        }
                    }
                }
            });
            matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
        }
        function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
            let node = tr.doc.nodeAt(pos);
            let delSteps = [], cur = pos + 1;
            for (let i = 0; i < node.childCount; i++) {
                let child = node.child(i), end = cur + child.nodeSize;
                let allowed = match.matchType(child.type);
                if (!allowed) {
                    delSteps.push(new ReplaceStep(cur, end, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty));
                }
                else {
                    match = allowed;
                    for (let j = 0; j < child.marks.length; j++)
                        if (!parentType.allowsMarkType(child.marks[j].type))
                            tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
                }
                cur = end;
            }
            if (!match.validEnd) {
                let fill = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                tr.replace(cur, cur, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(fill, 0, 0));
            }
            for (let i = delSteps.length - 1; i >= 0; i--)
                tr.step(delSteps[i]);
        }

        function canCut(node, start, end) {
            return (start == 0 || node.canReplace(start, node.childCount)) &&
                (end == node.childCount || node.canReplace(0, end));
        }
        /**
         Try to find a target depth to which the content in the given range
         can be lifted. Will not go across
         [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
         */
        function liftTarget(range) {
            let parent = range.parent;
            let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
            for (let depth = range.depth;; --depth) {
                let node = range.$from.node(depth);
                let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
                if (depth < range.depth && node.canReplace(index, endIndex, content))
                    return depth;
                if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                    break;
            }
            return null;
        }
        function lift(tr, range, target) {
            let { $from, $to, depth } = range;
            let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
            let start = gapStart, end = gapEnd;
            let before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openStart = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $from.index(d) > 0) {
                    splitting = true;
                    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(before));
                    openStart++;
                }
                else {
                    start--;
                }
            let after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openEnd = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $to.after(d + 1) < $to.end(d)) {
                    splitting = true;
                    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($to.node(d).copy(after));
                    openEnd++;
                }
                else {
                    end++;
                }
            tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
        }
        /**
         Try to find a valid way to wrap the content in the given range in a
         node of the given type. May introduce extra nodes around and inside
         the wrapper node, if necessary. Returns null if no valid wrapping
         could be found. When `innerRange` is given, that range's content is
         used as the content to fit into the wrapping, instead of the
         content of `range`.
         */
        function findWrapping(range, nodeType, attrs = null, innerRange = range) {
            let around = findWrappingOutside(range, nodeType);
            let inner = around && findWrappingInside(innerRange, nodeType);
            if (!inner)
                return null;
            return around.map(withAttrs)
                .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
        }
        function withAttrs(type) { return { type, attrs: null }; }
        function findWrappingOutside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let around = parent.contentMatchAt(startIndex).findWrapping(type);
            if (!around)
                return null;
            let outer = around.length ? around[0] : type;
            return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
        }
        function findWrappingInside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let inner = parent.child(startIndex);
            let inside = type.contentMatch.findWrapping(inner.type);
            if (!inside)
                return null;
            let lastType = inside.length ? inside[inside.length - 1] : type;
            let innerMatch = lastType.contentMatch;
            for (let i = startIndex; innerMatch && i < endIndex; i++)
                innerMatch = innerMatch.matchType(parent.child(i).type);
            if (!innerMatch || !innerMatch.validEnd)
                return null;
            return inside;
        }
        function wrap(tr, range, wrappers) {
            let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let i = wrappers.length - 1; i >= 0; i--) {
                if (content.size) {
                    let match = wrappers[i].type.contentMatch.matchFragment(content);
                    if (!match || !match.validEnd)
                        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
                }
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
            }
            let start = range.start, end = range.end;
            tr.step(new ReplaceAroundStep(start, end, start, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));
        }
        function setBlockType(tr, from, to, type, attrs) {
            if (!type.isTextblock)
                throw new RangeError("Type given to setBlockType should be a textblock");
            let mapFrom = tr.steps.length;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                    // Ensure all markup that isn't allowed in the new node type is cleared
                    tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
                    let mapping = tr.mapping.slice(mapFrom);
                    let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                    tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                    return false;
                }
            });
        }
        function canChangeType(doc, pos, type) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return $pos.parent.canReplaceWith(index, index + 1, type);
        }
        /**
         Change the type, attributes, and/or marks of the node at `pos`.
         When `type` isn't given, the existing node type is preserved,
         */
        function setNodeMarkup(tr, pos, type, attrs, marks) {
            let node = tr.doc.nodeAt(pos);
            if (!node)
                throw new RangeError("No node at given position");
            if (!type)
                type = node.type;
            let newNode = type.create(attrs, null, marks || node.marks);
            if (node.isLeaf)
                return tr.replaceWith(pos, pos + node.nodeSize, newNode);
            if (!type.validContent(node.content))
                throw new RangeError("Invalid content for node type " + type.name);
            tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(newNode), 0, 0), 1, true));
        }
        /**
         Check whether splitting at the given position is allowed.
         */
        function canSplit(doc, pos, depth = 1, typesAfter) {
            let $pos = doc.resolve(pos), base = $pos.depth - depth;
            let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
            if (base < 0 || $pos.parent.type.spec.isolating ||
                !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
                !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
                return false;
            for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
                let node = $pos.node(d), index = $pos.index(d);
                if (node.type.spec.isolating)
                    return false;
                let rest = node.content.cutByIndex(index, node.childCount);
                let after = (typesAfter && typesAfter[i]) || node;
                if (after != node)
                    rest = rest.replaceChild(0, after.type.create(after.attrs));
                if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                    return false;
            }
            let index = $pos.indexAfter(base);
            let baseType = typesAfter && typesAfter[0];
            return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
        }
        function split(tr, pos, depth = 1, typesAfter) {
            let $pos = tr.doc.resolve(pos), before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
                before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($pos.node(d).copy(before));
                let typeAfter = typesAfter && typesAfter[i];
                after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
            }
            tr.step(new ReplaceStep(pos, pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), depth, depth), true));
        }
        /**
         Test whether the blocks before and after a given position can be
         joined.
         */
        function canJoin(doc, pos) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return joinable($pos.nodeBefore, $pos.nodeAfter) &&
                $pos.parent.canReplace(index, index + 1);
        }
        function joinable(a, b) {
            return !!(a && b && !a.isLeaf && a.canAppend(b));
        }
        /**
         Find an ancestor of the given position that can be joined to the
         block before (or after if `dir` is positive). Returns the joinable
         point, if any.
         */
        function joinPoint(doc, pos, dir = -1) {
            let $pos = doc.resolve(pos);
            for (let d = $pos.depth;; d--) {
                let before, after, index = $pos.index(d);
                if (d == $pos.depth) {
                    before = $pos.nodeBefore;
                    after = $pos.nodeAfter;
                }
                else if (dir > 0) {
                    before = $pos.node(d + 1);
                    index++;
                    after = $pos.node(d).maybeChild(index);
                }
                else {
                    before = $pos.node(d).maybeChild(index - 1);
                    after = $pos.node(d + 1);
                }
                if (before && !before.isTextblock && joinable(before, after) &&
                    $pos.node(d).canReplace(index, index + 1))
                    return pos;
                if (d == 0)
                    break;
                pos = dir < 0 ? $pos.before(d) : $pos.after(d);
            }
        }
        function join(tr, pos, depth) {
            let step = new ReplaceStep(pos - depth, pos + depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, true);
            tr.step(step);
        }
        /**
         Try to find a point where a node of the given type can be inserted
         near `pos`, by searching up the node hierarchy when `pos` itself
         isn't a valid place but is at the start or end of a node. Return
         null if no position was found.
         */
        function insertPoint(doc, pos, nodeType) {
            let $pos = doc.resolve(pos);
            if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
                return pos;
            if ($pos.parentOffset == 0)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.index(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.before(d + 1);
                    if (index > 0)
                        return null;
                }
            if ($pos.parentOffset == $pos.parent.content.size)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.indexAfter(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.after(d + 1);
                    if (index < $pos.node(d).childCount)
                        return null;
                }
            return null;
        }
        /**
         Finds a position at or around the given position where the given
         slice can be inserted. Will look at parent nodes' nearest boundary
         and try there, even if the original position wasn't directly at the
         start or end of that node. Returns null when no position was found.
         */
        function dropPoint(doc, pos, slice) {
            let $pos = doc.resolve(pos);
            if (!slice.content.size)
                return pos;
            let content = slice.content;
            for (let i = 0; i < slice.openStart; i++)
                content = content.firstChild.content;
            for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
                for (let d = $pos.depth; d >= 0; d--) {
                    let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                    let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                    let parent = $pos.node(d), fits = false;
                    if (pass == 1) {
                        fits = parent.canReplace(insertPos, insertPos, content);
                    }
                    else {
                        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                    }
                    if (fits)
                        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
                }
            }
            return null;
        }

        /**
         ‘Fit’ a slice into a given position in the document, producing a
         [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
         there's no meaningful way to insert the slice here, or inserting it
         would be a no-op (an empty slice over an empty range).
         */
        function replaceStep(doc, from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
            if (from == to && !slice.size)
                return null;
            let $from = doc.resolve(from), $to = doc.resolve(to);
            // Optimization -- avoid work if it's obvious that it's not needed.
            if (fitsTrivially($from, $to, slice))
                return new ReplaceStep(from, to, slice);
            return new Fitter($from, $to, slice).fit();
        }
        function fitsTrivially($from, $to, slice) {
            return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
                $from.parent.canReplace($from.index(), $to.index(), slice.content);
        }
// Algorithm for 'placing' the elements of a slice into a gap:
//
// We consider the content of each node that is open to the left to be
// independently placeable. I.e. in <p("foo"), p("bar")>, when the
// paragraph on the left is open, "foo" can be placed (somewhere on
// the left side of the replacement gap) independently from p("bar").
//
// This class tracks the state of the placement progress in the
// following properties:
//
//  - `frontier` holds a stack of `{type, match}` objects that
//    represent the open side of the replacement. It starts at
//    `$from`, then moves forward as content is placed, and is finally
//    reconciled with `$to`.
//
//  - `unplaced` is a slice that represents the content that hasn't
//    been placed yet.
//
//  - `placed` is a fragment of placed content. Its open-start value
//    is implicit in `$from`, and its open-end value in `frontier`.
        class Fitter {
            constructor($from, $to, unplaced) {
                this.$from = $from;
                this.$to = $to;
                this.unplaced = unplaced;
                this.frontier = [];
                this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                for (let i = 0; i <= $from.depth; i++) {
                    let node = $from.node(i);
                    this.frontier.push({
                        type: node.type,
                        match: node.contentMatchAt($from.indexAfter(i))
                    });
                }
                for (let i = $from.depth; i > 0; i--)
                    this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(i).copy(this.placed));
            }
            get depth() { return this.frontier.length - 1; }
            fit() {
                // As long as there's unplaced content, try to place some of it.
                // If that fails, either increase the open score of the unplaced
                // slice, or drop nodes from it, and then try again.
                while (this.unplaced.size) {
                    let fit = this.findFittable();
                    if (fit)
                        this.placeNodes(fit);
                    else
                        this.openMore() || this.dropNode();
                }
                // When there's inline content directly after the frontier _and_
                // directly after `this.$to`, we must generate a `ReplaceAround`
                // step that pulls that content into the node after the frontier.
                // That means the fitting must be done to the end of the textblock
                // node after `this.$to`, not `this.$to` itself.
                let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
                let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
                if (!$to)
                    return null;
                // If closing to `$to` succeeded, create a step
                let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
                while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                    content = content.firstChild.content;
                    openStart--;
                    openEnd--;
                }
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);
                if (moveInline > -1)
                    return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
                if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                    return new ReplaceStep($from.pos, $to.pos, slice);
                return null;
            }
            // Find a position on the start spine of `this.unplaced` that has
            // content that can be moved somewhere on the frontier. Returns two
            // depths, one for the slice and one for the frontier.
            findFittable() {
                // Only try wrapping nodes (pass 2) after finding a place without
                // wrapping failed.
                for (let pass = 1; pass <= 2; pass++) {
                    for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                        let fragment, parent = null;
                        if (sliceDepth) {
                            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                            fragment = parent.content;
                        }
                        else {
                            fragment = this.unplaced.content;
                        }
                        let first = fragment.firstChild;
                        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                            let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                            // In pass 1, if the next node matches, or there is no next
                            // node but the parents look compatible, we've found a
                            // place.
                            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(first), false))
                                : parent && type.compatibleContent(parent.type)))
                                return { sliceDepth, frontierDepth, parent, inject };
                                // In pass 2, look for a set of wrapping nodes that make
                            // `first` fit here.
                            else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                                return { sliceDepth, frontierDepth, parent, wrap };
                            // Don't continue looking further up if the parent node
                            // would fit here.
                            if (parent && match.matchType(parent.type))
                                break;
                        }
                    }
                }
            }
            openMore() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (!inner.childCount || inner.firstChild.isLeaf)
                    return false;
                this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
                return true;
            }
            dropNode() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (inner.childCount <= 1 && openStart > 0) {
                    let openAtEnd = content.size - openStart <= openStart + inner.size;
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
                }
                else {
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
                }
            }
            // Move content from the unplaced slice at `sliceDepth` to the
            // frontier node at `frontierDepth`. Close that frontier node when
            // applicable.
            placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
                while (this.depth > frontierDepth)
                    this.closeFrontierNode();
                if (wrap)
                    for (let i = 0; i < wrap.length; i++)
                        this.openFrontierNode(wrap[i]);
                let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
                let openStart = slice.openStart - sliceDepth;
                let taken = 0, add = [];
                let { match, type } = this.frontier[frontierDepth];
                if (inject) {
                    for (let i = 0; i < inject.childCount; i++)
                        add.push(inject.child(i));
                    match = match.matchFragment(inject);
                }
                // Computes the amount of (end) open nodes at the end of the
                // fragment. When 0, the parent is open, but no more. When
                // negative, nothing is open.
                let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
                // Scan over the fragment, fitting as many child nodes as
                // possible.
                while (taken < fragment.childCount) {
                    let next = fragment.child(taken), matches = match.matchType(next.type);
                    if (!matches)
                        break;
                    taken++;
                    if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                        match = matches;
                        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                    }
                }
                let toEnd = taken == fragment.childCount;
                if (!toEnd)
                    openEndCount = -1;
                this.placed = addToFragment(this.placed, frontierDepth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(add));
                this.frontier[frontierDepth].match = match;
                // If the parent types match, and the entire node was moved, and
                // it's not open, close this frontier node right away.
                if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                    this.closeFrontierNode();
                // Add new frontier nodes for any open nodes at the end.
                for (let i = 0, cur = fragment; i < openEndCount; i++) {
                    let node = cur.lastChild;
                    this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                    cur = node.content;
                }
                // Update `this.unplaced`. Drop the entire node from which we
                // placed it we got to its end, otherwise just drop the placed
                // nodes.
                this.unplaced = !toEnd ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                    : sliceDepth == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
            }
            mustMoveInline() {
                if (!this.$to.parent.isTextblock)
                    return -1;
                let top = this.frontier[this.depth], level;
                if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                    (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                    return -1;
                let { depth } = this.$to, after = this.$to.after(depth);
                while (depth > 1 && after == this.$to.end(--depth))
                    ++after;
                return after;
            }
            findCloseLevel($to) {
                scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                    let { match, type } = this.frontier[i];
                    let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                    let fit = contentAfterFits($to, i, type, match, dropInner);
                    if (!fit)
                        continue;
                    for (let d = i - 1; d >= 0; d--) {
                        let { match, type } = this.frontier[d];
                        let matches = contentAfterFits($to, d, type, match, true);
                        if (!matches || matches.childCount)
                            continue scan;
                    }
                    return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
                }
            }
            close($to) {
                let close = this.findCloseLevel($to);
                if (!close)
                    return null;
                while (this.depth > close.depth)
                    this.closeFrontierNode();
                if (close.fit.childCount)
                    this.placed = addToFragment(this.placed, close.depth, close.fit);
                $to = close.move;
                for (let d = close.depth + 1; d <= $to.depth; d++) {
                    let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                    this.openFrontierNode(node.type, node.attrs, add);
                }
                return $to;
            }
            openFrontierNode(type, attrs = null, content) {
                let top = this.frontier[this.depth];
                top.match = top.match.matchType(type);
                this.placed = addToFragment(this.placed, this.depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, content)));
                this.frontier.push({ type, match: type.contentMatch });
            }
            closeFrontierNode() {
                let open = this.frontier.pop();
                let add = open.match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                if (add.childCount)
                    this.placed = addToFragment(this.placed, this.frontier.length, add);
            }
        }
        function dropFromFragment(fragment, depth, count) {
            if (depth == 0)
                return fragment.cutByIndex(count, fragment.childCount);
            return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
        }
        function addToFragment(fragment, depth, content) {
            if (depth == 0)
                return fragment.append(content);
            return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
        }
        function contentAt(fragment, depth) {
            for (let i = 0; i < depth; i++)
                fragment = fragment.firstChild.content;
            return fragment;
        }
        function closeNodeStart(node, openStart, openEnd) {
            if (openStart <= 0)
                return node;
            let frag = node.content;
            if (openStart > 1)
                frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
            if (openStart > 0) {
                frag = node.type.contentMatch.fillBefore(frag).append(frag);
                if (openEnd <= 0)
                    frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return node.copy(frag);
        }
        function contentAfterFits($to, depth, type, match, open) {
            let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
            if (index == node.childCount && !type.compatibleContent(node.type))
                return null;
            let fit = match.fillBefore(node.content, true, index);
            return fit && !invalidMarks(type, node.content, index) ? fit : null;
        }
        function invalidMarks(type, fragment, start) {
            for (let i = start; i < fragment.childCount; i++)
                if (!type.allowsMarks(fragment.child(i).marks))
                    return true;
            return false;
        }
        function definesContent(type) {
            return type.spec.defining || type.spec.definingForContent;
        }
        function replaceRange(tr, from, to, slice) {
            if (!slice.size)
                return tr.deleteRange(from, to);
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            if (fitsTrivially($from, $to, slice))
                return tr.step(new ReplaceStep(from, to, slice));
            let targetDepths = coveredDepths($from, tr.doc.resolve(to));
            // Can't replace the whole document, so remove 0 if it's present
            if (targetDepths[targetDepths.length - 1] == 0)
                targetDepths.pop();
            // Negative numbers represent not expansion over the whole node at
            // that depth, but replacing from $from.before(-D) to $to.pos.
            let preferredTarget = -($from.depth + 1);
            targetDepths.unshift(preferredTarget);
            // This loop picks a preferred target depth, if one of the covering
            // depths is not outside of a defining node, and adds negative
            // depths for any depth that has $from at its start and does not
            // cross a defining node.
            for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
                let spec = $from.node(d).type.spec;
                if (spec.defining || spec.definingAsContext || spec.isolating)
                    break;
                if (targetDepths.indexOf(d) > -1)
                    preferredTarget = d;
                else if ($from.before(d) == pos)
                    targetDepths.splice(1, 0, -d);
            }
            // Try to fit each possible depth of the slice into each possible
            // target depth, starting with the preferred depths.
            let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
            let leftNodes = [], preferredDepth = slice.openStart;
            for (let content = slice.content, i = 0;; i++) {
                let node = content.firstChild;
                leftNodes.push(node);
                if (i == slice.openStart)
                    break;
                content = node.content;
            }
            // Back up preferredDepth to cover defining textblocks directly
            // above it, possibly skipping a non-defining textblock.
            for (let d = preferredDepth - 1; d >= 0; d--) {
                let type = leftNodes[d].type, def = definesContent(type);
                if (def && $from.node(preferredTargetIndex).type != type)
                    preferredDepth = d;
                else if (def || !type.isTextblock)
                    break;
            }
            for (let j = slice.openStart; j >= 0; j--) {
                let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
                let insert = leftNodes[openDepth];
                if (!insert)
                    continue;
                for (let i = 0; i < targetDepths.length; i++) {
                    // Loop over possible expansion levels, starting with the
                    // preferred one
                    let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                    if (targetDepth < 0) {
                        expand = false;
                        targetDepth = -targetDepth;
                    }
                    let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                    if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                        return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
                }
            }
            let startSteps = tr.steps.length;
            for (let i = targetDepths.length - 1; i >= 0; i--) {
                tr.replace(from, to, slice);
                if (tr.steps.length > startSteps)
                    break;
                let depth = targetDepths[i];
                if (depth < 0)
                    continue;
                from = $from.before(depth);
                to = $to.after(depth);
            }
        }
        function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
            if (depth < oldOpen) {
                let first = fragment.firstChild;
                fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
            }
            if (depth > newOpen) {
                let match = parent.contentMatchAt(0);
                let start = match.fillBefore(fragment).append(fragment);
                fragment = start.append(match.matchFragment(start).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return fragment;
        }
        function replaceRangeWith(tr, from, to, node) {
            if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
                let point = insertPoint(tr.doc, from, node.type);
                if (point != null)
                    from = to = point;
            }
            tr.replaceRange(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node), 0, 0));
        }
        function deleteRange(tr, from, to) {
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            let covered = coveredDepths($from, $to);
            for (let i = 0; i < covered.length; i++) {
                let depth = covered[i], last = i == covered.length - 1;
                if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                    return tr.delete($from.start(depth), $to.end(depth));
                if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                    return tr.delete($from.before(depth), $to.after(depth));
            }
            for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
                if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                    return tr.delete($from.before(d), to);
            }
            tr.delete(from, to);
        }
// Returns an array of all depths for which $from - $to spans the
// whole content of the nodes at that depth.
        function coveredDepths($from, $to) {
            let result = [], minDepth = Math.min($from.depth, $to.depth);
            for (let d = minDepth; d >= 0; d--) {
                let start = $from.start(d);
                if (start < $from.pos - ($from.depth - d) ||
                    $to.end(d) > $to.pos + ($to.depth - d) ||
                    $from.node(d).type.spec.isolating ||
                    $to.node(d).type.spec.isolating)
                    break;
                if (start == $to.start(d) ||
                    (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                        d && $to.start(d - 1) == start - 1))
                    result.push(d);
            }
            return result;
        }

        /**
         Update an attribute in a specific node.
         */
        class AttrStep extends Step {
            /**
             Construct an attribute step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The attribute to set.
                 */
                attr,
                // The attribute's new value.
                value) {
                super();
                this.pos = pos;
                this.attr = attr;
                this.value = value;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at attribute step's position");
                let attrs = Object.create(null);
                for (let name in node.attrs)
                    attrs[name] = node.attrs[name];
                attrs[this.attr] = this.value;
                let updated = node.type.create(attrs, null, node.marks);
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            getMap() {
                return StepMap.empty;
            }
            invert(doc) {
                return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
            }
            toJSON() {
                return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
            }
            static fromJSON(schema, json) {
                if (typeof json.pos != "number" || typeof json.attr != "string")
                    throw new RangeError("Invalid input for AttrStep.fromJSON");
                return new AttrStep(json.pos, json.attr, json.value);
            }
        }
        Step.jsonID("attr", AttrStep);

        /**
         @internal
         */
        let TransformError = class extends Error {
        };
        TransformError = function TransformError(message) {
            let err = Error.call(this, message);
            err.__proto__ = TransformError.prototype;
            return err;
        };
        TransformError.prototype = Object.create(Error.prototype);
        TransformError.prototype.constructor = TransformError;
        TransformError.prototype.name = "TransformError";
        /**
         Abstraction to build up and track an array of
         [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

         Most transforming methods return the `Transform` object itself, so
         that they can be chained.
         */
        class Transform {
            /**
             Create a transform that starts with the given document.
             */
            constructor(
                /**
                 The current document (the result of applying the steps in the
                 transform).
                 */
                doc) {
                this.doc = doc;
                /**
                 The steps in this transform.
                 */
                this.steps = [];
                /**
                 The documents before each of the steps.
                 */
                this.docs = [];
                /**
                 A mapping with the maps for each of the steps in this transform.
                 */
                this.mapping = new Mapping;
            }
            /**
             The starting document.
             */
            get before() { return this.docs.length ? this.docs[0] : this.doc; }
            /**
             Apply a new step in this transform, saving the result. Throws an
             error when the step fails.
             */
            step(step) {
                let result = this.maybeStep(step);
                if (result.failed)
                    throw new TransformError(result.failed);
                return this;
            }
            /**
             Try to apply a step in this transformation, ignoring it if it
             fails. Returns the step result.
             */
            maybeStep(step) {
                let result = step.apply(this.doc);
                if (!result.failed)
                    this.addStep(step, result.doc);
                return result;
            }
            /**
             True when the document has been changed (when there are any
             steps).
             */
            get docChanged() {
                return this.steps.length > 0;
            }
            /**
             @internal
             */
            addStep(step, doc) {
                this.docs.push(this.doc);
                this.steps.push(step);
                this.mapping.appendMap(step.getMap());
                this.doc = doc;
            }
            /**
             Replace the part of the document between `from` and `to` with the
             given `slice`.
             */
            replace(from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                let step = replaceStep(this.doc, from, to, slice);
                if (step)
                    this.step(step);
                return this;
            }
            /**
             Replace the given range with the given content, which may be a
             fragment, node, or array of nodes.
             */
            replaceWith(from, to, content) {
                return this.replace(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(content), 0, 0));
            }
            /**
             Delete the content between the given positions.
             */
            delete(from, to) {
                return this.replace(from, to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty);
            }
            /**
             Insert the given content at the given position.
             */
            insert(pos, content) {
                return this.replaceWith(pos, pos, content);
            }
            /**
             Replace a range of the document with a given slice, using
             `from`, `to`, and the slice's
             [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
             than fixed start and end points. This method may grow the
             replaced area or close open nodes in the slice in order to get a
             fit that is more in line with WYSIWYG expectations, by dropping
             fully covered parent nodes of the replaced region when they are
             marked [non-defining as
             context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
             open parent node from the slice that _is_ marked as [defining
             its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).

             This is the method, for example, to handle paste. The similar
             [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
             primitive tool which will _not_ move the start and end of its given
             range, and is useful in situations where you need more precise
             control over what happens.
             */
            replaceRange(from, to, slice) {
                replaceRange(this, from, to, slice);
                return this;
            }
            /**
             Replace the given range with a node, but use `from` and `to` as
             hints, rather than precise positions. When from and to are the same
             and are at the start or end of a parent node in which the given
             node doesn't fit, this method may _move_ them out towards a parent
             that does allow the given node to be placed. When the given range
             completely covers a parent node, this method may completely replace
             that parent node.
             */
            replaceRangeWith(from, to, node) {
                replaceRangeWith(this, from, to, node);
                return this;
            }
            /**
             Delete the given range, expanding it to cover fully covered
             parent nodes until a valid replace is found.
             */
            deleteRange(from, to) {
                deleteRange(this, from, to);
                return this;
            }
            /**
             Split the content in the given range off from its parent, if there
             is sibling content before or after it, and move it up the tree to
             the depth specified by `target`. You'll probably want to use
             [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
             sure the lift is valid.
             */
            lift(range, target) {
                lift(this, range, target);
                return this;
            }
            /**
             Join the blocks around the given position. If depth is 2, their
             last and first siblings are also joined, and so on.
             */
            join(pos, depth = 1) {
                join(this, pos, depth);
                return this;
            }
            /**
             Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
             The wrappers are assumed to be valid in this position, and should
             probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
             */
            wrap(range, wrappers) {
                wrap(this, range, wrappers);
                return this;
            }
            /**
             Set the type of all textblocks (partly) between `from` and `to` to
             the given node type with the given attributes.
             */
            setBlockType(from, to = from, type, attrs = null) {
                setBlockType(this, from, to, type, attrs);
                return this;
            }
            /**
             Change the type, attributes, and/or marks of the node at `pos`.
             When `type` isn't given, the existing node type is preserved,
             */
            setNodeMarkup(pos, type, attrs = null, marks = []) {
                setNodeMarkup(this, pos, type, attrs, marks);
                return this;
            }
            /**
             Set a single attribute on a given node to a new value.
             */
            setNodeAttribute(pos, attr, value) {
                this.step(new AttrStep(pos, attr, value));
                return this;
            }
            /**
             Add a mark to the node at position `pos`.
             */
            addNodeMark(pos, mark) {
                this.step(new AddNodeMarkStep(pos, mark));
                return this;
            }
            /**
             Remove a mark (or a mark of the given type) from the node at
             position `pos`.
             */
            removeNodeMark(pos, mark) {
                if (!(mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark)) {
                    let node = this.doc.nodeAt(pos);
                    if (!node)
                        throw new RangeError("No node at position " + pos);
                    mark = mark.isInSet(node.marks);
                    if (!mark)
                        return this;
                }
                this.step(new RemoveNodeMarkStep(pos, mark));
                return this;
            }
            /**
             Split the node at the given position, and optionally, if `depth` is
             greater than one, any number of nodes above that. By default, the
             parts split off will inherit the node type of the original node.
             This can be changed by passing an array of types and attributes to
             use after the split.
             */
            split(pos, depth = 1, typesAfter) {
                split(this, pos, depth, typesAfter);
                return this;
            }
            /**
             Add the given mark to the inline content between `from` and `to`.
             */
            addMark(from, to, mark) {
                addMark(this, from, to, mark);
                return this;
            }
            /**
             Remove marks from inline nodes between `from` and `to`. When
             `mark` is a single mark, remove precisely that mark. When it is
             a mark type, remove all marks of that type. When it is null,
             remove all marks of any type.
             */
            removeMark(from, to, mark) {
                removeMark(this, from, to, mark);
                return this;
            }
            /**
             Removes all marks and nodes from the content of the node at
             `pos` that don't match the given new parent node type. Accepts
             an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
             third argument.
             */
            clearIncompatible(pos, parentType, match) {
                clearIncompatible(this, pos, parentType, match);
                return this;
            }
        }




        /***/ }),

    /***/ "./node_modules/dom7/dom7.esm.js":
    /*!***************************************!*\
  !*** ./node_modules/dom7/dom7.esm.js ***!
  \***************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "$": () => (/* binding */ $),
            /* harmony export */   "add": () => (/* binding */ add),
            /* harmony export */   "addClass": () => (/* binding */ addClass),
            /* harmony export */   "animate": () => (/* binding */ animate),
            /* harmony export */   "animationEnd": () => (/* binding */ animationEnd),
            /* harmony export */   "append": () => (/* binding */ append),
            /* harmony export */   "appendTo": () => (/* binding */ appendTo),
            /* harmony export */   "attr": () => (/* binding */ attr),
            /* harmony export */   "blur": () => (/* binding */ blur),
            /* harmony export */   "change": () => (/* binding */ change),
            /* harmony export */   "children": () => (/* binding */ children),
            /* harmony export */   "click": () => (/* binding */ click),
            /* harmony export */   "closest": () => (/* binding */ closest),
            /* harmony export */   "css": () => (/* binding */ css),
            /* harmony export */   "data": () => (/* binding */ data),
            /* harmony export */   "dataset": () => (/* binding */ dataset),
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
            /* harmony export */   "detach": () => (/* binding */ detach),
            /* harmony export */   "each": () => (/* binding */ each),
            /* harmony export */   "empty": () => (/* binding */ empty),
            /* harmony export */   "eq": () => (/* binding */ eq),
            /* harmony export */   "filter": () => (/* binding */ filter),
            /* harmony export */   "find": () => (/* binding */ find),
            /* harmony export */   "focus": () => (/* binding */ focus),
            /* harmony export */   "focusin": () => (/* binding */ focusin),
            /* harmony export */   "focusout": () => (/* binding */ focusout),
            /* harmony export */   "hasClass": () => (/* binding */ hasClass),
            /* harmony export */   "height": () => (/* binding */ height),
            /* harmony export */   "hide": () => (/* binding */ hide),
            /* harmony export */   "html": () => (/* binding */ html),
            /* harmony export */   "index": () => (/* binding */ index),
            /* harmony export */   "insertAfter": () => (/* binding */ insertAfter),
            /* harmony export */   "insertBefore": () => (/* binding */ insertBefore),
            /* harmony export */   "is": () => (/* binding */ is),
            /* harmony export */   "keydown": () => (/* binding */ keydown),
            /* harmony export */   "keypress": () => (/* binding */ keypress),
            /* harmony export */   "keyup": () => (/* binding */ keyup),
            /* harmony export */   "mousedown": () => (/* binding */ mousedown),
            /* harmony export */   "mouseenter": () => (/* binding */ mouseenter),
            /* harmony export */   "mouseleave": () => (/* binding */ mouseleave),
            /* harmony export */   "mousemove": () => (/* binding */ mousemove),
            /* harmony export */   "mouseout": () => (/* binding */ mouseout),
            /* harmony export */   "mouseover": () => (/* binding */ mouseover),
            /* harmony export */   "mouseup": () => (/* binding */ mouseup),
            /* harmony export */   "next": () => (/* binding */ next),
            /* harmony export */   "nextAll": () => (/* binding */ nextAll),
            /* harmony export */   "off": () => (/* binding */ off),
            /* harmony export */   "offset": () => (/* binding */ offset),
            /* harmony export */   "on": () => (/* binding */ on),
            /* harmony export */   "once": () => (/* binding */ once),
            /* harmony export */   "outerHeight": () => (/* binding */ outerHeight),
            /* harmony export */   "outerWidth": () => (/* binding */ outerWidth),
            /* harmony export */   "parent": () => (/* binding */ parent),
            /* harmony export */   "parents": () => (/* binding */ parents),
            /* harmony export */   "prepend": () => (/* binding */ prepend),
            /* harmony export */   "prependTo": () => (/* binding */ prependTo),
            /* harmony export */   "prev": () => (/* binding */ prev),
            /* harmony export */   "prevAll": () => (/* binding */ prevAll),
            /* harmony export */   "prop": () => (/* binding */ prop),
            /* harmony export */   "remove": () => (/* binding */ remove),
            /* harmony export */   "removeAttr": () => (/* binding */ removeAttr),
            /* harmony export */   "removeClass": () => (/* binding */ removeClass),
            /* harmony export */   "removeData": () => (/* binding */ removeData),
            /* harmony export */   "resize": () => (/* binding */ resize),
            /* harmony export */   "scroll": () => (/* binding */ scroll),
            /* harmony export */   "scrollLeft": () => (/* binding */ scrollLeft),
            /* harmony export */   "scrollTo": () => (/* binding */ scrollTo),
            /* harmony export */   "scrollTop": () => (/* binding */ scrollTop),
            /* harmony export */   "show": () => (/* binding */ show),
            /* harmony export */   "siblings": () => (/* binding */ siblings),
            /* harmony export */   "stop": () => (/* binding */ stop),
            /* harmony export */   "styles": () => (/* binding */ styles),
            /* harmony export */   "submit": () => (/* binding */ submit),
            /* harmony export */   "text": () => (/* binding */ text),
            /* harmony export */   "toggleClass": () => (/* binding */ toggleClass),
            /* harmony export */   "touchend": () => (/* binding */ touchend),
            /* harmony export */   "touchmove": () => (/* binding */ touchmove),
            /* harmony export */   "touchstart": () => (/* binding */ touchstart),
            /* harmony export */   "transform": () => (/* binding */ transform),
            /* harmony export */   "transition": () => (/* binding */ transition),
            /* harmony export */   "transitionEnd": () => (/* binding */ transitionEnd),
            /* harmony export */   "trigger": () => (/* binding */ trigger),
            /* harmony export */   "val": () => (/* binding */ val),
            /* harmony export */   "value": () => (/* binding */ value),
            /* harmony export */   "width": () => (/* binding */ width)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /**
         * Dom7 4.0.4
         * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
         * https://framework7.io/docs/dom7.html
         *
         * Copyright 2022, Vladimir Kharlampidi
         *
         * Licensed under MIT
         *
         * Released on: January 11, 2022
         */


        /* eslint-disable no-proto */
        function makeReactive(obj) {
            const proto = obj.__proto__;
            Object.defineProperty(obj, '__proto__', {
                get() {
                    return proto;
                },

                set(value) {
                    proto.__proto__ = value;
                }

            });
        }

        class Dom7 extends Array {
            constructor(items) {
                if (typeof items === 'number') {
                    super(items);
                } else {
                    super(...(items || []));
                    makeReactive(this);
                }
            }

        }

        function arrayFlat(arr = []) {
            const res = [];
            arr.forEach(el => {
                if (Array.isArray(el)) {
                    res.push(...arrayFlat(el));
                } else {
                    res.push(el);
                }
            });
            return res;
        }
        function arrayFilter(arr, callback) {
            return Array.prototype.filter.call(arr, callback);
        }
        function arrayUnique(arr) {
            const uniqueArray = [];

            for (let i = 0; i < arr.length; i += 1) {
                if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
            }

            return uniqueArray;
        }
        function toCamelCase(string) {
            return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());
        }

// eslint-disable-next-line

        function qsa(selector, context) {
            if (typeof selector !== 'string') {
                return [selector];
            }

            const a = [];
            const res = context.querySelectorAll(selector);

            for (let i = 0; i < res.length; i += 1) {
                a.push(res[i]);
            }

            return a;
        }

        function $(selector, context) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            let arr = [];

            if (!context && selector instanceof Dom7) {
                return selector;
            }

            if (!selector) {
                return new Dom7(arr);
            }

            if (typeof selector === 'string') {
                const html = selector.trim();

                if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
                    let toCreate = 'div';
                    if (html.indexOf('<li') === 0) toCreate = 'ul';
                    if (html.indexOf('<tr') === 0) toCreate = 'tbody';
                    if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
                    if (html.indexOf('<tbody') === 0) toCreate = 'table';
                    if (html.indexOf('<option') === 0) toCreate = 'select';
                    const tempParent = document.createElement(toCreate);
                    tempParent.innerHTML = html;

                    for (let i = 0; i < tempParent.childNodes.length; i += 1) {
                        arr.push(tempParent.childNodes[i]);
                    }
                } else {
                    arr = qsa(selector.trim(), context || document);
                } // arr = qsa(selector, document);

            } else if (selector.nodeType || selector === window || selector === document) {
                arr.push(selector);
            } else if (Array.isArray(selector)) {
                if (selector instanceof Dom7) return selector;
                arr = selector;
            }

            return new Dom7(arrayUnique(arr));
        }

        $.fn = Dom7.prototype;

// eslint-disable-next-line

        function addClass(...classes) {
            const classNames = arrayFlat(classes.map(c => c.split(' ')));
            this.forEach(el => {
                el.classList.add(...classNames);
            });
            return this;
        }

        function removeClass(...classes) {
            const classNames = arrayFlat(classes.map(c => c.split(' ')));
            this.forEach(el => {
                el.classList.remove(...classNames);
            });
            return this;
        }

        function toggleClass(...classes) {
            const classNames = arrayFlat(classes.map(c => c.split(' ')));
            this.forEach(el => {
                classNames.forEach(className => {
                    el.classList.toggle(className);
                });
            });
        }

        function hasClass(...classes) {
            const classNames = arrayFlat(classes.map(c => c.split(' ')));
            return arrayFilter(this, el => {
                return classNames.filter(className => el.classList.contains(className)).length > 0;
            }).length > 0;
        }

        function attr(attrs, value) {
            if (arguments.length === 1 && typeof attrs === 'string') {
                // Get attr
                if (this[0]) return this[0].getAttribute(attrs);
                return undefined;
            } // Set attrs


            for (let i = 0; i < this.length; i += 1) {
                if (arguments.length === 2) {
                    // String
                    this[i].setAttribute(attrs, value);
                } else {
                    // Object
                    for (const attrName in attrs) {
                        this[i][attrName] = attrs[attrName];
                        this[i].setAttribute(attrName, attrs[attrName]);
                    }
                }
            }

            return this;
        }

        function removeAttr(attr) {
            for (let i = 0; i < this.length; i += 1) {
                this[i].removeAttribute(attr);
            }

            return this;
        }

        function prop(props, value) {
            if (arguments.length === 1 && typeof props === 'string') {
                // Get prop
                if (this[0]) return this[0][props];
            } else {
                // Set props
                for (let i = 0; i < this.length; i += 1) {
                    if (arguments.length === 2) {
                        // String
                        this[i][props] = value;
                    } else {
                        // Object
                        for (const propName in props) {
                            this[i][propName] = props[propName];
                        }
                    }
                }

                return this;
            }

            return this;
        }

        function data(key, value) {
            let el;

            if (typeof value === 'undefined') {
                el = this[0];
                if (!el) return undefined; // Get value

                if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
                    return el.dom7ElementDataStorage[key];
                }

                const dataKey = el.getAttribute(`data-${key}`);

                if (dataKey) {
                    return dataKey;
                }

                return undefined;
            } // Set value


            for (let i = 0; i < this.length; i += 1) {
                el = this[i];
                if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
                el.dom7ElementDataStorage[key] = value;
            }

            return this;
        }

        function removeData(key) {
            for (let i = 0; i < this.length; i += 1) {
                const el = this[i];

                if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
                    el.dom7ElementDataStorage[key] = null;
                    delete el.dom7ElementDataStorage[key];
                }
            }
        }

        function dataset() {
            const el = this[0];
            if (!el) return undefined;
            const dataset = {}; // eslint-disable-line

            if (el.dataset) {
                for (const dataKey in el.dataset) {
                    dataset[dataKey] = el.dataset[dataKey];
                }
            } else {
                for (let i = 0; i < el.attributes.length; i += 1) {
                    const attr = el.attributes[i];

                    if (attr.name.indexOf('data-') >= 0) {
                        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;
                    }
                }
            }

            for (const key in dataset) {
                if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
            }

            return dataset;
        }

        function val(value) {
            if (typeof value === 'undefined') {
                // get value
                const el = this[0];
                if (!el) return undefined;

                if (el.multiple && el.nodeName.toLowerCase() === 'select') {
                    const values = [];

                    for (let i = 0; i < el.selectedOptions.length; i += 1) {
                        values.push(el.selectedOptions[i].value);
                    }

                    return values;
                }

                return el.value;
            } // set value


            for (let i = 0; i < this.length; i += 1) {
                const el = this[i];

                if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {
                    for (let j = 0; j < el.options.length; j += 1) {
                        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;
                    }
                } else {
                    el.value = value;
                }
            }

            return this;
        }

        function value(value) {
            return this.val(value);
        }

        function transform(transform) {
            for (let i = 0; i < this.length; i += 1) {
                this[i].style.transform = transform;
            }

            return this;
        }

        function transition(duration) {
            for (let i = 0; i < this.length; i += 1) {
                this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;
            }

            return this;
        }

        function on(...args) {
            let [eventType, targetSelector, listener, capture] = args;

            if (typeof args[1] === 'function') {
                [eventType, listener, capture] = args;
                targetSelector = undefined;
            }

            if (!capture) capture = false;

            function handleLiveEvent(e) {
                const target = e.target;
                if (!target) return;
                const eventData = e.target.dom7EventData || [];

                if (eventData.indexOf(e) < 0) {
                    eventData.unshift(e);
                }

                if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
                    const parents = $(target).parents(); // eslint-disable-line

                    for (let k = 0; k < parents.length; k += 1) {
                        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);
                    }
                }
            }

            function handleEvent(e) {
                const eventData = e && e.target ? e.target.dom7EventData || [] : [];

                if (eventData.indexOf(e) < 0) {
                    eventData.unshift(e);
                }

                listener.apply(this, eventData);
            }

            const events = eventType.split(' ');
            let j;

            for (let i = 0; i < this.length; i += 1) {
                const el = this[i];

                if (!targetSelector) {
                    for (j = 0; j < events.length; j += 1) {
                        const event = events[j];
                        if (!el.dom7Listeners) el.dom7Listeners = {};
                        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
                        el.dom7Listeners[event].push({
                            listener,
                            proxyListener: handleEvent
                        });
                        el.addEventListener(event, handleEvent, capture);
                    }
                } else {
                    // Live events
                    for (j = 0; j < events.length; j += 1) {
                        const event = events[j];
                        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
                        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];
                        el.dom7LiveListeners[event].push({
                            listener,
                            proxyListener: handleLiveEvent
                        });
                        el.addEventListener(event, handleLiveEvent, capture);
                    }
                }
            }

            return this;
        }

        function off(...args) {
            let [eventType, targetSelector, listener, capture] = args;

            if (typeof args[1] === 'function') {
                [eventType, listener, capture] = args;
                targetSelector = undefined;
            }

            if (!capture) capture = false;
            const events = eventType.split(' ');

            for (let i = 0; i < events.length; i += 1) {
                const event = events[i];

                for (let j = 0; j < this.length; j += 1) {
                    const el = this[j];
                    let handlers;

                    if (!targetSelector && el.dom7Listeners) {
                        handlers = el.dom7Listeners[event];
                    } else if (targetSelector && el.dom7LiveListeners) {
                        handlers = el.dom7LiveListeners[event];
                    }

                    if (handlers && handlers.length) {
                        for (let k = handlers.length - 1; k >= 0; k -= 1) {
                            const handler = handlers[k];

                            if (listener && handler.listener === listener) {
                                el.removeEventListener(event, handler.proxyListener, capture);
                                handlers.splice(k, 1);
                            } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
                                el.removeEventListener(event, handler.proxyListener, capture);
                                handlers.splice(k, 1);
                            } else if (!listener) {
                                el.removeEventListener(event, handler.proxyListener, capture);
                                handlers.splice(k, 1);
                            }
                        }
                    }
                }
            }

            return this;
        }

        function once(...args) {
            const dom = this;
            let [eventName, targetSelector, listener, capture] = args;

            if (typeof args[1] === 'function') {
                [eventName, listener, capture] = args;
                targetSelector = undefined;
            }

            function onceHandler(...eventArgs) {
                listener.apply(this, eventArgs);
                dom.off(eventName, targetSelector, onceHandler, capture);

                if (onceHandler.dom7proxy) {
                    delete onceHandler.dom7proxy;
                }
            }

            onceHandler.dom7proxy = listener;
            return dom.on(eventName, targetSelector, onceHandler, capture);
        }

        function trigger(...args) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const events = args[0].split(' ');
            const eventData = args[1];

            for (let i = 0; i < events.length; i += 1) {
                const event = events[i];

                for (let j = 0; j < this.length; j += 1) {
                    const el = this[j];

                    if (window.CustomEvent) {
                        const evt = new window.CustomEvent(event, {
                            detail: eventData,
                            bubbles: true,
                            cancelable: true
                        });
                        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);
                        el.dispatchEvent(evt);
                        el.dom7EventData = [];
                        delete el.dom7EventData;
                    }
                }
            }

            return this;
        }

        function transitionEnd(callback) {
            const dom = this;

            function fireCallBack(e) {
                if (e.target !== this) return;
                callback.call(this, e);
                dom.off('transitionend', fireCallBack);
            }

            if (callback) {
                dom.on('transitionend', fireCallBack);
            }

            return this;
        }

        function animationEnd(callback) {
            const dom = this;

            function fireCallBack(e) {
                if (e.target !== this) return;
                callback.call(this, e);
                dom.off('animationend', fireCallBack);
            }

            if (callback) {
                dom.on('animationend', fireCallBack);
            }

            return this;
        }

        function width() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

            if (this[0] === window) {
                return window.innerWidth;
            }

            if (this.length > 0) {
                return parseFloat(this.css('width'));
            }

            return null;
        }

        function outerWidth(includeMargins) {
            if (this.length > 0) {
                if (includeMargins) {
                    const styles = this.styles();
                    return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
                }

                return this[0].offsetWidth;
            }

            return null;
        }

        function height() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

            if (this[0] === window) {
                return window.innerHeight;
            }

            if (this.length > 0) {
                return parseFloat(this.css('height'));
            }

            return null;
        }

        function outerHeight(includeMargins) {
            if (this.length > 0) {
                if (includeMargins) {
                    const styles = this.styles();
                    return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
                }

                return this[0].offsetHeight;
            }

            return null;
        }

        function offset() {
            if (this.length > 0) {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
                const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
                const el = this[0];
                const box = el.getBoundingClientRect();
                const body = document.body;
                const clientTop = el.clientTop || body.clientTop || 0;
                const clientLeft = el.clientLeft || body.clientLeft || 0;
                const scrollTop = el === window ? window.scrollY : el.scrollTop;
                const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
                return {
                    top: box.top + scrollTop - clientTop,
                    left: box.left + scrollLeft - clientLeft
                };
            }

            return null;
        }

        function hide() {
            for (let i = 0; i < this.length; i += 1) {
                this[i].style.display = 'none';
            }

            return this;
        }

        function show() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

            for (let i = 0; i < this.length; i += 1) {
                const el = this[i];

                if (el.style.display === 'none') {
                    el.style.display = '';
                }

                if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
                    // Still not visible
                    el.style.display = 'block';
                }
            }

            return this;
        }

        function styles() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            if (this[0]) return window.getComputedStyle(this[0], null);
            return {};
        }

        function css(props, value) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let i;

            if (arguments.length === 1) {
                if (typeof props === 'string') {
                    // .css('width')
                    if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
                } else {
                    // .css({ width: '100px' })
                    for (i = 0; i < this.length; i += 1) {
                        for (const prop in props) {
                            this[i].style[prop] = props[prop];
                        }
                    }

                    return this;
                }
            }

            if (arguments.length === 2 && typeof props === 'string') {
                // .css('width', '100px')
                for (i = 0; i < this.length; i += 1) {
                    this[i].style[props] = value;
                }

                return this;
            }

            return this;
        }

        function each(callback) {
            if (!callback) return this;
            this.forEach((el, index) => {
                callback.apply(el, [el, index]);
            });
            return this;
        }

        function filter(callback) {
            const result = arrayFilter(this, callback);
            return $(result);
        }

        function html(html) {
            if (typeof html === 'undefined') {
                return this[0] ? this[0].innerHTML : null;
            }

            for (let i = 0; i < this.length; i += 1) {
                this[i].innerHTML = html;
            }

            return this;
        }

        function text(text) {
            if (typeof text === 'undefined') {
                return this[0] ? this[0].textContent.trim() : null;
            }

            for (let i = 0; i < this.length; i += 1) {
                this[i].textContent = text;
            }

            return this;
        }

        function is(selector) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const el = this[0];
            let compareWith;
            let i;
            if (!el || typeof selector === 'undefined') return false;

            if (typeof selector === 'string') {
                if (el.matches) return el.matches(selector);
                if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
                if (el.msMatchesSelector) return el.msMatchesSelector(selector);
                compareWith = $(selector);

                for (i = 0; i < compareWith.length; i += 1) {
                    if (compareWith[i] === el) return true;
                }

                return false;
            }

            if (selector === document) {
                return el === document;
            }

            if (selector === window) {
                return el === window;
            }

            if (selector.nodeType || selector instanceof Dom7) {
                compareWith = selector.nodeType ? [selector] : selector;

                for (i = 0; i < compareWith.length; i += 1) {
                    if (compareWith[i] === el) return true;
                }

                return false;
            }

            return false;
        }

        function index() {
            let child = this[0];
            let i;

            if (child) {
                i = 0; // eslint-disable-next-line

                while ((child = child.previousSibling) !== null) {
                    if (child.nodeType === 1) i += 1;
                }

                return i;
            }

            return undefined;
        }

        function eq(index) {
            if (typeof index === 'undefined') return this;
            const length = this.length;

            if (index > length - 1) {
                return $([]);
            }

            if (index < 0) {
                const returnIndex = length + index;
                if (returnIndex < 0) return $([]);
                return $([this[returnIndex]]);
            }

            return $([this[index]]);
        }

        function append(...els) {
            let newChild;
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();

            for (let k = 0; k < els.length; k += 1) {
                newChild = els[k];

                for (let i = 0; i < this.length; i += 1) {
                    if (typeof newChild === 'string') {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = newChild;

                        while (tempDiv.firstChild) {
                            this[i].appendChild(tempDiv.firstChild);
                        }
                    } else if (newChild instanceof Dom7) {
                        for (let j = 0; j < newChild.length; j += 1) {
                            this[i].appendChild(newChild[j]);
                        }
                    } else {
                        this[i].appendChild(newChild);
                    }
                }
            }

            return this;
        }

        function appendTo(parent) {
            $(parent).append(this);
            return this;
        }

        function prepend(newChild) {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            let i;
            let j;

            for (i = 0; i < this.length; i += 1) {
                if (typeof newChild === 'string') {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = newChild;

                    for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
                        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
                    }
                } else if (newChild instanceof Dom7) {
                    for (j = 0; j < newChild.length; j += 1) {
                        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
                    }
                } else {
                    this[i].insertBefore(newChild, this[i].childNodes[0]);
                }
            }

            return this;
        }

        function prependTo(parent) {
            $(parent).prepend(this);
            return this;
        }

        function insertBefore(selector) {
            const before = $(selector);

            for (let i = 0; i < this.length; i += 1) {
                if (before.length === 1) {
                    before[0].parentNode.insertBefore(this[i], before[0]);
                } else if (before.length > 1) {
                    for (let j = 0; j < before.length; j += 1) {
                        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
                    }
                }
            }
        }

        function insertAfter(selector) {
            const after = $(selector);

            for (let i = 0; i < this.length; i += 1) {
                if (after.length === 1) {
                    after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
                } else if (after.length > 1) {
                    for (let j = 0; j < after.length; j += 1) {
                        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
                    }
                }
            }
        }

        function next(selector) {
            if (this.length > 0) {
                if (selector) {
                    if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
                        return $([this[0].nextElementSibling]);
                    }

                    return $([]);
                }

                if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);
                return $([]);
            }

            return $([]);
        }

        function nextAll(selector) {
            const nextEls = [];
            let el = this[0];
            if (!el) return $([]);

            while (el.nextElementSibling) {
                const next = el.nextElementSibling; // eslint-disable-line

                if (selector) {
                    if ($(next).is(selector)) nextEls.push(next);
                } else nextEls.push(next);

                el = next;
            }

            return $(nextEls);
        }

        function prev(selector) {
            if (this.length > 0) {
                const el = this[0];

                if (selector) {
                    if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
                        return $([el.previousElementSibling]);
                    }

                    return $([]);
                }

                if (el.previousElementSibling) return $([el.previousElementSibling]);
                return $([]);
            }

            return $([]);
        }

        function prevAll(selector) {
            const prevEls = [];
            let el = this[0];
            if (!el) return $([]);

            while (el.previousElementSibling) {
                const prev = el.previousElementSibling; // eslint-disable-line

                if (selector) {
                    if ($(prev).is(selector)) prevEls.push(prev);
                } else prevEls.push(prev);

                el = prev;
            }

            return $(prevEls);
        }

        function siblings(selector) {
            return this.nextAll(selector).add(this.prevAll(selector));
        }

        function parent(selector) {
            const parents = []; // eslint-disable-line

            for (let i = 0; i < this.length; i += 1) {
                if (this[i].parentNode !== null) {
                    if (selector) {
                        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
                    } else {
                        parents.push(this[i].parentNode);
                    }
                }
            }

            return $(parents);
        }

        function parents(selector) {
            const parents = []; // eslint-disable-line

            for (let i = 0; i < this.length; i += 1) {
                let parent = this[i].parentNode; // eslint-disable-line

                while (parent) {
                    if (selector) {
                        if ($(parent).is(selector)) parents.push(parent);
                    } else {
                        parents.push(parent);
                    }

                    parent = parent.parentNode;
                }
            }

            return $(parents);
        }

        function closest(selector) {
            let closest = this; // eslint-disable-line

            if (typeof selector === 'undefined') {
                return $([]);
            }

            if (!closest.is(selector)) {
                closest = closest.parents(selector).eq(0);
            }

            return closest;
        }

        function find(selector) {
            const foundElements = [];

            for (let i = 0; i < this.length; i += 1) {
                const found = this[i].querySelectorAll(selector);

                for (let j = 0; j < found.length; j += 1) {
                    foundElements.push(found[j]);
                }
            }

            return $(foundElements);
        }

        function children(selector) {
            const children = []; // eslint-disable-line

            for (let i = 0; i < this.length; i += 1) {
                const childNodes = this[i].children;

                for (let j = 0; j < childNodes.length; j += 1) {
                    if (!selector || $(childNodes[j]).is(selector)) {
                        children.push(childNodes[j]);
                    }
                }
            }

            return $(children);
        }

        function remove() {
            for (let i = 0; i < this.length; i += 1) {
                if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
            }

            return this;
        }

        function detach() {
            return this.remove();
        }

        function add(...els) {
            const dom = this;
            let i;
            let j;

            for (i = 0; i < els.length; i += 1) {
                const toAdd = $(els[i]);

                for (j = 0; j < toAdd.length; j += 1) {
                    dom.push(toAdd[j]);
                }
            }

            return dom;
        }

        function empty() {
            for (let i = 0; i < this.length; i += 1) {
                const el = this[i];

                if (el.nodeType === 1) {
                    for (let j = 0; j < el.childNodes.length; j += 1) {
                        if (el.childNodes[j].parentNode) {
                            el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
                        }
                    }

                    el.textContent = '';
                }
            }

            return this;
        }

// eslint-disable-next-line

        function scrollTo(...args) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let [left, top, duration, easing, callback] = args;

            if (args.length === 4 && typeof easing === 'function') {
                callback = easing;
                [left, top, duration, callback, easing] = args;
            }

            if (typeof easing === 'undefined') easing = 'swing';
            return this.each(function animate() {
                const el = this;
                let currentTop;
                let currentLeft;
                let maxTop;
                let maxLeft;
                let newTop;
                let newLeft;
                let scrollTop; // eslint-disable-line

                let scrollLeft; // eslint-disable-line

                let animateTop = top > 0 || top === 0;
                let animateLeft = left > 0 || left === 0;

                if (typeof easing === 'undefined') {
                    easing = 'swing';
                }

                if (animateTop) {
                    currentTop = el.scrollTop;

                    if (!duration) {
                        el.scrollTop = top;
                    }
                }

                if (animateLeft) {
                    currentLeft = el.scrollLeft;

                    if (!duration) {
                        el.scrollLeft = left;
                    }
                }

                if (!duration) return;

                if (animateTop) {
                    maxTop = el.scrollHeight - el.offsetHeight;
                    newTop = Math.max(Math.min(top, maxTop), 0);
                }

                if (animateLeft) {
                    maxLeft = el.scrollWidth - el.offsetWidth;
                    newLeft = Math.max(Math.min(left, maxLeft), 0);
                }

                let startTime = null;
                if (animateTop && newTop === currentTop) animateTop = false;
                if (animateLeft && newLeft === currentLeft) animateLeft = false;

                function render(time = new Date().getTime()) {
                    if (startTime === null) {
                        startTime = time;
                    }

                    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
                    const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;
                    let done;
                    if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);
                    if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);

                    if (animateTop && newTop > currentTop && scrollTop >= newTop) {
                        el.scrollTop = newTop;
                        done = true;
                    }

                    if (animateTop && newTop < currentTop && scrollTop <= newTop) {
                        el.scrollTop = newTop;
                        done = true;
                    }

                    if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
                        el.scrollLeft = newLeft;
                        done = true;
                    }

                    if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
                        el.scrollLeft = newLeft;
                        done = true;
                    }

                    if (done) {
                        if (callback) callback();
                        return;
                    }

                    if (animateTop) el.scrollTop = scrollTop;
                    if (animateLeft) el.scrollLeft = scrollLeft;
                    window.requestAnimationFrame(render);
                }

                window.requestAnimationFrame(render);
            });
        } // scrollTop(top, duration, easing, callback) {


        function scrollTop(...args) {
            let [top, duration, easing, callback] = args;

            if (args.length === 3 && typeof easing === 'function') {
                [top, duration, callback, easing] = args;
            }

            const dom = this;

            if (typeof top === 'undefined') {
                if (dom.length > 0) return dom[0].scrollTop;
                return null;
            }

            return dom.scrollTo(undefined, top, duration, easing, callback);
        }

        function scrollLeft(...args) {
            let [left, duration, easing, callback] = args;

            if (args.length === 3 && typeof easing === 'function') {
                [left, duration, callback, easing] = args;
            }

            const dom = this;

            if (typeof left === 'undefined') {
                if (dom.length > 0) return dom[0].scrollLeft;
                return null;
            }

            return dom.scrollTo(left, undefined, duration, easing, callback);
        }

// eslint-disable-next-line

        function animate(initialProps, initialParams) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const els = this;
            const a = {
                props: Object.assign({}, initialProps),
                params: Object.assign({
                    duration: 300,
                    easing: 'swing' // or 'linear'

                    /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */

                }, initialParams),
                elements: els,
                animating: false,
                que: [],

                easingProgress(easing, progress) {
                    if (easing === 'swing') {
                        return 0.5 - Math.cos(progress * Math.PI) / 2;
                    }

                    if (typeof easing === 'function') {
                        return easing(progress);
                    }

                    return progress;
                },

                stop() {
                    if (a.frameId) {
                        window.cancelAnimationFrame(a.frameId);
                    }

                    a.animating = false;
                    a.elements.each(el => {
                        const element = el;
                        delete element.dom7AnimateInstance;
                    });
                    a.que = [];
                },

                done(complete) {
                    a.animating = false;
                    a.elements.each(el => {
                        const element = el;
                        delete element.dom7AnimateInstance;
                    });
                    if (complete) complete(els);

                    if (a.que.length > 0) {
                        const que = a.que.shift();
                        a.animate(que[0], que[1]);
                    }
                },

                animate(props, params) {
                    if (a.animating) {
                        a.que.push([props, params]);
                        return a;
                    }

                    const elements = []; // Define & Cache Initials & Units

                    a.elements.each((el, index) => {
                        let initialFullValue;
                        let initialValue;
                        let unit;
                        let finalValue;
                        let finalFullValue;
                        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;
                        elements[index] = {
                            container: el
                        };
                        Object.keys(props).forEach(prop => {
                            initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
                            initialValue = parseFloat(initialFullValue);
                            unit = initialFullValue.replace(initialValue, '');
                            finalValue = parseFloat(props[prop]);
                            finalFullValue = props[prop] + unit;
                            elements[index][prop] = {
                                initialFullValue,
                                initialValue,
                                unit,
                                finalValue,
                                finalFullValue,
                                currentValue: initialValue
                            };
                        });
                    });
                    let startTime = null;
                    let time;
                    let elementsDone = 0;
                    let propsDone = 0;
                    let done;
                    let began = false;
                    a.animating = true;

                    function render() {
                        time = new Date().getTime();
                        let progress;
                        let easeProgress; // let el;

                        if (!began) {
                            began = true;
                            if (params.begin) params.begin(els);
                        }

                        if (startTime === null) {
                            startTime = time;
                        }

                        if (params.progress) {
                            // eslint-disable-next-line
                            params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);
                        }

                        elements.forEach(element => {
                            const el = element;
                            if (done || el.done) return;
                            Object.keys(props).forEach(prop => {
                                if (done || el.done) return;
                                progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
                                easeProgress = a.easingProgress(params.easing, progress);
                                const {
                                    initialValue,
                                    finalValue,
                                    unit
                                } = el[prop];
                                el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);
                                const currentValue = el[prop].currentValue;

                                if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {
                                    el.container.style[prop] = finalValue + unit;
                                    propsDone += 1;

                                    if (propsDone === Object.keys(props).length) {
                                        el.done = true;
                                        elementsDone += 1;
                                    }

                                    if (elementsDone === elements.length) {
                                        done = true;
                                    }
                                }

                                if (done) {
                                    a.done(params.complete);
                                    return;
                                }

                                el.container.style[prop] = currentValue + unit;
                            });
                        });
                        if (done) return; // Then call

                        a.frameId = window.requestAnimationFrame(render);
                    }

                    a.frameId = window.requestAnimationFrame(render);
                    return a;
                }

            };

            if (a.elements.length === 0) {
                return els;
            }

            let animateInstance;

            for (let i = 0; i < a.elements.length; i += 1) {
                if (a.elements[i].dom7AnimateInstance) {
                    animateInstance = a.elements[i].dom7AnimateInstance;
                } else a.elements[i].dom7AnimateInstance = a;
            }

            if (!animateInstance) {
                animateInstance = a;
            }

            if (initialProps === 'stop') {
                animateInstance.stop();
            } else {
                animateInstance.animate(a.props, a.params);
            }

            return els;
        }

        function stop() {
            const els = this;

            for (let i = 0; i < els.length; i += 1) {
                if (els[i].dom7AnimateInstance) {
                    els[i].dom7AnimateInstance.stop();
                }
            }
        }

        const noTrigger = 'resize scroll'.split(' ');

        function shortcut(name) {
            function eventHandler(...args) {
                if (typeof args[0] === 'undefined') {
                    for (let i = 0; i < this.length; i += 1) {
                        if (noTrigger.indexOf(name) < 0) {
                            if (name in this[i]) this[i][name]();else {
                                $(this[i]).trigger(name);
                            }
                        }
                    }

                    return this;
                }

                return this.on(name, ...args);
            }

            return eventHandler;
        }

        const click = shortcut('click');
        const blur = shortcut('blur');
        const focus = shortcut('focus');
        const focusin = shortcut('focusin');
        const focusout = shortcut('focusout');
        const keyup = shortcut('keyup');
        const keydown = shortcut('keydown');
        const keypress = shortcut('keypress');
        const submit = shortcut('submit');
        const change = shortcut('change');
        const mousedown = shortcut('mousedown');
        const mousemove = shortcut('mousemove');
        const mouseup = shortcut('mouseup');
        const mouseenter = shortcut('mouseenter');
        const mouseleave = shortcut('mouseleave');
        const mouseout = shortcut('mouseout');
        const mouseover = shortcut('mouseover');
        const touchstart = shortcut('touchstart');
        const touchend = shortcut('touchend');
        const touchmove = shortcut('touchmove');
        const resize = shortcut('resize');
        const scroll = shortcut('scroll');

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ($);



        /***/ }),

    /***/ "./node_modules/orderedmap/dist/index.js":
    /*!***********************************************!*\
  !*** ./node_modules/orderedmap/dist/index.js ***!
  \***********************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
// ::- Persistent data structure representing an ordered mapping from
// strings to values, with some convenient update methods.
        function OrderedMap(content) {
            this.content = content;
        }

        OrderedMap.prototype = {
            constructor: OrderedMap,

            find: function(key) {
                for (var i = 0; i < this.content.length; i += 2)
                    if (this.content[i] === key) return i
                return -1
            },

            // :: (string) → ?any
            // Retrieve the value stored under `key`, or return undefined when
            // no such key exists.
            get: function(key) {
                var found = this.find(key);
                return found == -1 ? undefined : this.content[found + 1]
            },

            // :: (string, any, ?string) → OrderedMap
            // Create a new map by replacing the value of `key` with a new
            // value, or adding a binding to the end of the map. If `newKey` is
            // given, the key of the binding will be replaced with that key.
            update: function(key, value, newKey) {
                var self = newKey && newKey != key ? this.remove(newKey) : this;
                var found = self.find(key), content = self.content.slice();
                if (found == -1) {
                    content.push(newKey || key, value);
                } else {
                    content[found + 1] = value;
                    if (newKey) content[found] = newKey;
                }
                return new OrderedMap(content)
            },

            // :: (string) → OrderedMap
            // Return a map with the given key removed, if it existed.
            remove: function(key) {
                var found = this.find(key);
                if (found == -1) return this
                var content = this.content.slice();
                content.splice(found, 2);
                return new OrderedMap(content)
            },

            // :: (string, any) → OrderedMap
            // Add a new key to the start of the map.
            addToStart: function(key, value) {
                return new OrderedMap([key, value].concat(this.remove(key).content))
            },

            // :: (string, any) → OrderedMap
            // Add a new key to the end of the map.
            addToEnd: function(key, value) {
                var content = this.remove(key).content.slice();
                content.push(key, value);
                return new OrderedMap(content)
            },

            // :: (string, string, any) → OrderedMap
            // Add a key after the given key. If `place` is not found, the new
            // key is added to the end.
            addBefore: function(place, key, value) {
                var without = this.remove(key), content = without.content.slice();
                var found = without.find(place);
                content.splice(found == -1 ? content.length : found, 0, key, value);
                return new OrderedMap(content)
            },

            // :: ((key: string, value: any))
            // Call the given function for each key/value pair in the map, in
            // order.
            forEach: function(f) {
                for (var i = 0; i < this.content.length; i += 2)
                    f(this.content[i], this.content[i + 1]);
            },

            // :: (union<Object, OrderedMap>) → OrderedMap
            // Create a new map by prepending the keys in this map that don't
            // appear in `map` before the keys in `map`.
            prepend: function(map) {
                map = OrderedMap.from(map);
                if (!map.size) return this
                return new OrderedMap(map.content.concat(this.subtract(map).content))
            },

            // :: (union<Object, OrderedMap>) → OrderedMap
            // Create a new map by appending the keys in this map that don't
            // appear in `map` after the keys in `map`.
            append: function(map) {
                map = OrderedMap.from(map);
                if (!map.size) return this
                return new OrderedMap(this.subtract(map).content.concat(map.content))
            },

            // :: (union<Object, OrderedMap>) → OrderedMap
            // Create a map containing all the keys in this map that don't
            // appear in `map`.
            subtract: function(map) {
                var result = this;
                map = OrderedMap.from(map);
                for (var i = 0; i < map.content.length; i += 2)
                    result = result.remove(map.content[i]);
                return result
            },

            // :: number
            // The amount of keys in this map.
            get size() {
                return this.content.length >> 1
            }
        };

// :: (?union<Object, OrderedMap>) → OrderedMap
// Return a map with the given content. If null, create an empty
// map. If given an ordered map, return that map itself. If given an
// object, create a map from the object's properties.
        OrderedMap.from = function(value) {
            if (value instanceof OrderedMap) return value
            var content = [];
            if (value) for (var prop in value) content.push(prop, value[prop]);
            return new OrderedMap(content)
        };

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OrderedMap);


        /***/ }),

    /***/ "./node_modules/prosemirror-commands/dist/index.js":
    /*!*********************************************************!*\
  !*** ./node_modules/prosemirror-commands/dist/index.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "autoJoin": () => (/* binding */ autoJoin),
            /* harmony export */   "baseKeymap": () => (/* binding */ baseKeymap),
            /* harmony export */   "chainCommands": () => (/* binding */ chainCommands),
            /* harmony export */   "createParagraphNear": () => (/* binding */ createParagraphNear),
            /* harmony export */   "deleteSelection": () => (/* binding */ deleteSelection),
            /* harmony export */   "exitCode": () => (/* binding */ exitCode),
            /* harmony export */   "joinBackward": () => (/* binding */ joinBackward),
            /* harmony export */   "joinDown": () => (/* binding */ joinDown),
            /* harmony export */   "joinForward": () => (/* binding */ joinForward),
            /* harmony export */   "joinUp": () => (/* binding */ joinUp),
            /* harmony export */   "lift": () => (/* binding */ lift),
            /* harmony export */   "liftEmptyBlock": () => (/* binding */ liftEmptyBlock),
            /* harmony export */   "macBaseKeymap": () => (/* binding */ macBaseKeymap),
            /* harmony export */   "newlineInCode": () => (/* binding */ newlineInCode),
            /* harmony export */   "pcBaseKeymap": () => (/* binding */ pcBaseKeymap),
            /* harmony export */   "selectAll": () => (/* binding */ selectAll),
            /* harmony export */   "selectNodeBackward": () => (/* binding */ selectNodeBackward),
            /* harmony export */   "selectNodeForward": () => (/* binding */ selectNodeForward),
            /* harmony export */   "selectParentNode": () => (/* binding */ selectParentNode),
            /* harmony export */   "selectTextblockEnd": () => (/* binding */ selectTextblockEnd),
            /* harmony export */   "selectTextblockStart": () => (/* binding */ selectTextblockStart),
            /* harmony export */   "setBlockType": () => (/* binding */ setBlockType),
            /* harmony export */   "splitBlock": () => (/* binding */ splitBlock),
            /* harmony export */   "splitBlockKeepMarks": () => (/* binding */ splitBlockKeepMarks),
            /* harmony export */   "toggleMark": () => (/* binding */ toggleMark),
            /* harmony export */   "wrapIn": () => (/* binding */ wrapIn)
            /* harmony export */ });
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");




        /**
         Delete the selection, if there is one.
         */
        const deleteSelection = (state, dispatch) => {
            if (state.selection.empty)
                return false;
            if (dispatch)
                dispatch(state.tr.deleteSelection().scrollIntoView());
            return true;
        };
        /**
         If the selection is empty and at the start of a textblock, try to
         reduce the distance between that block and the one before it—if
         there's a block directly before it that can be joined, join them.
         If not, try to move the selected block closer to the next one in
         the document structure by lifting it out of its parent or moving it
         into a parent of the previous block. Will use the view for accurate
         (bidi-aware) start-of-textblock detection if given.
         */
        const joinBackward = (state, dispatch, view) => {
            let { $cursor } = state.selection;
            if (!$cursor || (view ? !view.endOfTextblock("backward", state)
                : $cursor.parentOffset > 0))
                return false;
            let $cut = findCutBefore($cursor);
            // If there is no node before this, try to lift
            if (!$cut) {
                let range = $cursor.blockRange(), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);
                if (target == null)
                    return false;
                if (dispatch)
                    dispatch(state.tr.lift(range, target).scrollIntoView());
                return true;
            }
            let before = $cut.nodeBefore;
            // Apply the joining algorithm
            if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
                return true;
            // If the node below has no content and the node above is
            // selectable, delete the node below and select the one above.
            if ($cursor.parent.content.size == 0 &&
                (textblockAt(before, "end") || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(before))) {
                let delStep = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)(state.doc, $cursor.before(), $cursor.after(), prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice.empty);
                if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                    if (dispatch) {
                        let tr = state.tr.step(delStep);
                        tr.setSelection(textblockAt(before, "end") ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                            : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                        dispatch(tr.scrollIntoView());
                    }
                    return true;
                }
            }
            // If the node before is an atom, delete it
            if (before.isAtom && $cut.depth == $cursor.depth - 1) {
                if (dispatch)
                    dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
                return true;
            }
            return false;
        };
        function textblockAt(node, side, only = false) {
            for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
                if (scan.isTextblock)
                    return true;
                if (only && scan.childCount != 1)
                    return false;
            }
            return false;
        }
        /**
         When the selection is empty and at the start of a textblock, select
         the node before that textblock, if possible. This is intended to be
         bound to keys like backspace, after
         [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
         commands, as a fall-back behavior when the schema doesn't allow
         deletion at the selected point.
         */
        const selectNodeBackward = (state, dispatch, view) => {
            let { $head, empty } = state.selection, $cut = $head;
            if (!empty)
                return false;
            if ($head.parent.isTextblock) {
                if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
                    return false;
                $cut = findCutBefore($head);
            }
            let node = $cut && $cut.nodeBefore;
            if (!node || !prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
            return true;
        };
        function findCutBefore($pos) {
            if (!$pos.parent.type.spec.isolating)
                for (let i = $pos.depth - 1; i >= 0; i--) {
                    if ($pos.index(i) > 0)
                        return $pos.doc.resolve($pos.before(i + 1));
                    if ($pos.node(i).type.spec.isolating)
                        break;
                }
            return null;
        }
        /**
         If the selection is empty and the cursor is at the end of a
         textblock, try to reduce or remove the boundary between that block
         and the one after it, either by joining them or by moving the other
         block closer to this one in the tree structure. Will use the view
         for accurate start-of-textblock detection if given.
         */
        const joinForward = (state, dispatch, view) => {
            let { $cursor } = state.selection;
            if (!$cursor || (view ? !view.endOfTextblock("forward", state)
                : $cursor.parentOffset < $cursor.parent.content.size))
                return false;
            let $cut = findCutAfter($cursor);
            // If there is no node after this, there's nothing to do
            if (!$cut)
                return false;
            let after = $cut.nodeAfter;
            // Try the joining algorithm
            if (deleteBarrier(state, $cut, dispatch))
                return true;
            // If the node above has no content and the node below is
            // selectable, delete the node above and select the one below.
            if ($cursor.parent.content.size == 0 &&
                (textblockAt(after, "start") || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(after))) {
                let delStep = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)(state.doc, $cursor.before(), $cursor.after(), prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice.empty);
                if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                    if (dispatch) {
                        let tr = state.tr.step(delStep);
                        tr.setSelection(textblockAt(after, "start") ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                            : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                        dispatch(tr.scrollIntoView());
                    }
                    return true;
                }
            }
            // If the next node is an atom, delete it
            if (after.isAtom && $cut.depth == $cursor.depth - 1) {
                if (dispatch)
                    dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
                return true;
            }
            return false;
        };
        /**
         When the selection is empty and at the end of a textblock, select
         the node coming after that textblock, if possible. This is intended
         to be bound to keys like delete, after
         [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
         commands, to provide a fall-back behavior when the schema doesn't
         allow deletion at the selected point.
         */
        const selectNodeForward = (state, dispatch, view) => {
            let { $head, empty } = state.selection, $cut = $head;
            if (!empty)
                return false;
            if ($head.parent.isTextblock) {
                if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
                    return false;
                $cut = findCutAfter($head);
            }
            let node = $cut && $cut.nodeAfter;
            if (!node || !prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
            return true;
        };
        function findCutAfter($pos) {
            if (!$pos.parent.type.spec.isolating)
                for (let i = $pos.depth - 1; i >= 0; i--) {
                    let parent = $pos.node(i);
                    if ($pos.index(i) + 1 < parent.childCount)
                        return $pos.doc.resolve($pos.after(i + 1));
                    if (parent.type.spec.isolating)
                        break;
                }
            return null;
        }
        /**
         Join the selected block or, if there is a text selection, the
         closest ancestor block of the selection that can be joined, with
         the sibling above it.
         */
        const joinUp = (state, dispatch) => {
            let sel = state.selection, nodeSel = sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection, point;
            if (nodeSel) {
                if (sel.node.isTextblock || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, sel.from))
                    return false;
                point = sel.from;
            }
            else {
                point = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint)(state.doc, sel.from, -1);
                if (point == null)
                    return false;
            }
            if (dispatch) {
                let tr = state.tr.join(point);
                if (nodeSel)
                    tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
        /**
         Join the selected block, or the closest ancestor of the selection
         that can be joined, with the sibling after it.
         */
        const joinDown = (state, dispatch) => {
            let sel = state.selection, point;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {
                if (sel.node.isTextblock || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, sel.to))
                    return false;
                point = sel.to;
            }
            else {
                point = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint)(state.doc, sel.to, 1);
                if (point == null)
                    return false;
            }
            if (dispatch)
                dispatch(state.tr.join(point).scrollIntoView());
            return true;
        };
        /**
         Lift the selected block, or the closest ancestor block of the
         selection that can be lifted, out of its parent node.
         */
        const lift = (state, dispatch) => {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);
            if (target == null)
                return false;
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        };
        /**
         If the selection is in a node whose type has a truthy
         [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
         selection with a newline character.
         */
        const newlineInCode = (state, dispatch) => {
            let { $head, $anchor } = state.selection;
            if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
                return false;
            if (dispatch)
                dispatch(state.tr.insertText("\n").scrollIntoView());
            return true;
        };
        function defaultBlockAt(match) {
            for (let i = 0; i < match.edgeCount; i++) {
                let { type } = match.edge(i);
                if (type.isTextblock && !type.hasRequiredAttrs())
                    return type;
            }
            return null;
        }
        /**
         When the selection is in a node with a truthy
         [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
         default block after the code block, and move the cursor there.
         */
        const exitCode = (state, dispatch) => {
            let { $head, $anchor } = state.selection;
            if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
                return false;
            let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
            if (!type || !above.canReplaceWith(after, after, type))
                return false;
            if (dispatch) {
                let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
                tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(tr.doc.resolve(pos), 1));
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
        /**
         If a block node is selected, create an empty paragraph before (if
         it is its parent's first child) or after it.
         */
        const createParagraphNear = (state, dispatch) => {
            let sel = state.selection, { $from, $to } = sel;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
                return false;
            let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
            if (!type || !type.isTextblock)
                return false;
            if (dispatch) {
                let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
                let tr = state.tr.insert(side, type.createAndFill());
                tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(tr.doc, side + 1));
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
        /**
         If the cursor is in an empty textblock that can be lifted, lift the
         block.
         */
        const liftEmptyBlock = (state, dispatch) => {
            let { $cursor } = state.selection;
            if (!$cursor || $cursor.parent.content.size)
                return false;
            if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
                let before = $cursor.before();
                if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(state.doc, before)) {
                    if (dispatch)
                        dispatch(state.tr.split(before).scrollIntoView());
                    return true;
                }
            }
            let range = $cursor.blockRange(), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);
            if (target == null)
                return false;
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        };
        /**
         Split the parent block of the selection. If the selection is a text
         selection, also delete its content.
         */
        const splitBlock = (state, dispatch) => {
            let { $from, $to } = state.selection;
            if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && state.selection.node.isBlock) {
                if (!$from.parentOffset || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(state.doc, $from.pos))
                    return false;
                if (dispatch)
                    dispatch(state.tr.split($from.pos).scrollIntoView());
                return true;
            }
            if (!$from.parent.isBlock)
                return false;
            if (dispatch) {
                let atEnd = $to.parentOffset == $to.parent.content.size;
                let tr = state.tr;
                if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection || state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection)
                    tr.deleteSelection();
                let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
                let types = atEnd && deflt ? [{ type: deflt }] : undefined;
                let can = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);
                if (!types && !can && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                    if (deflt)
                        types = [{ type: deflt }];
                    can = true;
                }
                if (can) {
                    tr.split(tr.mapping.map($from.pos), 1, types);
                    if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
                        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
                        if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
                            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                    }
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
        /**
         Acts like [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock), but without
         resetting the set of active marks at the cursor.
         */
        const splitBlockKeepMarks = (state, dispatch) => {
            return splitBlock(state, dispatch && (tr => {
                let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());
                if (marks)
                    tr.ensureMarks(marks);
                dispatch(tr);
            }));
        };
        /**
         Move the selection to the node wrapping the current selection, if
         any. (Will not select the document node.)
         */
        const selectParentNode = (state, dispatch) => {
            let { $from, to } = state.selection, pos;
            let same = $from.sharedDepth(to);
            if (same == 0)
                return false;
            pos = $from.before(same);
            if (dispatch)
                dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, pos)));
            return true;
        };
        /**
         Select the whole document.
         */
        const selectAll = (state, dispatch) => {
            if (dispatch)
                dispatch(state.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection(state.doc)));
            return true;
        };
        function joinMaybeClear(state, $pos, dispatch) {
            let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
            if (!before || !after || !before.type.compatibleContent(after.type))
                return false;
            if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
                if (dispatch)
                    dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
                return true;
            }
            if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, $pos.pos)))
                return false;
            if (dispatch)
                dispatch(state.tr
                    .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                    .join($pos.pos)
                    .scrollIntoView());
            return true;
        }
        function deleteBarrier(state, $cut, dispatch) {
            let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
            if (before.type.spec.isolating || after.type.spec.isolating)
                return false;
            if (joinMaybeClear(state, $cut, dispatch))
                return true;
            let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
            if (canDelAfter &&
                (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
                match.matchType(conn[0] || after.type).validEnd) {
                if (dispatch) {
                    let end = $cut.pos + after.nodeSize, wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.empty;
                    for (let i = conn.length - 1; i >= 0; i--)
                        wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(conn[i].create(null, wrap));
                    wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(before.copy(wrap));
                    let tr = state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice(wrap, 1, 0), conn.length, true));
                    let joinAt = end + 2 * conn.length;
                    if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(tr.doc, joinAt))
                        tr.join(joinAt);
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
            let selAfter = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom($cut, 1);
            let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);
            if (target != null && target >= $cut.depth) {
                if (dispatch)
                    dispatch(state.tr.lift(range, target).scrollIntoView());
                return true;
            }
            if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
                let at = before, wrap = [];
                for (;;) {
                    wrap.push(at);
                    if (at.isTextblock)
                        break;
                    at = at.lastChild;
                }
                let afterText = after, afterDepth = 1;
                for (; !afterText.isTextblock; afterText = afterText.firstChild)
                    afterDepth++;
                if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
                    if (dispatch) {
                        let end = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.empty;
                        for (let i = wrap.length - 1; i >= 0; i--)
                            end = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(wrap[i].copy(end));
                        let tr = state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice(end, wrap.length, 0), 0, true));
                        dispatch(tr.scrollIntoView());
                    }
                    return true;
                }
            }
            return false;
        }
        function selectTextblockSide(side) {
            return function (state, dispatch) {
                let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
                let depth = $pos.depth;
                while ($pos.node(depth).isInline) {
                    if (!depth)
                        return false;
                    depth--;
                }
                if (!$pos.node(depth).isTextblock)
                    return false;
                if (dispatch)
                    dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
                return true;
            };
        }
        /**
         Moves the cursor to the start of current text block.
         */
        const selectTextblockStart = selectTextblockSide(-1);
        /**
         Moves the cursor to the end of current text block.
         */
        const selectTextblockEnd = selectTextblockSide(1);
// Parameterized commands
        /**
         Wrap the selection in a node of the given type with the given
         attributes.
         */
        function wrapIn(nodeType, attrs = null) {
            return function (state, dispatch) {
                let { $from, $to } = state.selection;
                let range = $from.blockRange($to), wrapping = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping)(range, nodeType, attrs);
                if (!wrapping)
                    return false;
                if (dispatch)
                    dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
                return true;
            };
        }
        /**
         Returns a command that tries to set the selected textblocks to the
         given node type with the given attributes.
         */
        function setBlockType(nodeType, attrs = null) {
            return function (state, dispatch) {
                let { from, to } = state.selection;
                let applicable = false;
                state.doc.nodesBetween(from, to, (node, pos) => {
                    if (applicable)
                        return false;
                    if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                        return;
                    if (node.type == nodeType) {
                        applicable = true;
                    }
                    else {
                        let $pos = state.doc.resolve(pos), index = $pos.index();
                        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                    }
                });
                if (!applicable)
                    return false;
                if (dispatch)
                    dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView());
                return true;
            };
        }
        function markApplies(doc, ranges, type) {
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i];
                let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false;
                doc.nodesBetween($from.pos, $to.pos, node => {
                    if (can)
                        return false;
                    can = node.inlineContent && node.type.allowsMarkType(type);
                });
                if (can)
                    return true;
            }
            return false;
        }
        /**
         Create a command function that toggles the given mark with the
         given attributes. Will return `false` when the current selection
         doesn't support that mark. This will remove the mark if any marks
         of that type exist in the selection, or add it otherwise. If the
         selection is empty, this applies to the [stored
         marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the
         document.
         */
        function toggleMark(markType, attrs = null) {
            return function (state, dispatch) {
                let { empty, $cursor, ranges } = state.selection;
                if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType))
                    return false;
                if (dispatch) {
                    if ($cursor) {
                        if (markType.isInSet(state.storedMarks || $cursor.marks()))
                            dispatch(state.tr.removeStoredMark(markType));
                        else
                            dispatch(state.tr.addStoredMark(markType.create(attrs)));
                    }
                    else {
                        let has = false, tr = state.tr;
                        for (let i = 0; !has && i < ranges.length; i++) {
                            let { $from, $to } = ranges[i];
                            has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
                        }
                        for (let i = 0; i < ranges.length; i++) {
                            let { $from, $to } = ranges[i];
                            if (has) {
                                tr.removeMark($from.pos, $to.pos, markType);
                            }
                            else {
                                let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
                                let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
                                let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
                                if (from + spaceStart < to) {
                                    from += spaceStart;
                                    to -= spaceEnd;
                                }
                                tr.addMark(from, to, markType.create(attrs));
                            }
                        }
                        dispatch(tr.scrollIntoView());
                    }
                }
                return true;
            };
        }
        function wrapDispatchForJoin(dispatch, isJoinable) {
            return (tr) => {
                if (!tr.isGeneric)
                    return dispatch(tr);
                let ranges = [];
                for (let i = 0; i < tr.mapping.maps.length; i++) {
                    let map = tr.mapping.maps[i];
                    for (let j = 0; j < ranges.length; j++)
                        ranges[j] = map.map(ranges[j]);
                    map.forEach((_s, _e, from, to) => ranges.push(from, to));
                }
                // Figure out which joinable points exist inside those ranges,
                // by checking all node boundaries in their parent nodes.
                let joinable = [];
                for (let i = 0; i < ranges.length; i += 2) {
                    let from = ranges[i], to = ranges[i + 1];
                    let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth);
                    for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {
                        let after = parent.maybeChild(index);
                        if (!after)
                            break;
                        if (index && joinable.indexOf(pos) == -1) {
                            let before = parent.child(index - 1);
                            if (before.type == after.type && isJoinable(before, after))
                                joinable.push(pos);
                        }
                        pos += after.nodeSize;
                    }
                }
                // Join the joinable points
                joinable.sort((a, b) => a - b);
                for (let i = joinable.length - 1; i >= 0; i--) {
                    if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(tr.doc, joinable[i]))
                        tr.join(joinable[i]);
                }
                dispatch(tr);
            };
        }
        /**
         Wrap a command so that, when it produces a transform that causes
         two joinable nodes to end up next to each other, those are joined.
         Nodes are considered joinable when they are of the same type and
         when the `isJoinable` predicate returns true for them or, if an
         array of strings was passed, if their node type name is in that
         array.
         */
        function autoJoin(command, isJoinable) {
            let canJoin = Array.isArray(isJoinable) ? (node) => isJoinable.indexOf(node.type.name) > -1
                : isJoinable;
            return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, canJoin), view);
        }
        /**
         Combine a number of command functions into a single function (which
         calls them one by one until one returns true).
         */
        function chainCommands(...commands) {
            return function (state, dispatch, view) {
                for (let i = 0; i < commands.length; i++)
                    if (commands[i](state, dispatch, view))
                        return true;
                return false;
            };
        }
        let backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
        let del = chainCommands(deleteSelection, joinForward, selectNodeForward);
        /**
         A basic keymap containing bindings not specific to any schema.
         Binds the following keys (when multiple commands are listed, they
         are chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):

         * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
         * **Mod-Enter** to `exitCode`
         * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
         * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
         * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
         * **Mod-a** to `selectAll`
         */
        const pcBaseKeymap = {
            "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
            "Mod-Enter": exitCode,
            "Backspace": backspace,
            "Mod-Backspace": backspace,
            "Shift-Backspace": backspace,
            "Delete": del,
            "Mod-Delete": del,
            "Mod-a": selectAll
        };
        /**
         A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
         **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
         **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
         Ctrl-Delete.
         */
        const macBaseKeymap = {
            "Ctrl-h": pcBaseKeymap["Backspace"],
            "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
            "Ctrl-d": pcBaseKeymap["Delete"],
            "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
            "Alt-Delete": pcBaseKeymap["Mod-Delete"],
            "Alt-d": pcBaseKeymap["Mod-Delete"],
            "Ctrl-a": selectTextblockStart,
            "Ctrl-e": selectTextblockEnd
        };
        for (let key in pcBaseKeymap)
            macBaseKeymap[key] = pcBaseKeymap[key];
        const mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
            // @ts-ignore
            : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
        /**
         Depending on the detected platform, this will hold
         [`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or
         [`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).
         */
        const baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;




        /***/ }),

    /***/ "./node_modules/prosemirror-dropcursor/dist/index.js":
    /*!***********************************************************!*\
  !*** ./node_modules/prosemirror-dropcursor/dist/index.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "dropCursor": () => (/* binding */ dropCursor)
            /* harmony export */ });
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");



        /**
         Create a plugin that, when added to a ProseMirror instance,
         causes a decoration to show up at the drop position when something
         is dragged over the editor.

         Nodes may add a `disableDropCursor` property to their spec to
         control the showing of a drop cursor inside them. This may be a
         boolean or a function, which will be called with a view and a
         position, and should return a boolean.
         */
        function dropCursor(options = {}) {
            return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({
                view(editorView) { return new DropCursorView(editorView, options); }
            });
        }
        class DropCursorView {
            constructor(editorView, options) {
                this.editorView = editorView;
                this.cursorPos = null;
                this.element = null;
                this.timeout = -1;
                this.width = options.width || 1;
                this.color = options.color || "black";
                this.class = options.class;
                this.handlers = ["dragover", "dragend", "drop", "dragleave"].map(name => {
                    let handler = (e) => { this[name](e); };
                    editorView.dom.addEventListener(name, handler);
                    return { name, handler };
                });
            }
            destroy() {
                this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
            }
            update(editorView, prevState) {
                if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
                    if (this.cursorPos > editorView.state.doc.content.size)
                        this.setCursor(null);
                    else
                        this.updateOverlay();
                }
            }
            setCursor(pos) {
                if (pos == this.cursorPos)
                    return;
                this.cursorPos = pos;
                if (pos == null) {
                    this.element.parentNode.removeChild(this.element);
                    this.element = null;
                }
                else {
                    this.updateOverlay();
                }
            }
            updateOverlay() {
                let $pos = this.editorView.state.doc.resolve(this.cursorPos), rect;
                if (!$pos.parent.inlineContent) {
                    let before = $pos.nodeBefore, after = $pos.nodeAfter;
                    if (before || after) {
                        let nodeRect = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0))
                            .getBoundingClientRect();
                        let top = before ? nodeRect.bottom : nodeRect.top;
                        if (before && after)
                            top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
                        rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };
                    }
                }
                if (!rect) {
                    let coords = this.editorView.coordsAtPos(this.cursorPos);
                    rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
                }
                let parent = this.editorView.dom.offsetParent;
                if (!this.element) {
                    this.element = parent.appendChild(document.createElement("div"));
                    if (this.class)
                        this.element.className = this.class;
                    this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none; background-color: " + this.color;
                }
                let parentLeft, parentTop;
                if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
                    parentLeft = -pageXOffset;
                    parentTop = -pageYOffset;
                }
                else {
                    let rect = parent.getBoundingClientRect();
                    parentLeft = rect.left - parent.scrollLeft;
                    parentTop = rect.top - parent.scrollTop;
                }
                this.element.style.left = (rect.left - parentLeft) + "px";
                this.element.style.top = (rect.top - parentTop) + "px";
                this.element.style.width = (rect.right - rect.left) + "px";
                this.element.style.height = (rect.bottom - rect.top) + "px";
            }
            scheduleRemoval(timeout) {
                clearTimeout(this.timeout);
                this.timeout = setTimeout(() => this.setCursor(null), timeout);
            }
            dragover(event) {
                if (!this.editorView.editable)
                    return;
                let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
                let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
                let disableDropCursor = node && node.type.spec.disableDropCursor;
                let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos) : disableDropCursor;
                if (pos && !disabled) {
                    let target = pos.pos;
                    if (this.editorView.dragging && this.editorView.dragging.slice) {
                        target = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.dropPoint)(this.editorView.state.doc, target, this.editorView.dragging.slice);
                        if (target == null)
                            return this.setCursor(null);
                    }
                    this.setCursor(target);
                    this.scheduleRemoval(5000);
                }
            }
            dragend() {
                this.scheduleRemoval(20);
            }
            drop() {
                this.scheduleRemoval(20);
            }
            dragleave(event) {
                if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
                    this.setCursor(null);
            }
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-gapcursor/dist/index.js":
    /*!**********************************************************!*\
  !*** ./node_modules/prosemirror-gapcursor/dist/index.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "GapCursor": () => (/* binding */ GapCursor),
            /* harmony export */   "gapCursor": () => (/* binding */ gapCursor)
            /* harmony export */ });
        /* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-keymap */ "./node_modules/prosemirror-keymap/dist/index.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-view */ "./node_modules/prosemirror-view/dist/index.js");





        /**
         Gap cursor selections are represented using this class. Its
         `$anchor` and `$head` properties both point at the cursor position.
         */
        class GapCursor extends prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection {
            /**
             Create a gap cursor.
             */
            constructor($pos) {
                super($pos, $pos);
            }
            map(doc, mapping) {
                let $pos = doc.resolve(mapping.map(this.head));
                return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($pos);
            }
            content() { return prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty; }
            eq(other) {
                return other instanceof GapCursor && other.head == this.head;
            }
            toJSON() {
                return { type: "gapcursor", pos: this.head };
            }
            /**
             @internal
             */
            static fromJSON(doc, json) {
                if (typeof json.pos != "number")
                    throw new RangeError("Invalid input for GapCursor.fromJSON");
                return new GapCursor(doc.resolve(json.pos));
            }
            /**
             @internal
             */
            getBookmark() { return new GapBookmark(this.anchor); }
            /**
             @internal
             */
            static valid($pos) {
                let parent = $pos.parent;
                if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
                    return false;
                let override = parent.type.spec.allowGapCursor;
                if (override != null)
                    return override;
                let deflt = parent.contentMatchAt($pos.index()).defaultType;
                return deflt && deflt.isTextblock;
            }
            /**
             @internal
             */
            static findGapCursorFrom($pos, dir, mustMove = false) {
                search: for (;;) {
                    if (!mustMove && GapCursor.valid($pos))
                        return $pos;
                    let pos = $pos.pos, next = null;
                    // Scan up from this position
                    for (let d = $pos.depth;; d--) {
                        let parent = $pos.node(d);
                        if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                            next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                            break;
                        }
                        else if (d == 0) {
                            return null;
                        }
                        pos += dir;
                        let $cur = $pos.doc.resolve(pos);
                        if (GapCursor.valid($cur))
                            return $cur;
                    }
                    // And then down into the next node
                    for (;;) {
                        let inside = dir > 0 ? next.firstChild : next.lastChild;
                        if (!inside) {
                            if (next.isAtom && !next.isText && !prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(next)) {
                                $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                                mustMove = false;
                                continue search;
                            }
                            break;
                        }
                        next = inside;
                        pos += dir;
                        let $cur = $pos.doc.resolve(pos);
                        if (GapCursor.valid($cur))
                            return $cur;
                    }
                    return null;
                }
            }
        }
        GapCursor.prototype.visible = false;
        GapCursor.findFrom = GapCursor.findGapCursorFrom;
        prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.jsonID("gapcursor", GapCursor);
        class GapBookmark {
            constructor(pos) {
                this.pos = pos;
            }
            map(mapping) {
                return new GapBookmark(mapping.map(this.pos));
            }
            resolve(doc) {
                let $pos = doc.resolve(this.pos);
                return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($pos);
            }
        }
        function closedBefore($pos) {
            for (let d = $pos.depth; d >= 0; d--) {
                let index = $pos.index(d), parent = $pos.node(d);
                // At the start of this parent, look at next one
                if (index == 0) {
                    if (parent.type.spec.isolating)
                        return true;
                    continue;
                }
                // See if the node before (or its first ancestor) is closed
                for (let before = parent.child(index - 1);; before = before.lastChild) {
                    if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                        return true;
                    if (before.inlineContent)
                        return false;
                }
            }
            // Hit start of document
            return true;
        }
        function closedAfter($pos) {
            for (let d = $pos.depth; d >= 0; d--) {
                let index = $pos.indexAfter(d), parent = $pos.node(d);
                if (index == parent.childCount) {
                    if (parent.type.spec.isolating)
                        return true;
                    continue;
                }
                for (let after = parent.child(index);; after = after.firstChild) {
                    if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                        return true;
                    if (after.inlineContent)
                        return false;
                }
            }
            return true;
        }

        /**
         Create a gap cursor plugin. When enabled, this will capture clicks
         near and arrow-key-motion past places that don't have a normally
         selectable position nearby, and create a gap cursor selection for
         them. The cursor is drawn as an element with class
         `ProseMirror-gapcursor`. You can either include
         `style/gapcursor.css` from the package's directory or add your own
         styles to make it visible.
         */
        function gapCursor() {
            return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({
                props: {
                    decorations: drawGapCursor,
                    createSelectionBetween(_view, $anchor, $head) {
                        return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
                    },
                    handleClick,
                    handleKeyDown,
                    handleDOMEvents: { beforeinput: beforeinput }
                }
            });
        }
        const handleKeyDown = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__.keydownHandler)({
            "ArrowLeft": arrow("horiz", -1),
            "ArrowRight": arrow("horiz", 1),
            "ArrowUp": arrow("vert", -1),
            "ArrowDown": arrow("vert", 1)
        });
        function arrow(axis, dir) {
            const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
            return function (state, dispatch, view) {
                let sel = state.selection;
                let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
                if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {
                    if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                        return false;
                    mustMove = false;
                    $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
                }
                let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
                if (!$found)
                    return false;
                if (dispatch)
                    dispatch(state.tr.setSelection(new GapCursor($found)));
                return true;
            };
        }
        function handleClick(view, pos, event) {
            if (!view || !view.editable)
                return false;
            let $pos = view.state.doc.resolve(pos);
            if (!GapCursor.valid($pos))
                return false;
            let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
            if (clickPos && clickPos.inside > -1 && prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
                return false;
            view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
            return true;
        }
// This is a hack that, when a composition starts while a gap cursor
// is active, quickly creates an inline context for the composition to
// happen in, to avoid it being aborted by the DOM selection being
// moved into a valid position.
        function beforeinput(view, event) {
            if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
                return false;
            let { $from } = view.state.selection;
            let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
            if (!insert)
                return false;
            let frag = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty;
            for (let i = insert.length - 1; i >= 0; i--)
                frag = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(insert[i].createAndFill(null, frag));
            let tr = view.state.tr.replace($from.pos, $from.pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(frag, 0, 0));
            tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve($from.pos + 1)));
            view.dispatch(tr);
            return false;
        }
        function drawGapCursor(state) {
            if (!(state.selection instanceof GapCursor))
                return null;
            let node = document.createElement("div");
            node.className = "ProseMirror-gapcursor";
            return prosemirror_view__WEBPACK_IMPORTED_MODULE_3__.DecorationSet.create(state.doc, [prosemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-history/dist/index.js":
    /*!********************************************************!*\
  !*** ./node_modules/prosemirror-history/dist/index.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "closeHistory": () => (/* binding */ closeHistory),
            /* harmony export */   "history": () => (/* binding */ history),
            /* harmony export */   "redo": () => (/* binding */ redo),
            /* harmony export */   "redoDepth": () => (/* binding */ redoDepth),
            /* harmony export */   "undo": () => (/* binding */ undo),
            /* harmony export */   "undoDepth": () => (/* binding */ undoDepth)
            /* harmony export */ });
        /* harmony import */ var rope_sequence__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rope-sequence */ "./node_modules/rope-sequence/dist/index.es.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");




// ProseMirror's history isn't simply a way to roll back to a previous
// state, because ProseMirror supports applying changes without adding
// them to the history (for example during collaboration).
//
// To this end, each 'Branch' (one for the undo history and one for
// the redo history) keeps an array of 'Items', which can optionally
// hold a step (an actual undoable change), and always hold a position
// map (which is needed to move changes below them to apply to the
// current document).
//
// An item that has both a step and a selection bookmark is the start
// of an 'event' — a group of changes that will be undone or redone at
// once. (It stores only the bookmark, since that way we don't have to
// provide a document until the selection is actually applied, which
// is useful when compressing.)
// Used to schedule history compression
        const max_empty_items = 500;
        class Branch {
            constructor(items, eventCount) {
                this.items = items;
                this.eventCount = eventCount;
            }
            // Pop the latest event off the branch's history and apply it
            // to a document transform.
            popEvent(state, preserveItems) {
                if (this.eventCount == 0)
                    return null;
                let end = this.items.length;
                for (;; end--) {
                    let next = this.items.get(end - 1);
                    if (next.selection) {
                        --end;
                        break;
                    }
                }
                let remap, mapFrom;
                if (preserveItems) {
                    remap = this.remapping(end, this.items.length);
                    mapFrom = remap.maps.length;
                }
                let transform = state.tr;
                let selection, remaining;
                let addAfter = [], addBefore = [];
                this.items.forEach((item, i) => {
                    if (!item.step) {
                        if (!remap) {
                            remap = this.remapping(end, i + 1);
                            mapFrom = remap.maps.length;
                        }
                        mapFrom--;
                        addBefore.push(item);
                        return;
                    }
                    if (remap) {
                        addBefore.push(new Item(item.map));
                        let step = item.step.map(remap.slice(mapFrom)), map;
                        if (step && transform.maybeStep(step).doc) {
                            map = transform.mapping.maps[transform.mapping.maps.length - 1];
                            addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));
                        }
                        mapFrom--;
                        if (map)
                            remap.appendMap(map, mapFrom);
                    }
                    else {
                        transform.maybeStep(item.step);
                    }
                    if (item.selection) {
                        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                        remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                        return false;
                    }
                }, this.items.length, 0);
                return { remaining: remaining, transform, selection: selection };
            }
            // Create a new branch with the given transform added.
            addTransform(transform, selection, histOptions, preserveItems) {
                let newItems = [], eventCount = this.eventCount;
                let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
                for (let i = 0; i < transform.steps.length; i++) {
                    let step = transform.steps[i].invert(transform.docs[i]);
                    let item = new Item(transform.mapping.maps[i], step, selection), merged;
                    if (merged = lastItem && lastItem.merge(item)) {
                        item = merged;
                        if (i)
                            newItems.pop();
                        else
                            oldItems = oldItems.slice(0, oldItems.length - 1);
                    }
                    newItems.push(item);
                    if (selection) {
                        eventCount++;
                        selection = undefined;
                    }
                    if (!preserveItems)
                        lastItem = item;
                }
                let overflow = eventCount - histOptions.depth;
                if (overflow > DEPTH_OVERFLOW) {
                    oldItems = cutOffEvents(oldItems, overflow);
                    eventCount -= overflow;
                }
                return new Branch(oldItems.append(newItems), eventCount);
            }
            remapping(from, to) {
                let maps = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.Mapping;
                this.items.forEach((item, i) => {
                    let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                        ? maps.maps.length - item.mirrorOffset : undefined;
                    maps.appendMap(item.map, mirrorPos);
                }, from, to);
                return maps;
            }
            addMaps(array) {
                if (this.eventCount == 0)
                    return this;
                return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);
            }
            // When the collab module receives remote changes, the history has
            // to know about those, so that it can adjust the steps that were
            // rebased on top of the remote changes, and include the position
            // maps for the remote changes in its array of items.
            rebased(rebasedTransform, rebasedCount) {
                if (!this.eventCount)
                    return this;
                let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
                let mapping = rebasedTransform.mapping;
                let newUntil = rebasedTransform.steps.length;
                let eventCount = this.eventCount;
                this.items.forEach(item => { if (item.selection)
                    eventCount--; }, start);
                let iRebased = rebasedCount;
                this.items.forEach(item => {
                    let pos = mapping.getMirror(--iRebased);
                    if (pos == null)
                        return;
                    newUntil = Math.min(newUntil, pos);
                    let map = mapping.maps[pos];
                    if (item.step) {
                        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                        let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                        if (selection)
                            eventCount++;
                        rebasedItems.push(new Item(map, step, selection));
                    }
                    else {
                        rebasedItems.push(new Item(map));
                    }
                }, start);
                let newMaps = [];
                for (let i = rebasedCount; i < newUntil; i++)
                    newMaps.push(new Item(mapping.maps[i]));
                let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
                let branch = new Branch(items, eventCount);
                if (branch.emptyItemCount() > max_empty_items)
                    branch = branch.compress(this.items.length - rebasedItems.length);
                return branch;
            }
            emptyItemCount() {
                let count = 0;
                this.items.forEach(item => { if (!item.step)
                    count++; });
                return count;
            }
            // Compressing a branch means rewriting it to push the air (map-only
            // items) out. During collaboration, these naturally accumulate
            // because each remote change adds one. The `upto` argument is used
            // to ensure that only the items below a given level are compressed,
            // because `rebased` relies on a clean, untouched set of items in
            // order to associate old items with rebased steps.
            compress(upto = this.items.length) {
                let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
                let items = [], events = 0;
                this.items.forEach((item, i) => {
                    if (i >= upto) {
                        items.push(item);
                        if (item.selection)
                            events++;
                    }
                    else if (item.step) {
                        let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                        mapFrom--;
                        if (map)
                            remap.appendMap(map, mapFrom);
                        if (step) {
                            let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                            if (selection)
                                events++;
                            let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                            if (merged = items.length && items[last].merge(newItem))
                                items[last] = merged;
                            else
                                items.push(newItem);
                        }
                    }
                    else if (item.map) {
                        mapFrom--;
                    }
                }, this.items.length, 0);
                return new Branch(rope_sequence__WEBPACK_IMPORTED_MODULE_0__["default"].from(items.reverse()), events);
            }
        }
        Branch.empty = new Branch(rope_sequence__WEBPACK_IMPORTED_MODULE_0__["default"].empty, 0);
        function cutOffEvents(items, n) {
            let cutPoint;
            items.forEach((item, i) => {
                if (item.selection && (n-- == 0)) {
                    cutPoint = i;
                    return false;
                }
            });
            return items.slice(cutPoint);
        }
        class Item {
            constructor(
                // The (forward) step map for this item.
                map,
                // The inverted step
                step,
                // If this is non-null, this item is the start of a group, and
                // this selection is the starting selection for the group (the one
                // that was active before the first step was applied)
                selection,
                // If this item is the inverse of a previous mapping on the stack,
                // this points at the inverse's offset
                mirrorOffset) {
                this.map = map;
                this.step = step;
                this.selection = selection;
                this.mirrorOffset = mirrorOffset;
            }
            merge(other) {
                if (this.step && other.step && !other.selection) {
                    let step = other.step.merge(this.step);
                    if (step)
                        return new Item(step.getMap().invert(), step, this.selection);
                }
            }
        }
// The value of the state field that tracks undo/redo history for that
// state. Will be stored in the plugin state when the history plugin
// is active.
        class HistoryState {
            constructor(done, undone, prevRanges, prevTime) {
                this.done = done;
                this.undone = undone;
                this.prevRanges = prevRanges;
                this.prevTime = prevTime;
            }
        }
        const DEPTH_OVERFLOW = 20;
// Record a transformation in undo history.
        function applyTransaction(history, state, tr, options) {
            let historyTr = tr.getMeta(historyKey), rebased;
            if (historyTr)
                return historyTr.historyState;
            if (tr.getMeta(closeHistoryKey))
                history = new HistoryState(history.done, history.undone, null, 0);
            let appended = tr.getMeta("appendedTransaction");
            if (tr.steps.length == 0) {
                return history;
            }
            else if (appended && appended.getMeta(historyKey)) {
                if (appended.getMeta(historyKey).redo)
                    return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);
                else
                    return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime);
            }
            else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
                // Group transforms that occur in quick succession into one event.
                let newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||
                    !isAdjacentTo(tr, history.prevRanges));
                let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
                return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
            }
            else if (rebased = tr.getMeta("rebased")) {
                // Used by the collab module to tell the history that some of its
                // content has been rebased.
                return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
            }
            else {
                return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
            }
        }
        function isAdjacentTo(transform, prevRanges) {
            if (!prevRanges)
                return false;
            if (!transform.docChanged)
                return true;
            let adjacent = false;
            transform.mapping.maps[0].forEach((start, end) => {
                for (let i = 0; i < prevRanges.length; i += 2)
                    if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                        adjacent = true;
            });
            return adjacent;
        }
        function rangesFor(map) {
            let result = [];
            map.forEach((_from, _to, from, to) => result.push(from, to));
            return result;
        }
        function mapRanges(ranges, mapping) {
            if (!ranges)
                return null;
            let result = [];
            for (let i = 0; i < ranges.length; i += 2) {
                let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
                if (from <= to)
                    result.push(from, to);
            }
            return result;
        }
// Apply the latest event from one branch to the document and shift the event
// onto the other branch.
        function histTransaction(history, state, dispatch, redo) {
            let preserveItems = mustPreserveItems(state);
            let histOptions = historyKey.get(state).spec.config;
            let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
            if (!pop)
                return;
            let selection = pop.selection.resolve(pop.transform.doc);
            let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
            let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
            dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist }).scrollIntoView());
        }
        let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
// Check whether any plugin in the given state has a
// `historyPreserveItems` property in its spec, in which case we must
// preserve steps exactly as they came in, so that they can be
// rebased.
        function mustPreserveItems(state) {
            let plugins = state.plugins;
            if (cachedPreserveItemsPlugins != plugins) {
                cachedPreserveItems = false;
                cachedPreserveItemsPlugins = plugins;
                for (let i = 0; i < plugins.length; i++)
                    if (plugins[i].spec.historyPreserveItems) {
                        cachedPreserveItems = true;
                        break;
                    }
            }
            return cachedPreserveItems;
        }
        /**
         Set a flag on the given transaction that will prevent further steps
         from being appended to an existing history event (so that they
         require a separate undo command to undo).
         */
        function closeHistory(tr) {
            return tr.setMeta(closeHistoryKey, true);
        }
        const historyKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.PluginKey("history");
        const closeHistoryKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.PluginKey("closeHistory");
        /**
         Returns a plugin that enables the undo history for an editor. The
         plugin will track undo and redo stacks, which can be used with the
         [`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

         You can set an `"addToHistory"` [metadata
         property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
         to prevent it from being rolled back by undo.
         */
        function history(config = {}) {
            config = { depth: config.depth || 100,
                newGroupDelay: config.newGroupDelay || 500 };
            return new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Plugin({
                key: historyKey,
                state: {
                    init() {
                        return new HistoryState(Branch.empty, Branch.empty, null, 0);
                    },
                    apply(tr, hist, state) {
                        return applyTransaction(hist, state, tr, config);
                    }
                },
                config,
                props: {
                    handleDOMEvents: {
                        beforeinput(view, e) {
                            let inputType = e.inputType;
                            let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                            if (!command)
                                return false;
                            e.preventDefault();
                            return command(view.state, view.dispatch);
                        }
                    }
                }
            });
        }
        /**
         A command function that undoes the last change, if any.
         */
        const undo = (state, dispatch) => {
            let hist = historyKey.getState(state);
            if (!hist || hist.done.eventCount == 0)
                return false;
            if (dispatch)
                histTransaction(hist, state, dispatch, false);
            return true;
        };
        /**
         A command function that redoes the last undone change, if any.
         */
        const redo = (state, dispatch) => {
            let hist = historyKey.getState(state);
            if (!hist || hist.undone.eventCount == 0)
                return false;
            if (dispatch)
                histTransaction(hist, state, dispatch, true);
            return true;
        };
        /**
         The amount of undoable events available in a given state.
         */
        function undoDepth(state) {
            let hist = historyKey.getState(state);
            return hist ? hist.done.eventCount : 0;
        }
        /**
         The amount of redoable events available in a given editor state.
         */
        function redoDepth(state) {
            let hist = historyKey.getState(state);
            return hist ? hist.undone.eventCount : 0;
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-keymap/dist/index.js":
    /*!*******************************************************!*\
  !*** ./node_modules/prosemirror-keymap/dist/index.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "keydownHandler": () => (/* binding */ keydownHandler),
            /* harmony export */   "keymap": () => (/* binding */ keymap)
            /* harmony export */ });
        /* harmony import */ var w3c_keyname__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! w3c-keyname */ "./node_modules/w3c-keyname/index.es.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");



        const mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
        function normalizeKeyName(name) {
            let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
            if (result == "Space")
                result = " ";
            let alt, ctrl, shift, meta;
            for (let i = 0; i < parts.length - 1; i++) {
                let mod = parts[i];
                if (/^(cmd|meta|m)$/i.test(mod))
                    meta = true;
                else if (/^a(lt)?$/i.test(mod))
                    alt = true;
                else if (/^(c|ctrl|control)$/i.test(mod))
                    ctrl = true;
                else if (/^s(hift)?$/i.test(mod))
                    shift = true;
                else if (/^mod$/i.test(mod)) {
                    if (mac)
                        meta = true;
                    else
                        ctrl = true;
                }
                else
                    throw new Error("Unrecognized modifier name: " + mod);
            }
            if (alt)
                result = "Alt-" + result;
            if (ctrl)
                result = "Ctrl-" + result;
            if (meta)
                result = "Meta-" + result;
            if (shift)
                result = "Shift-" + result;
            return result;
        }
        function normalize(map) {
            let copy = Object.create(null);
            for (let prop in map)
                copy[normalizeKeyName(prop)] = map[prop];
            return copy;
        }
        function modifiers(name, event, shift) {
            if (event.altKey)
                name = "Alt-" + name;
            if (event.ctrlKey)
                name = "Ctrl-" + name;
            if (event.metaKey)
                name = "Meta-" + name;
            if (shift !== false && event.shiftKey)
                name = "Shift-" + name;
            return name;
        }
        /**
         Create a keymap plugin for the given set of bindings.

         Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
         functions, which will be called with `(EditorState, dispatch,
         EditorView)` arguments, and should return true when they've handled
         the key. Note that the view argument isn't part of the command
         protocol, but can be used as an escape hatch if a binding needs to
         directly interact with the UI.

         Key names may be strings like `"Shift-Ctrl-Enter"`—a key
         identifier prefixed with zero or more modifiers. Key identifiers
         are based on the strings that can appear in
         [`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
         Use lowercase letters to refer to letter keys (or uppercase letters
         if you want shift to be held). You may use `"Space"` as an alias
         for the `" "` name.

         Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
         `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
         `Meta-`) are recognized. For characters that are created by holding
         shift, the `Shift-` prefix is implied, and should not be added
         explicitly.

         You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
         other platforms.

         You can add multiple keymap plugins to an editor. The order in
         which they appear determines their precedence (the ones early in
         the array get to dispatch first).
         */
        function keymap(bindings) {
            return new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
        }
        /**
         Given a set of bindings (using the same format as
         [`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
         handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
         */
        function keydownHandler(bindings) {
            let map = normalize(bindings);
            return function (view, event) {
                let name = (0,w3c_keyname__WEBPACK_IMPORTED_MODULE_0__.keyName)(event), isChar = name.length == 1 && name != " ", baseName;
                let direct = map[modifiers(name, event, !isChar)];
                if (direct && direct(view.state, view.dispatch, view))
                    return true;
                if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                    (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_0__.base[event.keyCode]) && baseName != name) {
                    // Try falling back to the keyCode when there's a modifier
                    // active or the character produced isn't ASCII, and our table
                    // produces a different name from the the keyCode. See #668,
                    // #1060
                    let fromCode = map[modifiers(baseName, event, true)];
                    if (fromCode && fromCode(view.state, view.dispatch, view))
                        return true;
                }
                else if (isChar && event.shiftKey) {
                    // Otherwise, if shift is active, also try the binding with the
                    // Shift- prefix enabled. See #997
                    let withShift = map[modifiers(name, event, true)];
                    if (withShift && withShift(view.state, view.dispatch, view))
                        return true;
                }
                return false;
            };
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-model/dist/index.js":
    /*!******************************************************!*\
  !*** ./node_modules/prosemirror-model/dist/index.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "ContentMatch": () => (/* binding */ ContentMatch),
            /* harmony export */   "DOMParser": () => (/* binding */ DOMParser),
            /* harmony export */   "DOMSerializer": () => (/* binding */ DOMSerializer),
            /* harmony export */   "Fragment": () => (/* binding */ Fragment),
            /* harmony export */   "Mark": () => (/* binding */ Mark),
            /* harmony export */   "MarkType": () => (/* binding */ MarkType),
            /* harmony export */   "Node": () => (/* binding */ Node),
            /* harmony export */   "NodeRange": () => (/* binding */ NodeRange),
            /* harmony export */   "NodeType": () => (/* binding */ NodeType),
            /* harmony export */   "ReplaceError": () => (/* binding */ ReplaceError),
            /* harmony export */   "ResolvedPos": () => (/* binding */ ResolvedPos),
            /* harmony export */   "Schema": () => (/* binding */ Schema),
            /* harmony export */   "Slice": () => (/* binding */ Slice)
            /* harmony export */ });
        /* harmony import */ var orderedmap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! orderedmap */ "./node_modules/orderedmap/dist/index.js");


        function findDiffStart(a, b, pos) {
            for (let i = 0;; i++) {
                if (i == a.childCount || i == b.childCount)
                    return a.childCount == b.childCount ? null : pos;
                let childA = a.child(i), childB = b.child(i);
                if (childA == childB) {
                    pos += childA.nodeSize;
                    continue;
                }
                if (!childA.sameMarkup(childB))
                    return pos;
                if (childA.isText && childA.text != childB.text) {
                    for (let j = 0; childA.text[j] == childB.text[j]; j++)
                        pos++;
                    return pos;
                }
                if (childA.content.size || childB.content.size) {
                    let inner = findDiffStart(childA.content, childB.content, pos + 1);
                    if (inner != null)
                        return inner;
                }
                pos += childA.nodeSize;
            }
        }
        function findDiffEnd(a, b, posA, posB) {
            for (let iA = a.childCount, iB = b.childCount;;) {
                if (iA == 0 || iB == 0)
                    return iA == iB ? null : { a: posA, b: posB };
                let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
                if (childA == childB) {
                    posA -= size;
                    posB -= size;
                    continue;
                }
                if (!childA.sameMarkup(childB))
                    return { a: posA, b: posB };
                if (childA.isText && childA.text != childB.text) {
                    let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
                    while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                        same++;
                        posA--;
                        posB--;
                    }
                    return { a: posA, b: posB };
                }
                if (childA.content.size || childB.content.size) {
                    let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
                    if (inner)
                        return inner;
                }
                posA -= size;
                posB -= size;
            }
        }

        /**
         A fragment represents a node's collection of child nodes.

         Like nodes, fragments are persistent data structures, and you
         should not mutate them or their content. Rather, you create new
         instances whenever needed. The API tries to make this easy.
         */
        class Fragment {
            /**
             @internal
             */
            constructor(
                /**
                 @internal
                 */
                content, size) {
                this.content = content;
                this.size = size || 0;
                if (size == null)
                    for (let i = 0; i < content.length; i++)
                        this.size += content[i].nodeSize;
            }
            /**
             Invoke a callback for all descendant nodes between the given two
             positions (relative to start of this fragment). Doesn't descend
             into a node when the callback returns `false`.
             */
            nodesBetween(from, to, f, nodeStart = 0, parent) {
                for (let i = 0, pos = 0; pos < to; i++) {
                    let child = this.content[i], end = pos + child.nodeSize;
                    if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                        let start = pos + 1;
                        child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
                    }
                    pos = end;
                }
            }
            /**
             Call the given callback for every descendant node. `pos` will be
             relative to the start of the fragment. The callback may return
             `false` to prevent traversal of a given node's children.
             */
            descendants(f) {
                this.nodesBetween(0, this.size, f);
            }
            /**
             Extract the text between `from` and `to`. See the same method on
             [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
             */
            textBetween(from, to, blockSeparator, leafText) {
                let text = "", separated = true;
                this.nodesBetween(from, to, (node, pos) => {
                    if (node.isText) {
                        text += node.text.slice(Math.max(from, pos) - pos, to - pos);
                        separated = !blockSeparator;
                    }
                    else if (node.isLeaf) {
                        if (leafText) {
                            text += typeof leafText === "function" ? leafText(node) : leafText;
                        }
                        else if (node.type.spec.leafText) {
                            text += node.type.spec.leafText(node);
                        }
                        separated = !blockSeparator;
                    }
                    else if (!separated && node.isBlock) {
                        text += blockSeparator;
                        separated = true;
                    }
                }, 0);
                return text;
            }
            /**
             Create a new fragment containing the combined content of this
             fragment and the other.
             */
            append(other) {
                if (!other.size)
                    return this;
                if (!this.size)
                    return other;
                let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
                if (last.isText && last.sameMarkup(first)) {
                    content[content.length - 1] = last.withText(last.text + first.text);
                    i = 1;
                }
                for (; i < other.content.length; i++)
                    content.push(other.content[i]);
                return new Fragment(content, this.size + other.size);
            }
            /**
             Cut out the sub-fragment between the two given positions.
             */
            cut(from, to = this.size) {
                if (from == 0 && to == this.size)
                    return this;
                let result = [], size = 0;
                if (to > from)
                    for (let i = 0, pos = 0; pos < to; i++) {
                        let child = this.content[i], end = pos + child.nodeSize;
                        if (end > from) {
                            if (pos < from || end > to) {
                                if (child.isText)
                                    child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                                else
                                    child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                            }
                            result.push(child);
                            size += child.nodeSize;
                        }
                        pos = end;
                    }
                return new Fragment(result, size);
            }
            /**
             @internal
             */
            cutByIndex(from, to) {
                if (from == to)
                    return Fragment.empty;
                if (from == 0 && to == this.content.length)
                    return this;
                return new Fragment(this.content.slice(from, to));
            }
            /**
             Create a new fragment in which the node at the given index is
             replaced by the given node.
             */
            replaceChild(index, node) {
                let current = this.content[index];
                if (current == node)
                    return this;
                let copy = this.content.slice();
                let size = this.size + node.nodeSize - current.nodeSize;
                copy[index] = node;
                return new Fragment(copy, size);
            }
            /**
             Create a new fragment by prepending the given node to this
             fragment.
             */
            addToStart(node) {
                return new Fragment([node].concat(this.content), this.size + node.nodeSize);
            }
            /**
             Create a new fragment by appending the given node to this
             fragment.
             */
            addToEnd(node) {
                return new Fragment(this.content.concat(node), this.size + node.nodeSize);
            }
            /**
             Compare this fragment to another one.
             */
            eq(other) {
                if (this.content.length != other.content.length)
                    return false;
                for (let i = 0; i < this.content.length; i++)
                    if (!this.content[i].eq(other.content[i]))
                        return false;
                return true;
            }
            /**
             The first child of the fragment, or `null` if it is empty.
             */
            get firstChild() { return this.content.length ? this.content[0] : null; }
            /**
             The last child of the fragment, or `null` if it is empty.
             */
            get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
            /**
             The number of child nodes in this fragment.
             */
            get childCount() { return this.content.length; }
            /**
             Get the child node at the given index. Raise an error when the
             index is out of range.
             */
            child(index) {
                let found = this.content[index];
                if (!found)
                    throw new RangeError("Index " + index + " out of range for " + this);
                return found;
            }
            /**
             Get the child node at the given index, if it exists.
             */
            maybeChild(index) {
                return this.content[index] || null;
            }
            /**
             Call `f` for every child node, passing the node, its offset
             into this parent node, and its index.
             */
            forEach(f) {
                for (let i = 0, p = 0; i < this.content.length; i++) {
                    let child = this.content[i];
                    f(child, p, i);
                    p += child.nodeSize;
                }
            }
            /**
             Find the first position at which this fragment and another
             fragment differ, or `null` if they are the same.
             */
            findDiffStart(other, pos = 0) {
                return findDiffStart(this, other, pos);
            }
            /**
             Find the first position, searching from the end, at which this
             fragment and the given fragment differ, or `null` if they are
             the same. Since this position will not be the same in both
             nodes, an object with two separate positions is returned.
             */
            findDiffEnd(other, pos = this.size, otherPos = other.size) {
                return findDiffEnd(this, other, pos, otherPos);
            }
            /**
             Find the index and inner offset corresponding to a given relative
             position in this fragment. The result object will be reused
             (overwritten) the next time the function is called. (Not public.)
             */
            findIndex(pos, round = -1) {
                if (pos == 0)
                    return retIndex(0, pos);
                if (pos == this.size)
                    return retIndex(this.content.length, pos);
                if (pos > this.size || pos < 0)
                    throw new RangeError(`Position ${pos} outside of fragment (${this})`);
                for (let i = 0, curPos = 0;; i++) {
                    let cur = this.child(i), end = curPos + cur.nodeSize;
                    if (end >= pos) {
                        if (end == pos || round > 0)
                            return retIndex(i + 1, end);
                        return retIndex(i, curPos);
                    }
                    curPos = end;
                }
            }
            /**
             Return a debugging string that describes this fragment.
             */
            toString() { return "<" + this.toStringInner() + ">"; }
            /**
             @internal
             */
            toStringInner() { return this.content.join(", "); }
            /**
             Create a JSON-serializeable representation of this fragment.
             */
            toJSON() {
                return this.content.length ? this.content.map(n => n.toJSON()) : null;
            }
            /**
             Deserialize a fragment from its JSON representation.
             */
            static fromJSON(schema, value) {
                if (!value)
                    return Fragment.empty;
                if (!Array.isArray(value))
                    throw new RangeError("Invalid input for Fragment.fromJSON");
                return new Fragment(value.map(schema.nodeFromJSON));
            }
            /**
             Build a fragment from an array of nodes. Ensures that adjacent
             text nodes with the same marks are joined together.
             */
            static fromArray(array) {
                if (!array.length)
                    return Fragment.empty;
                let joined, size = 0;
                for (let i = 0; i < array.length; i++) {
                    let node = array[i];
                    size += node.nodeSize;
                    if (i && node.isText && array[i - 1].sameMarkup(node)) {
                        if (!joined)
                            joined = array.slice(0, i);
                        joined[joined.length - 1] = node
                            .withText(joined[joined.length - 1].text + node.text);
                    }
                    else if (joined) {
                        joined.push(node);
                    }
                }
                return new Fragment(joined || array, size);
            }
            /**
             Create a fragment from something that can be interpreted as a
             set of nodes. For `null`, it returns the empty fragment. For a
             fragment, the fragment itself. For a node or array of nodes, a
             fragment containing those nodes.
             */
            static from(nodes) {
                if (!nodes)
                    return Fragment.empty;
                if (nodes instanceof Fragment)
                    return nodes;
                if (Array.isArray(nodes))
                    return this.fromArray(nodes);
                if (nodes.attrs)
                    return new Fragment([nodes], nodes.nodeSize);
                throw new RangeError("Can not convert " + nodes + " to a Fragment" +
                    (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
            }
        }
        /**
         An empty fragment. Intended to be reused whenever a node doesn't
         contain anything (rather than allocating a new empty fragment for
         each leaf node).
         */
        Fragment.empty = new Fragment([], 0);
        const found = { index: 0, offset: 0 };
        function retIndex(index, offset) {
            found.index = index;
            found.offset = offset;
            return found;
        }

        function compareDeep(a, b) {
            if (a === b)
                return true;
            if (!(a && typeof a == "object") ||
                !(b && typeof b == "object"))
                return false;
            let array = Array.isArray(a);
            if (Array.isArray(b) != array)
                return false;
            if (array) {
                if (a.length != b.length)
                    return false;
                for (let i = 0; i < a.length; i++)
                    if (!compareDeep(a[i], b[i]))
                        return false;
            }
            else {
                for (let p in a)
                    if (!(p in b) || !compareDeep(a[p], b[p]))
                        return false;
                for (let p in b)
                    if (!(p in a))
                        return false;
            }
            return true;
        }

        /**
         A mark is a piece of information that can be attached to a node,
         such as it being emphasized, in code font, or a link. It has a
         type and optionally a set of attributes that provide further
         information (such as the target of the link). Marks are created
         through a `Schema`, which controls which types exist and which
         attributes they have.
         */
        class Mark {
            /**
             @internal
             */
            constructor(
                /**
                 The type of this mark.
                 */
                type,
                /**
                 The attributes associated with this mark.
                 */
                attrs) {
                this.type = type;
                this.attrs = attrs;
            }
            /**
             Given a set of marks, create a new set which contains this one as
             well, in the right position. If this mark is already in the set,
             the set itself is returned. If any marks that are set to be
             [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
             those are replaced by this one.
             */
            addToSet(set) {
                let copy, placed = false;
                for (let i = 0; i < set.length; i++) {
                    let other = set[i];
                    if (this.eq(other))
                        return set;
                    if (this.type.excludes(other.type)) {
                        if (!copy)
                            copy = set.slice(0, i);
                    }
                    else if (other.type.excludes(this.type)) {
                        return set;
                    }
                    else {
                        if (!placed && other.type.rank > this.type.rank) {
                            if (!copy)
                                copy = set.slice(0, i);
                            copy.push(this);
                            placed = true;
                        }
                        if (copy)
                            copy.push(other);
                    }
                }
                if (!copy)
                    copy = set.slice();
                if (!placed)
                    copy.push(this);
                return copy;
            }
            /**
             Remove this mark from the given set, returning a new set. If this
             mark is not in the set, the set itself is returned.
             */
            removeFromSet(set) {
                for (let i = 0; i < set.length; i++)
                    if (this.eq(set[i]))
                        return set.slice(0, i).concat(set.slice(i + 1));
                return set;
            }
            /**
             Test whether this mark is in the given set of marks.
             */
            isInSet(set) {
                for (let i = 0; i < set.length; i++)
                    if (this.eq(set[i]))
                        return true;
                return false;
            }
            /**
             Test whether this mark has the same type and attributes as
             another mark.
             */
            eq(other) {
                return this == other ||
                    (this.type == other.type && compareDeep(this.attrs, other.attrs));
            }
            /**
             Convert this mark to a JSON-serializeable representation.
             */
            toJSON() {
                let obj = { type: this.type.name };
                for (let _ in this.attrs) {
                    obj.attrs = this.attrs;
                    break;
                }
                return obj;
            }
            /**
             Deserialize a mark from JSON.
             */
            static fromJSON(schema, json) {
                if (!json)
                    throw new RangeError("Invalid input for Mark.fromJSON");
                let type = schema.marks[json.type];
                if (!type)
                    throw new RangeError(`There is no mark type ${json.type} in this schema`);
                return type.create(json.attrs);
            }
            /**
             Test whether two sets of marks are identical.
             */
            static sameSet(a, b) {
                if (a == b)
                    return true;
                if (a.length != b.length)
                    return false;
                for (let i = 0; i < a.length; i++)
                    if (!a[i].eq(b[i]))
                        return false;
                return true;
            }
            /**
             Create a properly sorted mark set from null, a single mark, or an
             unsorted array of marks.
             */
            static setFrom(marks) {
                if (!marks || Array.isArray(marks) && marks.length == 0)
                    return Mark.none;
                if (marks instanceof Mark)
                    return [marks];
                let copy = marks.slice();
                copy.sort((a, b) => a.type.rank - b.type.rank);
                return copy;
            }
        }
        /**
         The empty set of marks.
         */
        Mark.none = [];

        /**
         Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
         given an invalid replacement.
         */
        class ReplaceError extends Error {
        }
        /*
ReplaceError = function(this: any, message: string) {
  let err = Error.call(this, message)
  ;(err as any).__proto__ = ReplaceError.prototype
  return err
} as any

ReplaceError.prototype = Object.create(Error.prototype)
ReplaceError.prototype.constructor = ReplaceError
ReplaceError.prototype.name = "ReplaceError"
*/
        /**
         A slice represents a piece cut out of a larger document. It
         stores not only a fragment, but also the depth up to which nodes on
         both side are ‘open’ (cut through).
         */
        class Slice {
            /**
             Create a slice. When specifying a non-zero open depth, you must
             make sure that there are nodes of at least that depth at the
             appropriate side of the fragment—i.e. if the fragment is an
             empty paragraph node, `openStart` and `openEnd` can't be greater
             than 1.

             It is not necessary for the content of open nodes to conform to
             the schema's content constraints, though it should be a valid
             start/end/middle for such a node, depending on which sides are
             open.
             */
            constructor(
                /**
                 The slice's content.
                 */
                content,
                /**
                 The open depth at the start of the fragment.
                 */
                openStart,
                /**
                 The open depth at the end.
                 */
                openEnd) {
                this.content = content;
                this.openStart = openStart;
                this.openEnd = openEnd;
            }
            /**
             The size this slice would add when inserted into a document.
             */
            get size() {
                return this.content.size - this.openStart - this.openEnd;
            }
            /**
             @internal
             */
            insertAt(pos, fragment) {
                let content = insertInto(this.content, pos + this.openStart, fragment);
                return content && new Slice(content, this.openStart, this.openEnd);
            }
            /**
             @internal
             */
            removeBetween(from, to) {
                return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
            }
            /**
             Tests whether this slice is equal to another slice.
             */
            eq(other) {
                return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
            }
            /**
             @internal
             */
            toString() {
                return this.content + "(" + this.openStart + "," + this.openEnd + ")";
            }
            /**
             Convert a slice to a JSON-serializable representation.
             */
            toJSON() {
                if (!this.content.size)
                    return null;
                let json = { content: this.content.toJSON() };
                if (this.openStart > 0)
                    json.openStart = this.openStart;
                if (this.openEnd > 0)
                    json.openEnd = this.openEnd;
                return json;
            }
            /**
             Deserialize a slice from its JSON representation.
             */
            static fromJSON(schema, json) {
                if (!json)
                    return Slice.empty;
                let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
                if (typeof openStart != "number" || typeof openEnd != "number")
                    throw new RangeError("Invalid input for Slice.fromJSON");
                return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
            }
            /**
             Create a slice from a fragment by taking the maximum possible
             open value on both side of the fragment.
             */
            static maxOpen(fragment, openIsolating = true) {
                let openStart = 0, openEnd = 0;
                for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
                    openStart++;
                for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
                    openEnd++;
                return new Slice(fragment, openStart, openEnd);
            }
        }
        /**
         The empty slice.
         */
        Slice.empty = new Slice(Fragment.empty, 0, 0);
        function removeRange(content, from, to) {
            let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
            let { index: indexTo, offset: offsetTo } = content.findIndex(to);
            if (offset == from || child.isText) {
                if (offsetTo != to && !content.child(indexTo).isText)
                    throw new RangeError("Removing non-flat range");
                return content.cut(0, from).append(content.cut(to));
            }
            if (index != indexTo)
                throw new RangeError("Removing non-flat range");
            return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
        }
        function insertInto(content, dist, insert, parent) {
            let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
            if (offset == dist || child.isText) {
                if (parent && !parent.canReplace(index, index, insert))
                    return null;
                return content.cut(0, dist).append(insert).append(content.cut(dist));
            }
            let inner = insertInto(child.content, dist - offset - 1, insert);
            return inner && content.replaceChild(index, child.copy(inner));
        }
        function replace($from, $to, slice) {
            if (slice.openStart > $from.depth)
                throw new ReplaceError("Inserted content deeper than insertion position");
            if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
                throw new ReplaceError("Inconsistent open depths");
            return replaceOuter($from, $to, slice, 0);
        }
        function replaceOuter($from, $to, slice, depth) {
            let index = $from.index(depth), node = $from.node(depth);
            if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
                let inner = replaceOuter($from, $to, slice, depth + 1);
                return node.copy(node.content.replaceChild(index, inner));
            }
            else if (!slice.content.size) {
                return close(node, replaceTwoWay($from, $to, depth));
            }
            else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
                let parent = $from.parent, content = parent.content;
                return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
            }
            else {
                let { start, end } = prepareSliceForReplace(slice, $from);
                return close(node, replaceThreeWay($from, start, end, $to, depth));
            }
        }
        function checkJoin(main, sub) {
            if (!sub.type.compatibleContent(main.type))
                throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
        }
        function joinable($before, $after, depth) {
            let node = $before.node(depth);
            checkJoin(node, $after.node(depth));
            return node;
        }
        function addNode(child, target) {
            let last = target.length - 1;
            if (last >= 0 && child.isText && child.sameMarkup(target[last]))
                target[last] = child.withText(target[last].text + child.text);
            else
                target.push(child);
        }
        function addRange($start, $end, depth, target) {
            let node = ($end || $start).node(depth);
            let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
            if ($start) {
                startIndex = $start.index(depth);
                if ($start.depth > depth) {
                    startIndex++;
                }
                else if ($start.textOffset) {
                    addNode($start.nodeAfter, target);
                    startIndex++;
                }
            }
            for (let i = startIndex; i < endIndex; i++)
                addNode(node.child(i), target);
            if ($end && $end.depth == depth && $end.textOffset)
                addNode($end.nodeBefore, target);
        }
        function close(node, content) {
            if (!node.type.validContent(content))
                throw new ReplaceError("Invalid content for node " + node.type.name);
            return node.copy(content);
        }
        function replaceThreeWay($from, $start, $end, $to, depth) {
            let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
            let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
            let content = [];
            addRange(null, $from, depth, content);
            if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
                checkJoin(openStart, openEnd);
                addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
            }
            else {
                if (openStart)
                    addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
                addRange($start, $end, depth, content);
                if (openEnd)
                    addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
            }
            addRange($to, null, depth, content);
            return new Fragment(content);
        }
        function replaceTwoWay($from, $to, depth) {
            let content = [];
            addRange(null, $from, depth, content);
            if ($from.depth > depth) {
                let type = joinable($from, $to, depth + 1);
                addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
            }
            addRange($to, null, depth, content);
            return new Fragment(content);
        }
        function prepareSliceForReplace(slice, $along) {
            let extra = $along.depth - slice.openStart, parent = $along.node(extra);
            let node = parent.copy(slice.content);
            for (let i = extra - 1; i >= 0; i--)
                node = $along.node(i).copy(Fragment.from(node));
            return { start: node.resolveNoCache(slice.openStart + extra),
                end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
        }

        /**
         You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
         information about it. Objects of this class represent such a
         resolved position, providing various pieces of context
         information, and some helper methods.

         Throughout this interface, methods that take an optional `depth`
         parameter will interpret undefined as `this.depth` and negative
         numbers as `this.depth + value`.
         */
        class ResolvedPos {
            /**
             @internal
             */
            constructor(
                /**
                 The position that was resolved.
                 */
                pos,
                /**
                 @internal
                 */
                path,
                /**
                 The offset this position has into its parent node.
                 */
                parentOffset) {
                this.pos = pos;
                this.path = path;
                this.parentOffset = parentOffset;
                this.depth = path.length / 3 - 1;
            }
            /**
             @internal
             */
            resolveDepth(val) {
                if (val == null)
                    return this.depth;
                if (val < 0)
                    return this.depth + val;
                return val;
            }
            /**
             The parent node that the position points into. Note that even if
             a position points into a text node, that node is not considered
             the parent—text nodes are ‘flat’ in this model, and have no content.
             */
            get parent() { return this.node(this.depth); }
            /**
             The root node in which the position was resolved.
             */
            get doc() { return this.node(0); }
            /**
             The ancestor node at the given level. `p.node(p.depth)` is the
             same as `p.parent`.
             */
            node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
            /**
             The index into the ancestor at the given level. If this points
             at the 3rd node in the 2nd paragraph on the top level, for
             example, `p.index(0)` is 1 and `p.index(1)` is 2.
             */
            index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
            /**
             The index pointing after this position into the ancestor at the
             given level.
             */
            indexAfter(depth) {
                depth = this.resolveDepth(depth);
                return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
            }
            /**
             The (absolute) position at the start of the node at the given
             level.
             */
            start(depth) {
                depth = this.resolveDepth(depth);
                return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
            }
            /**
             The (absolute) position at the end of the node at the given
             level.
             */
            end(depth) {
                depth = this.resolveDepth(depth);
                return this.start(depth) + this.node(depth).content.size;
            }
            /**
             The (absolute) position directly before the wrapping node at the
             given level, or, when `depth` is `this.depth + 1`, the original
             position.
             */
            before(depth) {
                depth = this.resolveDepth(depth);
                if (!depth)
                    throw new RangeError("There is no position before the top-level node");
                return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
            }
            /**
             The (absolute) position directly after the wrapping node at the
             given level, or the original position when `depth` is `this.depth + 1`.
             */
            after(depth) {
                depth = this.resolveDepth(depth);
                if (!depth)
                    throw new RangeError("There is no position after the top-level node");
                return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
            }
            /**
             When this position points into a text node, this returns the
             distance between the position and the start of the text node.
             Will be zero for positions that point between nodes.
             */
            get textOffset() { return this.pos - this.path[this.path.length - 1]; }
            /**
             Get the node directly after the position, if any. If the position
             points into a text node, only the part of that node after the
             position is returned.
             */
            get nodeAfter() {
                let parent = this.parent, index = this.index(this.depth);
                if (index == parent.childCount)
                    return null;
                let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
                return dOff ? parent.child(index).cut(dOff) : child;
            }
            /**
             Get the node directly before the position, if any. If the
             position points into a text node, only the part of that node
             before the position is returned.
             */
            get nodeBefore() {
                let index = this.index(this.depth);
                let dOff = this.pos - this.path[this.path.length - 1];
                if (dOff)
                    return this.parent.child(index).cut(0, dOff);
                return index == 0 ? null : this.parent.child(index - 1);
            }
            /**
             Get the position at the given index in the parent node at the
             given depth (which defaults to `this.depth`).
             */
            posAtIndex(index, depth) {
                depth = this.resolveDepth(depth);
                let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
                for (let i = 0; i < index; i++)
                    pos += node.child(i).nodeSize;
                return pos;
            }
            /**
             Get the marks at this position, factoring in the surrounding
             marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
             position is at the start of a non-empty node, the marks of the
             node after it (if any) are returned.
             */
            marks() {
                let parent = this.parent, index = this.index();
                // In an empty parent, return the empty array
                if (parent.content.size == 0)
                    return Mark.none;
                // When inside a text node, just return the text node's marks
                if (this.textOffset)
                    return parent.child(index).marks;
                let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
                // If the `after` flag is true of there is no node before, make
                // the node after this position the main reference.
                if (!main) {
                    let tmp = main;
                    main = other;
                    other = tmp;
                }
                // Use all marks in the main node, except those that have
                // `inclusive` set to false and are not present in the other node.
                let marks = main.marks;
                for (var i = 0; i < marks.length; i++)
                    if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                        marks = marks[i--].removeFromSet(marks);
                return marks;
            }
            /**
             Get the marks after the current position, if any, except those
             that are non-inclusive and not present at position `$end`. This
             is mostly useful for getting the set of marks to preserve after a
             deletion. Will return `null` if this position is at the end of
             its parent node or its parent node isn't a textblock (in which
             case no marks should be preserved).
             */
            marksAcross($end) {
                let after = this.parent.maybeChild(this.index());
                if (!after || !after.isInline)
                    return null;
                let marks = after.marks, next = $end.parent.maybeChild($end.index());
                for (var i = 0; i < marks.length; i++)
                    if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                        marks = marks[i--].removeFromSet(marks);
                return marks;
            }
            /**
             The depth up to which this position and the given (non-resolved)
             position share the same parent nodes.
             */
            sharedDepth(pos) {
                for (let depth = this.depth; depth > 0; depth--)
                    if (this.start(depth) <= pos && this.end(depth) >= pos)
                        return depth;
                return 0;
            }
            /**
             Returns a range based on the place where this position and the
             given position diverge around block content. If both point into
             the same textblock, for example, a range around that textblock
             will be returned. If they point into different blocks, the range
             around those blocks in their shared ancestor is returned. You can
             pass in an optional predicate that will be called with a parent
             node to see if a range into that parent is acceptable.
             */
            blockRange(other = this, pred) {
                if (other.pos < this.pos)
                    return other.blockRange(this);
                for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
                    if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                        return new NodeRange(this, other, d);
                return null;
            }
            /**
             Query whether the given position shares the same parent node.
             */
            sameParent(other) {
                return this.pos - this.parentOffset == other.pos - other.parentOffset;
            }
            /**
             Return the greater of this and the given position.
             */
            max(other) {
                return other.pos > this.pos ? other : this;
            }
            /**
             Return the smaller of this and the given position.
             */
            min(other) {
                return other.pos < this.pos ? other : this;
            }
            /**
             @internal
             */
            toString() {
                let str = "";
                for (let i = 1; i <= this.depth; i++)
                    str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
                return str + ":" + this.parentOffset;
            }
            /**
             @internal
             */
            static resolve(doc, pos) {
                if (!(pos >= 0 && pos <= doc.content.size))
                    throw new RangeError("Position " + pos + " out of range");
                let path = [];
                let start = 0, parentOffset = pos;
                for (let node = doc;;) {
                    let { index, offset } = node.content.findIndex(parentOffset);
                    let rem = parentOffset - offset;
                    path.push(node, index, start + offset);
                    if (!rem)
                        break;
                    node = node.child(index);
                    if (node.isText)
                        break;
                    parentOffset = rem - 1;
                    start += offset + 1;
                }
                return new ResolvedPos(pos, path, parentOffset);
            }
            /**
             @internal
             */
            static resolveCached(doc, pos) {
                for (let i = 0; i < resolveCache.length; i++) {
                    let cached = resolveCache[i];
                    if (cached.pos == pos && cached.doc == doc)
                        return cached;
                }
                let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
                resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
                return result;
            }
        }
        let resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;
        /**
         Represents a flat range of content, i.e. one that starts and
         ends in the same node.
         */
        class NodeRange {
            /**
             Construct a node range. `$from` and `$to` should point into the
             same node until at least the given `depth`, since a node range
             denotes an adjacent set of nodes in a single parent node.
             */
            constructor(
                /**
                 A resolved position along the start of the content. May have a
                 `depth` greater than this object's `depth` property, since
                 these are the positions that were used to compute the range,
                 not re-resolved positions directly at its boundaries.
                 */
                $from,
                /**
                 A position along the end of the content. See
                 caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
                 */
                $to,
                /**
                 The depth of the node that this range points into.
                 */
                depth) {
                this.$from = $from;
                this.$to = $to;
                this.depth = depth;
            }
            /**
             The position at the start of the range.
             */
            get start() { return this.$from.before(this.depth + 1); }
            /**
             The position at the end of the range.
             */
            get end() { return this.$to.after(this.depth + 1); }
            /**
             The parent node that the range points into.
             */
            get parent() { return this.$from.node(this.depth); }
            /**
             The start index of the range in the parent node.
             */
            get startIndex() { return this.$from.index(this.depth); }
            /**
             The end index of the range in the parent node.
             */
            get endIndex() { return this.$to.indexAfter(this.depth); }
        }

        const emptyAttrs = Object.create(null);
        /**
         This class represents a node in the tree that makes up a
         ProseMirror document. So a document is an instance of `Node`, with
         children that are also instances of `Node`.

         Nodes are persistent data structures. Instead of changing them, you
         create new ones with the content you want. Old ones keep pointing
         at the old document shape. This is made cheaper by sharing
         structure between the old and new data as much as possible, which a
         tree shape like this (without back pointers) makes easy.

         **Do not** directly mutate the properties of a `Node` object. See
         [the guide](/docs/guide/#doc) for more information.
         */
        class Node {
            /**
             @internal
             */
            constructor(
                /**
                 The type of node that this is.
                 */
                type,
                /**
                 An object mapping attribute names to values. The kind of
                 attributes allowed and required are
                 [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
                 */
                attrs,
                // A fragment holding the node's children.
                content,
                /**
                 The marks (things like whether it is emphasized or part of a
                 link) applied to this node.
                 */
                marks = Mark.none) {
                this.type = type;
                this.attrs = attrs;
                this.marks = marks;
                this.content = content || Fragment.empty;
            }
            /**
             The size of this node, as defined by the integer-based [indexing
             scheme](/docs/guide/#doc.indexing). For text nodes, this is the
             amount of characters. For other leaf nodes, it is one. For
             non-leaf nodes, it is the size of the content plus two (the
             start and end token).
             */
            get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
            /**
             The number of children that the node has.
             */
            get childCount() { return this.content.childCount; }
            /**
             Get the child node at the given index. Raises an error when the
             index is out of range.
             */
            child(index) { return this.content.child(index); }
            /**
             Get the child node at the given index, if it exists.
             */
            maybeChild(index) { return this.content.maybeChild(index); }
            /**
             Call `f` for every child node, passing the node, its offset
             into this parent node, and its index.
             */
            forEach(f) { this.content.forEach(f); }
            /**
             Invoke a callback for all descendant nodes recursively between
             the given two positions that are relative to start of this
             node's content. The callback is invoked with the node, its
             parent-relative position, its parent node, and its child index.
             When the callback returns false for a given node, that node's
             children will not be recursed over. The last parameter can be
             used to specify a starting position to count from.
             */
            nodesBetween(from, to, f, startPos = 0) {
                this.content.nodesBetween(from, to, f, startPos, this);
            }
            /**
             Call the given callback for every descendant node. Doesn't
             descend into a node when the callback returns `false`.
             */
            descendants(f) {
                this.nodesBetween(0, this.content.size, f);
            }
            /**
             Concatenates all the text nodes found in this fragment and its
             children.
             */
            get textContent() {
                return (this.isLeaf && this.type.spec.leafText)
                    ? this.type.spec.leafText(this)
                    : this.textBetween(0, this.content.size, "");
            }
            /**
             Get all text between positions `from` and `to`. When
             `blockSeparator` is given, it will be inserted to separate text
             from different block nodes. If `leafText` is given, it'll be
             inserted for every non-text leaf node encountered, otherwise
             [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
             */
            textBetween(from, to, blockSeparator, leafText) {
                return this.content.textBetween(from, to, blockSeparator, leafText);
            }
            /**
             Returns this node's first child, or `null` if there are no
             children.
             */
            get firstChild() { return this.content.firstChild; }
            /**
             Returns this node's last child, or `null` if there are no
             children.
             */
            get lastChild() { return this.content.lastChild; }
            /**
             Test whether two nodes represent the same piece of document.
             */
            eq(other) {
                return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
            }
            /**
             Compare the markup (type, attributes, and marks) of this node to
             those of another. Returns `true` if both have the same markup.
             */
            sameMarkup(other) {
                return this.hasMarkup(other.type, other.attrs, other.marks);
            }
            /**
             Check whether this node's markup correspond to the given type,
             attributes, and marks.
             */
            hasMarkup(type, attrs, marks) {
                return this.type == type &&
                    compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
                    Mark.sameSet(this.marks, marks || Mark.none);
            }
            /**
             Create a new node with the same markup as this node, containing
             the given content (or empty, if no content is given).
             */
            copy(content = null) {
                if (content == this.content)
                    return this;
                return new Node(this.type, this.attrs, content, this.marks);
            }
            /**
             Create a copy of this node, with the given set of marks instead
             of the node's own marks.
             */
            mark(marks) {
                return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
            }
            /**
             Create a copy of this node with only the content between the
             given positions. If `to` is not given, it defaults to the end of
             the node.
             */
            cut(from, to = this.content.size) {
                if (from == 0 && to == this.content.size)
                    return this;
                return this.copy(this.content.cut(from, to));
            }
            /**
             Cut out the part of the document between the given positions, and
             return it as a `Slice` object.
             */
            slice(from, to = this.content.size, includeParents = false) {
                if (from == to)
                    return Slice.empty;
                let $from = this.resolve(from), $to = this.resolve(to);
                let depth = includeParents ? 0 : $from.sharedDepth(to);
                let start = $from.start(depth), node = $from.node(depth);
                let content = node.content.cut($from.pos - start, $to.pos - start);
                return new Slice(content, $from.depth - depth, $to.depth - depth);
            }
            /**
             Replace the part of the document between the given positions with
             the given slice. The slice must 'fit', meaning its open sides
             must be able to connect to the surrounding content, and its
             content nodes must be valid children for the node they are placed
             into. If any of this is violated, an error of type
             [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
             */
            replace(from, to, slice) {
                return replace(this.resolve(from), this.resolve(to), slice);
            }
            /**
             Find the node directly after the given position.
             */
            nodeAt(pos) {
                for (let node = this;;) {
                    let { index, offset } = node.content.findIndex(pos);
                    node = node.maybeChild(index);
                    if (!node)
                        return null;
                    if (offset == pos || node.isText)
                        return node;
                    pos -= offset + 1;
                }
            }
            /**
             Find the (direct) child node after the given offset, if any,
             and return it along with its index and offset relative to this
             node.
             */
            childAfter(pos) {
                let { index, offset } = this.content.findIndex(pos);
                return { node: this.content.maybeChild(index), index, offset };
            }
            /**
             Find the (direct) child node before the given offset, if any,
             and return it along with its index and offset relative to this
             node.
             */
            childBefore(pos) {
                if (pos == 0)
                    return { node: null, index: 0, offset: 0 };
                let { index, offset } = this.content.findIndex(pos);
                if (offset < pos)
                    return { node: this.content.child(index), index, offset };
                let node = this.content.child(index - 1);
                return { node, index: index - 1, offset: offset - node.nodeSize };
            }
            /**
             Resolve the given position in the document, returning an
             [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
             */
            resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
            /**
             @internal
             */
            resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
            /**
             Test whether a given mark or mark type occurs in this document
             between the two given positions.
             */
            rangeHasMark(from, to, type) {
                let found = false;
                if (to > from)
                    this.nodesBetween(from, to, node => {
                        if (type.isInSet(node.marks))
                            found = true;
                        return !found;
                    });
                return found;
            }
            /**
             True when this is a block (non-inline node)
             */
            get isBlock() { return this.type.isBlock; }
            /**
             True when this is a textblock node, a block node with inline
             content.
             */
            get isTextblock() { return this.type.isTextblock; }
            /**
             True when this node allows inline content.
             */
            get inlineContent() { return this.type.inlineContent; }
            /**
             True when this is an inline node (a text node or a node that can
             appear among text).
             */
            get isInline() { return this.type.isInline; }
            /**
             True when this is a text node.
             */
            get isText() { return this.type.isText; }
            /**
             True when this is a leaf node.
             */
            get isLeaf() { return this.type.isLeaf; }
            /**
             True when this is an atom, i.e. when it does not have directly
             editable content. This is usually the same as `isLeaf`, but can
             be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
             on a node's spec (typically used when the node is displayed as
             an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
             */
            get isAtom() { return this.type.isAtom; }
            /**
             Return a string representation of this node for debugging
             purposes.
             */
            toString() {
                if (this.type.spec.toDebugString)
                    return this.type.spec.toDebugString(this);
                let name = this.type.name;
                if (this.content.size)
                    name += "(" + this.content.toStringInner() + ")";
                return wrapMarks(this.marks, name);
            }
            /**
             Get the content match in this node at the given index.
             */
            contentMatchAt(index) {
                let match = this.type.contentMatch.matchFragment(this.content, 0, index);
                if (!match)
                    throw new Error("Called contentMatchAt on a node with invalid content");
                return match;
            }
            /**
             Test whether replacing the range between `from` and `to` (by
             child index) with the given replacement fragment (which defaults
             to the empty fragment) would leave the node's content valid. You
             can optionally pass `start` and `end` indices into the
             replacement fragment.
             */
            canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
                let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
                let two = one && one.matchFragment(this.content, to);
                if (!two || !two.validEnd)
                    return false;
                for (let i = start; i < end; i++)
                    if (!this.type.allowsMarks(replacement.child(i).marks))
                        return false;
                return true;
            }
            /**
             Test whether replacing the range `from` to `to` (by index) with
             a node of the given type would leave the node's content valid.
             */
            canReplaceWith(from, to, type, marks) {
                if (marks && !this.type.allowsMarks(marks))
                    return false;
                let start = this.contentMatchAt(from).matchType(type);
                let end = start && start.matchFragment(this.content, to);
                return end ? end.validEnd : false;
            }
            /**
             Test whether the given node's content could be appended to this
             node. If that node is empty, this will only return true if there
             is at least one node type that can appear in both nodes (to avoid
             merging completely incompatible nodes).
             */
            canAppend(other) {
                if (other.content.size)
                    return this.canReplace(this.childCount, this.childCount, other.content);
                else
                    return this.type.compatibleContent(other.type);
            }
            /**
             Check whether this node and its descendants conform to the
             schema, and raise error when they do not.
             */
            check() {
                if (!this.type.validContent(this.content))
                    throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`);
                let copy = Mark.none;
                for (let i = 0; i < this.marks.length; i++)
                    copy = this.marks[i].addToSet(copy);
                if (!Mark.sameSet(copy, this.marks))
                    throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
                this.content.forEach(node => node.check());
            }
            /**
             Return a JSON-serializeable representation of this node.
             */
            toJSON() {
                let obj = { type: this.type.name };
                for (let _ in this.attrs) {
                    obj.attrs = this.attrs;
                    break;
                }
                if (this.content.size)
                    obj.content = this.content.toJSON();
                if (this.marks.length)
                    obj.marks = this.marks.map(n => n.toJSON());
                return obj;
            }
            /**
             Deserialize a node from its JSON representation.
             */
            static fromJSON(schema, json) {
                if (!json)
                    throw new RangeError("Invalid input for Node.fromJSON");
                let marks = null;
                if (json.marks) {
                    if (!Array.isArray(json.marks))
                        throw new RangeError("Invalid mark data for Node.fromJSON");
                    marks = json.marks.map(schema.markFromJSON);
                }
                if (json.type == "text") {
                    if (typeof json.text != "string")
                        throw new RangeError("Invalid text node in JSON");
                    return schema.text(json.text, marks);
                }
                let content = Fragment.fromJSON(schema, json.content);
                return schema.nodeType(json.type).create(json.attrs, content, marks);
            }
        }
        Node.prototype.text = undefined;
        class TextNode extends Node {
            /**
             @internal
             */
            constructor(type, attrs, content, marks) {
                super(type, attrs, null, marks);
                if (!content)
                    throw new RangeError("Empty text nodes are not allowed");
                this.text = content;
            }
            toString() {
                if (this.type.spec.toDebugString)
                    return this.type.spec.toDebugString(this);
                return wrapMarks(this.marks, JSON.stringify(this.text));
            }
            get textContent() { return this.text; }
            textBetween(from, to) { return this.text.slice(from, to); }
            get nodeSize() { return this.text.length; }
            mark(marks) {
                return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
            }
            withText(text) {
                if (text == this.text)
                    return this;
                return new TextNode(this.type, this.attrs, text, this.marks);
            }
            cut(from = 0, to = this.text.length) {
                if (from == 0 && to == this.text.length)
                    return this;
                return this.withText(this.text.slice(from, to));
            }
            eq(other) {
                return this.sameMarkup(other) && this.text == other.text;
            }
            toJSON() {
                let base = super.toJSON();
                base.text = this.text;
                return base;
            }
        }
        function wrapMarks(marks, str) {
            for (let i = marks.length - 1; i >= 0; i--)
                str = marks[i].type.name + "(" + str + ")";
            return str;
        }

        /**
         Instances of this class represent a match state of a node type's
         [content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
         find out whether further content matches here, and whether a given
         position is a valid end of the node.
         */
        class ContentMatch {
            /**
             @internal
             */
            constructor(
                /**
                 True when this match state represents a valid end of the node.
                 */
                validEnd) {
                this.validEnd = validEnd;
                /**
                 @internal
                 */
                this.next = [];
                /**
                 @internal
                 */
                this.wrapCache = [];
            }
            /**
             @internal
             */
            static parse(string, nodeTypes) {
                let stream = new TokenStream(string, nodeTypes);
                if (stream.next == null)
                    return ContentMatch.empty;
                let expr = parseExpr(stream);
                if (stream.next)
                    stream.err("Unexpected trailing text");
                let match = dfa(nfa(expr));
                checkForDeadEnds(match, stream);
                return match;
            }
            /**
             Match a node type, returning a match after that node if
             successful.
             */
            matchType(type) {
                for (let i = 0; i < this.next.length; i++)
                    if (this.next[i].type == type)
                        return this.next[i].next;
                return null;
            }
            /**
             Try to match a fragment. Returns the resulting match when
             successful.
             */
            matchFragment(frag, start = 0, end = frag.childCount) {
                let cur = this;
                for (let i = start; cur && i < end; i++)
                    cur = cur.matchType(frag.child(i).type);
                return cur;
            }
            /**
             @internal
             */
            get inlineContent() {
                return this.next.length && this.next[0].type.isInline;
            }
            /**
             Get the first matching node type at this match position that can
             be generated.
             */
            get defaultType() {
                for (let i = 0; i < this.next.length; i++) {
                    let { type } = this.next[i];
                    if (!(type.isText || type.hasRequiredAttrs()))
                        return type;
                }
                return null;
            }
            /**
             @internal
             */
            compatible(other) {
                for (let i = 0; i < this.next.length; i++)
                    for (let j = 0; j < other.next.length; j++)
                        if (this.next[i].type == other.next[j].type)
                            return true;
                return false;
            }
            /**
             Try to match the given fragment, and if that fails, see if it can
             be made to match by inserting nodes in front of it. When
             successful, return a fragment of inserted nodes (which may be
             empty if nothing had to be inserted). When `toEnd` is true, only
             return a fragment if the resulting match goes to the end of the
             content expression.
             */
            fillBefore(after, toEnd = false, startIndex = 0) {
                let seen = [this];
                function search(match, types) {
                    let finished = match.matchFragment(after, startIndex);
                    if (finished && (!toEnd || finished.validEnd))
                        return Fragment.from(types.map(tp => tp.createAndFill()));
                    for (let i = 0; i < match.next.length; i++) {
                        let { type, next } = match.next[i];
                        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                            seen.push(next);
                            let found = search(next, types.concat(type));
                            if (found)
                                return found;
                        }
                    }
                    return null;
                }
                return search(this, []);
            }
            /**
             Find a set of wrapping node types that would allow a node of the
             given type to appear at this position. The result may be empty
             (when it fits directly) and will be null when no such wrapping
             exists.
             */
            findWrapping(target) {
                for (let i = 0; i < this.wrapCache.length; i += 2)
                    if (this.wrapCache[i] == target)
                        return this.wrapCache[i + 1];
                let computed = this.computeWrapping(target);
                this.wrapCache.push(target, computed);
                return computed;
            }
            /**
             @internal
             */
            computeWrapping(target) {
                let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
                while (active.length) {
                    let current = active.shift(), match = current.match;
                    if (match.matchType(target)) {
                        let result = [];
                        for (let obj = current; obj.type; obj = obj.via)
                            result.push(obj.type);
                        return result.reverse();
                    }
                    for (let i = 0; i < match.next.length; i++) {
                        let { type, next } = match.next[i];
                        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                            active.push({ match: type.contentMatch, type, via: current });
                            seen[type.name] = true;
                        }
                    }
                }
                return null;
            }
            /**
             The number of outgoing edges this node has in the finite
             automaton that describes the content expression.
             */
            get edgeCount() {
                return this.next.length;
            }
            /**
             Get the _n_​th outgoing edge from this node in the finite
             automaton that describes the content expression.
             */
            edge(n) {
                if (n >= this.next.length)
                    throw new RangeError(`There's no ${n}th edge in this content match`);
                return this.next[n];
            }
            /**
             @internal
             */
            toString() {
                let seen = [];
                function scan(m) {
                    seen.push(m);
                    for (let i = 0; i < m.next.length; i++)
                        if (seen.indexOf(m.next[i].next) == -1)
                            scan(m.next[i].next);
                }
                scan(this);
                return seen.map((m, i) => {
                    let out = i + (m.validEnd ? "*" : " ") + " ";
                    for (let i = 0; i < m.next.length; i++)
                        out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
                    return out;
                }).join("\n");
            }
        }
        /**
         @internal
         */
        ContentMatch.empty = new ContentMatch(true);
        class TokenStream {
            constructor(string, nodeTypes) {
                this.string = string;
                this.nodeTypes = nodeTypes;
                this.inline = null;
                this.pos = 0;
                this.tokens = string.split(/\s*(?=\b|\W|$)/);
                if (this.tokens[this.tokens.length - 1] == "")
                    this.tokens.pop();
                if (this.tokens[0] == "")
                    this.tokens.shift();
            }
            get next() { return this.tokens[this.pos]; }
            eat(tok) { return this.next == tok && (this.pos++ || true); }
            err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
        }
        function parseExpr(stream) {
            let exprs = [];
            do {
                exprs.push(parseExprSeq(stream));
            } while (stream.eat("|"));
            return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
        }
        function parseExprSeq(stream) {
            let exprs = [];
            do {
                exprs.push(parseExprSubscript(stream));
            } while (stream.next && stream.next != ")" && stream.next != "|");
            return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
        }
        function parseExprSubscript(stream) {
            let expr = parseExprAtom(stream);
            for (;;) {
                if (stream.eat("+"))
                    expr = { type: "plus", expr };
                else if (stream.eat("*"))
                    expr = { type: "star", expr };
                else if (stream.eat("?"))
                    expr = { type: "opt", expr };
                else if (stream.eat("{"))
                    expr = parseExprRange(stream, expr);
                else
                    break;
            }
            return expr;
        }
        function parseNum(stream) {
            if (/\D/.test(stream.next))
                stream.err("Expected number, got '" + stream.next + "'");
            let result = Number(stream.next);
            stream.pos++;
            return result;
        }
        function parseExprRange(stream, expr) {
            let min = parseNum(stream), max = min;
            if (stream.eat(",")) {
                if (stream.next != "}")
                    max = parseNum(stream);
                else
                    max = -1;
            }
            if (!stream.eat("}"))
                stream.err("Unclosed braced range");
            return { type: "range", min, max, expr };
        }
        function resolveName(stream, name) {
            let types = stream.nodeTypes, type = types[name];
            if (type)
                return [type];
            let result = [];
            for (let typeName in types) {
                let type = types[typeName];
                if (type.groups.indexOf(name) > -1)
                    result.push(type);
            }
            if (result.length == 0)
                stream.err("No node type or group '" + name + "' found");
            return result;
        }
        function parseExprAtom(stream) {
            if (stream.eat("(")) {
                let expr = parseExpr(stream);
                if (!stream.eat(")"))
                    stream.err("Missing closing paren");
                return expr;
            }
            else if (!/\W/.test(stream.next)) {
                let exprs = resolveName(stream, stream.next).map(type => {
                    if (stream.inline == null)
                        stream.inline = type.isInline;
                    else if (stream.inline != type.isInline)
                        stream.err("Mixing inline and block content");
                    return { type: "name", value: type };
                });
                stream.pos++;
                return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
            }
            else {
                stream.err("Unexpected token '" + stream.next + "'");
            }
        }
        /**
         Construct an NFA from an expression as returned by the parser. The
         NFA is represented as an array of states, which are themselves
         arrays of edges, which are `{term, to}` objects. The first state is
         the entry state and the last node is the success state.

         Note that unlike typical NFAs, the edge ordering in this one is
         significant, in that it is used to contruct filler content when
         necessary.
         */
        function nfa(expr) {
            let nfa = [[]];
            connect(compile(expr, 0), node());
            return nfa;
            function node() { return nfa.push([]) - 1; }
            function edge(from, to, term) {
                let edge = { term, to };
                nfa[from].push(edge);
                return edge;
            }
            function connect(edges, to) {
                edges.forEach(edge => edge.to = to);
            }
            function compile(expr, from) {
                if (expr.type == "choice") {
                    return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
                }
                else if (expr.type == "seq") {
                    for (let i = 0;; i++) {
                        let next = compile(expr.exprs[i], from);
                        if (i == expr.exprs.length - 1)
                            return next;
                        connect(next, from = node());
                    }
                }
                else if (expr.type == "star") {
                    let loop = node();
                    edge(from, loop);
                    connect(compile(expr.expr, loop), loop);
                    return [edge(loop)];
                }
                else if (expr.type == "plus") {
                    let loop = node();
                    connect(compile(expr.expr, from), loop);
                    connect(compile(expr.expr, loop), loop);
                    return [edge(loop)];
                }
                else if (expr.type == "opt") {
                    return [edge(from)].concat(compile(expr.expr, from));
                }
                else if (expr.type == "range") {
                    let cur = from;
                    for (let i = 0; i < expr.min; i++) {
                        let next = node();
                        connect(compile(expr.expr, cur), next);
                        cur = next;
                    }
                    if (expr.max == -1) {
                        connect(compile(expr.expr, cur), cur);
                    }
                    else {
                        for (let i = expr.min; i < expr.max; i++) {
                            let next = node();
                            edge(cur, next);
                            connect(compile(expr.expr, cur), next);
                            cur = next;
                        }
                    }
                    return [edge(cur)];
                }
                else if (expr.type == "name") {
                    return [edge(from, undefined, expr.value)];
                }
                else {
                    throw new Error("Unknown expr type");
                }
            }
        }
        function cmp(a, b) { return b - a; }
// Get the set of nodes reachable by null edges from `node`. Omit
// nodes with only a single null-out-edge, since they may lead to
// needless duplicated nodes.
        function nullFrom(nfa, node) {
            let result = [];
            scan(node);
            return result.sort(cmp);
            function scan(node) {
                let edges = nfa[node];
                if (edges.length == 1 && !edges[0].term)
                    return scan(edges[0].to);
                result.push(node);
                for (let i = 0; i < edges.length; i++) {
                    let { term, to } = edges[i];
                    if (!term && result.indexOf(to) == -1)
                        scan(to);
                }
            }
        }
// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
// of state objects (`ContentMatch` instances) with transitions
// between them.
        function dfa(nfa) {
            let labeled = Object.create(null);
            return explore(nullFrom(nfa, 0));
            function explore(states) {
                let out = [];
                states.forEach(node => {
                    nfa[node].forEach(({ term, to }) => {
                        if (!term)
                            return;
                        let set;
                        for (let i = 0; i < out.length; i++)
                            if (out[i][0] == term)
                                set = out[i][1];
                        nullFrom(nfa, to).forEach(node => {
                            if (!set)
                                out.push([term, set = []]);
                            if (set.indexOf(node) == -1)
                                set.push(node);
                        });
                    });
                });
                let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
                for (let i = 0; i < out.length; i++) {
                    let states = out[i][1].sort(cmp);
                    state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
                }
                return state;
            }
        }
        function checkForDeadEnds(match, stream) {
            for (let i = 0, work = [match]; i < work.length; i++) {
                let state = work[i], dead = !state.validEnd, nodes = [];
                for (let j = 0; j < state.next.length; j++) {
                    let { type, next } = state.next[j];
                    nodes.push(type.name);
                    if (dead && !(type.isText || type.hasRequiredAttrs()))
                        dead = false;
                    if (work.indexOf(next) == -1)
                        work.push(next);
                }
                if (dead)
                    stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
            }
        }

// For node types where all attrs have a default value (or which don't
// have any attributes), build up a single reusable default attribute
// object, and use it for all nodes that don't specify specific
// attributes.
        function defaultAttrs(attrs) {
            let defaults = Object.create(null);
            for (let attrName in attrs) {
                let attr = attrs[attrName];
                if (!attr.hasDefault)
                    return null;
                defaults[attrName] = attr.default;
            }
            return defaults;
        }
        function computeAttrs(attrs, value) {
            let built = Object.create(null);
            for (let name in attrs) {
                let given = value && value[name];
                if (given === undefined) {
                    let attr = attrs[name];
                    if (attr.hasDefault)
                        given = attr.default;
                    else
                        throw new RangeError("No value supplied for attribute " + name);
                }
                built[name] = given;
            }
            return built;
        }
        function initAttrs(attrs) {
            let result = Object.create(null);
            if (attrs)
                for (let name in attrs)
                    result[name] = new Attribute(attrs[name]);
            return result;
        }
        /**
         Node types are objects allocated once per `Schema` and used to
         [tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
         about the node type, such as its name and what kind of node it
         represents.
         */
        class NodeType {
            /**
             @internal
             */
            constructor(
                /**
                 The name the node type has in this schema.
                 */
                name,
                /**
                 A link back to the `Schema` the node type belongs to.
                 */
                schema,
                /**
                 The spec that this type is based on
                 */
                spec) {
                this.name = name;
                this.schema = schema;
                this.spec = spec;
                /**
                 The set of marks allowed in this node. `null` means all marks
                 are allowed.
                 */
                this.markSet = null;
                this.groups = spec.group ? spec.group.split(" ") : [];
                this.attrs = initAttrs(spec.attrs);
                this.defaultAttrs = defaultAttrs(this.attrs);
                this.contentMatch = null;
                this.inlineContent = null;
                this.isBlock = !(spec.inline || name == "text");
                this.isText = name == "text";
            }
            /**
             True if this is an inline type.
             */
            get isInline() { return !this.isBlock; }
            /**
             True if this is a textblock type, a block that contains inline
             content.
             */
            get isTextblock() { return this.isBlock && this.inlineContent; }
            /**
             True for node types that allow no content.
             */
            get isLeaf() { return this.contentMatch == ContentMatch.empty; }
            /**
             True when this node is an atom, i.e. when it does not have
             directly editable content.
             */
            get isAtom() { return this.isLeaf || !!this.spec.atom; }
            /**
             The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
             */
            get whitespace() {
                return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
            }
            /**
             Tells you whether this node type has any required attributes.
             */
            hasRequiredAttrs() {
                for (let n in this.attrs)
                    if (this.attrs[n].isRequired)
                        return true;
                return false;
            }
            /**
             Indicates whether this node allows some of the same content as
             the given node type.
             */
            compatibleContent(other) {
                return this == other || this.contentMatch.compatible(other.contentMatch);
            }
            /**
             @internal
             */
            computeAttrs(attrs) {
                if (!attrs && this.defaultAttrs)
                    return this.defaultAttrs;
                else
                    return computeAttrs(this.attrs, attrs);
            }
            /**
             Create a `Node` of this type. The given attributes are
             checked and defaulted (you can pass `null` to use the type's
             defaults entirely, if no required attributes exist). `content`
             may be a `Fragment`, a node, an array of nodes, or
             `null`. Similarly `marks` may be `null` to default to the empty
             set of marks.
             */
            create(attrs = null, content, marks) {
                if (this.isText)
                    throw new Error("NodeType.create can't construct text nodes");
                return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
            }
            /**
             Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
             against the node type's content restrictions, and throw an error
             if it doesn't match.
             */
            createChecked(attrs = null, content, marks) {
                content = Fragment.from(content);
                if (!this.validContent(content))
                    throw new RangeError("Invalid content for node " + this.name);
                return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
            }
            /**
             Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
             necessary to add nodes to the start or end of the given fragment
             to make it fit the node. If no fitting wrapping can be found,
             return null. Note that, due to the fact that required nodes can
             always be created, this will always succeed if you pass null or
             `Fragment.empty` as content.
             */
            createAndFill(attrs = null, content, marks) {
                attrs = this.computeAttrs(attrs);
                content = Fragment.from(content);
                if (content.size) {
                    let before = this.contentMatch.fillBefore(content);
                    if (!before)
                        return null;
                    content = before.append(content);
                }
                let matched = this.contentMatch.matchFragment(content);
                let after = matched && matched.fillBefore(Fragment.empty, true);
                if (!after)
                    return null;
                return new Node(this, attrs, content.append(after), Mark.setFrom(marks));
            }
            /**
             Returns true if the given fragment is valid content for this node
             type with the given attributes.
             */
            validContent(content) {
                let result = this.contentMatch.matchFragment(content);
                if (!result || !result.validEnd)
                    return false;
                for (let i = 0; i < content.childCount; i++)
                    if (!this.allowsMarks(content.child(i).marks))
                        return false;
                return true;
            }
            /**
             Check whether the given mark type is allowed in this node.
             */
            allowsMarkType(markType) {
                return this.markSet == null || this.markSet.indexOf(markType) > -1;
            }
            /**
             Test whether the given set of marks are allowed in this node.
             */
            allowsMarks(marks) {
                if (this.markSet == null)
                    return true;
                for (let i = 0; i < marks.length; i++)
                    if (!this.allowsMarkType(marks[i].type))
                        return false;
                return true;
            }
            /**
             Removes the marks that are not allowed in this node from the given set.
             */
            allowedMarks(marks) {
                if (this.markSet == null)
                    return marks;
                let copy;
                for (let i = 0; i < marks.length; i++) {
                    if (!this.allowsMarkType(marks[i].type)) {
                        if (!copy)
                            copy = marks.slice(0, i);
                    }
                    else if (copy) {
                        copy.push(marks[i]);
                    }
                }
                return !copy ? marks : copy.length ? copy : Mark.none;
            }
            /**
             @internal
             */
            static compile(nodes, schema) {
                let result = Object.create(null);
                nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
                let topType = schema.spec.topNode || "doc";
                if (!result[topType])
                    throw new RangeError("Schema is missing its top node type ('" + topType + "')");
                if (!result.text)
                    throw new RangeError("Every schema needs a 'text' type");
                for (let _ in result.text.attrs)
                    throw new RangeError("The text node type should not have attributes");
                return result;
            }
        }
// Attribute descriptors
        class Attribute {
            constructor(options) {
                this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
                this.default = options.default;
            }
            get isRequired() {
                return !this.hasDefault;
            }
        }
// Marks
        /**
         Like nodes, marks (which are associated with nodes to signify
         things like emphasis or being part of a link) are
         [tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
         instantiated once per `Schema`.
         */
        class MarkType {
            /**
             @internal
             */
            constructor(
                /**
                 The name of the mark type.
                 */
                name,
                /**
                 @internal
                 */
                rank,
                /**
                 The schema that this mark type instance is part of.
                 */
                schema,
                /**
                 The spec on which the type is based.
                 */
                spec) {
                this.name = name;
                this.rank = rank;
                this.schema = schema;
                this.spec = spec;
                this.attrs = initAttrs(spec.attrs);
                this.excluded = null;
                let defaults = defaultAttrs(this.attrs);
                this.instance = defaults ? new Mark(this, defaults) : null;
            }
            /**
             Create a mark of this type. `attrs` may be `null` or an object
             containing only some of the mark's attributes. The others, if
             they have defaults, will be added.
             */
            create(attrs = null) {
                if (!attrs && this.instance)
                    return this.instance;
                return new Mark(this, computeAttrs(this.attrs, attrs));
            }
            /**
             @internal
             */
            static compile(marks, schema) {
                let result = Object.create(null), rank = 0;
                marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
                return result;
            }
            /**
             When there is a mark of this type in the given set, a new set
             without it is returned. Otherwise, the input set is returned.
             */
            removeFromSet(set) {
                for (var i = 0; i < set.length; i++)
                    if (set[i].type == this) {
                        set = set.slice(0, i).concat(set.slice(i + 1));
                        i--;
                    }
                return set;
            }
            /**
             Tests whether there is a mark of this type in the given set.
             */
            isInSet(set) {
                for (let i = 0; i < set.length; i++)
                    if (set[i].type == this)
                        return set[i];
            }
            /**
             Queries whether a given mark type is
             [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
             */
            excludes(other) {
                return this.excluded.indexOf(other) > -1;
            }
        }
        /**
         A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
         type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
         occur in conforming documents, and provides functionality for
         creating and deserializing such documents.

         When given, the type parameters provide the names of the nodes and
         marks in this schema.
         */
        class Schema {
            /**
             Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
             */
            constructor(spec) {
                /**
                 An object for storing whatever values modules may want to
                 compute and cache per schema. (If you want to store something
                 in it, try to use property names unlikely to clash.)
                 */
                this.cached = Object.create(null);
                this.spec = {
                    nodes: orderedmap__WEBPACK_IMPORTED_MODULE_0__["default"].from(spec.nodes),
                    marks: orderedmap__WEBPACK_IMPORTED_MODULE_0__["default"].from(spec.marks || {}),
                    topNode: spec.topNode
                };
                this.nodes = NodeType.compile(this.spec.nodes, this);
                this.marks = MarkType.compile(this.spec.marks, this);
                let contentExprCache = Object.create(null);
                for (let prop in this.nodes) {
                    if (prop in this.marks)
                        throw new RangeError(prop + " can not be both a node and a mark");
                    let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
                    type.contentMatch = contentExprCache[contentExpr] ||
                        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
                    type.inlineContent = type.contentMatch.inlineContent;
                    type.markSet = markExpr == "_" ? null :
                        markExpr ? gatherMarks(this, markExpr.split(" ")) :
                            markExpr == "" || !type.inlineContent ? [] : null;
                }
                for (let prop in this.marks) {
                    let type = this.marks[prop], excl = type.spec.excludes;
                    type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
                }
                this.nodeFromJSON = this.nodeFromJSON.bind(this);
                this.markFromJSON = this.markFromJSON.bind(this);
                this.topNodeType = this.nodes[this.spec.topNode || "doc"];
                this.cached.wrappings = Object.create(null);
            }
            /**
             Create a node in this schema. The `type` may be a string or a
             `NodeType` instance. Attributes will be extended with defaults,
             `content` may be a `Fragment`, `null`, a `Node`, or an array of
             nodes.
             */
            node(type, attrs = null, content, marks) {
                if (typeof type == "string")
                    type = this.nodeType(type);
                else if (!(type instanceof NodeType))
                    throw new RangeError("Invalid node type: " + type);
                else if (type.schema != this)
                    throw new RangeError("Node type from different schema used (" + type.name + ")");
                return type.createChecked(attrs, content, marks);
            }
            /**
             Create a text node in the schema. Empty text nodes are not
             allowed.
             */
            text(text, marks) {
                let type = this.nodes.text;
                return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));
            }
            /**
             Create a mark with the given type and attributes.
             */
            mark(type, attrs) {
                if (typeof type == "string")
                    type = this.marks[type];
                return type.create(attrs);
            }
            /**
             Deserialize a node from its JSON representation. This method is
             bound.
             */
            nodeFromJSON(json) {
                return Node.fromJSON(this, json);
            }
            /**
             Deserialize a mark from its JSON representation. This method is
             bound.
             */
            markFromJSON(json) {
                return Mark.fromJSON(this, json);
            }
            /**
             @internal
             */
            nodeType(name) {
                let found = this.nodes[name];
                if (!found)
                    throw new RangeError("Unknown node type: " + name);
                return found;
            }
        }
        function gatherMarks(schema, marks) {
            let found = [];
            for (let i = 0; i < marks.length; i++) {
                let name = marks[i], mark = schema.marks[name], ok = mark;
                if (mark) {
                    found.push(mark);
                }
                else {
                    for (let prop in schema.marks) {
                        let mark = schema.marks[prop];
                        if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                            found.push(ok = mark);
                    }
                }
                if (!ok)
                    throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
            }
            return found;
        }

        /**
         A DOM parser represents a strategy for parsing DOM content into a
         ProseMirror document conforming to a given schema. Its behavior is
         defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
         */
        class DOMParser {
            /**
             Create a parser that targets the given schema, using the given
             parsing rules.
             */
            constructor(
                /**
                 The schema into which the parser parses.
                 */
                schema,
                /**
                 The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
                 uses, in order of precedence.
                 */
                rules) {
                this.schema = schema;
                this.rules = rules;
                /**
                 @internal
                 */
                this.tags = [];
                /**
                 @internal
                 */
                this.styles = [];
                rules.forEach(rule => {
                    if (rule.tag)
                        this.tags.push(rule);
                    else if (rule.style)
                        this.styles.push(rule);
                });
                // Only normalize list elements when lists in the schema can't directly contain themselves
                this.normalizeLists = !this.tags.some(r => {
                    if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                        return false;
                    let node = schema.nodes[r.node];
                    return node.contentMatch.matchType(node);
                });
            }
            /**
             Parse a document from the content of a DOM node.
             */
            parse(dom, options = {}) {
                let context = new ParseContext(this, options, false);
                context.addAll(dom, options.from, options.to);
                return context.finish();
            }
            /**
             Parses the content of the given DOM node, like
             [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
             options. But unlike that method, which produces a whole node,
             this one returns a slice that is open at the sides, meaning that
             the schema constraints aren't applied to the start of nodes to
             the left of the input and the end of nodes at the end.
             */
            parseSlice(dom, options = {}) {
                let context = new ParseContext(this, options, true);
                context.addAll(dom, options.from, options.to);
                return Slice.maxOpen(context.finish());
            }
            /**
             @internal
             */
            matchTag(dom, context, after) {
                for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
                    let rule = this.tags[i];
                    if (matches(dom, rule.tag) &&
                        (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                        (!rule.context || context.matchesContext(rule.context))) {
                        if (rule.getAttrs) {
                            let result = rule.getAttrs(dom);
                            if (result === false)
                                continue;
                            rule.attrs = result || undefined;
                        }
                        return rule;
                    }
                }
            }
            /**
             @internal
             */
            matchStyle(prop, value, context, after) {
                for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
                    let rule = this.styles[i], style = rule.style;
                    if (style.indexOf(prop) != 0 ||
                        rule.context && !context.matchesContext(rule.context) ||
                        // Test that the style string either precisely matches the prop,
                        // or has an '=' sign after the prop, followed by the given
                        // value.
                        style.length > prop.length &&
                        (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                        continue;
                    if (rule.getAttrs) {
                        let result = rule.getAttrs(value);
                        if (result === false)
                            continue;
                        rule.attrs = result || undefined;
                    }
                    return rule;
                }
            }
            /**
             @internal
             */
            static schemaRules(schema) {
                let result = [];
                function insert(rule) {
                    let priority = rule.priority == null ? 50 : rule.priority, i = 0;
                    for (; i < result.length; i++) {
                        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                        if (nextPriority < priority)
                            break;
                    }
                    result.splice(i, 0, rule);
                }
                for (let name in schema.marks) {
                    let rules = schema.marks[name].spec.parseDOM;
                    if (rules)
                        rules.forEach(rule => {
                            insert(rule = copy(rule));
                            rule.mark = name;
                        });
                }
                for (let name in schema.nodes) {
                    let rules = schema.nodes[name].spec.parseDOM;
                    if (rules)
                        rules.forEach(rule => {
                            insert(rule = copy(rule));
                            rule.node = name;
                        });
                }
                return result;
            }
            /**
             Construct a DOM parser using the parsing rules listed in a
             schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
             [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
             */
            static fromSchema(schema) {
                return schema.cached.domParser ||
                    (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
            }
        }
        const blockTags = {
            address: true, article: true, aside: true, blockquote: true, canvas: true,
            dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
            footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
            h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
            output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
        };
        const ignoreTags = {
            head: true, noscript: true, object: true, script: true, style: true, title: true
        };
        const listTags = { ol: true, ul: true };
// Using a bitfield for node context options
        const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
        function wsOptionsFor(type, preserveWhitespace, base) {
            if (preserveWhitespace != null)
                return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
                    (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
            return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
        }
        class NodeContext {
            constructor(type, attrs,
                        // Marks applied to this node itself
                        marks,
                        // Marks that can't apply here, but will be used in children if possible
                        pendingMarks, solid, match, options) {
                this.type = type;
                this.attrs = attrs;
                this.marks = marks;
                this.pendingMarks = pendingMarks;
                this.solid = solid;
                this.options = options;
                this.content = [];
                // Marks applied to the node's children
                this.activeMarks = Mark.none;
                // Nested Marks with same type
                this.stashMarks = [];
                this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
            }
            findWrapping(node) {
                if (!this.match) {
                    if (!this.type)
                        return [];
                    let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
                    if (fill) {
                        this.match = this.type.contentMatch.matchFragment(fill);
                    }
                    else {
                        let start = this.type.contentMatch, wrap;
                        if (wrap = start.findWrapping(node.type)) {
                            this.match = start;
                            return wrap;
                        }
                        else {
                            return null;
                        }
                    }
                }
                return this.match.findWrapping(node.type);
            }
            finish(openEnd) {
                if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
                    let last = this.content[this.content.length - 1], m;
                    if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                        let text = last;
                        if (last.text.length == m[0].length)
                            this.content.pop();
                        else
                            this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
                    }
                }
                let content = Fragment.from(this.content);
                if (!openEnd && this.match)
                    content = content.append(this.match.fillBefore(Fragment.empty, true));
                return this.type ? this.type.create(this.attrs, content, this.marks) : content;
            }
            popFromStashMark(mark) {
                for (let i = this.stashMarks.length - 1; i >= 0; i--)
                    if (mark.eq(this.stashMarks[i]))
                        return this.stashMarks.splice(i, 1)[0];
            }
            applyPending(nextType) {
                for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
                    let mark = pending[i];
                    if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
                        !mark.isInSet(this.activeMarks)) {
                        this.activeMarks = mark.addToSet(this.activeMarks);
                        this.pendingMarks = mark.removeFromSet(this.pendingMarks);
                    }
                }
            }
            inlineContext(node) {
                if (this.type)
                    return this.type.inlineContent;
                if (this.content.length)
                    return this.content[0].isInline;
                return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
            }
        }
        class ParseContext {
            constructor(
                // The parser we are using.
                parser,
                // The options passed to this parse.
                options, isOpen) {
                this.parser = parser;
                this.options = options;
                this.isOpen = isOpen;
                this.open = 0;
                let topNode = options.topNode, topContext;
                let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
                if (topNode)
                    topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
                else if (isOpen)
                    topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
                else
                    topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
                this.nodes = [topContext];
                this.find = options.findPositions;
                this.needsBlock = false;
            }
            get top() {
                return this.nodes[this.open];
            }
            // Add a DOM node to the content. Text is inserted as text node,
            // otherwise, the node is passed to `addElement` or, if it has a
            // `style` attribute, `addElementWithStyles`.
            addDOM(dom) {
                if (dom.nodeType == 3) {
                    this.addTextNode(dom);
                }
                else if (dom.nodeType == 1) {
                    let style = dom.getAttribute("style");
                    let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top;
                    if (marks != null)
                        for (let i = 0; i < marks.length; i++)
                            this.addPendingMark(marks[i]);
                    this.addElement(dom);
                    if (marks != null)
                        for (let i = 0; i < marks.length; i++)
                            this.removePendingMark(marks[i], top);
                }
            }
            addTextNode(dom) {
                let value = dom.nodeValue;
                let top = this.top;
                if (top.options & OPT_PRESERVE_WS_FULL ||
                    top.inlineContext(dom) ||
                    /[^ \t\r\n\u000c]/.test(value)) {
                    if (!(top.options & OPT_PRESERVE_WS)) {
                        value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                        // If this starts with whitespace, and there is no node before it, or
                        // a hard break, or a text node that ends with whitespace, strip the
                        // leading space.
                        if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                            let nodeBefore = top.content[top.content.length - 1];
                            let domNodeBefore = dom.previousSibling;
                            if (!nodeBefore ||
                                (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                                (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                                value = value.slice(1);
                        }
                    }
                    else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                        value = value.replace(/\r?\n|\r/g, " ");
                    }
                    else {
                        value = value.replace(/\r\n?/g, "\n");
                    }
                    if (value)
                        this.insertNode(this.parser.schema.text(value));
                    this.findInText(dom);
                }
                else {
                    this.findInside(dom);
                }
            }
            // Try to find a handler for the given tag and use that to parse. If
            // none is found, the element's content nodes are added directly.
            addElement(dom, matchAfter) {
                let name = dom.nodeName.toLowerCase(), ruleID;
                if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
                    normalizeList(dom);
                let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
                    (ruleID = this.parser.matchTag(dom, this, matchAfter));
                if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
                    this.findInside(dom);
                    this.ignoreFallback(dom);
                }
                else if (!rule || rule.skip || rule.closeParent) {
                    if (rule && rule.closeParent)
                        this.open = Math.max(0, this.open - 1);
                    else if (rule && rule.skip.nodeType)
                        dom = rule.skip;
                    let sync, top = this.top, oldNeedsBlock = this.needsBlock;
                    if (blockTags.hasOwnProperty(name)) {
                        sync = true;
                        if (!top.type)
                            this.needsBlock = true;
                    }
                    else if (!dom.firstChild) {
                        this.leafFallback(dom);
                        return;
                    }
                    this.addAll(dom);
                    if (sync)
                        this.sync(top);
                    this.needsBlock = oldNeedsBlock;
                }
                else {
                    this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);
                }
            }
            // Called for leaf DOM nodes that would otherwise be ignored
            leafFallback(dom) {
                if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
                    this.addTextNode(dom.ownerDocument.createTextNode("\n"));
            }
            // Called for ignored nodes
            ignoreFallback(dom) {
                // Ignored BR nodes should at least create an inline context
                if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
                    this.findPlace(this.parser.schema.text("-"));
            }
            // Run any style parser associated with the node's styles. Either
            // return an array of marks, or null to indicate some of the styles
            // had a rule with `ignore` set.
            readStyles(styles) {
                let marks = Mark.none;
                style: for (let i = 0; i < styles.length; i += 2) {
                    for (let after = undefined;;) {
                        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
                        if (!rule)
                            continue style;
                        if (rule.ignore)
                            return null;
                        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);
                        if (rule.consuming === false)
                            after = rule;
                        else
                            break;
                    }
                }
                return marks;
            }
            // Look up a handler for the given node. If none are found, return
            // false. Otherwise, apply it, use its return value to drive the way
            // the node's content is wrapped, and return true.
            addElementByRule(dom, rule, continueAfter) {
                let sync, nodeType, mark;
                if (rule.node) {
                    nodeType = this.parser.schema.nodes[rule.node];
                    if (!nodeType.isLeaf) {
                        sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
                    }
                    else if (!this.insertNode(nodeType.create(rule.attrs))) {
                        this.leafFallback(dom);
                    }
                }
                else {
                    let markType = this.parser.schema.marks[rule.mark];
                    mark = markType.create(rule.attrs);
                    this.addPendingMark(mark);
                }
                let startIn = this.top;
                if (nodeType && nodeType.isLeaf) {
                    this.findInside(dom);
                }
                else if (continueAfter) {
                    this.addElement(dom, continueAfter);
                }
                else if (rule.getContent) {
                    this.findInside(dom);
                    rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));
                }
                else {
                    let contentDOM = dom;
                    if (typeof rule.contentElement == "string")
                        contentDOM = dom.querySelector(rule.contentElement);
                    else if (typeof rule.contentElement == "function")
                        contentDOM = rule.contentElement(dom);
                    else if (rule.contentElement)
                        contentDOM = rule.contentElement;
                    this.findAround(dom, contentDOM, true);
                    this.addAll(contentDOM);
                }
                if (sync && this.sync(startIn))
                    this.open--;
                if (mark)
                    this.removePendingMark(mark, startIn);
            }
            // Add all child nodes between `startIndex` and `endIndex` (or the
            // whole node, if not given). If `sync` is passed, use it to
            // synchronize after every block element.
            addAll(parent, startIndex, endIndex) {
                let index = startIndex || 0;
                for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
                    this.findAtPoint(parent, index);
                    this.addDOM(dom);
                }
                this.findAtPoint(parent, index);
            }
            // Try to find a way to fit the given node type into the current
            // context. May add intermediate wrappers and/or leave non-solid
            // nodes that we're in.
            findPlace(node) {
                let route, sync;
                for (let depth = this.open; depth >= 0; depth--) {
                    let cx = this.nodes[depth];
                    let found = cx.findWrapping(node);
                    if (found && (!route || route.length > found.length)) {
                        route = found;
                        sync = cx;
                        if (!found.length)
                            break;
                    }
                    if (cx.solid)
                        break;
                }
                if (!route)
                    return false;
                this.sync(sync);
                for (let i = 0; i < route.length; i++)
                    this.enterInner(route[i], null, false);
                return true;
            }
            // Try to insert the given node, adjusting the context when needed.
            insertNode(node) {
                if (node.isInline && this.needsBlock && !this.top.type) {
                    let block = this.textblockFromContext();
                    if (block)
                        this.enterInner(block);
                }
                if (this.findPlace(node)) {
                    this.closeExtra();
                    let top = this.top;
                    top.applyPending(node.type);
                    if (top.match)
                        top.match = top.match.matchType(node.type);
                    let marks = top.activeMarks;
                    for (let i = 0; i < node.marks.length; i++)
                        if (!top.type || top.type.allowsMarkType(node.marks[i].type))
                            marks = node.marks[i].addToSet(marks);
                    top.content.push(node.mark(marks));
                    return true;
                }
                return false;
            }
            // Try to start a node of the given type, adjusting the context when
            // necessary.
            enter(type, attrs, preserveWS) {
                let ok = this.findPlace(type.create(attrs));
                if (ok)
                    this.enterInner(type, attrs, true, preserveWS);
                return ok;
            }
            // Open a node of the given type
            enterInner(type, attrs = null, solid = false, preserveWS) {
                this.closeExtra();
                let top = this.top;
                top.applyPending(type);
                top.match = top.match && top.match.matchType(type);
                let options = wsOptionsFor(type, preserveWS, top.options);
                if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
                    options |= OPT_OPEN_LEFT;
                this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
                this.open++;
            }
            // Make sure all nodes above this.open are finished and added to
            // their parents
            closeExtra(openEnd = false) {
                let i = this.nodes.length - 1;
                if (i > this.open) {
                    for (; i > this.open; i--)
                        this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
                    this.nodes.length = this.open + 1;
                }
            }
            finish() {
                this.open = 0;
                this.closeExtra(this.isOpen);
                return this.nodes[0].finish(this.isOpen || this.options.topOpen);
            }
            sync(to) {
                for (let i = this.open; i >= 0; i--)
                    if (this.nodes[i] == to) {
                        this.open = i;
                        return true;
                    }
                return false;
            }
            get currentPos() {
                this.closeExtra();
                let pos = 0;
                for (let i = this.open; i >= 0; i--) {
                    let content = this.nodes[i].content;
                    for (let j = content.length - 1; j >= 0; j--)
                        pos += content[j].nodeSize;
                    if (i)
                        pos++;
                }
                return pos;
            }
            findAtPoint(parent, offset) {
                if (this.find)
                    for (let i = 0; i < this.find.length; i++) {
                        if (this.find[i].node == parent && this.find[i].offset == offset)
                            this.find[i].pos = this.currentPos;
                    }
            }
            findInside(parent) {
                if (this.find)
                    for (let i = 0; i < this.find.length; i++) {
                        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                            this.find[i].pos = this.currentPos;
                    }
            }
            findAround(parent, content, before) {
                if (parent != content && this.find)
                    for (let i = 0; i < this.find.length; i++) {
                        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                            let pos = content.compareDocumentPosition(this.find[i].node);
                            if (pos & (before ? 2 : 4))
                                this.find[i].pos = this.currentPos;
                        }
                    }
            }
            findInText(textNode) {
                if (this.find)
                    for (let i = 0; i < this.find.length; i++) {
                        if (this.find[i].node == textNode)
                            this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
                    }
            }
            // Determines whether the given context string matches this context.
            matchesContext(context) {
                if (context.indexOf("|") > -1)
                    return context.split(/\s*\|\s*/).some(this.matchesContext, this);
                let parts = context.split("/");
                let option = this.options.context;
                let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
                let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
                let match = (i, depth) => {
                    for (; i >= 0; i--) {
                        let part = parts[i];
                        if (part == "") {
                            if (i == parts.length - 1 || i == 0)
                                continue;
                            for (; depth >= minDepth; depth--)
                                if (match(i - 1, depth))
                                    return true;
                            return false;
                        }
                        else {
                            let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                                : option && depth >= minDepth ? option.node(depth - minDepth).type
                                    : null;
                            if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                                return false;
                            depth--;
                        }
                    }
                    return true;
                };
                return match(parts.length - 1, this.open);
            }
            textblockFromContext() {
                let $context = this.options.context;
                if ($context)
                    for (let d = $context.depth; d >= 0; d--) {
                        let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                        if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                            return deflt;
                    }
                for (let name in this.parser.schema.nodes) {
                    let type = this.parser.schema.nodes[name];
                    if (type.isTextblock && type.defaultAttrs)
                        return type;
                }
            }
            addPendingMark(mark) {
                let found = findSameMarkInSet(mark, this.top.pendingMarks);
                if (found)
                    this.top.stashMarks.push(found);
                this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
            }
            removePendingMark(mark, upto) {
                for (let depth = this.open; depth >= 0; depth--) {
                    let level = this.nodes[depth];
                    let found = level.pendingMarks.lastIndexOf(mark);
                    if (found > -1) {
                        level.pendingMarks = mark.removeFromSet(level.pendingMarks);
                    }
                    else {
                        level.activeMarks = mark.removeFromSet(level.activeMarks);
                        let stashMark = level.popFromStashMark(mark);
                        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
                            level.activeMarks = stashMark.addToSet(level.activeMarks);
                    }
                    if (level == upto)
                        break;
                }
            }
        }
// Kludge to work around directly nested list nodes produced by some
// tools and allowed by browsers to mean that the nested list is
// actually part of the list item above it.
        function normalizeList(dom) {
            for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
                let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
                if (name && listTags.hasOwnProperty(name) && prevItem) {
                    prevItem.appendChild(child);
                    child = prevItem;
                }
                else if (name == "li") {
                    prevItem = child;
                }
                else if (name) {
                    prevItem = null;
                }
            }
        }
// Apply a CSS selector.
        function matches(dom, selector) {
            return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
        }
// Tokenize a style attribute into property/value pairs.
        function parseStyles(style) {
            let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
            while (m = re.exec(style))
                result.push(m[1], m[2].trim());
            return result;
        }
        function copy(obj) {
            let copy = {};
            for (let prop in obj)
                copy[prop] = obj[prop];
            return copy;
        }
// Used when finding a mark at the top level of a fragment parse.
// Checks whether it would be reasonable to apply a given mark type to
// a given node, by looking at the way the mark occurs in the schema.
        function markMayApply(markType, nodeType) {
            let nodes = nodeType.schema.nodes;
            for (let name in nodes) {
                let parent = nodes[name];
                if (!parent.allowsMarkType(markType))
                    continue;
                let seen = [], scan = (match) => {
                    seen.push(match);
                    for (let i = 0; i < match.edgeCount; i++) {
                        let { type, next } = match.edge(i);
                        if (type == nodeType)
                            return true;
                        if (seen.indexOf(next) < 0 && scan(next))
                            return true;
                    }
                };
                if (scan(parent.contentMatch))
                    return true;
            }
        }
        function findSameMarkInSet(mark, set) {
            for (let i = 0; i < set.length; i++) {
                if (mark.eq(set[i]))
                    return set[i];
            }
        }

        /**
         A DOM serializer knows how to convert ProseMirror nodes and
         marks of various types to DOM nodes.
         */
        class DOMSerializer {
            /**
             Create a serializer. `nodes` should map node names to functions
             that take a node and return a description of the corresponding
             DOM. `marks` does the same for mark names, but also gets an
             argument that tells it whether the mark's content is block or
             inline content (for typical use, it'll always be inline). A mark
             serializer may be `null` to indicate that marks of that type
             should not be serialized.
             */
            constructor(
                /**
                 The node serialization functions.
                 */
                nodes,
                /**
                 The mark serialization functions.
                 */
                marks) {
                this.nodes = nodes;
                this.marks = marks;
            }
            /**
             Serialize the content of this fragment to a DOM fragment. When
             not in the browser, the `document` option, containing a DOM
             document, should be passed so that the serializer can create
             nodes.
             */
            serializeFragment(fragment, options = {}, target) {
                if (!target)
                    target = doc(options).createDocumentFragment();
                let top = target, active = [];
                fragment.forEach(node => {
                    if (active.length || node.marks.length) {
                        let keep = 0, rendered = 0;
                        while (keep < active.length && rendered < node.marks.length) {
                            let next = node.marks[rendered];
                            if (!this.marks[next.type.name]) {
                                rendered++;
                                continue;
                            }
                            if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                                break;
                            keep++;
                            rendered++;
                        }
                        while (keep < active.length)
                            top = active.pop()[1];
                        while (rendered < node.marks.length) {
                            let add = node.marks[rendered++];
                            let markDOM = this.serializeMark(add, node.isInline, options);
                            if (markDOM) {
                                active.push([add, top]);
                                top.appendChild(markDOM.dom);
                                top = markDOM.contentDOM || markDOM.dom;
                            }
                        }
                    }
                    top.appendChild(this.serializeNodeInner(node, options));
                });
                return target;
            }
            /**
             @internal
             */
            serializeNodeInner(node, options) {
                let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
                if (contentDOM) {
                    if (node.isLeaf)
                        throw new RangeError("Content hole not allowed in a leaf node spec");
                    this.serializeFragment(node.content, options, contentDOM);
                }
                return dom;
            }
            /**
             Serialize this node to a DOM node. This can be useful when you
             need to serialize a part of a document, as opposed to the whole
             document. To serialize a whole document, use
             [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
             its [content](https://prosemirror.net/docs/ref/#model.Node.content).
             */
            serializeNode(node, options = {}) {
                let dom = this.serializeNodeInner(node, options);
                for (let i = node.marks.length - 1; i >= 0; i--) {
                    let wrap = this.serializeMark(node.marks[i], node.isInline, options);
                    if (wrap) {
                        (wrap.contentDOM || wrap.dom).appendChild(dom);
                        dom = wrap.dom;
                    }
                }
                return dom;
            }
            /**
             @internal
             */
            serializeMark(mark, inline, options = {}) {
                let toDOM = this.marks[mark.type.name];
                return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));
            }
            /**
             Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
             the spec has a hole (zero) in it, `contentDOM` will point at the
             node with the hole.
             */
            static renderSpec(doc, structure, xmlNS = null) {
                if (typeof structure == "string")
                    return { dom: doc.createTextNode(structure) };
                if (structure.nodeType != null)
                    return { dom: structure };
                if (structure.dom && structure.dom.nodeType != null)
                    return structure;
                let tagName = structure[0], space = tagName.indexOf(" ");
                if (space > 0) {
                    xmlNS = tagName.slice(0, space);
                    tagName = tagName.slice(space + 1);
                }
                let contentDOM;
                let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
                let attrs = structure[1], start = 1;
                if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
                    start = 2;
                    for (let name in attrs)
                        if (attrs[name] != null) {
                            let space = name.indexOf(" ");
                            if (space > 0)
                                dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                            else
                                dom.setAttribute(name, attrs[name]);
                        }
                }
                for (let i = start; i < structure.length; i++) {
                    let child = structure[i];
                    if (child === 0) {
                        if (i < structure.length - 1 || i > start)
                            throw new RangeError("Content hole must be the only child of its parent node");
                        return { dom, contentDOM: dom };
                    }
                    else {
                        let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);
                        dom.appendChild(inner);
                        if (innerContent) {
                            if (contentDOM)
                                throw new RangeError("Multiple content holes");
                            contentDOM = innerContent;
                        }
                    }
                }
                return { dom, contentDOM };
            }
            /**
             Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
             properties in a schema's node and mark specs.
             */
            static fromSchema(schema) {
                return schema.cached.domSerializer ||
                    (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
            }
            /**
             Gather the serializers in a schema's node specs into an object.
             This can be useful as a base to build a custom serializer from.
             */
            static nodesFromSchema(schema) {
                let result = gatherToDOM(schema.nodes);
                if (!result.text)
                    result.text = node => node.text;
                return result;
            }
            /**
             Gather the serializers in a schema's mark specs into an object.
             */
            static marksFromSchema(schema) {
                return gatherToDOM(schema.marks);
            }
        }
        function gatherToDOM(obj) {
            let result = {};
            for (let name in obj) {
                let toDOM = obj[name].spec.toDOM;
                if (toDOM)
                    result[name] = toDOM;
            }
            return result;
        }
        function doc(options) {
            return options.document || window.document;
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-schema-list/dist/index.js":
    /*!************************************************************!*\
  !*** ./node_modules/prosemirror-schema-list/dist/index.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "addListNodes": () => (/* binding */ addListNodes),
            /* harmony export */   "bulletList": () => (/* binding */ bulletList),
            /* harmony export */   "liftListItem": () => (/* binding */ liftListItem),
            /* harmony export */   "listItem": () => (/* binding */ listItem),
            /* harmony export */   "orderedList": () => (/* binding */ orderedList),
            /* harmony export */   "sinkListItem": () => (/* binding */ sinkListItem),
            /* harmony export */   "splitListItem": () => (/* binding */ splitListItem),
            /* harmony export */   "wrapInList": () => (/* binding */ wrapInList)
            /* harmony export */ });
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");




        const olDOM = ["ol", 0], ulDOM = ["ul", 0], liDOM = ["li", 0];
        /**
         An ordered list [node spec](https://prosemirror.net/docs/ref/#model.NodeSpec). Has a single
         attribute, `order`, which determines the number at which the list
         starts counting, and defaults to 1. Represented as an `<ol>`
         element.
         */
        const orderedList = {
            attrs: { order: { default: 1 } },
            parseDOM: [{ tag: "ol", getAttrs(dom) {
                    return { order: dom.hasAttribute("start") ? +dom.getAttribute("start") : 1 };
                } }],
            toDOM(node) {
                return node.attrs.order == 1 ? olDOM : ["ol", { start: node.attrs.order }, 0];
            }
        };
        /**
         A bullet list node spec, represented in the DOM as `<ul>`.
         */
        const bulletList = {
            parseDOM: [{ tag: "ul" }],
            toDOM() { return ulDOM; }
        };
        /**
         A list item (`<li>`) spec.
         */
        const listItem = {
            parseDOM: [{ tag: "li" }],
            toDOM() { return liDOM; },
            defining: true
        };
        function add(obj, props) {
            let copy = {};
            for (let prop in obj)
                copy[prop] = obj[prop];
            for (let prop in props)
                copy[prop] = props[prop];
            return copy;
        }
        /**
         Convenience function for adding list-related node types to a map
         specifying the nodes for a schema. Adds
         [`orderedList`](https://prosemirror.net/docs/ref/#schema-list.orderedList) as `"ordered_list"`,
         [`bulletList`](https://prosemirror.net/docs/ref/#schema-list.bulletList) as `"bullet_list"`, and
         [`listItem`](https://prosemirror.net/docs/ref/#schema-list.listItem) as `"list_item"`.

         `itemContent` determines the content expression for the list items.
         If you want the commands defined in this module to apply to your
         list structure, it should have a shape like `"paragraph block*"` or
         `"paragraph (ordered_list | bullet_list)*"`. `listGroup` can be
         given to assign a group name to the list node types, for example
         `"block"`.
         */
        function addListNodes(nodes, itemContent, listGroup) {
            return nodes.append({
                ordered_list: add(orderedList, { content: "list_item+", group: listGroup }),
                bullet_list: add(bulletList, { content: "list_item+", group: listGroup }),
                list_item: add(listItem, { content: itemContent })
            });
        }
        /**
         Returns a command function that wraps the selection in a list with
         the given type an attributes. If `dispatch` is null, only return a
         value to indicate whether this is possible, but don't actually
         perform the change.
         */
        function wrapInList(listType, attrs = null) {
            return function (state, dispatch) {
                let { $from, $to } = state.selection;
                let range = $from.blockRange($to), doJoin = false, outerRange = range;
                if (!range)
                    return false;
                // This is at the top of an existing list item
                if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
                    // Don't do anything if this is the top of the list
                    if ($from.index(range.depth - 1) == 0)
                        return false;
                    let $insert = state.doc.resolve(range.start - 2);
                    outerRange = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange($insert, $insert, range.depth);
                    if (range.endIndex < range.parent.childCount)
                        range = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
                    doJoin = true;
                }
                let wrap = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.findWrapping)(outerRange, listType, attrs, range);
                if (!wrap)
                    return false;
                if (dispatch)
                    dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
                return true;
            };
        }
        function doWrapInList(tr, range, wrappers, joinBefore, listType) {
            let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let i = wrappers.length - 1; i >= 0; i--)
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
            tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));
            let found = 0;
            for (let i = 0; i < wrappers.length; i++)
                if (wrappers[i].type == listType)
                    found = i + 1;
            let splitDepth = wrappers.length - found;
            let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
            for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
                if (!first && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.canSplit)(tr.doc, splitPos, splitDepth)) {
                    tr.split(splitPos, splitDepth);
                    splitPos += 2 * splitDepth;
                }
                splitPos += parent.child(i).nodeSize;
            }
            return tr;
        }
        /**
         Build a command that splits a non-empty textblock at the top level
         of a list item by also splitting that list item.
         */
        function splitListItem(itemType) {
            return function (state, dispatch) {
                let { $from, $to, node } = state.selection;
                if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to))
                    return false;
                let grandParent = $from.node(-1);
                if (grandParent.type != itemType)
                    return false;
                if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
                    // In an empty block. If this is a nested list, the wrapping
                    // list item should be split. Otherwise, bail out and let next
                    // command handle lifting.
                    if ($from.depth == 3 || $from.node(-3).type != itemType ||
                        $from.index(-2) != $from.node(-2).childCount - 1)
                        return false;
                    if (dispatch) {
                        let wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                        let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
                        // Build a fragment containing empty versions of the structure
                        // from the outer list item to the parent node of the cursor
                        for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)
                            wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(wrap));
                        let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1
                            : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
                        // Add a second list item with an empty default start node
                        wrap = wrap.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.createAndFill()));
                        let start = $from.before($from.depth - (depthBefore - 1));
                        let tr = state.tr.replace(start, $from.after(-depthAfter), new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(wrap, 4 - depthBefore, 0));
                        let sel = -1;
                        tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {
                            if (sel > -1)
                                return false;
                            if (node.isTextblock && node.content.size == 0)
                                sel = pos + 1;
                        });
                        if (sel > -1)
                            tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Selection.near(tr.doc.resolve(sel)));
                        dispatch(tr.scrollIntoView());
                    }
                    return true;
                }
                let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
                let tr = state.tr.delete($from.pos, $to.pos);
                let types = nextType ? [null, { type: nextType }] : undefined;
                if (!(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.canSplit)(tr.doc, $from.pos, 2, types))
                    return false;
                if (dispatch)
                    dispatch(tr.split($from.pos, 2, types).scrollIntoView());
                return true;
            };
        }
        /**
         Create a command to lift the list item around the selection up into
         a wrapping list.
         */
        function liftListItem(itemType) {
            return function (state, dispatch) {
                let { $from, $to } = state.selection;
                let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
                if (!range)
                    return false;
                if (!dispatch)
                    return true;
                if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
                    return liftToOuterList(state, dispatch, itemType, range);
                else // Outer list node
                    return liftOutOfList(state, dispatch, range);
            };
        }
        function liftToOuterList(state, dispatch, itemType, range) {
            let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
            if (end < endOfList) {
                // There are siblings after the lifted items, which must become
                // children of the last item
                tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(end - 1, endOfList, end, endOfList, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
                range = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
            }
            dispatch(tr.lift(range, (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.liftTarget)(range)).scrollIntoView());
            return true;
        }
        function liftOutOfList(state, dispatch, range) {
            let tr = state.tr, list = range.parent;
            // Merge the list items into a single big item
            for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
                pos -= list.child(i).nodeSize;
                tr.delete(pos - 1, pos + 1);
            }
            let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
            if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
                return false;
            let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
            let parent = $start.node(-1), indexBefore = $start.index(-1);
            if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list))))
                return false;
            let start = $start.pos, end = start + item.nodeSize;
            // Strip off the surrounding list. At the sides where we're not at
            // the end of the list, the existing list is closed. At sides where
            // this is the end, it is overwritten to its end.
            tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice((atStart ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list.copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty)))
                .append(atEnd ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list.copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
            dispatch(tr.scrollIntoView());
            return true;
        }
        /**
         Create a command to sink the list item around the selection down
         into an inner list.
         */
        function sinkListItem(itemType) {
            return function (state, dispatch) {
                let { $from, $to } = state.selection;
                let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
                if (!range)
                    return false;
                let startIndex = range.startIndex;
                if (startIndex == 0)
                    return false;
                let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
                if (nodeBefore.type != itemType)
                    return false;
                if (dispatch) {
                    let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
                    let inner = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(nestedBefore ? itemType.create() : null);
                    let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
                    let before = range.start, after = range.end;
                    dispatch(state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))
                        .scrollIntoView());
                }
                return true;
            };
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-state/dist/index.js":
    /*!******************************************************!*\
  !*** ./node_modules/prosemirror-state/dist/index.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "AllSelection": () => (/* binding */ AllSelection),
            /* harmony export */   "EditorState": () => (/* binding */ EditorState),
            /* harmony export */   "NodeSelection": () => (/* binding */ NodeSelection),
            /* harmony export */   "Plugin": () => (/* binding */ Plugin),
            /* harmony export */   "PluginKey": () => (/* binding */ PluginKey),
            /* harmony export */   "Selection": () => (/* binding */ Selection),
            /* harmony export */   "SelectionRange": () => (/* binding */ SelectionRange),
            /* harmony export */   "TextSelection": () => (/* binding */ TextSelection),
            /* harmony export */   "Transaction": () => (/* binding */ Transaction)
            /* harmony export */ });
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");



        const classesById = Object.create(null);
        /**
         Superclass for editor selections. Every selection type should
         extend this. Should not be instantiated directly.
         */
        class Selection {
            /**
             Initialize a selection with the head and anchor and ranges. If no
             ranges are given, constructs a single range across `$anchor` and
             `$head`.
             */
            constructor(
                /**
                 The resolved anchor of the selection (the side that stays in
                 place when the selection is modified).
                 */
                $anchor,
                /**
                 The resolved head of the selection (the side that moves when
                 the selection is modified).
                 */
                $head, ranges) {
                this.$anchor = $anchor;
                this.$head = $head;
                this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
            }
            /**
             The selection's anchor, as an unresolved position.
             */
            get anchor() { return this.$anchor.pos; }
            /**
             The selection's head.
             */
            get head() { return this.$head.pos; }
            /**
             The lower bound of the selection's main range.
             */
            get from() { return this.$from.pos; }
            /**
             The upper bound of the selection's main range.
             */
            get to() { return this.$to.pos; }
            /**
             The resolved lower  bound of the selection's main range.
             */
            get $from() {
                return this.ranges[0].$from;
            }
            /**
             The resolved upper bound of the selection's main range.
             */
            get $to() {
                return this.ranges[0].$to;
            }
            /**
             Indicates whether the selection contains any content.
             */
            get empty() {
                let ranges = this.ranges;
                for (let i = 0; i < ranges.length; i++)
                    if (ranges[i].$from.pos != ranges[i].$to.pos)
                        return false;
                return true;
            }
            /**
             Get the content of this selection as a slice.
             */
            content() {
                return this.$from.doc.slice(this.from, this.to, true);
            }
            /**
             Replace the selection with a slice or, if no slice is given,
             delete the selection. Will append to the given transaction.
             */
            replace(tr, content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                // Put the new selection at the position after the inserted
                // content. When that ended in an inline node, search backwards,
                // to get the position after that node. If not, search forward.
                let lastNode = content.content.lastChild, lastParent = null;
                for (let i = 0; i < content.openEnd; i++) {
                    lastParent = lastNode;
                    lastNode = lastNode.lastChild;
                }
                let mapFrom = tr.steps.length, ranges = this.ranges;
                for (let i = 0; i < ranges.length; i++) {
                    let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                    tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty : content);
                    if (i == 0)
                        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
                }
            }
            /**
             Replace the selection with the given node, appending the changes
             to the given transaction.
             */
            replaceWith(tr, node) {
                let mapFrom = tr.steps.length, ranges = this.ranges;
                for (let i = 0; i < ranges.length; i++) {
                    let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                    let from = mapping.map($from.pos), to = mapping.map($to.pos);
                    if (i) {
                        tr.deleteRange(from, to);
                    }
                    else {
                        tr.replaceRangeWith(from, to, node);
                        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
                    }
                }
            }
            /**
             Find a valid cursor or leaf node selection starting at the given
             position and searching back if `dir` is negative, and forward if
             positive. When `textOnly` is true, only consider cursor
             selections. Will return null when no valid selection position is
             found.
             */
            static findFrom($pos, dir, textOnly = false) {
                let inner = $pos.parent.inlineContent ? new TextSelection($pos)
                    : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
                if (inner)
                    return inner;
                for (let depth = $pos.depth - 1; depth >= 0; depth--) {
                    let found = dir < 0
                        ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                        : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
                    if (found)
                        return found;
                }
                return null;
            }
            /**
             Find a valid cursor or leaf node selection near the given
             position. Searches forward first by default, but if `bias` is
             negative, it will search backwards first.
             */
            static near($pos, bias = 1) {
                return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
            }
            /**
             Find the cursor or leaf node selection closest to the start of
             the given document. Will return an
             [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
             exists.
             */
            static atStart(doc) {
                return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
            }
            /**
             Find the cursor or leaf node selection closest to the end of the
             given document.
             */
            static atEnd(doc) {
                return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
            }
            /**
             Deserialize the JSON representation of a selection. Must be
             implemented for custom classes (as a static class method).
             */
            static fromJSON(doc, json) {
                if (!json || !json.type)
                    throw new RangeError("Invalid input for Selection.fromJSON");
                let cls = classesById[json.type];
                if (!cls)
                    throw new RangeError(`No selection type ${json.type} defined`);
                return cls.fromJSON(doc, json);
            }
            /**
             To be able to deserialize selections from JSON, custom selection
             classes must register themselves with an ID string, so that they
             can be disambiguated. Try to pick something that's unlikely to
             clash with classes from other modules.
             */
            static jsonID(id, selectionClass) {
                if (id in classesById)
                    throw new RangeError("Duplicate use of selection JSON ID " + id);
                classesById[id] = selectionClass;
                selectionClass.prototype.jsonID = id;
                return selectionClass;
            }
            /**
             Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
             which is a value that can be mapped without having access to a
             current document, and later resolved to a real selection for a
             given document again. (This is used mostly by the history to
             track and restore old selections.) The default implementation of
             this method just converts the selection to a text selection and
             returns the bookmark for that.
             */
            getBookmark() {
                return TextSelection.between(this.$anchor, this.$head).getBookmark();
            }
        }
        Selection.prototype.visible = true;
        /**
         Represents a selected range in a document.
         */
        class SelectionRange {
            /**
             Create a range.
             */
            constructor(
                /**
                 The lower bound of the range.
                 */
                $from,
                /**
                 The upper bound of the range.
                 */
                $to) {
                this.$from = $from;
                this.$to = $to;
            }
        }
        let warnedAboutTextSelection = false;
        function checkTextSelection($pos) {
            if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
                warnedAboutTextSelection = true;
                console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
            }
        }
        /**
         A text selection represents a classical editor selection, with a
         head (the moving side) and anchor (immobile side), both of which
         point into textblock nodes. It can be empty (a regular cursor
         position).
         */
        class TextSelection extends Selection {
            /**
             Construct a text selection between the given points.
             */
            constructor($anchor, $head = $anchor) {
                checkTextSelection($anchor);
                checkTextSelection($head);
                super($anchor, $head);
            }
            /**
             Returns a resolved position if this is a cursor selection (an
             empty text selection), and null otherwise.
             */
            get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
            map(doc, mapping) {
                let $head = doc.resolve(mapping.map(this.head));
                if (!$head.parent.inlineContent)
                    return Selection.near($head);
                let $anchor = doc.resolve(mapping.map(this.anchor));
                return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
            }
            replace(tr, content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                super.replace(tr, content);
                if (content == prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                    let marks = this.$from.marksAcross(this.$to);
                    if (marks)
                        tr.ensureMarks(marks);
                }
            }
            eq(other) {
                return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
            }
            getBookmark() {
                return new TextBookmark(this.anchor, this.head);
            }
            toJSON() {
                return { type: "text", anchor: this.anchor, head: this.head };
            }
            /**
             @internal
             */
            static fromJSON(doc, json) {
                if (typeof json.anchor != "number" || typeof json.head != "number")
                    throw new RangeError("Invalid input for TextSelection.fromJSON");
                return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
            }
            /**
             Create a text selection from non-resolved positions.
             */
            static create(doc, anchor, head = anchor) {
                let $anchor = doc.resolve(anchor);
                return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
            }
            /**
             Return a text selection that spans the given positions or, if
             they aren't text positions, find a text selection near them.
             `bias` determines whether the method searches forward (default)
             or backwards (negative number) first. Will fall back to calling
             [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
             doesn't contain a valid text position.
             */
            static between($anchor, $head, bias) {
                let dPos = $anchor.pos - $head.pos;
                if (!bias || dPos)
                    bias = dPos >= 0 ? 1 : -1;
                if (!$head.parent.inlineContent) {
                    let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
                    if (found)
                        $head = found.$head;
                    else
                        return Selection.near($head, bias);
                }
                if (!$anchor.parent.inlineContent) {
                    if (dPos == 0) {
                        $anchor = $head;
                    }
                    else {
                        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                        if (($anchor.pos < $head.pos) != (dPos < 0))
                            $anchor = $head;
                    }
                }
                return new TextSelection($anchor, $head);
            }
        }
        Selection.jsonID("text", TextSelection);
        class TextBookmark {
            constructor(anchor, head) {
                this.anchor = anchor;
                this.head = head;
            }
            map(mapping) {
                return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
            }
            resolve(doc) {
                return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
            }
        }
        /**
         A node selection is a selection that points at a single node. All
         nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
         target of a node selection. In such a selection, `from` and `to`
         point directly before and after the selected node, `anchor` equals
         `from`, and `head` equals `to`..
         */
        class NodeSelection extends Selection {
            /**
             Create a node selection. Does not verify the validity of its
             argument.
             */
            constructor($pos) {
                let node = $pos.nodeAfter;
                let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
                super($pos, $end);
                this.node = node;
            }
            map(doc, mapping) {
                let { deleted, pos } = mapping.mapResult(this.anchor);
                let $pos = doc.resolve(pos);
                if (deleted)
                    return Selection.near($pos);
                return new NodeSelection($pos);
            }
            content() {
                return new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(this.node), 0, 0);
            }
            eq(other) {
                return other instanceof NodeSelection && other.anchor == this.anchor;
            }
            toJSON() {
                return { type: "node", anchor: this.anchor };
            }
            getBookmark() { return new NodeBookmark(this.anchor); }
            /**
             @internal
             */
            static fromJSON(doc, json) {
                if (typeof json.anchor != "number")
                    throw new RangeError("Invalid input for NodeSelection.fromJSON");
                return new NodeSelection(doc.resolve(json.anchor));
            }
            /**
             Create a node selection from non-resolved positions.
             */
            static create(doc, from) {
                return new NodeSelection(doc.resolve(from));
            }
            /**
             Determines whether the given node may be selected as a node
             selection.
             */
            static isSelectable(node) {
                return !node.isText && node.type.spec.selectable !== false;
            }
        }
        NodeSelection.prototype.visible = false;
        Selection.jsonID("node", NodeSelection);
        class NodeBookmark {
            constructor(anchor) {
                this.anchor = anchor;
            }
            map(mapping) {
                let { deleted, pos } = mapping.mapResult(this.anchor);
                return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
            }
            resolve(doc) {
                let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
                if (node && NodeSelection.isSelectable(node))
                    return new NodeSelection($pos);
                return Selection.near($pos);
            }
        }
        /**
         A selection type that represents selecting the whole document
         (which can not necessarily be expressed with a text selection, when
         there are for example leaf block nodes at the start or end of the
         document).
         */
        class AllSelection extends Selection {
            /**
             Create an all-selection over the given document.
             */
            constructor(doc) {
                super(doc.resolve(0), doc.resolve(doc.content.size));
            }
            replace(tr, content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                if (content == prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                    tr.delete(0, tr.doc.content.size);
                    let sel = Selection.atStart(tr.doc);
                    if (!sel.eq(tr.selection))
                        tr.setSelection(sel);
                }
                else {
                    super.replace(tr, content);
                }
            }
            toJSON() { return { type: "all" }; }
            /**
             @internal
             */
            static fromJSON(doc) { return new AllSelection(doc); }
            map(doc) { return new AllSelection(doc); }
            eq(other) { return other instanceof AllSelection; }
            getBookmark() { return AllBookmark; }
        }
        Selection.jsonID("all", AllSelection);
        const AllBookmark = {
            map() { return this; },
            resolve(doc) { return new AllSelection(doc); }
        };
// FIXME we'll need some awareness of text direction when scanning for selections
// Try to find a selection inside the given node. `pos` points at the
// position where the search starts. When `text` is true, only return
// text selections.
        function findSelectionIn(doc, node, pos, index, dir, text = false) {
            if (node.inlineContent)
                return TextSelection.create(doc, pos);
            for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
                let child = node.child(i);
                if (!child.isAtom) {
                    let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
                    if (inner)
                        return inner;
                }
                else if (!text && NodeSelection.isSelectable(child)) {
                    return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
                }
                pos += child.nodeSize * dir;
            }
            return null;
        }
        function selectionToInsertionEnd(tr, startLen, bias) {
            let last = tr.steps.length - 1;
            if (last < startLen)
                return;
            let step = tr.steps[last];
            if (!(step instanceof prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceStep || step instanceof prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep))
                return;
            let map = tr.mapping.maps[last], end;
            map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
                end = newTo; });
            tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
        }

        const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
        /**
         An editor state transaction, which can be applied to a state to
         create an updated state. Use
         [`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

         Transactions track changes to the document (they are a subclass of
         [`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
         like selection updates and adjustments of the set of [stored
         marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
         metadata properties in a transaction, which are extra pieces of
         information that client code or plugins can use to describe what a
         transaction represents, so that they can update their [own
         state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

         The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata properties:
         it will attach a property `"pointer"` with the value `true` to
         selection transactions directly caused by mouse or touch input, and
         a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
         */
        class Transaction extends prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.Transform {
            /**
             @internal
             */
            constructor(state) {
                super(state.doc);
                // The step count for which the current selection is valid.
                this.curSelectionFor = 0;
                // Bitfield to track which aspects of the state were updated by
                // this transaction.
                this.updated = 0;
                // Object used to store metadata properties for the transaction.
                this.meta = Object.create(null);
                this.time = Date.now();
                this.curSelection = state.selection;
                this.storedMarks = state.storedMarks;
            }
            /**
             The transaction's current selection. This defaults to the editor
             selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
             transaction, but can be overwritten with
             [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
             */
            get selection() {
                if (this.curSelectionFor < this.steps.length) {
                    this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
                    this.curSelectionFor = this.steps.length;
                }
                return this.curSelection;
            }
            /**
             Update the transaction's current selection. Will determine the
             selection that the editor gets when the transaction is applied.
             */
            setSelection(selection) {
                if (selection.$from.doc != this.doc)
                    throw new RangeError("Selection passed to setSelection must point at the current document");
                this.curSelection = selection;
                this.curSelectionFor = this.steps.length;
                this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
                this.storedMarks = null;
                return this;
            }
            /**
             Whether the selection was explicitly updated by this transaction.
             */
            get selectionSet() {
                return (this.updated & UPDATED_SEL) > 0;
            }
            /**
             Set the current stored marks.
             */
            setStoredMarks(marks) {
                this.storedMarks = marks;
                this.updated |= UPDATED_MARKS;
                return this;
            }
            /**
             Make sure the current stored marks or, if that is null, the marks
             at the selection, match the given set of marks. Does nothing if
             this is already the case.
             */
            ensureMarks(marks) {
                if (!prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
                    this.setStoredMarks(marks);
                return this;
            }
            /**
             Add a mark to the set of stored marks.
             */
            addStoredMark(mark) {
                return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
            }
            /**
             Remove a mark or mark type from the set of stored marks.
             */
            removeStoredMark(mark) {
                return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
            }
            /**
             Whether the stored marks were explicitly set for this transaction.
             */
            get storedMarksSet() {
                return (this.updated & UPDATED_MARKS) > 0;
            }
            /**
             @internal
             */
            addStep(step, doc) {
                super.addStep(step, doc);
                this.updated = this.updated & ~UPDATED_MARKS;
                this.storedMarks = null;
            }
            /**
             Update the timestamp for the transaction.
             */
            setTime(time) {
                this.time = time;
                return this;
            }
            /**
             Replace the current selection with the given slice.
             */
            replaceSelection(slice) {
                this.selection.replace(this, slice);
                return this;
            }
            /**
             Replace the selection with the given node. When `inheritMarks` is
             true and the content is inline, it inherits the marks from the
             place where it is inserted.
             */
            replaceSelectionWith(node, inheritMarks = true) {
                let selection = this.selection;
                if (inheritMarks)
                    node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark.none)));
                selection.replaceWith(this, node);
                return this;
            }
            /**
             Delete the selection.
             */
            deleteSelection() {
                this.selection.replace(this);
                return this;
            }
            /**
             Replace the given range, or the selection if no range is given,
             with a text node containing the given string.
             */
            insertText(text, from, to) {
                let schema = this.doc.type.schema;
                if (from == null) {
                    if (!text)
                        return this.deleteSelection();
                    return this.replaceSelectionWith(schema.text(text), true);
                }
                else {
                    if (to == null)
                        to = from;
                    to = to == null ? from : to;
                    if (!text)
                        return this.deleteRange(from, to);
                    let marks = this.storedMarks;
                    if (!marks) {
                        let $from = this.doc.resolve(from);
                        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
                    }
                    this.replaceRangeWith(from, to, schema.text(text, marks));
                    if (!this.selection.empty)
                        this.setSelection(Selection.near(this.selection.$to));
                    return this;
                }
            }
            /**
             Store a metadata property in this transaction, keyed either by
             name or by plugin.
             */
            setMeta(key, value) {
                this.meta[typeof key == "string" ? key : key.key] = value;
                return this;
            }
            /**
             Retrieve a metadata property for a given name or plugin.
             */
            getMeta(key) {
                return this.meta[typeof key == "string" ? key : key.key];
            }
            /**
             Returns true if this transaction doesn't contain any metadata,
             and can thus safely be extended.
             */
            get isGeneric() {
                for (let _ in this.meta)
                    return false;
                return true;
            }
            /**
             Indicate that the editor should scroll the selection into view
             when updated to the state produced by this transaction.
             */
            scrollIntoView() {
                this.updated |= UPDATED_SCROLL;
                return this;
            }
            /**
             True when this transaction has had `scrollIntoView` called on it.
             */
            get scrolledIntoView() {
                return (this.updated & UPDATED_SCROLL) > 0;
            }
        }

        function bind(f, self) {
            return !self || !f ? f : f.bind(self);
        }
        class FieldDesc {
            constructor(name, desc, self) {
                this.name = name;
                this.init = bind(desc.init, self);
                this.apply = bind(desc.apply, self);
            }
        }
        const baseFields = [
            new FieldDesc("doc", {
                init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
                apply(tr) { return tr.doc; }
            }),
            new FieldDesc("selection", {
                init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
                apply(tr) { return tr.selection; }
            }),
            new FieldDesc("storedMarks", {
                init(config) { return config.storedMarks || null; },
                apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
            }),
            new FieldDesc("scrollToSelection", {
                init() { return 0; },
                apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
            })
        ];
// Object wrapping the part of a state object that stays the same
// across transactions. Stored in the state's `config` property.
        class Configuration {
            constructor(schema, plugins) {
                this.schema = schema;
                this.plugins = [];
                this.pluginsByKey = Object.create(null);
                this.fields = baseFields.slice();
                if (plugins)
                    plugins.forEach(plugin => {
                        if (this.pluginsByKey[plugin.key])
                            throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                        this.plugins.push(plugin);
                        this.pluginsByKey[plugin.key] = plugin;
                        if (plugin.spec.state)
                            this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
                    });
            }
        }
        /**
         The state of a ProseMirror editor is represented by an object of
         this type. A state is a persistent data structure—it isn't
         updated, but rather a new state value is computed from an old one
         using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

         A state holds a number of built-in fields, and plugins can
         [define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
         */
        class EditorState {
            /**
             @internal
             */
            constructor(
                /**
                 @internal
                 */
                config) {
                this.config = config;
            }
            /**
             The schema of the state's document.
             */
            get schema() {
                return this.config.schema;
            }
            /**
             The plugins that are active in this state.
             */
            get plugins() {
                return this.config.plugins;
            }
            /**
             Apply the given transaction to produce a new state.
             */
            apply(tr) {
                return this.applyTransaction(tr).state;
            }
            /**
             @ignore
             */
            filterTransaction(tr, ignore = -1) {
                for (let i = 0; i < this.config.plugins.length; i++)
                    if (i != ignore) {
                        let plugin = this.config.plugins[i];
                        if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                            return false;
                    }
                return true;
            }
            /**
             Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
             returns the precise transactions that were applied (which might
             be influenced by the [transaction
             hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
             plugins) along with the new state.
             */
            applyTransaction(rootTr) {
                if (!this.filterTransaction(rootTr))
                    return { state: this, transactions: [] };
                let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
                // This loop repeatedly gives plugins a chance to respond to
                // transactions as new transactions are added, making sure to only
                // pass the transactions the plugin did not see before.
                for (;;) {
                    let haveNew = false;
                    for (let i = 0; i < this.config.plugins.length; i++) {
                        let plugin = this.config.plugins[i];
                        if (plugin.spec.appendTransaction) {
                            let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                            let tr = n < trs.length &&
                                plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                            if (tr && newState.filterTransaction(tr, i)) {
                                tr.setMeta("appendedTransaction", rootTr);
                                if (!seen) {
                                    seen = [];
                                    for (let j = 0; j < this.config.plugins.length; j++)
                                        seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                                }
                                trs.push(tr);
                                newState = newState.applyInner(tr);
                                haveNew = true;
                            }
                            if (seen)
                                seen[i] = { state: newState, n: trs.length };
                        }
                    }
                    if (!haveNew)
                        return { state: newState, transactions: trs };
                }
            }
            /**
             @internal
             */
            applyInner(tr) {
                if (!tr.before.eq(this.doc))
                    throw new RangeError("Applying a mismatched transaction");
                let newInstance = new EditorState(this.config), fields = this.config.fields;
                for (let i = 0; i < fields.length; i++) {
                    let field = fields[i];
                    newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
                }
                return newInstance;
            }
            /**
             Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
             */
            get tr() { return new Transaction(this); }
            /**
             Create a new state.
             */
            static create(config) {
                let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
                let instance = new EditorState($config);
                for (let i = 0; i < $config.fields.length; i++)
                    instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
                return instance;
            }
            /**
             Create a new state based on this one, but with an adjusted set
             of active plugins. State fields that exist in both sets of
             plugins are kept unchanged. Those that no longer exist are
             dropped, and those that are new are initialized using their
             [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
             configuration object..
             */
            reconfigure(config) {
                let $config = new Configuration(this.schema, config.plugins);
                let fields = $config.fields, instance = new EditorState($config);
                for (let i = 0; i < fields.length; i++) {
                    let name = fields[i].name;
                    instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
                }
                return instance;
            }
            /**
             Serialize this state to JSON. If you want to serialize the state
             of plugins, pass an object mapping property names to use in the
             resulting JSON object to plugin objects. The argument may also be
             a string or number, in which case it is ignored, to support the
             way `JSON.stringify` calls `toString` methods.
             */
            toJSON(pluginFields) {
                let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
                if (this.storedMarks)
                    result.storedMarks = this.storedMarks.map(m => m.toJSON());
                if (pluginFields && typeof pluginFields == 'object')
                    for (let prop in pluginFields) {
                        if (prop == "doc" || prop == "selection")
                            throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                        let plugin = pluginFields[prop], state = plugin.spec.state;
                        if (state && state.toJSON)
                            result[prop] = state.toJSON.call(plugin, this[plugin.key]);
                    }
                return result;
            }
            /**
             Deserialize a JSON representation of a state. `config` should
             have at least a `schema` field, and should contain array of
             plugins to initialize the state with. `pluginFields` can be used
             to deserialize the state of plugins, by associating plugin
             instances with the property names they use in the JSON object.
             */
            static fromJSON(config, json, pluginFields) {
                if (!json)
                    throw new RangeError("Invalid input for EditorState.fromJSON");
                if (!config.schema)
                    throw new RangeError("Required config field 'schema' missing");
                let $config = new Configuration(config.schema, config.plugins);
                let instance = new EditorState($config);
                $config.fields.forEach(field => {
                    if (field.name == "doc") {
                        instance.doc = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node.fromJSON(config.schema, json.doc);
                    }
                    else if (field.name == "selection") {
                        instance.selection = Selection.fromJSON(instance.doc, json.selection);
                    }
                    else if (field.name == "storedMarks") {
                        if (json.storedMarks)
                            instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
                    }
                    else {
                        if (pluginFields)
                            for (let prop in pluginFields) {
                                let plugin = pluginFields[prop], state = plugin.spec.state;
                                if (plugin.key == field.name && state && state.fromJSON &&
                                    Object.prototype.hasOwnProperty.call(json, prop)) {
                                    instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                                    return;
                                }
                            }
                        instance[field.name] = field.init(config, instance);
                    }
                });
                return instance;
            }
        }

        function bindProps(obj, self, target) {
            for (let prop in obj) {
                let val = obj[prop];
                if (val instanceof Function)
                    val = val.bind(self);
                else if (prop == "handleDOMEvents")
                    val = bindProps(val, self, {});
                target[prop] = val;
            }
            return target;
        }
        /**
         Plugins bundle functionality that can be added to an editor.
         They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
         may influence that state and the view that contains it.
         */
        class Plugin {
            /**
             Create a plugin.
             */
            constructor(
                /**
                 The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
                 */
                spec) {
                this.spec = spec;
                /**
                 The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
                 */
                this.props = {};
                if (spec.props)
                    bindProps(spec.props, this, this.props);
                this.key = spec.key ? spec.key.key : createKey("plugin");
            }
            /**
             Extract the plugin's state field from an editor state.
             */
            getState(state) { return state[this.key]; }
        }
        const keys = Object.create(null);
        function createKey(name) {
            if (name in keys)
                return name + "$" + ++keys[name];
            keys[name] = 0;
            return name + "$";
        }
        /**
         A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
         that makes it possible to find them, given an editor state.
         Assigning a key does mean only one plugin of that type can be
         active in a state.
         */
        class PluginKey {
            /**
             Create a plugin key.
             */
            constructor(name = "key") { this.key = createKey(name); }
            /**
             Get the active plugin with this key, if any, from an editor
             state.
             */
            get(state) { return state.config.pluginsByKey[this.key]; }
            /**
             Get the plugin's state from an editor state.
             */
            getState(state) { return state[this.key]; }
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-transform/dist/index.js":
    /*!**********************************************************!*\
  !*** ./node_modules/prosemirror-transform/dist/index.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "AddMarkStep": () => (/* binding */ AddMarkStep),
            /* harmony export */   "AddNodeMarkStep": () => (/* binding */ AddNodeMarkStep),
            /* harmony export */   "AttrStep": () => (/* binding */ AttrStep),
            /* harmony export */   "MapResult": () => (/* binding */ MapResult),
            /* harmony export */   "Mapping": () => (/* binding */ Mapping),
            /* harmony export */   "RemoveMarkStep": () => (/* binding */ RemoveMarkStep),
            /* harmony export */   "RemoveNodeMarkStep": () => (/* binding */ RemoveNodeMarkStep),
            /* harmony export */   "ReplaceAroundStep": () => (/* binding */ ReplaceAroundStep),
            /* harmony export */   "ReplaceStep": () => (/* binding */ ReplaceStep),
            /* harmony export */   "Step": () => (/* binding */ Step),
            /* harmony export */   "StepMap": () => (/* binding */ StepMap),
            /* harmony export */   "StepResult": () => (/* binding */ StepResult),
            /* harmony export */   "Transform": () => (/* binding */ Transform),
            /* harmony export */   "TransformError": () => (/* binding */ TransformError),
            /* harmony export */   "canJoin": () => (/* binding */ canJoin),
            /* harmony export */   "canSplit": () => (/* binding */ canSplit),
            /* harmony export */   "dropPoint": () => (/* binding */ dropPoint),
            /* harmony export */   "findWrapping": () => (/* binding */ findWrapping),
            /* harmony export */   "insertPoint": () => (/* binding */ insertPoint),
            /* harmony export */   "joinPoint": () => (/* binding */ joinPoint),
            /* harmony export */   "liftTarget": () => (/* binding */ liftTarget),
            /* harmony export */   "replaceStep": () => (/* binding */ replaceStep)
            /* harmony export */ });
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");


// Recovery values encode a range index and an offset. They are
// represented as numbers, because tons of them will be created when
// mapping, for example, a large number of decorations. The number's
// lower 16 bits provide the index, the remaining bits the offset.
//
// Note: We intentionally don't use bit shift operators to en- and
// decode these, since those clip to 32 bits, which we might in rare
// cases want to overflow. A 64-bit float can represent 48-bit
// integers precisely.
        const lower16 = 0xffff;
        const factor16 = Math.pow(2, 16);
        function makeRecover(index, offset) { return index + offset * factor16; }
        function recoverIndex(value) { return value & lower16; }
        function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
        const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
        /**
         An object representing a mapped position with extra
         information.
         */
        class MapResult {
            /**
             @internal
             */
            constructor(
                /**
                 The mapped version of the position.
                 */
                pos,
                /**
                 @internal
                 */
                delInfo,
                /**
                 @internal
                 */
                recover) {
                this.pos = pos;
                this.delInfo = delInfo;
                this.recover = recover;
            }
            /**
             Tells you whether the position was deleted, that is, whether the
             step removed the token on the side queried (via the `assoc`)
             argument from the document.
             */
            get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
            /**
             Tells you whether the token before the mapped position was deleted.
             */
            get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
            /**
             True when the token after the mapped position was deleted.
             */
            get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
            /**
             Tells whether any of the steps mapped through deletes across the
             position (including both the token before and after the
             position).
             */
            get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
        }
        /**
         A map describing the deletions and insertions made by a step, which
         can be used to find the correspondence between positions in the
         pre-step version of a document and the same position in the
         post-step version.
         */
        class StepMap {
            /**
             Create a position map. The modifications to the document are
             represented as an array of numbers, in which each group of three
             represents a modified chunk as `[start, oldSize, newSize]`.
             */
            constructor(
                /**
                 @internal
                 */
                ranges,
                /**
                 @internal
                 */
                inverted = false) {
                this.ranges = ranges;
                this.inverted = inverted;
                if (!ranges.length && StepMap.empty)
                    return StepMap.empty;
            }
            /**
             @internal
             */
            recover(value) {
                let diff = 0, index = recoverIndex(value);
                if (!this.inverted)
                    for (let i = 0; i < index; i++)
                        diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
                return this.ranges[index * 3] + diff + recoverOffset(value);
            }
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            map(pos, assoc = 1) { return this._map(pos, assoc, true); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                    if (pos <= end) {
                        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                        let result = start + diff + (side < 0 ? 0 : newSize);
                        if (simple)
                            return result;
                        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                        let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                        if (assoc < 0 ? pos != start : pos != end)
                            del |= DEL_SIDE;
                        return new MapResult(result, del, recover);
                    }
                    diff += newSize - oldSize;
                }
                return simple ? pos + diff : new MapResult(pos + diff, 0, null);
            }
            /**
             @internal
             */
            touches(pos, recover) {
                let diff = 0, index = recoverIndex(recover);
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i] - (this.inverted ? diff : 0);
                    if (start > pos)
                        break;
                    let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                    if (pos <= end && i == index * 3)
                        return true;
                    diff += this.ranges[i + newIndex] - oldSize;
                }
                return false;
            }
            /**
             Calls the given function on each of the changed ranges included in
             this map.
             */
            forEach(f) {
                let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
                for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                    let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                    let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                    diff += newSize - oldSize;
                }
            }
            /**
             Create an inverted version of this map. The result can be used to
             map positions in the post-step document to the pre-step document.
             */
            invert() {
                return new StepMap(this.ranges, !this.inverted);
            }
            /**
             @internal
             */
            toString() {
                return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
            }
            /**
             Create a map that moves all positions by offset `n` (which may be
             negative). This can be useful when applying steps meant for a
             sub-document to a larger document, or vice-versa.
             */
            static offset(n) {
                return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
            }
        }
        /**
         A StepMap that contains no changed ranges.
         */
        StepMap.empty = new StepMap([]);
        /**
         A mapping represents a pipeline of zero or more [step
         maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
         handling mapping positions through a series of steps in which some
         steps are inverted versions of earlier steps. (This comes up when
         ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
         collaboration or history management.)
         */
        class Mapping {
            /**
             Create a new mapping with the given position maps.
             */
            constructor(
                /**
                 The step maps in this mapping.
                 */
                maps = [],
                /**
                 @internal
                 */
                mirror,
                /**
                 The starting position in the `maps` array, used when `map` or
                 `mapResult` is called.
                 */
                from = 0,
                /**
                 The end position in the `maps` array.
                 */
                to = maps.length) {
                this.maps = maps;
                this.mirror = mirror;
                this.from = from;
                this.to = to;
            }
            /**
             Create a mapping that maps only through a part of this one.
             */
            slice(from = 0, to = this.maps.length) {
                return new Mapping(this.maps, this.mirror, from, to);
            }
            /**
             @internal
             */
            copy() {
                return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
            }
            /**
             Add a step map to the end of this mapping. If `mirrors` is
             given, it should be the index of the step map that is the mirror
             image of this one.
             */
            appendMap(map, mirrors) {
                this.to = this.maps.push(map);
                if (mirrors != null)
                    this.setMirror(this.maps.length - 1, mirrors);
            }
            /**
             Add all the step maps in a given mapping to this one (preserving
             mirroring information).
             */
            appendMapping(mapping) {
                for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
                }
            }
            /**
             Finds the offset of the step map that mirrors the map at the
             given offset, in this mapping (as per the second argument to
             `appendMap`).
             */
            getMirror(n) {
                if (this.mirror)
                    for (let i = 0; i < this.mirror.length; i++)
                        if (this.mirror[i] == n)
                            return this.mirror[i + (i % 2 ? -1 : 1)];
            }
            /**
             @internal
             */
            setMirror(n, m) {
                if (!this.mirror)
                    this.mirror = [];
                this.mirror.push(n, m);
            }
            /**
             Append the inverse of the given mapping to this one.
             */
            appendMappingInverted(mapping) {
                for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                    let mirr = mapping.getMirror(i);
                    this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
                }
            }
            /**
             Create an inverted version of this mapping.
             */
            invert() {
                let inverse = new Mapping;
                inverse.appendMappingInverted(this);
                return inverse;
            }
            /**
             Map a position through this mapping.
             */
            map(pos, assoc = 1) {
                if (this.mirror)
                    return this._map(pos, assoc, true);
                for (let i = this.from; i < this.to; i++)
                    pos = this.maps[i].map(pos, assoc);
                return pos;
            }
            /**
             Map a position through this mapping, returning a mapping
             result.
             */
            mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
            /**
             @internal
             */
            _map(pos, assoc, simple) {
                let delInfo = 0;
                for (let i = this.from; i < this.to; i++) {
                    let map = this.maps[i], result = map.mapResult(pos, assoc);
                    if (result.recover != null) {
                        let corr = this.getMirror(i);
                        if (corr != null && corr > i && corr < this.to) {
                            i = corr;
                            pos = this.maps[corr].recover(result.recover);
                            continue;
                        }
                    }
                    delInfo |= result.delInfo;
                    pos = result.pos;
                }
                return simple ? pos : new MapResult(pos, delInfo, null);
            }
        }

        const stepsByID = Object.create(null);
        /**
         A step object represents an atomic change. It generally applies
         only to the document it was created for, since the positions
         stored in it will only make sense for that document.

         New steps are defined by creating classes that extend `Step`,
         overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
         methods, and registering your class with a unique
         JSON-serialization identifier using
         [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
         */
        class Step {
            /**
             Get the step map that represents the changes made by this step,
             and which can be used to transform between positions in the old
             and the new document.
             */
            getMap() { return StepMap.empty; }
            /**
             Try to merge this step with another one, to be applied directly
             after it. Returns the merged step when possible, null if the
             steps can't be merged.
             */
            merge(other) { return null; }
            /**
             Deserialize a step from its JSON representation. Will call
             through to the step class' own implementation of this method.
             */
            static fromJSON(schema, json) {
                if (!json || !json.stepType)
                    throw new RangeError("Invalid input for Step.fromJSON");
                let type = stepsByID[json.stepType];
                if (!type)
                    throw new RangeError(`No step type ${json.stepType} defined`);
                return type.fromJSON(schema, json);
            }
            /**
             To be able to serialize steps to JSON, each step needs a string
             ID to attach to its JSON representation. Use this method to
             register an ID for your step classes. Try to pick something
             that's unlikely to clash with steps from other modules.
             */
            static jsonID(id, stepClass) {
                if (id in stepsByID)
                    throw new RangeError("Duplicate use of step JSON ID " + id);
                stepsByID[id] = stepClass;
                stepClass.prototype.jsonID = id;
                return stepClass;
            }
        }
        /**
         The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
         new document or a failure value.
         */
        class StepResult {
            /**
             @internal
             */
            constructor(
                /**
                 The transformed document, if successful.
                 */
                doc,
                /**
                 The failure message, if unsuccessful.
                 */
                failed) {
                this.doc = doc;
                this.failed = failed;
            }
            /**
             Create a successful step result.
             */
            static ok(doc) { return new StepResult(doc, null); }
            /**
             Create a failed step result.
             */
            static fail(message) { return new StepResult(null, message); }
            /**
             Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
             arguments. Create a successful result if it succeeds, and a
             failed one if it throws a `ReplaceError`.
             */
            static fromReplace(doc, from, to, slice) {
                try {
                    return StepResult.ok(doc.replace(from, to, slice));
                }
                catch (e) {
                    if (e instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError)
                        return StepResult.fail(e.message);
                    throw e;
                }
            }
        }

        function mapFragment(fragment, f, parent) {
            let mapped = [];
            for (let i = 0; i < fragment.childCount; i++) {
                let child = fragment.child(i);
                if (child.content.size)
                    child = child.copy(mapFragment(child.content, f, child));
                if (child.isInline)
                    child = f(child, parent, i);
                mapped.push(child);
            }
            return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(mapped);
        }
        /**
         Add a mark to all inline content between two positions.
         */
        class AddMarkStep extends Step {
            /**
             Create a mark step.
             */
            constructor(
                /**
                 The start of the marked range.
                 */
                from,
                /**
                 The end of the marked range.
                 */
                to,
                /**
                 The mark to add.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
                let parent = $from.node($from.sharedDepth(this.to));
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, (node, parent) => {
                    if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                        return node;
                    return node.mark(this.mark.addToSet(node.marks));
                }, parent), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new RemoveMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new AddMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof AddMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "addMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for AddMarkStep.fromJSON");
                return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("addMark", AddMarkStep);
        /**
         Remove a mark from all inline content between two positions.
         */
        class RemoveMarkStep extends Step {
            /**
             Create a mark-removing step.
             */
            constructor(
                /**
                 The start of the unmarked range.
                 */
                from,
                /**
                 The end of the unmarked range.
                 */
                to,
                /**
                 The mark to remove.
                 */
                mark) {
                super();
                this.from = from;
                this.to = to;
                this.mark = mark;
            }
            apply(doc) {
                let oldSlice = doc.slice(this.from, this.to);
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(mapFragment(oldSlice.content, node => {
                    return node.mark(this.mark.removeFromSet(node.marks));
                }, doc), oldSlice.openStart, oldSlice.openEnd);
                return StepResult.fromReplace(doc, this.from, this.to, slice);
            }
            invert() {
                return new AddMarkStep(this.from, this.to, this.mark);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deleted && to.deleted || from.pos >= to.pos)
                    return null;
                return new RemoveMarkStep(from.pos, to.pos, this.mark);
            }
            merge(other) {
                if (other instanceof RemoveMarkStep &&
                    other.mark.eq(this.mark) &&
                    this.from <= other.to && this.to >= other.from)
                    return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
                return null;
            }
            toJSON() {
                return { stepType: "removeMark", mark: this.mark.toJSON(),
                    from: this.from, to: this.to };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
                return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("removeMark", RemoveMarkStep);
        /**
         Add a mark to a specific node.
         */
        class AddNodeMarkStep extends Step {
            /**
             Create a node mark step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The mark to add.
                 */
                mark) {
                super();
                this.pos = pos;
                this.mark = mark;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at mark step's position");
                let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            invert(doc) {
                let node = doc.nodeAt(this.pos);
                if (node) {
                    let newSet = this.mark.addToSet(node.marks);
                    if (newSet.length == node.marks.length) {
                        for (let i = 0; i < node.marks.length; i++)
                            if (!node.marks[i].isInSet(newSet))
                                return new AddNodeMarkStep(this.pos, node.marks[i]);
                        return new AddNodeMarkStep(this.pos, this.mark);
                    }
                }
                return new RemoveNodeMarkStep(this.pos, this.mark);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
            }
            toJSON() {
                return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.pos != "number")
                    throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
                return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("addNodeMark", AddNodeMarkStep);
        /**
         Remove a mark from a specific node.
         */
        class RemoveNodeMarkStep extends Step {
            /**
             Create a mark-removing step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The mark to remove.
                 */
                mark) {
                super();
                this.pos = pos;
                this.mark = mark;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at mark step's position");
                let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            invert(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node || !this.mark.isInSet(node.marks))
                    return this;
                return new AddNodeMarkStep(this.pos, this.mark);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
            }
            toJSON() {
                return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.pos != "number")
                    throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
                return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
            }
        }
        Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

        /**
         Replace a part of the document with a slice of new content.
         */
        class ReplaceStep extends Step {
            /**
             The given `slice` should fit the 'gap' between `from` and
             `to`—the depths must line up, and the surrounding nodes must be
             able to be joined with the open sides of the slice. When
             `structure` is true, the step will fail if the content between
             from and to is not just a sequence of closing and then opening
             tokens (this is to guard against rebased replace steps
             overwriting something they weren't supposed to).
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.slice = slice;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && contentBetween(doc, this.from, this.to))
                    return StepResult.fail("Structure replace would overwrite content");
                return StepResult.fromReplace(doc, this.from, this.to, this.slice);
            }
            getMap() {
                return new StepMap([this.from, this.to - this.from, this.slice.size]);
            }
            invert(doc) {
                return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                if (from.deletedAcross && to.deletedAcross)
                    return null;
                return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
            }
            merge(other) {
                if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                    return null;
                if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                    return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
                }
                else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                    let slice = this.slice.size + other.slice.size == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                    return new ReplaceStep(other.from, this.to, slice, this.structure);
                }
                else {
                    return null;
                }
            }
            toJSON() {
                let json = { stepType: "replace", from: this.from, to: this.to };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number")
                    throw new RangeError("Invalid input for ReplaceStep.fromJSON");
                return new ReplaceStep(json.from, json.to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), !!json.structure);
            }
        }
        Step.jsonID("replace", ReplaceStep);
        /**
         Replace a part of the document with a slice of content, but
         preserve a range of the replaced content by moving it into the
         slice.
         */
        class ReplaceAroundStep extends Step {
            /**
             Create a replace-around step with the given range and gap.
             `insert` should be the point in the slice into which the content
             of the gap should be moved. `structure` has the same meaning as
             it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
             */
            constructor(
                /**
                 The start position of the replaced range.
                 */
                from,
                /**
                 The end position of the replaced range.
                 */
                to,
                /**
                 The start of preserved range.
                 */
                gapFrom,
                /**
                 The end of preserved range.
                 */
                gapTo,
                /**
                 The slice to insert.
                 */
                slice,
                /**
                 The position in the slice where the preserved range should be
                 inserted.
                 */
                insert,
                /**
                 @internal
                 */
                structure = false) {
                super();
                this.from = from;
                this.to = to;
                this.gapFrom = gapFrom;
                this.gapTo = gapTo;
                this.slice = slice;
                this.insert = insert;
                this.structure = structure;
            }
            apply(doc) {
                if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                    contentBetween(doc, this.gapTo, this.to)))
                    return StepResult.fail("Structure gap-replace would overwrite content");
                let gap = doc.slice(this.gapFrom, this.gapTo);
                if (gap.openStart || gap.openEnd)
                    return StepResult.fail("Gap is not a flat range");
                let inserted = this.slice.insertAt(this.insert, gap.content);
                if (!inserted)
                    return StepResult.fail("Content does not fit in gap");
                return StepResult.fromReplace(doc, this.from, this.to, inserted);
            }
            getMap() {
                return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                    this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
            }
            invert(doc) {
                let gap = this.gapTo - this.gapFrom;
                return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
            }
            map(mapping) {
                let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
                let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
                if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                    return null;
                return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
            }
            toJSON() {
                let json = { stepType: "replaceAround", from: this.from, to: this.to,
                    gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
                if (this.slice.size)
                    json.slice = this.slice.toJSON();
                if (this.structure)
                    json.structure = true;
                return json;
            }
            /**
             @internal
             */
            static fromJSON(schema, json) {
                if (typeof json.from != "number" || typeof json.to != "number" ||
                    typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                    throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
                return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
            }
        }
        Step.jsonID("replaceAround", ReplaceAroundStep);
        function contentBetween(doc, from, to) {
            let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
            while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
                depth--;
                dist--;
            }
            if (dist > 0) {
                let next = $from.node(depth).maybeChild($from.indexAfter(depth));
                while (dist > 0) {
                    if (!next || next.isLeaf)
                        return true;
                    next = next.firstChild;
                    dist--;
                }
            }
            return false;
        }

        function addMark(tr, from, to, mark) {
            let removed = [], added = [];
            let removing, adding;
            tr.doc.nodesBetween(from, to, (node, pos, parent) => {
                if (!node.isInline)
                    return;
                let marks = node.marks;
                if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                    let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                    let newSet = mark.addToSet(marks);
                    for (let i = 0; i < marks.length; i++) {
                        if (!marks[i].isInSet(newSet)) {
                            if (removing && removing.to == start && removing.mark.eq(marks[i]))
                                removing.to = end;
                            else
                                removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                        }
                    }
                    if (adding && adding.to == start)
                        adding.to = end;
                    else
                        added.push(adding = new AddMarkStep(start, end, mark));
                }
            });
            removed.forEach(s => tr.step(s));
            added.forEach(s => tr.step(s));
        }
        function removeMark(tr, from, to, mark) {
            let matched = [], step = 0;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (!node.isInline)
                    return;
                step++;
                let toRemove = null;
                if (mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType) {
                    let set = node.marks, found;
                    while (found = mark.isInSet(set)) {
                        (toRemove || (toRemove = [])).push(found);
                        set = found.removeFromSet(set);
                    }
                }
                else if (mark) {
                    if (mark.isInSet(node.marks))
                        toRemove = [mark];
                }
                else {
                    toRemove = node.marks;
                }
                if (toRemove && toRemove.length) {
                    let end = Math.min(pos + node.nodeSize, to);
                    for (let i = 0; i < toRemove.length; i++) {
                        let style = toRemove[i], found;
                        for (let j = 0; j < matched.length; j++) {
                            let m = matched[j];
                            if (m.step == step - 1 && style.eq(matched[j].style))
                                found = m;
                        }
                        if (found) {
                            found.to = end;
                            found.step = step;
                        }
                        else {
                            matched.push({ style, from: Math.max(pos, from), to: end, step });
                        }
                    }
                }
            });
            matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
        }
        function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
            let node = tr.doc.nodeAt(pos);
            let delSteps = [], cur = pos + 1;
            for (let i = 0; i < node.childCount; i++) {
                let child = node.child(i), end = cur + child.nodeSize;
                let allowed = match.matchType(child.type);
                if (!allowed) {
                    delSteps.push(new ReplaceStep(cur, end, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty));
                }
                else {
                    match = allowed;
                    for (let j = 0; j < child.marks.length; j++)
                        if (!parentType.allowsMarkType(child.marks[j].type))
                            tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
                }
                cur = end;
            }
            if (!match.validEnd) {
                let fill = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                tr.replace(cur, cur, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(fill, 0, 0));
            }
            for (let i = delSteps.length - 1; i >= 0; i--)
                tr.step(delSteps[i]);
        }

        function canCut(node, start, end) {
            return (start == 0 || node.canReplace(start, node.childCount)) &&
                (end == node.childCount || node.canReplace(0, end));
        }
        /**
         Try to find a target depth to which the content in the given range
         can be lifted. Will not go across
         [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
         */
        function liftTarget(range) {
            let parent = range.parent;
            let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
            for (let depth = range.depth;; --depth) {
                let node = range.$from.node(depth);
                let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
                if (depth < range.depth && node.canReplace(index, endIndex, content))
                    return depth;
                if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                    break;
            }
            return null;
        }
        function lift(tr, range, target) {
            let { $from, $to, depth } = range;
            let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
            let start = gapStart, end = gapEnd;
            let before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openStart = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $from.index(d) > 0) {
                    splitting = true;
                    before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(before));
                    openStart++;
                }
                else {
                    start--;
                }
            let after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, openEnd = 0;
            for (let d = depth, splitting = false; d > target; d--)
                if (splitting || $to.after(d + 1) < $to.end(d)) {
                    splitting = true;
                    after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($to.node(d).copy(after));
                    openEnd++;
                }
                else {
                    end++;
                }
            tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
        }
        /**
         Try to find a valid way to wrap the content in the given range in a
         node of the given type. May introduce extra nodes around and inside
         the wrapper node, if necessary. Returns null if no valid wrapping
         could be found. When `innerRange` is given, that range's content is
         used as the content to fit into the wrapping, instead of the
         content of `range`.
         */
        function findWrapping(range, nodeType, attrs = null, innerRange = range) {
            let around = findWrappingOutside(range, nodeType);
            let inner = around && findWrappingInside(innerRange, nodeType);
            if (!inner)
                return null;
            return around.map(withAttrs)
                .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
        }
        function withAttrs(type) { return { type, attrs: null }; }
        function findWrappingOutside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let around = parent.contentMatchAt(startIndex).findWrapping(type);
            if (!around)
                return null;
            let outer = around.length ? around[0] : type;
            return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
        }
        function findWrappingInside(range, type) {
            let { parent, startIndex, endIndex } = range;
            let inner = parent.child(startIndex);
            let inside = type.contentMatch.findWrapping(inner.type);
            if (!inside)
                return null;
            let lastType = inside.length ? inside[inside.length - 1] : type;
            let innerMatch = lastType.contentMatch;
            for (let i = startIndex; innerMatch && i < endIndex; i++)
                innerMatch = innerMatch.matchType(parent.child(i).type);
            if (!innerMatch || !innerMatch.validEnd)
                return null;
            return inside;
        }
        function wrap(tr, range, wrappers) {
            let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let i = wrappers.length - 1; i >= 0; i--) {
                if (content.size) {
                    let match = wrappers[i].type.contentMatch.matchFragment(content);
                    if (!match || !match.validEnd)
                        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
                }
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
            }
            let start = range.start, end = range.end;
            tr.step(new ReplaceAroundStep(start, end, start, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));
        }
        function setBlockType(tr, from, to, type, attrs) {
            if (!type.isTextblock)
                throw new RangeError("Type given to setBlockType should be a textblock");
            let mapFrom = tr.steps.length;
            tr.doc.nodesBetween(from, to, (node, pos) => {
                if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                    // Ensure all markup that isn't allowed in the new node type is cleared
                    tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
                    let mapping = tr.mapping.slice(mapFrom);
                    let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                    tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                    return false;
                }
            });
        }
        function canChangeType(doc, pos, type) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return $pos.parent.canReplaceWith(index, index + 1, type);
        }
        /**
         Change the type, attributes, and/or marks of the node at `pos`.
         When `type` isn't given, the existing node type is preserved,
         */
        function setNodeMarkup(tr, pos, type, attrs, marks) {
            let node = tr.doc.nodeAt(pos);
            if (!node)
                throw new RangeError("No node at given position");
            if (!type)
                type = node.type;
            let newNode = type.create(attrs, null, marks || node.marks);
            if (node.isLeaf)
                return tr.replaceWith(pos, pos + node.nodeSize, newNode);
            if (!type.validContent(node.content))
                throw new RangeError("Invalid content for node type " + type.name);
            tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(newNode), 0, 0), 1, true));
        }
        /**
         Check whether splitting at the given position is allowed.
         */
        function canSplit(doc, pos, depth = 1, typesAfter) {
            let $pos = doc.resolve(pos), base = $pos.depth - depth;
            let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
            if (base < 0 || $pos.parent.type.spec.isolating ||
                !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
                !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
                return false;
            for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
                let node = $pos.node(d), index = $pos.index(d);
                if (node.type.spec.isolating)
                    return false;
                let rest = node.content.cutByIndex(index, node.childCount);
                let after = (typesAfter && typesAfter[i]) || node;
                if (after != node)
                    rest = rest.replaceChild(0, after.type.create(after.attrs));
                if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                    return false;
            }
            let index = $pos.indexAfter(base);
            let baseType = typesAfter && typesAfter[0];
            return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
        }
        function split(tr, pos, depth = 1, typesAfter) {
            let $pos = tr.doc.resolve(pos), before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
            for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
                before = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($pos.node(d).copy(before));
                let typeAfter = typesAfter && typesAfter[i];
                after = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
            }
            tr.step(new ReplaceStep(pos, pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(before.append(after), depth, depth), true));
        }
        /**
         Test whether the blocks before and after a given position can be
         joined.
         */
        function canJoin(doc, pos) {
            let $pos = doc.resolve(pos), index = $pos.index();
            return joinable($pos.nodeBefore, $pos.nodeAfter) &&
                $pos.parent.canReplace(index, index + 1);
        }
        function joinable(a, b) {
            return !!(a && b && !a.isLeaf && a.canAppend(b));
        }
        /**
         Find an ancestor of the given position that can be joined to the
         block before (or after if `dir` is positive). Returns the joinable
         point, if any.
         */
        function joinPoint(doc, pos, dir = -1) {
            let $pos = doc.resolve(pos);
            for (let d = $pos.depth;; d--) {
                let before, after, index = $pos.index(d);
                if (d == $pos.depth) {
                    before = $pos.nodeBefore;
                    after = $pos.nodeAfter;
                }
                else if (dir > 0) {
                    before = $pos.node(d + 1);
                    index++;
                    after = $pos.node(d).maybeChild(index);
                }
                else {
                    before = $pos.node(d).maybeChild(index - 1);
                    after = $pos.node(d + 1);
                }
                if (before && !before.isTextblock && joinable(before, after) &&
                    $pos.node(d).canReplace(index, index + 1))
                    return pos;
                if (d == 0)
                    break;
                pos = dir < 0 ? $pos.before(d) : $pos.after(d);
            }
        }
        function join(tr, pos, depth) {
            let step = new ReplaceStep(pos - depth, pos + depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, true);
            tr.step(step);
        }
        /**
         Try to find a point where a node of the given type can be inserted
         near `pos`, by searching up the node hierarchy when `pos` itself
         isn't a valid place but is at the start or end of a node. Return
         null if no position was found.
         */
        function insertPoint(doc, pos, nodeType) {
            let $pos = doc.resolve(pos);
            if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
                return pos;
            if ($pos.parentOffset == 0)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.index(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.before(d + 1);
                    if (index > 0)
                        return null;
                }
            if ($pos.parentOffset == $pos.parent.content.size)
                for (let d = $pos.depth - 1; d >= 0; d--) {
                    let index = $pos.indexAfter(d);
                    if ($pos.node(d).canReplaceWith(index, index, nodeType))
                        return $pos.after(d + 1);
                    if (index < $pos.node(d).childCount)
                        return null;
                }
            return null;
        }
        /**
         Finds a position at or around the given position where the given
         slice can be inserted. Will look at parent nodes' nearest boundary
         and try there, even if the original position wasn't directly at the
         start or end of that node. Returns null when no position was found.
         */
        function dropPoint(doc, pos, slice) {
            let $pos = doc.resolve(pos);
            if (!slice.content.size)
                return pos;
            let content = slice.content;
            for (let i = 0; i < slice.openStart; i++)
                content = content.firstChild.content;
            for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
                for (let d = $pos.depth; d >= 0; d--) {
                    let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                    let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                    let parent = $pos.node(d), fits = false;
                    if (pass == 1) {
                        fits = parent.canReplace(insertPos, insertPos, content);
                    }
                    else {
                        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                    }
                    if (fits)
                        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
                }
            }
            return null;
        }

        /**
         ‘Fit’ a slice into a given position in the document, producing a
         [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
         there's no meaningful way to insert the slice here, or inserting it
         would be a no-op (an empty slice over an empty range).
         */
        function replaceStep(doc, from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
            if (from == to && !slice.size)
                return null;
            let $from = doc.resolve(from), $to = doc.resolve(to);
            // Optimization -- avoid work if it's obvious that it's not needed.
            if (fitsTrivially($from, $to, slice))
                return new ReplaceStep(from, to, slice);
            return new Fitter($from, $to, slice).fit();
        }
        function fitsTrivially($from, $to, slice) {
            return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
                $from.parent.canReplace($from.index(), $to.index(), slice.content);
        }
// Algorithm for 'placing' the elements of a slice into a gap:
//
// We consider the content of each node that is open to the left to be
// independently placeable. I.e. in <p("foo"), p("bar")>, when the
// paragraph on the left is open, "foo" can be placed (somewhere on
// the left side of the replacement gap) independently from p("bar").
//
// This class tracks the state of the placement progress in the
// following properties:
//
//  - `frontier` holds a stack of `{type, match}` objects that
//    represent the open side of the replacement. It starts at
//    `$from`, then moves forward as content is placed, and is finally
//    reconciled with `$to`.
//
//  - `unplaced` is a slice that represents the content that hasn't
//    been placed yet.
//
//  - `placed` is a fragment of placed content. Its open-start value
//    is implicit in `$from`, and its open-end value in `frontier`.
        class Fitter {
            constructor($from, $to, unplaced) {
                this.$from = $from;
                this.$to = $to;
                this.unplaced = unplaced;
                this.frontier = [];
                this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                for (let i = 0; i <= $from.depth; i++) {
                    let node = $from.node(i);
                    this.frontier.push({
                        type: node.type,
                        match: node.contentMatchAt($from.indexAfter(i))
                    });
                }
                for (let i = $from.depth; i > 0; i--)
                    this.placed = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(i).copy(this.placed));
            }
            get depth() { return this.frontier.length - 1; }
            fit() {
                // As long as there's unplaced content, try to place some of it.
                // If that fails, either increase the open score of the unplaced
                // slice, or drop nodes from it, and then try again.
                while (this.unplaced.size) {
                    let fit = this.findFittable();
                    if (fit)
                        this.placeNodes(fit);
                    else
                        this.openMore() || this.dropNode();
                }
                // When there's inline content directly after the frontier _and_
                // directly after `this.$to`, we must generate a `ReplaceAround`
                // step that pulls that content into the node after the frontier.
                // That means the fitting must be done to the end of the textblock
                // node after `this.$to`, not `this.$to` itself.
                let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
                let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
                if (!$to)
                    return null;
                // If closing to `$to` succeeded, create a step
                let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
                while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                    content = content.firstChild.content;
                    openStart--;
                    openEnd--;
                }
                let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);
                if (moveInline > -1)
                    return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
                if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                    return new ReplaceStep($from.pos, $to.pos, slice);
                return null;
            }
            // Find a position on the start spine of `this.unplaced` that has
            // content that can be moved somewhere on the frontier. Returns two
            // depths, one for the slice and one for the frontier.
            findFittable() {
                // Only try wrapping nodes (pass 2) after finding a place without
                // wrapping failed.
                for (let pass = 1; pass <= 2; pass++) {
                    for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                        let fragment, parent = null;
                        if (sliceDepth) {
                            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                            fragment = parent.content;
                        }
                        else {
                            fragment = this.unplaced.content;
                        }
                        let first = fragment.firstChild;
                        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                            let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                            // In pass 1, if the next node matches, or there is no next
                            // node but the parents look compatible, we've found a
                            // place.
                            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(first), false))
                                : parent && type.compatibleContent(parent.type)))
                                return { sliceDepth, frontierDepth, parent, inject };
                                // In pass 2, look for a set of wrapping nodes that make
                            // `first` fit here.
                            else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                                return { sliceDepth, frontierDepth, parent, wrap };
                            // Don't continue looking further up if the parent node
                            // would fit here.
                            if (parent && match.matchType(parent.type))
                                break;
                        }
                    }
                }
            }
            openMore() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (!inner.childCount || inner.firstChild.isLeaf)
                    return false;
                this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
                return true;
            }
            dropNode() {
                let { content, openStart, openEnd } = this.unplaced;
                let inner = contentAt(content, openStart);
                if (inner.childCount <= 1 && openStart > 0) {
                    let openAtEnd = content.size - openStart <= openStart + inner.size;
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
                }
                else {
                    this.unplaced = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
                }
            }
            // Move content from the unplaced slice at `sliceDepth` to the
            // frontier node at `frontierDepth`. Close that frontier node when
            // applicable.
            placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
                while (this.depth > frontierDepth)
                    this.closeFrontierNode();
                if (wrap)
                    for (let i = 0; i < wrap.length; i++)
                        this.openFrontierNode(wrap[i]);
                let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
                let openStart = slice.openStart - sliceDepth;
                let taken = 0, add = [];
                let { match, type } = this.frontier[frontierDepth];
                if (inject) {
                    for (let i = 0; i < inject.childCount; i++)
                        add.push(inject.child(i));
                    match = match.matchFragment(inject);
                }
                // Computes the amount of (end) open nodes at the end of the
                // fragment. When 0, the parent is open, but no more. When
                // negative, nothing is open.
                let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
                // Scan over the fragment, fitting as many child nodes as
                // possible.
                while (taken < fragment.childCount) {
                    let next = fragment.child(taken), matches = match.matchType(next.type);
                    if (!matches)
                        break;
                    taken++;
                    if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                        match = matches;
                        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                    }
                }
                let toEnd = taken == fragment.childCount;
                if (!toEnd)
                    openEndCount = -1;
                this.placed = addToFragment(this.placed, frontierDepth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(add));
                this.frontier[frontierDepth].match = match;
                // If the parent types match, and the entire node was moved, and
                // it's not open, close this frontier node right away.
                if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                    this.closeFrontierNode();
                // Add new frontier nodes for any open nodes at the end.
                for (let i = 0, cur = fragment; i < openEndCount; i++) {
                    let node = cur.lastChild;
                    this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                    cur = node.content;
                }
                // Update `this.unplaced`. Drop the entire node from which we
                // placed it we got to its end, otherwise just drop the placed
                // nodes.
                this.unplaced = !toEnd ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                    : sliceDepth == 0 ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty
                        : new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
            }
            mustMoveInline() {
                if (!this.$to.parent.isTextblock)
                    return -1;
                let top = this.frontier[this.depth], level;
                if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                    (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                    return -1;
                let { depth } = this.$to, after = this.$to.after(depth);
                while (depth > 1 && after == this.$to.end(--depth))
                    ++after;
                return after;
            }
            findCloseLevel($to) {
                scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                    let { match, type } = this.frontier[i];
                    let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                    let fit = contentAfterFits($to, i, type, match, dropInner);
                    if (!fit)
                        continue;
                    for (let d = i - 1; d >= 0; d--) {
                        let { match, type } = this.frontier[d];
                        let matches = contentAfterFits($to, d, type, match, true);
                        if (!matches || matches.childCount)
                            continue scan;
                    }
                    return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
                }
            }
            close($to) {
                let close = this.findCloseLevel($to);
                if (!close)
                    return null;
                while (this.depth > close.depth)
                    this.closeFrontierNode();
                if (close.fit.childCount)
                    this.placed = addToFragment(this.placed, close.depth, close.fit);
                $to = close.move;
                for (let d = close.depth + 1; d <= $to.depth; d++) {
                    let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                    this.openFrontierNode(node.type, node.attrs, add);
                }
                return $to;
            }
            openFrontierNode(type, attrs = null, content) {
                let top = this.frontier[this.depth];
                top.match = top.match.matchType(type);
                this.placed = addToFragment(this.placed, this.depth, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(attrs, content)));
                this.frontier.push({ type, match: type.contentMatch });
            }
            closeFrontierNode() {
                let open = this.frontier.pop();
                let add = open.match.fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
                if (add.childCount)
                    this.placed = addToFragment(this.placed, this.frontier.length, add);
            }
        }
        function dropFromFragment(fragment, depth, count) {
            if (depth == 0)
                return fragment.cutByIndex(count, fragment.childCount);
            return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
        }
        function addToFragment(fragment, depth, content) {
            if (depth == 0)
                return fragment.append(content);
            return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
        }
        function contentAt(fragment, depth) {
            for (let i = 0; i < depth; i++)
                fragment = fragment.firstChild.content;
            return fragment;
        }
        function closeNodeStart(node, openStart, openEnd) {
            if (openStart <= 0)
                return node;
            let frag = node.content;
            if (openStart > 1)
                frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
            if (openStart > 0) {
                frag = node.type.contentMatch.fillBefore(frag).append(frag);
                if (openEnd <= 0)
                    frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return node.copy(frag);
        }
        function contentAfterFits($to, depth, type, match, open) {
            let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
            if (index == node.childCount && !type.compatibleContent(node.type))
                return null;
            let fit = match.fillBefore(node.content, true, index);
            return fit && !invalidMarks(type, node.content, index) ? fit : null;
        }
        function invalidMarks(type, fragment, start) {
            for (let i = start; i < fragment.childCount; i++)
                if (!type.allowsMarks(fragment.child(i).marks))
                    return true;
            return false;
        }
        function definesContent(type) {
            return type.spec.defining || type.spec.definingForContent;
        }
        function replaceRange(tr, from, to, slice) {
            if (!slice.size)
                return tr.deleteRange(from, to);
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            if (fitsTrivially($from, $to, slice))
                return tr.step(new ReplaceStep(from, to, slice));
            let targetDepths = coveredDepths($from, tr.doc.resolve(to));
            // Can't replace the whole document, so remove 0 if it's present
            if (targetDepths[targetDepths.length - 1] == 0)
                targetDepths.pop();
            // Negative numbers represent not expansion over the whole node at
            // that depth, but replacing from $from.before(-D) to $to.pos.
            let preferredTarget = -($from.depth + 1);
            targetDepths.unshift(preferredTarget);
            // This loop picks a preferred target depth, if one of the covering
            // depths is not outside of a defining node, and adds negative
            // depths for any depth that has $from at its start and does not
            // cross a defining node.
            for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
                let spec = $from.node(d).type.spec;
                if (spec.defining || spec.definingAsContext || spec.isolating)
                    break;
                if (targetDepths.indexOf(d) > -1)
                    preferredTarget = d;
                else if ($from.before(d) == pos)
                    targetDepths.splice(1, 0, -d);
            }
            // Try to fit each possible depth of the slice into each possible
            // target depth, starting with the preferred depths.
            let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
            let leftNodes = [], preferredDepth = slice.openStart;
            for (let content = slice.content, i = 0;; i++) {
                let node = content.firstChild;
                leftNodes.push(node);
                if (i == slice.openStart)
                    break;
                content = node.content;
            }
            // Back up preferredDepth to cover defining textblocks directly
            // above it, possibly skipping a non-defining textblock.
            for (let d = preferredDepth - 1; d >= 0; d--) {
                let type = leftNodes[d].type, def = definesContent(type);
                if (def && $from.node(preferredTargetIndex).type != type)
                    preferredDepth = d;
                else if (def || !type.isTextblock)
                    break;
            }
            for (let j = slice.openStart; j >= 0; j--) {
                let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
                let insert = leftNodes[openDepth];
                if (!insert)
                    continue;
                for (let i = 0; i < targetDepths.length; i++) {
                    // Loop over possible expansion levels, starting with the
                    // preferred one
                    let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                    if (targetDepth < 0) {
                        expand = false;
                        targetDepth = -targetDepth;
                    }
                    let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                    if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                        return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
                }
            }
            let startSteps = tr.steps.length;
            for (let i = targetDepths.length - 1; i >= 0; i--) {
                tr.replace(from, to, slice);
                if (tr.steps.length > startSteps)
                    break;
                let depth = targetDepths[i];
                if (depth < 0)
                    continue;
                from = $from.before(depth);
                to = $to.after(depth);
            }
        }
        function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
            if (depth < oldOpen) {
                let first = fragment.firstChild;
                fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
            }
            if (depth > newOpen) {
                let match = parent.contentMatchAt(0);
                let start = match.fillBefore(fragment).append(fragment);
                fragment = start.append(match.matchFragment(start).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            }
            return fragment;
        }
        function replaceRangeWith(tr, from, to, node) {
            if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
                let point = insertPoint(tr.doc, from, node.type);
                if (point != null)
                    from = to = point;
            }
            tr.replaceRange(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node), 0, 0));
        }
        function deleteRange(tr, from, to) {
            let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
            let covered = coveredDepths($from, $to);
            for (let i = 0; i < covered.length; i++) {
                let depth = covered[i], last = i == covered.length - 1;
                if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                    return tr.delete($from.start(depth), $to.end(depth));
                if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                    return tr.delete($from.before(depth), $to.after(depth));
            }
            for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
                if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                    return tr.delete($from.before(d), to);
            }
            tr.delete(from, to);
        }
// Returns an array of all depths for which $from - $to spans the
// whole content of the nodes at that depth.
        function coveredDepths($from, $to) {
            let result = [], minDepth = Math.min($from.depth, $to.depth);
            for (let d = minDepth; d >= 0; d--) {
                let start = $from.start(d);
                if (start < $from.pos - ($from.depth - d) ||
                    $to.end(d) > $to.pos + ($to.depth - d) ||
                    $from.node(d).type.spec.isolating ||
                    $to.node(d).type.spec.isolating)
                    break;
                if (start == $to.start(d) ||
                    (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                        d && $to.start(d - 1) == start - 1))
                    result.push(d);
            }
            return result;
        }

        /**
         Update an attribute in a specific node.
         */
        class AttrStep extends Step {
            /**
             Construct an attribute step.
             */
            constructor(
                /**
                 The position of the target node.
                 */
                pos,
                /**
                 The attribute to set.
                 */
                attr,
                // The attribute's new value.
                value) {
                super();
                this.pos = pos;
                this.attr = attr;
                this.value = value;
            }
            apply(doc) {
                let node = doc.nodeAt(this.pos);
                if (!node)
                    return StepResult.fail("No node at attribute step's position");
                let attrs = Object.create(null);
                for (let name in node.attrs)
                    attrs[name] = node.attrs[name];
                attrs[this.attr] = this.value;
                let updated = node.type.create(attrs, null, node.marks);
                return StepResult.fromReplace(doc, this.pos, this.pos + 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
            }
            getMap() {
                return StepMap.empty;
            }
            invert(doc) {
                return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
            }
            map(mapping) {
                let pos = mapping.mapResult(this.pos, 1);
                return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
            }
            toJSON() {
                return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
            }
            static fromJSON(schema, json) {
                if (typeof json.pos != "number" || typeof json.attr != "string")
                    throw new RangeError("Invalid input for AttrStep.fromJSON");
                return new AttrStep(json.pos, json.attr, json.value);
            }
        }
        Step.jsonID("attr", AttrStep);

        /**
         @internal
         */
        let TransformError = class extends Error {
        };
        TransformError = function TransformError(message) {
            let err = Error.call(this, message);
            err.__proto__ = TransformError.prototype;
            return err;
        };
        TransformError.prototype = Object.create(Error.prototype);
        TransformError.prototype.constructor = TransformError;
        TransformError.prototype.name = "TransformError";
        /**
         Abstraction to build up and track an array of
         [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

         Most transforming methods return the `Transform` object itself, so
         that they can be chained.
         */
        class Transform {
            /**
             Create a transform that starts with the given document.
             */
            constructor(
                /**
                 The current document (the result of applying the steps in the
                 transform).
                 */
                doc) {
                this.doc = doc;
                /**
                 The steps in this transform.
                 */
                this.steps = [];
                /**
                 The documents before each of the steps.
                 */
                this.docs = [];
                /**
                 A mapping with the maps for each of the steps in this transform.
                 */
                this.mapping = new Mapping;
            }
            /**
             The starting document.
             */
            get before() { return this.docs.length ? this.docs[0] : this.doc; }
            /**
             Apply a new step in this transform, saving the result. Throws an
             error when the step fails.
             */
            step(step) {
                let result = this.maybeStep(step);
                if (result.failed)
                    throw new TransformError(result.failed);
                return this;
            }
            /**
             Try to apply a step in this transformation, ignoring it if it
             fails. Returns the step result.
             */
            maybeStep(step) {
                let result = step.apply(this.doc);
                if (!result.failed)
                    this.addStep(step, result.doc);
                return result;
            }
            /**
             True when the document has been changed (when there are any
             steps).
             */
            get docChanged() {
                return this.steps.length > 0;
            }
            /**
             @internal
             */
            addStep(step, doc) {
                this.docs.push(this.doc);
                this.steps.push(step);
                this.mapping.appendMap(step.getMap());
                this.doc = doc;
            }
            /**
             Replace the part of the document between `from` and `to` with the
             given `slice`.
             */
            replace(from, to = from, slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty) {
                let step = replaceStep(this.doc, from, to, slice);
                if (step)
                    this.step(step);
                return this;
            }
            /**
             Replace the given range with the given content, which may be a
             fragment, node, or array of nodes.
             */
            replaceWith(from, to, content) {
                return this.replace(from, to, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(content), 0, 0));
            }
            /**
             Delete the content between the given positions.
             */
            delete(from, to) {
                return this.replace(from, to, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty);
            }
            /**
             Insert the given content at the given position.
             */
            insert(pos, content) {
                return this.replaceWith(pos, pos, content);
            }
            /**
             Replace a range of the document with a given slice, using
             `from`, `to`, and the slice's
             [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
             than fixed start and end points. This method may grow the
             replaced area or close open nodes in the slice in order to get a
             fit that is more in line with WYSIWYG expectations, by dropping
             fully covered parent nodes of the replaced region when they are
             marked [non-defining as
             context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
             open parent node from the slice that _is_ marked as [defining
             its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).

             This is the method, for example, to handle paste. The similar
             [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
             primitive tool which will _not_ move the start and end of its given
             range, and is useful in situations where you need more precise
             control over what happens.
             */
            replaceRange(from, to, slice) {
                replaceRange(this, from, to, slice);
                return this;
            }
            /**
             Replace the given range with a node, but use `from` and `to` as
             hints, rather than precise positions. When from and to are the same
             and are at the start or end of a parent node in which the given
             node doesn't fit, this method may _move_ them out towards a parent
             that does allow the given node to be placed. When the given range
             completely covers a parent node, this method may completely replace
             that parent node.
             */
            replaceRangeWith(from, to, node) {
                replaceRangeWith(this, from, to, node);
                return this;
            }
            /**
             Delete the given range, expanding it to cover fully covered
             parent nodes until a valid replace is found.
             */
            deleteRange(from, to) {
                deleteRange(this, from, to);
                return this;
            }
            /**
             Split the content in the given range off from its parent, if there
             is sibling content before or after it, and move it up the tree to
             the depth specified by `target`. You'll probably want to use
             [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
             sure the lift is valid.
             */
            lift(range, target) {
                lift(this, range, target);
                return this;
            }
            /**
             Join the blocks around the given position. If depth is 2, their
             last and first siblings are also joined, and so on.
             */
            join(pos, depth = 1) {
                join(this, pos, depth);
                return this;
            }
            /**
             Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
             The wrappers are assumed to be valid in this position, and should
             probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
             */
            wrap(range, wrappers) {
                wrap(this, range, wrappers);
                return this;
            }
            /**
             Set the type of all textblocks (partly) between `from` and `to` to
             the given node type with the given attributes.
             */
            setBlockType(from, to = from, type, attrs = null) {
                setBlockType(this, from, to, type, attrs);
                return this;
            }
            /**
             Change the type, attributes, and/or marks of the node at `pos`.
             When `type` isn't given, the existing node type is preserved,
             */
            setNodeMarkup(pos, type, attrs = null, marks = []) {
                setNodeMarkup(this, pos, type, attrs, marks);
                return this;
            }
            /**
             Set a single attribute on a given node to a new value.
             */
            setNodeAttribute(pos, attr, value) {
                this.step(new AttrStep(pos, attr, value));
                return this;
            }
            /**
             Add a mark to the node at position `pos`.
             */
            addNodeMark(pos, mark) {
                this.step(new AddNodeMarkStep(pos, mark));
                return this;
            }
            /**
             Remove a mark (or a mark of the given type) from the node at
             position `pos`.
             */
            removeNodeMark(pos, mark) {
                if (!(mark instanceof prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark)) {
                    let node = this.doc.nodeAt(pos);
                    if (!node)
                        throw new RangeError("No node at position " + pos);
                    mark = mark.isInSet(node.marks);
                    if (!mark)
                        return this;
                }
                this.step(new RemoveNodeMarkStep(pos, mark));
                return this;
            }
            /**
             Split the node at the given position, and optionally, if `depth` is
             greater than one, any number of nodes above that. By default, the
             parts split off will inherit the node type of the original node.
             This can be changed by passing an array of types and attributes to
             use after the split.
             */
            split(pos, depth = 1, typesAfter) {
                split(this, pos, depth, typesAfter);
                return this;
            }
            /**
             Add the given mark to the inline content between `from` and `to`.
             */
            addMark(from, to, mark) {
                addMark(this, from, to, mark);
                return this;
            }
            /**
             Remove marks from inline nodes between `from` and `to`. When
             `mark` is a single mark, remove precisely that mark. When it is
             a mark type, remove all marks of that type. When it is null,
             remove all marks of any type.
             */
            removeMark(from, to, mark) {
                removeMark(this, from, to, mark);
                return this;
            }
            /**
             Removes all marks and nodes from the content of the node at
             `pos` that don't match the given new parent node type. Accepts
             an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
             third argument.
             */
            clearIncompatible(pos, parentType, match) {
                clearIncompatible(this, pos, parentType, match);
                return this;
            }
        }




        /***/ }),

    /***/ "./node_modules/prosemirror-view/dist/index.js":
    /*!*****************************************************!*\
  !*** ./node_modules/prosemirror-view/dist/index.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "Decoration": () => (/* binding */ Decoration),
            /* harmony export */   "DecorationSet": () => (/* binding */ DecorationSet),
            /* harmony export */   "EditorView": () => (/* binding */ EditorView),
            /* harmony export */   "__endComposition": () => (/* binding */ __endComposition),
            /* harmony export */   "__parseFromClipboard": () => (/* binding */ __parseFromClipboard),
            /* harmony export */   "__serializeForClipboard": () => (/* binding */ __serializeForClipboard)
            /* harmony export */ });
        /* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ "./node_modules/prosemirror-state/dist/index.js");
        /* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ "./node_modules/prosemirror-model/dist/index.js");
        /* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-transform */ "./node_modules/prosemirror-transform/dist/index.js");




        const nav = typeof navigator != "undefined" ? navigator : null;
        const doc = typeof document != "undefined" ? document : null;
        const agent = (nav && nav.userAgent) || "";
        const ie_edge = /Edge\/(\d+)/.exec(agent);
        const ie_upto10 = /MSIE \d/.exec(agent);
        const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
        const ie = !!(ie_upto10 || ie_11up || ie_edge);
        const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
        const gecko = !ie && /gecko\/(\d+)/i.test(agent);
        gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
        const _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
        const chrome = !!_chrome;
        const chrome_version = _chrome ? +_chrome[1] : 0;
        const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
// Is true for both iOS and iPadOS for convenience
        const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
        const mac = ios || (nav ? /Mac/.test(nav.platform) : false);
        const android = /Android \d/.test(agent);
        const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
        const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

        const domIndex = function (node) {
            for (var index = 0;; index++) {
                node = node.previousSibling;
                if (!node)
                    return index;
            }
        };
        const parentNode = function (node) {
            let parent = node.assignedSlot || node.parentNode;
            return parent && parent.nodeType == 11 ? parent.host : parent;
        };
        let reusedRange = null;
// Note that this will always return the same range, because DOM range
// objects are every expensive, and keep slowing down subsequent DOM
// updates, for some reason.
        const textRange = function (node, from, to) {
            let range = reusedRange || (reusedRange = document.createRange());
            range.setEnd(node, to == null ? node.nodeValue.length : to);
            range.setStart(node, from || 0);
            return range;
        };
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
        const isEquivalentPosition = function (node, off, targetNode, targetOff) {
            return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
                scanFor(node, off, targetNode, targetOff, 1));
        };
        const atomElements = /^(img|br|input|textarea|hr)$/i;
        function scanFor(node, off, targetNode, targetOff, dir) {
            for (;;) {
                if (node == targetNode && off == targetOff)
                    return true;
                if (off == (dir < 0 ? 0 : nodeSize(node))) {
                    let parent = node.parentNode;
                    if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                        node.contentEditable == "false")
                        return false;
                    off = domIndex(node) + (dir < 0 ? 0 : 1);
                    node = parent;
                }
                else if (node.nodeType == 1) {
                    node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                    if (node.contentEditable == "false")
                        return false;
                    off = dir < 0 ? nodeSize(node) : 0;
                }
                else {
                    return false;
                }
            }
        }
        function nodeSize(node) {
            return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
        }
        function isOnEdge(node, offset, parent) {
            for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
                if (node == parent)
                    return true;
                let index = domIndex(node);
                node = node.parentNode;
                if (!node)
                    return false;
                atStart = atStart && index == 0;
                atEnd = atEnd && index == nodeSize(node);
            }
        }
        function hasBlockDesc(dom) {
            let desc;
            for (let cur = dom; cur; cur = cur.parentNode)
                if (desc = cur.pmViewDesc)
                    break;
            return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
        }
// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
// (isCollapsed inappropriately returns true in shadow dom)
        const selectionCollapsed = function (domSel) {
            let collapsed = domSel.isCollapsed;
            if (collapsed && chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
                collapsed = false;
            return collapsed;
        };
        function keyEvent(keyCode, key) {
            let event = document.createEvent("Event");
            event.initEvent("keydown", true, true);
            event.keyCode = keyCode;
            event.key = event.code = key;
            return event;
        }

        function windowRect(doc) {
            return { left: 0, right: doc.documentElement.clientWidth,
                top: 0, bottom: doc.documentElement.clientHeight };
        }
        function getSide(value, side) {
            return typeof value == "number" ? value : value[side];
        }
        function clientRect(node) {
            let rect = node.getBoundingClientRect();
            // Adjust for elements with style "transform: scale()"
            let scaleX = (rect.width / node.offsetWidth) || 1;
            let scaleY = (rect.height / node.offsetHeight) || 1;
            // Make sure scrollbar width isn't included in the rectangle
            return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
                top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
        }
        function scrollRectIntoView(view, rect, startDOM) {
            let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
            let doc = view.dom.ownerDocument;
            for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
                if (!parent)
                    break;
                if (parent.nodeType != 1)
                    continue;
                let elt = parent;
                let atTop = elt == doc.body;
                let bounding = atTop ? windowRect(doc) : clientRect(elt);
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
                    moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
                else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
                    moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
                if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
                    moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
                else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
                    moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
                if (moveX || moveY) {
                    if (atTop) {
                        doc.defaultView.scrollBy(moveX, moveY);
                    }
                    else {
                        let startX = elt.scrollLeft, startY = elt.scrollTop;
                        if (moveY)
                            elt.scrollTop += moveY;
                        if (moveX)
                            elt.scrollLeft += moveX;
                        let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                        rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
                    }
                }
                if (atTop)
                    break;
            }
        }
// Store the scroll position of the editor's parent nodes, along with
// the top position of an element near the top of the editor, which
// will be used to make sure the visible viewport remains stable even
// when the size of the content above changes.
        function storeScrollPos(view) {
            let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
            let refDOM, refTop;
            for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
                let dom = view.root.elementFromPoint(x, y);
                if (!dom || dom == view.dom || !view.dom.contains(dom))
                    continue;
                let localRect = dom.getBoundingClientRect();
                if (localRect.top >= startY - 20) {
                    refDOM = dom;
                    refTop = localRect.top;
                    break;
                }
            }
            return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
        }
        function scrollStack(dom) {
            let stack = [], doc = dom.ownerDocument;
            for (let cur = dom; cur; cur = parentNode(cur)) {
                stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
                if (dom == doc)
                    break;
            }
            return stack;
        }
// Reset the scroll position of the editor's parent nodes to that what
// it was before, when storeScrollPos was called.
        function resetScrollPos({ refDOM, refTop, stack }) {
            let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
            restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
        }
        function restoreScrollStack(stack, dTop) {
            for (let i = 0; i < stack.length; i++) {
                let { dom, top, left } = stack[i];
                if (dom.scrollTop != top + dTop)
                    dom.scrollTop = top + dTop;
                if (dom.scrollLeft != left)
                    dom.scrollLeft = left;
            }
        }
        let preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
        function focusPreventScroll(dom) {
            if (dom.setActive)
                return dom.setActive(); // in IE
            if (preventScrollSupported)
                return dom.focus(preventScrollSupported);
            let stored = scrollStack(dom);
            dom.focus(preventScrollSupported == null ? {
                get preventScroll() {
                    preventScrollSupported = { preventScroll: true };
                    return true;
                }
            } : undefined);
            if (!preventScrollSupported) {
                preventScrollSupported = false;
                restoreScrollStack(stored, 0);
            }
        }
        function findOffsetInNode(node, coords) {
            let closest, dxClosest = 2e8, coordsClosest, offset = 0;
            let rowBot = coords.top, rowTop = coords.top;
            for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
                let rects;
                if (child.nodeType == 1)
                    rects = child.getClientRects();
                else if (child.nodeType == 3)
                    rects = textRange(child).getClientRects();
                else
                    continue;
                for (let i = 0; i < rects.length; i++) {
                    let rect = rects[i];
                    if (rect.top <= rowBot && rect.bottom >= rowTop) {
                        rowBot = Math.max(rect.bottom, rowBot);
                        rowTop = Math.min(rect.top, rowTop);
                        let dx = rect.left > coords.left ? rect.left - coords.left
                            : rect.right < coords.left ? coords.left - rect.right : 0;
                        if (dx < dxClosest) {
                            closest = child;
                            dxClosest = dx;
                            coordsClosest = dx && closest.nodeType == 3 ? {
                                left: rect.right < coords.left ? rect.right : rect.left,
                                top: coords.top
                            } : coords;
                            if (child.nodeType == 1 && dx)
                                offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                            continue;
                        }
                    }
                    if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                        coords.left >= rect.left && coords.top >= rect.bottom))
                        offset = childIndex + 1;
                }
            }
            if (closest && closest.nodeType == 3)
                return findOffsetInText(closest, coordsClosest);
            if (!closest || (dxClosest && closest.nodeType == 1))
                return { node, offset };
            return findOffsetInNode(closest, coordsClosest);
        }
        function findOffsetInText(node, coords) {
            let len = node.nodeValue.length;
            let range = document.createRange();
            for (let i = 0; i < len; i++) {
                range.setEnd(node, i + 1);
                range.setStart(node, i);
                let rect = singleRect(range, 1);
                if (rect.top == rect.bottom)
                    continue;
                if (inRect(coords, rect))
                    return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
            }
            return { node, offset: 0 };
        }
        function inRect(coords, rect) {
            return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
                coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
        }
        function targetKludge(dom, coords) {
            let parent = dom.parentNode;
            if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
                return parent;
            return dom;
        }
        function posFromElement(view, elt, coords) {
            let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
            if (node.nodeType == 1 && !node.firstChild) {
                let rect = node.getBoundingClientRect();
                bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
            }
            return view.docView.posFromDOM(node, offset, bias);
        }
        function posFromCaret(view, node, offset, coords) {
            // Browser (in caretPosition/RangeFromPoint) will agressively
            // normalize towards nearby inline nodes. Since we are interested in
            // positions between block nodes too, we first walk up the hierarchy
            // of nodes to see if there are block nodes that the coordinates
            // fall outside of. If so, we take the position before/after that
            // block. If not, we call `posFromDOM` on the raw node/offset.
            let outside = -1;
            for (let cur = node;;) {
                if (cur == view.dom)
                    break;
                let desc = view.docView.nearestDesc(cur, true);
                if (!desc)
                    return null;
                if (desc.node.isBlock && desc.parent) {
                    let rect = desc.dom.getBoundingClientRect();
                    if (rect.left > coords.left || rect.top > coords.top)
                        outside = desc.posBefore;
                    else if (rect.right < coords.left || rect.bottom < coords.top)
                        outside = desc.posAfter;
                    else
                        break;
                }
                cur = desc.dom.parentNode;
            }
            return outside > -1 ? outside : view.docView.posFromDOM(node, offset, 1);
        }
        function elementFromPoint(element, coords, box) {
            let len = element.childNodes.length;
            if (len && box.top < box.bottom) {
                for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
                    let child = element.childNodes[i];
                    if (child.nodeType == 1) {
                        let rects = child.getClientRects();
                        for (let j = 0; j < rects.length; j++) {
                            let rect = rects[j];
                            if (inRect(coords, rect))
                                return elementFromPoint(child, coords, rect);
                        }
                    }
                    if ((i = (i + 1) % len) == startI)
                        break;
                }
            }
            return element;
        }
// Given an x,y position on the editor, get the position in the document.
        function posAtCoords(view, coords) {
            let doc = view.dom.ownerDocument, node, offset = 0;
            if (doc.caretPositionFromPoint) {
                try { // Firefox throws for this call in hard-to-predict circumstances (#994)
                    let pos = doc.caretPositionFromPoint(coords.left, coords.top);
                    if (pos)
                        ({ offsetNode: node, offset } = pos);
                }
                catch (_) { }
            }
            if (!node && doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(coords.left, coords.top);
                if (range)
                    ({ startContainer: node, startOffset: offset } = range);
            }
            let elt = (view.root.elementFromPoint ? view.root : doc)
                .elementFromPoint(coords.left, coords.top);
            let pos;
            if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
                let box = view.dom.getBoundingClientRect();
                if (!inRect(coords, box))
                    return null;
                elt = elementFromPoint(view.dom, coords, box);
                if (!elt)
                    return null;
            }
            // Safari's caretRangeFromPoint returns nonsense when on a draggable element
            if (safari) {
                for (let p = elt; node && p; p = parentNode(p))
                    if (p.draggable)
                        node = undefined;
            }
            elt = targetKludge(elt, coords);
            if (node) {
                if (gecko && node.nodeType == 1) {
                    // Firefox will sometimes return offsets into <input> nodes, which
                    // have no actual children, from caretPositionFromPoint (#953)
                    offset = Math.min(offset, node.childNodes.length);
                    // It'll also move the returned position before image nodes,
                    // even if those are behind it.
                    if (offset < node.childNodes.length) {
                        let next = node.childNodes[offset], box;
                        if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                            box.bottom > coords.top)
                            offset++;
                    }
                }
                // Suspiciously specific kludge to work around caret*FromPoint
                // never returning a position at the end of the document
                if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                    coords.top > node.lastChild.getBoundingClientRect().bottom)
                    pos = view.state.doc.content.size;
                    // Ignore positions directly after a BR, since caret*FromPoint
                    // 'round up' positions that would be more accurately placed
                // before the BR node.
                else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
                    pos = posFromCaret(view, node, offset, coords);
            }
            if (pos == null)
                pos = posFromElement(view, elt, coords);
            let desc = view.docView.nearestDesc(elt, true);
            return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
        }
        function singleRect(target, bias) {
            let rects = target.getClientRects();
            return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
        }
        const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
// Given a position in the document model, get a bounding box of the
// character at that position, relative to the window.
        function coordsAtPos(view, pos, side) {
            let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
            let supportEmptyRange = webkit || gecko;
            if (node.nodeType == 3) {
                // These browsers support querying empty text ranges. Prefer that in
                // bidi context or when at the end of a node.
                if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
                    let rect = singleRect(textRange(node, offset, offset), side);
                    // Firefox returns bad results (the position before the space)
                    // when querying a position directly after line-broken
                    // whitespace. Detect this situation and and kludge around it
                    if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                        if (rectBefore.top == rect.top) {
                            let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                            if (rectAfter.top != rect.top)
                                return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                        }
                    }
                    return rect;
                }
                else {
                    let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
                    if (side < 0 && !offset) {
                        to++;
                        takeSide = -1;
                    }
                    else if (side >= 0 && offset == node.nodeValue.length) {
                        from--;
                        takeSide = 1;
                    }
                    else if (side < 0) {
                        from--;
                    }
                    else {
                        to++;
                    }
                    return flattenV(singleRect(textRange(node, from, to), 1), takeSide < 0);
                }
            }
            let $dom = view.state.doc.resolve(pos - (atom || 0));
            // Return a horizontal line in block context
            if (!$dom.parent.inlineContent) {
                if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
                    let before = node.childNodes[offset - 1];
                    if (before.nodeType == 1)
                        return flattenH(before.getBoundingClientRect(), false);
                }
                if (atom == null && offset < nodeSize(node)) {
                    let after = node.childNodes[offset];
                    if (after.nodeType == 1)
                        return flattenH(after.getBoundingClientRect(), true);
                }
                return flattenH(node.getBoundingClientRect(), side >= 0);
            }
            // Inline, not in text node (this is not Bidi-safe)
            if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
                let before = node.childNodes[offset - 1];
                let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
                    // BR nodes tend to only return the rectangle before them.
                    // Only use them if they are the last element in their parent
                    : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
                if (target)
                    return flattenV(singleRect(target, 1), false);
            }
            if (atom == null && offset < nodeSize(node)) {
                let after = node.childNodes[offset];
                while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
                    after = after.nextSibling;
                let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
                    : after.nodeType == 1 ? after : null;
                if (target)
                    return flattenV(singleRect(target, -1), true);
            }
            // All else failed, just try to get a rectangle for the target node
            return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
        }
        function flattenV(rect, left) {
            if (rect.width == 0)
                return rect;
            let x = left ? rect.left : rect.right;
            return { top: rect.top, bottom: rect.bottom, left: x, right: x };
        }
        function flattenH(rect, top) {
            if (rect.height == 0)
                return rect;
            let y = top ? rect.top : rect.bottom;
            return { top: y, bottom: y, left: rect.left, right: rect.right };
        }
        function withFlushedState(view, state, f) {
            let viewState = view.state, active = view.root.activeElement;
            if (viewState != state)
                view.updateState(state);
            if (active != view.dom)
                view.focus();
            try {
                return f();
            }
            finally {
                if (viewState != state)
                    view.updateState(viewState);
                if (active != view.dom && active)
                    active.focus();
            }
        }
// Whether vertical position motion in a given direction
// from a position would leave a text block.
        function endOfTextblockVertical(view, state, dir) {
            let sel = state.selection;
            let $pos = dir == "up" ? sel.$from : sel.$to;
            return withFlushedState(view, state, () => {
                let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
                for (;;) {
                    let nearest = view.docView.nearestDesc(dom, true);
                    if (!nearest)
                        break;
                    if (nearest.node.isBlock) {
                        dom = nearest.dom;
                        break;
                    }
                    dom = nearest.dom.parentNode;
                }
                let coords = coordsAtPos(view, $pos.pos, 1);
                for (let child = dom.firstChild; child; child = child.nextSibling) {
                    let boxes;
                    if (child.nodeType == 1)
                        boxes = child.getClientRects();
                    else if (child.nodeType == 3)
                        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                    else
                        continue;
                    for (let i = 0; i < boxes.length; i++) {
                        let box = boxes[i];
                        if (box.bottom > box.top + 1 &&
                            (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                                : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                            return false;
                    }
                }
                return true;
            });
        }
        const maybeRTL = /[\u0590-\u08ac]/;
        function endOfTextblockHorizontal(view, state, dir) {
            let { $head } = state.selection;
            if (!$head.parent.isTextblock)
                return false;
            let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
            let sel = view.domSelection();
            // If the textblock is all LTR, or the browser doesn't support
            // Selection.modify (Edge), fall back to a primitive approach
            if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
                return dir == "left" || dir == "backward" ? atStart : atEnd;
            return withFlushedState(view, state, () => {
                // This is a huge hack, but appears to be the best we can
                // currently do: use `Selection.modify` to move the selection by
                // one character, and see if that moves the cursor out of the
                // textblock (or doesn't move it at all, when at the start/end of
                // the document).
                let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset;
                let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
                ;
                sel.modify("move", dir, "character");
                let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
                let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||
                    (oldNode == sel.focusNode && oldOff == sel.focusOffset);
                // Restore the previous selection
                sel.removeAllRanges();
                sel.addRange(oldRange);
                if (oldBidiLevel != null)
                    sel.caretBidiLevel = oldBidiLevel;
                return result;
            });
        }
        let cachedState = null;
        let cachedDir = null;
        let cachedResult = false;
        function endOfTextblock(view, state, dir) {
            if (cachedState == state && cachedDir == dir)
                return cachedResult;
            cachedState = state;
            cachedDir = dir;
            return cachedResult = dir == "up" || dir == "down"
                ? endOfTextblockVertical(view, state, dir)
                : endOfTextblockHorizontal(view, state, dir);
        }

// View descriptions are data structures that describe the DOM that is
// used to represent the editor's content. They are used for:
//
// - Incremental redrawing when the document changes
//
// - Figuring out what part of the document a given DOM position
//   corresponds to
//
// - Wiring in custom implementations of the editing interface for a
//   given node
//
// They form a doubly-linked mutable tree, starting at `view.docView`.
        const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
// Superclass for the various kinds of descriptions. Defines their
// basic structure and shared methods.
        class ViewDesc {
            constructor(parent, children, dom,
                        // This is the node that holds the child views. It may be null for
                        // descs that don't have children.
                        contentDOM) {
                this.parent = parent;
                this.children = children;
                this.dom = dom;
                this.contentDOM = contentDOM;
                this.dirty = NOT_DIRTY;
                // An expando property on the DOM node provides a link back to its
                // description.
                dom.pmViewDesc = this;
            }
            // Used to check whether a given description corresponds to a
            // widget/mark/node.
            matchesWidget(widget) { return false; }
            matchesMark(mark) { return false; }
            matchesNode(node, outerDeco, innerDeco) { return false; }
            matchesHack(nodeName) { return false; }
            // When parsing in-editor content (in domchange.js), we allow
            // descriptions to determine the parse rules that should be used to
            // parse them.
            parseRule() { return null; }
            // Used by the editor's event handler to ignore events that come
            // from certain descs.
            stopEvent(event) { return false; }
            // The size of the content represented by this desc.
            get size() {
                let size = 0;
                for (let i = 0; i < this.children.length; i++)
                    size += this.children[i].size;
                return size;
            }
            // For block nodes, this represents the space taken up by their
            // start/end tokens.
            get border() { return 0; }
            destroy() {
                this.parent = undefined;
                if (this.dom.pmViewDesc == this)
                    this.dom.pmViewDesc = undefined;
                for (let i = 0; i < this.children.length; i++)
                    this.children[i].destroy();
            }
            posBeforeChild(child) {
                for (let i = 0, pos = this.posAtStart;; i++) {
                    let cur = this.children[i];
                    if (cur == child)
                        return pos;
                    pos += cur.size;
                }
            }
            get posBefore() {
                return this.parent.posBeforeChild(this);
            }
            get posAtStart() {
                return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
            }
            get posAfter() {
                return this.posBefore + this.size;
            }
            get posAtEnd() {
                return this.posAtStart + this.size - 2 * this.border;
            }
            localPosFromDOM(dom, offset, bias) {
                // If the DOM position is in the content, use the child desc after
                // it to figure out a position.
                if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
                    if (bias < 0) {
                        let domBefore, desc;
                        if (dom == this.contentDOM) {
                            domBefore = dom.childNodes[offset - 1];
                        }
                        else {
                            while (dom.parentNode != this.contentDOM)
                                dom = dom.parentNode;
                            domBefore = dom.previousSibling;
                        }
                        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                            domBefore = domBefore.previousSibling;
                        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
                    }
                    else {
                        let domAfter, desc;
                        if (dom == this.contentDOM) {
                            domAfter = dom.childNodes[offset];
                        }
                        else {
                            while (dom.parentNode != this.contentDOM)
                                dom = dom.parentNode;
                            domAfter = dom.nextSibling;
                        }
                        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                            domAfter = domAfter.nextSibling;
                        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
                    }
                }
                // Otherwise, use various heuristics, falling back on the bias
                // parameter, to determine whether to return the position at the
                // start or at the end of this view desc.
                let atEnd;
                if (dom == this.dom && this.contentDOM) {
                    atEnd = offset > domIndex(this.contentDOM);
                }
                else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
                    atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
                }
                else if (this.dom.firstChild) {
                    if (offset == 0)
                        for (let search = dom;; search = search.parentNode) {
                            if (search == this.dom) {
                                atEnd = false;
                                break;
                            }
                            if (search.previousSibling)
                                break;
                        }
                    if (atEnd == null && offset == dom.childNodes.length)
                        for (let search = dom;; search = search.parentNode) {
                            if (search == this.dom) {
                                atEnd = true;
                                break;
                            }
                            if (search.nextSibling)
                                break;
                        }
                }
                return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
            }
            // Scan up the dom finding the first desc that is a descendant of
            // this one.
            nearestDesc(dom, onlyNodes = false) {
                for (let first = true, cur = dom; cur; cur = cur.parentNode) {
                    let desc = this.getDesc(cur), nodeDOM;
                    if (desc && (!onlyNodes || desc.node)) {
                        // If dom is outside of this desc's nodeDOM, don't count it.
                        if (first && (nodeDOM = desc.nodeDOM) &&
                            !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                            first = false;
                        else
                            return desc;
                    }
                }
            }
            getDesc(dom) {
                let desc = dom.pmViewDesc;
                for (let cur = desc; cur; cur = cur.parent)
                    if (cur == this)
                        return desc;
            }
            posFromDOM(dom, offset, bias) {
                for (let scan = dom; scan; scan = scan.parentNode) {
                    let desc = this.getDesc(scan);
                    if (desc)
                        return desc.localPosFromDOM(dom, offset, bias);
                }
                return -1;
            }
            // Find the desc for the node after the given pos, if any. (When a
            // parent node overrode rendering, there might not be one.)
            descAt(pos) {
                for (let i = 0, offset = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (offset == pos && end != offset) {
                        while (!child.border && child.children.length)
                            child = child.children[0];
                        return child;
                    }
                    if (pos < end)
                        return child.descAt(pos - offset - child.border);
                    offset = end;
                }
            }
            domFromPos(pos, side) {
                if (!this.contentDOM)
                    return { node: this.dom, offset: 0, atom: pos + 1 };
                // First find the position in the child array
                let i = 0, offset = 0;
                for (let curPos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = curPos + child.size;
                    if (end > pos || child instanceof TrailingHackViewDesc) {
                        offset = pos - curPos;
                        break;
                    }
                    curPos = end;
                }
                // If this points into the middle of a child, call through
                if (offset)
                    return this.children[i].domFromPos(offset - this.children[i].border, side);
                // Go back if there were any zero-length widgets with side >= 0 before this point
                for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
                // Scan towards the first useable node
                if (side <= 0) {
                    let prev, enter = true;
                    for (;; i--, enter = false) {
                        prev = i ? this.children[i - 1] : null;
                        if (!prev || prev.dom.parentNode == this.contentDOM)
                            break;
                    }
                    if (prev && side && enter && !prev.border && !prev.domAtom)
                        return prev.domFromPos(prev.size, side);
                    return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
                }
                else {
                    let next, enter = true;
                    for (;; i++, enter = false) {
                        next = i < this.children.length ? this.children[i] : null;
                        if (!next || next.dom.parentNode == this.contentDOM)
                            break;
                    }
                    if (next && enter && !next.border && !next.domAtom)
                        return next.domFromPos(0, side);
                    return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
                }
            }
            // Used to find a DOM range in a single parent for a given changed
            // range.
            parseRange(from, to, base = 0) {
                if (this.children.length == 0)
                    return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
                let fromOffset = -1, toOffset = -1;
                for (let offset = base, i = 0;; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (fromOffset == -1 && from <= end) {
                        let childBase = offset + child.border;
                        // FIXME maybe descend mark views to parse a narrower range?
                        if (from >= childBase && to <= end - child.border && child.node &&
                            child.contentDOM && this.contentDOM.contains(child.contentDOM))
                            return child.parseRange(from, to, childBase);
                        from = offset;
                        for (let j = i; j > 0; j--) {
                            let prev = this.children[j - 1];
                            if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                                fromOffset = domIndex(prev.dom) + 1;
                                break;
                            }
                            from -= prev.size;
                        }
                        if (fromOffset == -1)
                            fromOffset = 0;
                    }
                    if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                        to = end;
                        for (let j = i + 1; j < this.children.length; j++) {
                            let next = this.children[j];
                            if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                                toOffset = domIndex(next.dom);
                                break;
                            }
                            to += next.size;
                        }
                        if (toOffset == -1)
                            toOffset = this.contentDOM.childNodes.length;
                        break;
                    }
                    offset = end;
                }
                return { node: this.contentDOM, from, to, fromOffset, toOffset };
            }
            emptyChildAt(side) {
                if (this.border || !this.contentDOM || !this.children.length)
                    return false;
                let child = this.children[side < 0 ? 0 : this.children.length - 1];
                return child.size == 0 || child.emptyChildAt(side);
            }
            domAfterPos(pos) {
                let { node, offset } = this.domFromPos(pos, 0);
                if (node.nodeType != 1 || offset == node.childNodes.length)
                    throw new RangeError("No node after pos " + pos);
                return node.childNodes[offset];
            }
            // View descs are responsible for setting any selection that falls
            // entirely inside of them, so that custom implementations can do
            // custom things with the selection. Note that this falls apart when
            // a selection starts in such a node and ends in another, in which
            // case we just use whatever domFromPos produces as a best effort.
            setSelection(anchor, head, root, force = false) {
                // If the selection falls entirely in a child, give it to that child
                let from = Math.min(anchor, head), to = Math.max(anchor, head);
                for (let i = 0, offset = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (from > offset && to < end)
                        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
                    offset = end;
                }
                let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
                let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
                let domSel = root.getSelection();
                let brKludge = false;
                // On Firefox, using Selection.collapse to put the cursor after a
                // BR node for some reason doesn't always work (#1073). On Safari,
                // the cursor sometimes inexplicable visually lags behind its
                // reported position in such situations (#1092).
                if ((gecko || safari) && anchor == head) {
                    let { node, offset } = anchorDOM;
                    if (node.nodeType == 3) {
                        brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                        // Issue #1128
                        if (brKludge && offset == node.nodeValue.length) {
                            for (let scan = node, after; scan; scan = scan.parentNode) {
                                if (after = scan.nextSibling) {
                                    if (after.nodeName == "BR")
                                        anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                                    break;
                                }
                                let desc = scan.pmViewDesc;
                                if (desc && desc.node && desc.node.isBlock)
                                    break;
                            }
                        }
                    }
                    else {
                        let prev = node.childNodes[offset - 1];
                        brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
                    }
                }
                // Firefox can act strangely when the selection is in front of an
                // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
                if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
                    let after = domSel.focusNode.childNodes[domSel.focusOffset];
                    if (after && after.contentEditable == "false")
                        force = true;
                }
                if (!(force || brKludge && safari) &&
                    isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
                    isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
                    return;
                // Selection.extend can be used to create an 'inverted' selection
                // (one where the focus is before the anchor), but not all
                // browsers support it yet.
                let domSelExtended = false;
                if ((domSel.extend || anchor == head) && !brKludge) {
                    domSel.collapse(anchorDOM.node, anchorDOM.offset);
                    try {
                        if (anchor != head)
                            domSel.extend(headDOM.node, headDOM.offset);
                        domSelExtended = true;
                    }
                    catch (err) {
                        // In some cases with Chrome the selection is empty after calling
                        // collapse, even when it should be valid. This appears to be a bug, but
                        // it is difficult to isolate. If this happens fallback to the old path
                        // without using extend.
                        if (!(err instanceof DOMException))
                            throw err;
                        // declare global: DOMException
                    }
                }
                if (!domSelExtended) {
                    if (anchor > head) {
                        let tmp = anchorDOM;
                        anchorDOM = headDOM;
                        headDOM = tmp;
                    }
                    let range = document.createRange();
                    range.setEnd(headDOM.node, headDOM.offset);
                    range.setStart(anchorDOM.node, anchorDOM.offset);
                    domSel.removeAllRanges();
                    domSel.addRange(range);
                }
            }
            ignoreMutation(mutation) {
                return !this.contentDOM && mutation.type != "selection";
            }
            get contentLost() {
                return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
            }
            // Remove a subtree of the element tree that has been touched
            // by a DOM change, so that the next update will redraw it.
            markDirty(from, to) {
                for (let offset = 0, i = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = offset + child.size;
                    if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                        let startInside = offset + child.border, endInside = end - child.border;
                        if (from >= startInside && to <= endInside) {
                            this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                            if (from == startInside && to == endInside &&
                                (child.contentLost || child.dom.parentNode != this.contentDOM))
                                child.dirty = NODE_DIRTY;
                            else
                                child.markDirty(from - startInside, to - startInside);
                            return;
                        }
                        else {
                            child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                                ? CONTENT_DIRTY : NODE_DIRTY;
                        }
                    }
                    offset = end;
                }
                this.dirty = CONTENT_DIRTY;
            }
            markParentsDirty() {
                let level = 1;
                for (let node = this.parent; node; node = node.parent, level++) {
                    let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
                    if (node.dirty < dirty)
                        node.dirty = dirty;
                }
            }
            get domAtom() { return false; }
            get ignoreForCoords() { return false; }
        }
// A widget desc represents a widget decoration, which is a DOM node
// drawn between the document nodes.
        class WidgetViewDesc extends ViewDesc {
            constructor(parent, widget, view, pos) {
                let self, dom = widget.type.toDOM;
                if (typeof dom == "function")
                    dom = dom(view, () => {
                        if (!self)
                            return pos;
                        if (self.parent)
                            return self.parent.posBeforeChild(self);
                    });
                if (!widget.type.spec.raw) {
                    if (dom.nodeType != 1) {
                        let wrap = document.createElement("span");
                        wrap.appendChild(dom);
                        dom = wrap;
                    }
                    dom.contentEditable = "false";
                    dom.classList.add("ProseMirror-widget");
                }
                super(parent, [], dom, null);
                this.widget = widget;
                this.widget = widget;
                self = this;
            }
            matchesWidget(widget) {
                return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
            }
            parseRule() { return { ignore: true }; }
            stopEvent(event) {
                let stop = this.widget.spec.stopEvent;
                return stop ? stop(event) : false;
            }
            ignoreMutation(mutation) {
                return mutation.type != "selection" || this.widget.spec.ignoreSelection;
            }
            destroy() {
                this.widget.type.destroy(this.dom);
                super.destroy();
            }
            get domAtom() { return true; }
            get side() { return this.widget.type.side; }
        }
        class CompositionViewDesc extends ViewDesc {
            constructor(parent, dom, textDOM, text) {
                super(parent, [], dom, null);
                this.textDOM = textDOM;
                this.text = text;
            }
            get size() { return this.text.length; }
            localPosFromDOM(dom, offset) {
                if (dom != this.textDOM)
                    return this.posAtStart + (offset ? this.size : 0);
                return this.posAtStart + offset;
            }
            domFromPos(pos) {
                return { node: this.textDOM, offset: pos };
            }
            ignoreMutation(mut) {
                return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
            }
        }
// A mark desc represents a mark. May have multiple children,
// depending on how the mark is split. Note that marks are drawn using
// a fixed nesting order, for simplicity and predictability, so in
// some cases they will be split more often than would appear
// necessary.
        class MarkViewDesc extends ViewDesc {
            constructor(parent, mark, dom, contentDOM) {
                super(parent, [], dom, contentDOM);
                this.mark = mark;
            }
            static create(parent, mark, inline, view) {
                let custom = view.nodeViews[mark.type.name];
                let spec = custom && custom(mark, view, inline);
                if (!spec || !spec.dom)
                    spec = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
                return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
            }
            parseRule() {
                if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
                    return null;
                return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || undefined };
            }
            matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
            markDirty(from, to) {
                super.markDirty(from, to);
                // Move dirty info to nearest node view
                if (this.dirty != NOT_DIRTY) {
                    let parent = this.parent;
                    while (!parent.node)
                        parent = parent.parent;
                    if (parent.dirty < this.dirty)
                        parent.dirty = this.dirty;
                    this.dirty = NOT_DIRTY;
                }
            }
            slice(from, to, view) {
                let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
                let nodes = this.children, size = this.size;
                if (to < size)
                    nodes = replaceNodes(nodes, to, size, view);
                if (from > 0)
                    nodes = replaceNodes(nodes, 0, from, view);
                for (let i = 0; i < nodes.length; i++)
                    nodes[i].parent = copy;
                copy.children = nodes;
                return copy;
            }
        }
// Node view descs are the main, most common type of view desc, and
// correspond to an actual node in the document. Unlike mark descs,
// they populate their child array themselves.
        class NodeViewDesc extends ViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
                super(parent, [], dom, contentDOM);
                this.node = node;
                this.outerDeco = outerDeco;
                this.innerDeco = innerDeco;
                this.nodeDOM = nodeDOM;
                if (contentDOM)
                    this.updateChildren(view, pos);
            }
            // By default, a node is rendered using the `toDOM` method from the
            // node type spec. But client code can use the `nodeViews` spec to
            // supply a custom node view, which can influence various aspects of
            // the way the node works.
            //
            // (Using subclassing for this was intentionally decided against,
            // since it'd require exposing a whole slew of finicky
            // implementation details to the user code that they probably will
            // never need.)
            static create(parent, node, outerDeco, innerDeco, view, pos) {
                let custom = view.nodeViews[node.type.name], descObj;
                let spec = custom && custom(node, view, () => {
                    // (This is a function that allows the custom view to find its
                    // own position)
                    if (!descObj)
                        return pos;
                    if (descObj.parent)
                        return descObj.parent.posBeforeChild(descObj);
                }, outerDeco, innerDeco);
                let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
                if (node.isText) {
                    if (!dom)
                        dom = document.createTextNode(node.text);
                    else if (dom.nodeType != 3)
                        throw new RangeError("Text must be rendered as a DOM text node");
                }
                else if (!dom) {
                    ({ dom, contentDOM } = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
                }
                if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                    if (!dom.hasAttribute("contenteditable"))
                        dom.contentEditable = "false";
                    if (node.type.spec.draggable)
                        dom.draggable = true;
                }
                let nodeDOM = dom;
                dom = applyOuterDeco(dom, outerDeco, node);
                if (spec)
                    return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
                else if (node.isText)
                    return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
                else
                    return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
            }
            parseRule() {
                // Experimental kludge to allow opt-in re-parsing of nodes
                if (this.node.type.spec.reparseInView)
                    return null;
                // FIXME the assumption that this can always return the current
                // attrs means that if the user somehow manages to change the
                // attrs in the dom, that won't be picked up. Not entirely sure
                // whether this is a problem
                let rule = { node: this.node.type.name, attrs: this.node.attrs };
                if (this.node.type.whitespace == "pre")
                    rule.preserveWhitespace = "full";
                if (!this.contentDOM) {
                    rule.getContent = () => this.node.content;
                }
                else if (!this.contentLost) {
                    rule.contentElement = this.contentDOM;
                }
                else {
                    // Chrome likes to randomly recreate parent nodes when
                    // backspacing things. When that happens, this tries to find the
                    // new parent.
                    for (let i = this.children.length - 1; i >= 0; i--) {
                        let child = this.children[i];
                        if (this.dom.contains(child.dom.parentNode)) {
                            rule.contentElement = child.dom.parentNode;
                            break;
                        }
                    }
                    if (!rule.contentElement)
                        rule.getContent = () => prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;
                }
                return rule;
            }
            matchesNode(node, outerDeco, innerDeco) {
                return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                    sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
            }
            get size() { return this.node.nodeSize; }
            get border() { return this.node.isLeaf ? 0 : 1; }
            // Syncs `this.children` to match `this.node.content` and the local
            // decorations, possibly introducing nesting for marks. Then, in a
            // separate step, syncs the DOM inside `this.contentDOM` to
            // `this.children`.
            updateChildren(view, pos) {
                let inline = this.node.inlineContent, off = pos;
                let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
                let localComposition = composition && composition.pos > -1 ? composition : null;
                let compositionInChild = composition && composition.pos < 0;
                let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
                iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
                    if (widget.spec.marks)
                        updater.syncToMarks(widget.spec.marks, inline, view);
                    else if (widget.type.side >= 0 && !insideNode)
                        updater.syncToMarks(i == this.node.childCount ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark.none : this.node.child(i).marks, inline, view);
                    // If the next node is a desc matching this widget, reuse it,
                    // otherwise insert the widget as a new view desc.
                    updater.placeWidget(widget, view, off);
                }, (child, outerDeco, innerDeco, i) => {
                    // Make sure the wrapping mark descs match the node's marks.
                    updater.syncToMarks(child.marks, inline, view);
                    // Try several strategies for drawing this node
                    let compIndex;
                    if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
                    else if (compositionInChild && view.state.selection.from > off &&
                        view.state.selection.to < off + child.nodeSize &&
                        (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                        updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
                    else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ;
                    else {
                        // Add it as a new view
                        updater.addNode(child, outerDeco, innerDeco, view, off);
                    }
                    off += child.nodeSize;
                });
                // Drop all remaining descs after the current position.
                updater.syncToMarks([], inline, view);
                if (this.node.isTextblock)
                    updater.addTextblockHacks();
                updater.destroyRest();
                // Sync the DOM if anything changed
                if (updater.changed || this.dirty == CONTENT_DIRTY) {
                    // May have to protect focused DOM from being changed if a composition is active
                    if (localComposition)
                        this.protectLocalComposition(view, localComposition);
                    renderDescs(this.contentDOM, this.children, view);
                    if (ios)
                        iosHacks(this.dom);
                }
            }
            localCompositionInfo(view, pos) {
                // Only do something if both the selection and a focused text node
                // are inside of this node
                let { from, to } = view.state.selection;
                if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || from < pos || to > pos + this.node.content.size)
                    return null;
                let sel = view.domSelection();
                let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
                if (!textNode || !this.dom.contains(textNode.parentNode))
                    return null;
                if (this.node.inlineContent) {
                    // Find the text in the focused node in the node, stop if it's not
                    // there (may have been modified through other means, in which
                    // case it should overwritten)
                    let text = textNode.nodeValue;
                    let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
                    return textPos < 0 ? null : { node: textNode, pos: textPos, text };
                }
                else {
                    return { node: textNode, pos: -1, text: "" };
                }
            }
            protectLocalComposition(view, { node, pos, text }) {
                // The node is already part of a local view desc, leave it there
                if (this.getDesc(node))
                    return;
                // Create a composition view for the orphaned nodes
                let topNode = node;
                for (;; topNode = topNode.parentNode) {
                    if (topNode.parentNode == this.contentDOM)
                        break;
                    while (topNode.previousSibling)
                        topNode.parentNode.removeChild(topNode.previousSibling);
                    while (topNode.nextSibling)
                        topNode.parentNode.removeChild(topNode.nextSibling);
                    if (topNode.pmViewDesc)
                        topNode.pmViewDesc = undefined;
                }
                let desc = new CompositionViewDesc(this, topNode, node, text);
                view.input.compositionNodes.push(desc);
                // Patch up this.children to contain the composition view
                this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
            }
            // If this desc must be updated to match the given node decoration,
            // do so and return true.
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY ||
                    !node.sameMarkup(this.node))
                    return false;
                this.updateInner(node, outerDeco, innerDeco, view);
                return true;
            }
            updateInner(node, outerDeco, innerDeco, view) {
                this.updateOuterDeco(outerDeco);
                this.node = node;
                this.innerDeco = innerDeco;
                if (this.contentDOM)
                    this.updateChildren(view, this.posAtStart);
                this.dirty = NOT_DIRTY;
            }
            updateOuterDeco(outerDeco) {
                if (sameOuterDeco(outerDeco, this.outerDeco))
                    return;
                let needsWrap = this.nodeDOM.nodeType != 1;
                let oldDOM = this.dom;
                this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
                if (this.dom != oldDOM) {
                    oldDOM.pmViewDesc = undefined;
                    this.dom.pmViewDesc = this;
                }
                this.outerDeco = outerDeco;
            }
            // Mark this node as being the selected node.
            selectNode() {
                if (this.nodeDOM.nodeType == 1)
                    this.nodeDOM.classList.add("ProseMirror-selectednode");
                if (this.contentDOM || !this.node.type.spec.draggable)
                    this.dom.draggable = true;
            }
            // Remove selected node marking from this node.
            deselectNode() {
                if (this.nodeDOM.nodeType == 1)
                    this.nodeDOM.classList.remove("ProseMirror-selectednode");
                if (this.contentDOM || !this.node.type.spec.draggable)
                    this.dom.removeAttribute("draggable");
            }
            get domAtom() { return this.node.isAtom; }
        }
// Create a view desc for the top-level document node, to be exported
// and used by the view class.
        function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
            applyOuterDeco(dom, outerDeco, doc);
            return new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
        }
        class TextViewDesc extends NodeViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
                super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
            }
            parseRule() {
                let skip = this.nodeDOM.parentNode;
                while (skip && skip != this.dom && !skip.pmIsDeco)
                    skip = skip.parentNode;
                return { skip: (skip || true) };
            }
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                    !node.sameMarkup(this.node))
                    return false;
                this.updateOuterDeco(outerDeco);
                if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                    this.nodeDOM.nodeValue = node.text;
                    if (view.trackWrites == this.nodeDOM)
                        view.trackWrites = null;
                }
                this.node = node;
                this.dirty = NOT_DIRTY;
                return true;
            }
            inParent() {
                let parentDOM = this.parent.contentDOM;
                for (let n = this.nodeDOM; n; n = n.parentNode)
                    if (n == parentDOM)
                        return true;
                return false;
            }
            domFromPos(pos) {
                return { node: this.nodeDOM, offset: pos };
            }
            localPosFromDOM(dom, offset, bias) {
                if (dom == this.nodeDOM)
                    return this.posAtStart + Math.min(offset, this.node.text.length);
                return super.localPosFromDOM(dom, offset, bias);
            }
            ignoreMutation(mutation) {
                return mutation.type != "characterData" && mutation.type != "selection";
            }
            slice(from, to, view) {
                let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
                return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
            }
            markDirty(from, to) {
                super.markDirty(from, to);
                if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
                    this.dirty = NODE_DIRTY;
            }
            get domAtom() { return false; }
        }
// A dummy desc used to tag trailing BR or IMG nodes created to work
// around contentEditable terribleness.
        class TrailingHackViewDesc extends ViewDesc {
            parseRule() { return { ignore: true }; }
            matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
            get domAtom() { return true; }
            get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
        }
// A separate subclass is used for customized node views, so that the
// extra checks only have to be made for nodes that are actually
// customized.
        class CustomNodeViewDesc extends NodeViewDesc {
            constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
                super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
                this.spec = spec;
            }
            // A custom `update` method gets to decide whether the update goes
            // through. If it does, and there's a `contentDOM` node, our logic
            // updates the children.
            update(node, outerDeco, innerDeco, view) {
                if (this.dirty == NODE_DIRTY)
                    return false;
                if (this.spec.update) {
                    let result = this.spec.update(node, outerDeco, innerDeco);
                    if (result)
                        this.updateInner(node, outerDeco, innerDeco, view);
                    return result;
                }
                else if (!this.contentDOM && !node.isLeaf) {
                    return false;
                }
                else {
                    return super.update(node, outerDeco, innerDeco, view);
                }
            }
            selectNode() {
                this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
            }
            deselectNode() {
                this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
            }
            setSelection(anchor, head, root, force) {
                this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                    : super.setSelection(anchor, head, root, force);
            }
            destroy() {
                if (this.spec.destroy)
                    this.spec.destroy();
                super.destroy();
            }
            stopEvent(event) {
                return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
            }
            ignoreMutation(mutation) {
                return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
            }
        }
// Sync the content of the given DOM node with the nodes associated
// with the given array of view descs, recursing into mark descs
// because this should sync the subtree for a whole node at a time.
        function renderDescs(parentDOM, descs, view) {
            let dom = parentDOM.firstChild, written = false;
            for (let i = 0; i < descs.length; i++) {
                let desc = descs[i], childDOM = desc.dom;
                if (childDOM.parentNode == parentDOM) {
                    while (childDOM != dom) {
                        dom = rm(dom);
                        written = true;
                    }
                    dom = dom.nextSibling;
                }
                else {
                    written = true;
                    parentDOM.insertBefore(childDOM, dom);
                }
                if (desc instanceof MarkViewDesc) {
                    let pos = dom ? dom.previousSibling : parentDOM.lastChild;
                    renderDescs(desc.contentDOM, desc.children, view);
                    dom = pos ? pos.nextSibling : parentDOM.firstChild;
                }
            }
            while (dom) {
                dom = rm(dom);
                written = true;
            }
            if (written && view.trackWrites == parentDOM)
                view.trackWrites = null;
        }
        const OuterDecoLevel = function (nodeName) {
            if (nodeName)
                this.nodeName = nodeName;
        };
        OuterDecoLevel.prototype = Object.create(null);
        const noDeco = [new OuterDecoLevel];
        function computeOuterDeco(outerDeco, node, needsWrap) {
            if (outerDeco.length == 0)
                return noDeco;
            let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
            for (let i = 0; i < outerDeco.length; i++) {
                let attrs = outerDeco[i].type.attrs;
                if (!attrs)
                    continue;
                if (attrs.nodeName)
                    result.push(top = new OuterDecoLevel(attrs.nodeName));
                for (let name in attrs) {
                    let val = attrs[name];
                    if (val == null)
                        continue;
                    if (needsWrap && result.length == 1)
                        result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                    if (name == "class")
                        top.class = (top.class ? top.class + " " : "") + val;
                    else if (name == "style")
                        top.style = (top.style ? top.style + ";" : "") + val;
                    else if (name != "nodeName")
                        top[name] = val;
                }
            }
            return result;
        }
        function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
            // Shortcut for trivial case
            if (prevComputed == noDeco && curComputed == noDeco)
                return nodeDOM;
            let curDOM = nodeDOM;
            for (let i = 0; i < curComputed.length; i++) {
                let deco = curComputed[i], prev = prevComputed[i];
                if (i) {
                    let parent;
                    if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                        (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                        curDOM = parent;
                    }
                    else {
                        parent = document.createElement(deco.nodeName);
                        parent.pmIsDeco = true;
                        parent.appendChild(curDOM);
                        prev = noDeco[0];
                        curDOM = parent;
                    }
                }
                patchAttributes(curDOM, prev || noDeco[0], deco);
            }
            return curDOM;
        }
        function patchAttributes(dom, prev, cur) {
            for (let name in prev)
                if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
                    dom.removeAttribute(name);
            for (let name in cur)
                if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
                    dom.setAttribute(name, cur[name]);
            if (prev.class != cur.class) {
                let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
                let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
                for (let i = 0; i < prevList.length; i++)
                    if (curList.indexOf(prevList[i]) == -1)
                        dom.classList.remove(prevList[i]);
                for (let i = 0; i < curList.length; i++)
                    if (prevList.indexOf(curList[i]) == -1)
                        dom.classList.add(curList[i]);
                if (dom.classList.length == 0)
                    dom.removeAttribute("class");
            }
            if (prev.style != cur.style) {
                if (prev.style) {
                    let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                    while (m = prop.exec(prev.style))
                        dom.style.removeProperty(m[1]);
                }
                if (cur.style)
                    dom.style.cssText += cur.style;
            }
        }
        function applyOuterDeco(dom, deco, node) {
            return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
        }
        function sameOuterDeco(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!a[i].type.eq(b[i].type))
                    return false;
            return true;
        }
// Remove a DOM node and return its next sibling.
        function rm(dom) {
            let next = dom.nextSibling;
            dom.parentNode.removeChild(dom);
            return next;
        }
// Helper class for incrementally updating a tree of mark descs and
// the widget and node descs inside of them.
        class ViewTreeUpdater {
            constructor(top, lock, view) {
                this.lock = lock;
                this.view = view;
                // Index into `this.top`'s child array, represents the current
                // update position.
                this.index = 0;
                // When entering a mark, the current top and index are pushed
                // onto this.
                this.stack = [];
                // Tracks whether anything was changed
                this.changed = false;
                this.top = top;
                this.preMatch = preMatch(top.node.content, top);
            }
            // Destroy and remove the children between the given indices in
            // `this.top`.
            destroyBetween(start, end) {
                if (start == end)
                    return;
                for (let i = start; i < end; i++)
                    this.top.children[i].destroy();
                this.top.children.splice(start, end - start);
                this.changed = true;
            }
            // Destroy all remaining children in `this.top`.
            destroyRest() {
                this.destroyBetween(this.index, this.top.children.length);
            }
            // Sync the current stack of mark descs with the given array of
            // marks, reusing existing mark descs when possible.
            syncToMarks(marks, inline, view) {
                let keep = 0, depth = this.stack.length >> 1;
                let maxKeep = Math.min(depth, marks.length);
                while (keep < maxKeep &&
                (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                    .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
                    keep++;
                while (keep < depth) {
                    this.destroyRest();
                    this.top.dirty = NOT_DIRTY;
                    this.index = this.stack.pop();
                    this.top = this.stack.pop();
                    depth--;
                }
                while (depth < marks.length) {
                    this.stack.push(this.top, this.index + 1);
                    let found = -1;
                    for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                        if (this.top.children[i].matchesMark(marks[depth])) {
                            found = i;
                            break;
                        }
                    }
                    if (found > -1) {
                        if (found > this.index) {
                            this.changed = true;
                            this.destroyBetween(this.index, found);
                        }
                        this.top = this.top.children[this.index];
                    }
                    else {
                        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                        this.top.children.splice(this.index, 0, markDesc);
                        this.top = markDesc;
                        this.changed = true;
                    }
                    this.index = 0;
                    depth++;
                }
            }
            // Try to find a node desc matching the given data. Skip over it and
            // return true when successful.
            findNodeMatch(node, outerDeco, innerDeco, index) {
                let found = -1, targetDesc;
                if (index >= this.preMatch.index &&
                    (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
                    targetDesc.matchesNode(node, outerDeco, innerDeco)) {
                    found = this.top.children.indexOf(targetDesc, this.index);
                }
                else {
                    for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                        let child = this.top.children[i];
                        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                            found = i;
                            break;
                        }
                    }
                }
                if (found < 0)
                    return false;
                this.destroyBetween(this.index, found);
                this.index++;
                return true;
            }
            updateNodeAt(node, outerDeco, innerDeco, index, view) {
                let child = this.top.children[index];
                if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
                    child.dirty = CONTENT_DIRTY;
                if (!child.update(node, outerDeco, innerDeco, view))
                    return false;
                this.destroyBetween(this.index, index);
                this.index++;
                return true;
            }
            findIndexWithChild(domNode) {
                for (;;) {
                    let parent = domNode.parentNode;
                    if (!parent)
                        return -1;
                    if (parent == this.top.contentDOM) {
                        let desc = domNode.pmViewDesc;
                        if (desc)
                            for (let i = this.index; i < this.top.children.length; i++) {
                                if (this.top.children[i] == desc)
                                    return i;
                            }
                        return -1;
                    }
                    domNode = parent;
                }
            }
            // Try to update the next node, if any, to the given data. Checks
            // pre-matches to avoid overwriting nodes that could still be used.
            updateNextNode(node, outerDeco, innerDeco, view, index) {
                for (let i = this.index; i < this.top.children.length; i++) {
                    let next = this.top.children[i];
                    if (next instanceof NodeViewDesc) {
                        let preMatch = this.preMatch.matched.get(next);
                        if (preMatch != null && preMatch != index)
                            return false;
                        let nextDOM = next.dom;
                        // Can't update if nextDOM is or contains this.lock, except if
                        // it's a text node whose content already matches the new text
                        // and whose decorations match the new ones.
                        let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&
                            !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                                next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                        if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                            this.destroyBetween(this.index, i);
                            if (next.dom != nextDOM)
                                this.changed = true;
                            this.index++;
                            return true;
                        }
                        break;
                    }
                }
                return false;
            }
            // Insert the node as a newly created node desc.
            addNode(node, outerDeco, innerDeco, view, pos) {
                this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
                this.changed = true;
            }
            placeWidget(widget, view, pos) {
                let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
                if (next && next.matchesWidget(widget) &&
                    (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
                    this.index++;
                }
                else {
                    let desc = new WidgetViewDesc(this.top, widget, view, pos);
                    this.top.children.splice(this.index++, 0, desc);
                    this.changed = true;
                }
            }
            // Make sure a textblock looks and behaves correctly in
            // contentEditable.
            addTextblockHacks() {
                let lastChild = this.top.children[this.index - 1], parent = this.top;
                while (lastChild instanceof MarkViewDesc) {
                    parent = lastChild;
                    lastChild = parent.children[parent.children.length - 1];
                }
                if (!lastChild || // Empty textblock
                    !(lastChild instanceof TextViewDesc) ||
                    /\n$/.test(lastChild.node.text) ||
                    (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
                    // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
                    if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                        this.addHackNode("IMG", parent);
                    this.addHackNode("BR", this.top);
                }
            }
            addHackNode(nodeName, parent) {
                if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
                    this.index++;
                }
                else {
                    let dom = document.createElement(nodeName);
                    if (nodeName == "IMG") {
                        dom.className = "ProseMirror-separator";
                        dom.alt = "";
                    }
                    if (nodeName == "BR")
                        dom.className = "ProseMirror-trailingBreak";
                    let hack = new TrailingHackViewDesc(this.top, [], dom, null);
                    if (parent != this.top)
                        parent.children.push(hack);
                    else
                        parent.children.splice(this.index++, 0, hack);
                    this.changed = true;
                }
            }
        }
// Iterate from the end of the fragment and array of descs to find
// directly matching ones, in order to avoid overeagerly reusing those
// for other nodes. Returns the fragment index of the first node that
// is part of the sequence of matched nodes at the end of the
// fragment.
        function preMatch(frag, parentDesc) {
            let curDesc = parentDesc, descI = curDesc.children.length;
            let fI = frag.childCount, matched = new Map, matches = [];
            outer: while (fI > 0) {
                let desc;
                for (;;) {
                    if (descI) {
                        let next = curDesc.children[descI - 1];
                        if (next instanceof MarkViewDesc) {
                            curDesc = next;
                            descI = next.children.length;
                        }
                        else {
                            desc = next;
                            descI--;
                            break;
                        }
                    }
                    else if (curDesc == parentDesc) {
                        break outer;
                    }
                    else {
                        // FIXME
                        descI = curDesc.parent.children.indexOf(curDesc);
                        curDesc = curDesc.parent;
                    }
                }
                let node = desc.node;
                if (!node)
                    continue;
                if (node != frag.child(fI - 1))
                    break;
                --fI;
                matched.set(desc, fI);
                matches.push(desc);
            }
            return { index: fI, matched, matches: matches.reverse() };
        }
        function compareSide(a, b) {
            return a.type.side - b.type.side;
        }
// This function abstracts iterating over the nodes and decorations in
// a fragment. Calls `onNode` for each node, with its local and child
// decorations. Splits text nodes when there is a decoration starting
// or ending inside of them. Calls `onWidget` for each widget.
        function iterDeco(parent, deco, onWidget, onNode) {
            let locals = deco.locals(parent), offset = 0;
            // Simple, cheap variant for when there are no local decorations
            if (locals.length == 0) {
                for (let i = 0; i < parent.childCount; i++) {
                    let child = parent.child(i);
                    onNode(child, locals, deco.forChild(offset, child), i);
                    offset += child.nodeSize;
                }
                return;
            }
            let decoIndex = 0, active = [], restNode = null;
            for (let parentIndex = 0;;) {
                if (decoIndex < locals.length && locals[decoIndex].to == offset) {
                    let widget = locals[decoIndex++], widgets;
                    while (decoIndex < locals.length && locals[decoIndex].to == offset)
                        (widgets || (widgets = [widget])).push(locals[decoIndex++]);
                    if (widgets) {
                        widgets.sort(compareSide);
                        for (let i = 0; i < widgets.length; i++)
                            onWidget(widgets[i], parentIndex, !!restNode);
                    }
                    else {
                        onWidget(widget, parentIndex, !!restNode);
                    }
                }
                let child, index;
                if (restNode) {
                    index = -1;
                    child = restNode;
                    restNode = null;
                }
                else if (parentIndex < parent.childCount) {
                    index = parentIndex;
                    child = parent.child(parentIndex++);
                }
                else {
                    break;
                }
                for (let i = 0; i < active.length; i++)
                    if (active[i].to <= offset)
                        active.splice(i--, 1);
                while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
                    active.push(locals[decoIndex++]);
                let end = offset + child.nodeSize;
                if (child.isText) {
                    let cutAt = end;
                    if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                        cutAt = locals[decoIndex].from;
                    for (let i = 0; i < active.length; i++)
                        if (active[i].to < cutAt)
                            cutAt = active[i].to;
                    if (cutAt < end) {
                        restNode = child.cut(cutAt - offset);
                        child = child.cut(0, cutAt - offset);
                        end = cutAt;
                        index = -1;
                    }
                }
                let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
                onNode(child, outerDeco, deco.forChild(offset, child), index);
                offset = end;
            }
        }
// List markers in Mobile Safari will mysteriously disappear
// sometimes. This works around that.
        function iosHacks(dom) {
            if (dom.nodeName == "UL" || dom.nodeName == "OL") {
                let oldCSS = dom.style.cssText;
                dom.style.cssText = oldCSS + "; list-style: square !important";
                window.getComputedStyle(dom).listStyle;
                dom.style.cssText = oldCSS;
            }
        }
        function nearbyTextNode(node, offset) {
            for (;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset > 0) {
                    if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
                        return node.childNodes[offset];
                    node = node.childNodes[offset - 1];
                    offset = nodeSize(node);
                }
                else if (node.nodeType == 1 && offset < node.childNodes.length) {
                    node = node.childNodes[offset];
                    offset = 0;
                }
                else {
                    return null;
                }
            }
        }
// Find a piece of text in an inline fragment, overlapping from-to
        function findTextInFragment(frag, text, from, to) {
            for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
                let child = frag.child(i++), childStart = pos;
                pos += child.nodeSize;
                if (!child.isText)
                    continue;
                let str = child.text;
                while (i < frag.childCount) {
                    let next = frag.child(i++);
                    pos += next.nodeSize;
                    if (!next.isText)
                        break;
                    str += next.text;
                }
                if (pos >= from) {
                    let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
                    if (found >= 0 && found + text.length + childStart >= from)
                        return childStart + found;
                    if (from == to && str.length >= (to + text.length) - childStart &&
                        str.slice(to - childStart, to - childStart + text.length) == text)
                        return to;
                }
            }
            return -1;
        }
// Replace range from-to in an array of view descs with replacement
// (may be null to just delete). This goes very much against the grain
// of the rest of this code, which tends to create nodes with the
// right shape in one go, rather than messing with them after
// creation, but is necessary in the composition hack.
        function replaceNodes(nodes, from, to, view, replacement) {
            let result = [];
            for (let i = 0, off = 0; i < nodes.length; i++) {
                let child = nodes[i], start = off, end = off += child.size;
                if (start >= to || end <= from) {
                    result.push(child);
                }
                else {
                    if (start < from)
                        result.push(child.slice(0, from - start, view));
                    if (replacement) {
                        result.push(replacement);
                        replacement = undefined;
                    }
                    if (end > to)
                        result.push(child.slice(to - start, child.size, view));
                }
            }
            return result;
        }

        function selectionFromDOM(view, origin = null) {
            let domSel = view.domSelection(), doc = view.state.doc;
            if (!domSel.focusNode)
                return null;
            let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
            let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
            if (head < 0)
                return null;
            let $head = doc.resolve(head), $anchor, selection;
            if (selectionCollapsed(domSel)) {
                $anchor = $head;
                while (nearestDesc && !nearestDesc.node)
                    nearestDesc = nearestDesc.parent;
                let nearestDescNode = nearestDesc.node;
                if (nearestDesc && nearestDescNode.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
                    && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
                    let pos = nearestDesc.posBefore;
                    selection = new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(head == pos ? $head : doc.resolve(pos));
                }
            }
            else {
                let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
                if (anchor < 0)
                    return null;
                $anchor = doc.resolve(anchor);
            }
            if (!selection) {
                let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
                selection = selectionBetween(view, $anchor, $head, bias);
            }
            return selection;
        }
        function editorOwnsSelection(view) {
            return view.editable ? view.hasFocus() :
                hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
        }
        function selectionToDOM(view, force = false) {
            let sel = view.state.selection;
            syncNodeSelection(view, sel);
            if (!editorOwnsSelection(view))
                return;
            // The delayed drag selection causes issues with Cell Selections
            // in Safari. And the drag selection delay is to workarond issues
            // which only present in Chrome.
            if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
                let domSel = view.domSelection(), curSel = view.domObserver.currentSelection;
                if (domSel.anchorNode && curSel.anchorNode &&
                    isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
                    view.input.mouseDown.delayedSelectionSync = true;
                    view.domObserver.setCurSelection();
                    return;
                }
            }
            view.domObserver.disconnectSelection();
            if (view.cursorWrapper) {
                selectCursorWrapper(view);
            }
            else {
                let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
                if (brokenSelectBetweenUneditable && !(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection)) {
                    if (!sel.$from.parent.inlineContent)
                        resetEditableFrom = temporarilyEditableNear(view, sel.from);
                    if (!sel.empty && !sel.$from.parent.inlineContent)
                        resetEditableTo = temporarilyEditableNear(view, sel.to);
                }
                view.docView.setSelection(anchor, head, view.root, force);
                if (brokenSelectBetweenUneditable) {
                    if (resetEditableFrom)
                        resetEditable(resetEditableFrom);
                    if (resetEditableTo)
                        resetEditable(resetEditableTo);
                }
                if (sel.visible) {
                    view.dom.classList.remove("ProseMirror-hideselection");
                }
                else {
                    view.dom.classList.add("ProseMirror-hideselection");
                    if ("onselectionchange" in document)
                        removeClassOnSelectionChange(view);
                }
            }
            view.domObserver.setCurSelection();
            view.domObserver.connectSelection();
        }
// Kludge to work around Webkit not allowing a selection to start/end
// between non-editable block nodes. We briefly make something
// editable, set the selection, then set it uneditable again.
        const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
        function temporarilyEditableNear(view, pos) {
            let { node, offset } = view.docView.domFromPos(pos, 0);
            let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
            let before = offset ? node.childNodes[offset - 1] : null;
            if (safari && after && after.contentEditable == "false")
                return setEditable(after);
            if ((!after || after.contentEditable == "false") &&
                (!before || before.contentEditable == "false")) {
                if (after)
                    return setEditable(after);
                else if (before)
                    return setEditable(before);
            }
        }
        function setEditable(element) {
            element.contentEditable = "true";
            if (safari && element.draggable) {
                element.draggable = false;
                element.wasDraggable = true;
            }
            return element;
        }
        function resetEditable(element) {
            element.contentEditable = "false";
            if (element.wasDraggable) {
                element.draggable = true;
                element.wasDraggable = null;
            }
        }
        function removeClassOnSelectionChange(view) {
            let doc = view.dom.ownerDocument;
            doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
            let domSel = view.domSelection();
            let node = domSel.anchorNode, offset = domSel.anchorOffset;
            doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
                if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                    doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
                    setTimeout(() => {
                        if (!editorOwnsSelection(view) || view.state.selection.visible)
                            view.dom.classList.remove("ProseMirror-hideselection");
                    }, 20);
                }
            });
        }
        function selectCursorWrapper(view) {
            let domSel = view.domSelection(), range = document.createRange();
            let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
            if (img)
                range.setEnd(node.parentNode, domIndex(node) + 1);
            else
                range.setEnd(node, 0);
            range.collapse(false);
            domSel.removeAllRanges();
            domSel.addRange(range);
            // Kludge to kill 'control selection' in IE11 when selecting an
            // invisible cursor wrapper, since that would result in those weird
            // resize handles and a selection that considers the absolutely
            // positioned wrapper, rather than the root editable node, the
            // focused element.
            if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
                node.disabled = true;
                node.disabled = false;
            }
        }
        function syncNodeSelection(view, sel) {
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {
                let desc = view.docView.descAt(sel.from);
                if (desc != view.lastSelectedViewDesc) {
                    clearNodeSelection(view);
                    if (desc)
                        desc.selectNode();
                    view.lastSelectedViewDesc = desc;
                }
            }
            else {
                clearNodeSelection(view);
            }
        }
// Clear all DOM statefulness of the last node selection.
        function clearNodeSelection(view) {
            if (view.lastSelectedViewDesc) {
                if (view.lastSelectedViewDesc.parent)
                    view.lastSelectedViewDesc.deselectNode();
                view.lastSelectedViewDesc = undefined;
            }
        }
        function selectionBetween(view, $anchor, $head, bias) {
            return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
                || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.between($anchor, $head, bias);
        }
        function hasFocusAndSelection(view) {
            if (view.editable && !view.hasFocus())
                return false;
            return hasSelection(view);
        }
        function hasSelection(view) {
            let sel = view.domSelection();
            if (!sel.anchorNode)
                return false;
            try {
                // Firefox will raise 'permission denied' errors when accessing
                // properties of `sel.anchorNode` when it's in a generated CSS
                // element.
                return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                    (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
            }
            catch (_) {
                return false;
            }
        }
        function anchorInRightPlace(view) {
            let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
            let domSel = view.domSelection();
            return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
        }

        function moveSelectionBlock(state, dir) {
            let { $anchor, $head } = state.selection;
            let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
            let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
            return $start && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom($start, dir);
        }
        function apply(view, sel) {
            view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
            return true;
        }
        function selectHorizontally(view, dir, mods) {
            let sel = view.state.selection;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {
                if (!sel.empty || mods.indexOf("s") > -1) {
                    return false;
                }
                else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
                    let next = moveSelectionBlock(view.state, dir);
                    if (next && (next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection))
                        return apply(view, next);
                    return false;
                }
                else if (!(mac && mods.indexOf("m") > -1)) {
                    let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                    if (!node || node.isText)
                        return false;
                    let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                    if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                        return false;
                    if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                    }
                    else if (webkit) {
                        // Chrome and Safari will introduce extra pointless cursor
                        // positions around inline uneditable nodes, so we have to
                        // take over and move the cursor past them (#937)
                        return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
                    }
                    else {
                        return false;
                    }
                }
            }
            else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && sel.node.isInline) {
                return apply(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection(dir > 0 ? sel.$to : sel.$from));
            }
            else {
                let next = moveSelectionBlock(view.state, dir);
                if (next)
                    return apply(view, next);
                return false;
            }
        }
        function nodeLen(node) {
            return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
        }
        function isIgnorable(dom) {
            let desc = dom.pmViewDesc;
            return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
        }
// Make sure the cursor isn't directly after one or more ignored
// nodes, which will confuse the browser's cursor motion logic.
        function skipIgnoredNodesLeft(view) {
            let sel = view.domSelection();
            let node = sel.focusNode, offset = sel.focusOffset;
            if (!node)
                return;
            let moveNode, moveOffset, force = false;
            // Gecko will do odd things when the selection is directly in front
            // of a non-editable node, so in that case, move it into the next
            // node if possible. Issue prosemirror/prosemirror#832.
            if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
                force = true;
            for (;;) {
                if (offset > 0) {
                    if (node.nodeType != 1) {
                        break;
                    }
                    else {
                        let before = node.childNodes[offset - 1];
                        if (isIgnorable(before)) {
                            moveNode = node;
                            moveOffset = --offset;
                        }
                        else if (before.nodeType == 3) {
                            node = before;
                            offset = node.nodeValue.length;
                        }
                        else
                            break;
                    }
                }
                else if (isBlockNode(node)) {
                    break;
                }
                else {
                    let prev = node.previousSibling;
                    while (prev && isIgnorable(prev)) {
                        moveNode = node.parentNode;
                        moveOffset = domIndex(prev);
                        prev = prev.previousSibling;
                    }
                    if (!prev) {
                        node = node.parentNode;
                        if (node == view.dom)
                            break;
                        offset = 0;
                    }
                    else {
                        node = prev;
                        offset = nodeLen(node);
                    }
                }
            }
            if (force)
                setSelFocus(view, sel, node, offset);
            else if (moveNode)
                setSelFocus(view, sel, moveNode, moveOffset);
        }
// Make sure the cursor isn't directly before one or more ignored
// nodes.
        function skipIgnoredNodesRight(view) {
            let sel = view.domSelection();
            let node = sel.focusNode, offset = sel.focusOffset;
            if (!node)
                return;
            let len = nodeLen(node);
            let moveNode, moveOffset;
            for (;;) {
                if (offset < len) {
                    if (node.nodeType != 1)
                        break;
                    let after = node.childNodes[offset];
                    if (isIgnorable(after)) {
                        moveNode = node;
                        moveOffset = ++offset;
                    }
                    else
                        break;
                }
                else if (isBlockNode(node)) {
                    break;
                }
                else {
                    let next = node.nextSibling;
                    while (next && isIgnorable(next)) {
                        moveNode = next.parentNode;
                        moveOffset = domIndex(next) + 1;
                        next = next.nextSibling;
                    }
                    if (!next) {
                        node = node.parentNode;
                        if (node == view.dom)
                            break;
                        offset = len = 0;
                    }
                    else {
                        node = next;
                        offset = 0;
                        len = nodeLen(node);
                    }
                }
            }
            if (moveNode)
                setSelFocus(view, sel, moveNode, moveOffset);
        }
        function isBlockNode(dom) {
            let desc = dom.pmViewDesc;
            return desc && desc.node && desc.node.isBlock;
        }
        function setSelFocus(view, sel, node, offset) {
            if (selectionCollapsed(sel)) {
                let range = document.createRange();
                range.setEnd(node, offset);
                range.setStart(node, offset);
                sel.removeAllRanges();
                sel.addRange(range);
            }
            else if (sel.extend) {
                sel.extend(node, offset);
            }
            view.domObserver.setCurSelection();
            let { state } = view;
            // If no state update ends up happening, reset the selection.
            setTimeout(() => {
                if (view.state == state)
                    selectionToDOM(view);
            }, 50);
        }
// Check whether vertical selection motion would involve node
// selections. If so, apply it (if not, the result is left to the
// browser)
        function selectVertically(view, dir, mods) {
            let sel = view.state.selection;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty || mods.indexOf("s") > -1)
                return false;
            if (mac && mods.indexOf("m") > -1)
                return false;
            let { $from, $to } = sel;
            if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
                let next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection))
                    return apply(view, next);
            }
            if (!$from.parent.inlineContent) {
                let side = dir < 0 ? $from : $to;
                let beyond = sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(side, dir) : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(side, dir);
                return beyond ? apply(view, beyond) : false;
            }
            return false;
        }
        function stopNativeHorizontalDelete(view, dir) {
            if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection))
                return true;
            let { $head, $anchor, empty } = view.state.selection;
            if (!$head.sameParent($anchor))
                return true;
            if (!empty)
                return false;
            if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
                return true;
            let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
            if (nextNode && !nextNode.isText) {
                let tr = view.state.tr;
                if (dir < 0)
                    tr.delete($head.pos - nextNode.nodeSize, $head.pos);
                else
                    tr.delete($head.pos, $head.pos + nextNode.nodeSize);
                view.dispatch(tr);
                return true;
            }
            return false;
        }
        function switchEditable(view, node, state) {
            view.domObserver.stop();
            node.contentEditable = state;
            view.domObserver.start();
        }
// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
// In which Safari (and at some point in the past, Chrome) does really
// wrong things when the down arrow is pressed when the cursor is
// directly at the start of a textblock and has an uneditable node
// after it
        function safariDownArrowBug(view) {
            if (!safari || view.state.selection.$head.parentOffset > 0)
                return false;
            let { focusNode, focusOffset } = view.domSelection();
            if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
                focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
                let child = focusNode.firstChild;
                switchEditable(view, child, "true");
                setTimeout(() => switchEditable(view, child, "false"), 20);
            }
            return false;
        }
// A backdrop key mapping used to make sure we always suppress keys
// that have a dangerous default effect, even if the commands they are
// bound to return false, and to make sure that cursor-motion keys
// find a cursor (as opposed to a node selection) when pressed. For
// cursor-motion keys, the code in the handlers also takes care of
// block selections.
        function getMods(event) {
            let result = "";
            if (event.ctrlKey)
                result += "c";
            if (event.metaKey)
                result += "m";
            if (event.altKey)
                result += "a";
            if (event.shiftKey)
                result += "s";
            return result;
        }
        function captureKeyDown(view, event) {
            let code = event.keyCode, mods = getMods(event);
            if (code == 8 || (mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
                return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
            }
            else if (code == 46 || (mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
                return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
            }
            else if (code == 13 || code == 27) { // Enter, Esc
                return true;
            }
            else if (code == 37 || (mac && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
                return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
            }
            else if (code == 39 || (mac && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
                return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
            }
            else if (code == 38 || (mac && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
                return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
            }
            else if (code == 40 || (mac && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
                return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
            }
            else if (mods == (mac ? "m" : "c") &&
                (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
                return true;
            }
            return false;
        }

        function serializeForClipboard(view, slice) {
            view.someProp("transformCopied", f => { slice = f(slice); });
            let context = [], { content, openStart, openEnd } = slice;
            while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
                openStart--;
                openEnd--;
                let node = content.firstChild;
                context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
                content = node.content;
            }
            let serializer = view.someProp("clipboardSerializer") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(view.state.schema);
            let doc = detachedDoc(), wrap = doc.createElement("div");
            wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
            let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
            while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
                for (let i = needsWrap.length - 1; i >= 0; i--) {
                    let wrapper = doc.createElement(needsWrap[i]);
                    while (wrap.firstChild)
                        wrapper.appendChild(wrap.firstChild);
                    wrap.appendChild(wrapper);
                    wrappers++;
                }
                firstChild = wrap.firstChild;
            }
            if (firstChild && firstChild.nodeType == 1)
                firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
            let text = view.someProp("clipboardTextSerializer", f => f(slice)) ||
                slice.content.textBetween(0, slice.content.size, "\n\n");
            return { dom: wrap, text };
        }
// Read a slice of content from the clipboard (or drop data).
        function parseFromClipboard(view, text, html, plainText, $context) {
            let inCode = $context.parent.type.spec.code;
            let dom, slice;
            if (!html && !text)
                return null;
            let asText = text && (plainText || inCode || !html);
            if (asText) {
                view.someProp("transformPastedText", f => { text = f(text, inCode || plainText); });
                if (inCode)
                    return text ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty;
                let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText));
                if (parsed) {
                    slice = parsed;
                }
                else {
                    let marks = $context.marks();
                    let { schema } = view.state, serializer = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer.fromSchema(schema);
                    dom = document.createElement("div");
                    text.split(/(?:\r\n?|\n)+/).forEach(block => {
                        let p = dom.appendChild(document.createElement("p"));
                        if (block)
                            p.appendChild(serializer.serializeNode(schema.text(block, marks)));
                    });
                }
            }
            else {
                view.someProp("transformPastedHTML", f => { html = f(html); });
                dom = readHTML(html);
                if (webkit)
                    restoreReplacedSpaces(dom);
            }
            let contextNode = dom && dom.querySelector("[data-pm-slice]");
            let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
            if (sliceData && sliceData[3])
                for (let i = +sliceData[3]; i > 0 && dom.firstChild; i--)
                    dom = dom.firstChild;
            if (!slice) {
                let parser = view.someProp("clipboardParser") || view.someProp("domParser") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);
                slice = parser.parseSlice(dom, {
                    preserveWhitespace: !!(asText || sliceData),
                    context: $context,
                    ruleFromNode(dom) {
                        if (dom.nodeName == "BR" && !dom.nextSibling &&
                            dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                            return { ignore: true };
                        return null;
                    }
                });
            }
            if (sliceData) {
                slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
            }
            else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
                slice = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
                if (slice.openStart || slice.openEnd) {
                    let openStart = 0, openEnd = 0;
                    for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
                    for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
                    slice = closeSlice(slice, openStart, openEnd);
                }
            }
            view.someProp("transformPasted", f => { slice = f(slice); });
            return slice;
        }
        const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
// Takes a slice parsed with parseSlice, which means there hasn't been
// any content-expression checking done on the top nodes, tries to
// find a parent node in the current context that might fit the nodes,
// and if successful, rebuilds the slice so that it fits into that parent.
//
// This addresses the problem that Transform.replace expects a
// coherent slice, and will fail to place a set of siblings that don't
// fit anywhere in the schema.
        function normalizeSiblings(fragment, $context) {
            if (fragment.childCount < 2)
                return fragment;
            for (let d = $context.depth; d >= 0; d--) {
                let parent = $context.node(d);
                let match = parent.contentMatchAt($context.index(d));
                let lastWrap, result = [];
                fragment.forEach(node => {
                    if (!result)
                        return;
                    let wrap = match.findWrapping(node.type), inLast;
                    if (!wrap)
                        return result = null;
                    if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                        result[result.length - 1] = inLast;
                    }
                    else {
                        if (result.length)
                            result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                        let wrapped = withWrappers(node, wrap);
                        result.push(wrapped);
                        match = match.matchType(wrapped.type);
                        lastWrap = wrap;
                    }
                });
                if (result)
                    return prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(result);
            }
            return fragment;
        }
        function withWrappers(node, wrap, from = 0) {
            for (let i = wrap.length - 1; i >= from; i--)
                node = wrap[i].create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(node));
            return node;
        }
// Used to group adjacent nodes wrapped in similar parents by
// normalizeSiblings into the same parent node
        function addToSibling(wrap, lastWrap, node, sibling, depth) {
            if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
                let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
                if (inner)
                    return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
                let match = sibling.contentMatchAt(sibling.childCount);
                if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
                    return sibling.copy(sibling.content.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(withWrappers(node, wrap, depth + 1))));
            }
        }
        function closeRight(node, depth) {
            if (depth == 0)
                return node;
            let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
            let fill = node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true);
            return node.copy(fragment.append(fill));
        }
        function closeRange(fragment, side, from, to, depth, openEnd) {
            let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
            if (depth < to - 1)
                inner = closeRange(inner, side, from, to, depth + 1, openEnd);
            if (depth >= from)
                inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
                    : inner.append(node.contentMatchAt(node.childCount).fillBefore(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty, true));
            return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
        }
        function closeSlice(slice, openStart, openEnd) {
            if (openStart < slice.openStart)
                slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
            if (openEnd < slice.openEnd)
                slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
            return slice;
        }
// Trick from jQuery -- some elements must be wrapped in other
// elements for innerHTML to work. I.e. if you do `div.innerHTML =
// "<td>..</td>"` the table cells are ignored.
        const wrapMap = {
            thead: ["table"],
            tbody: ["table"],
            tfoot: ["table"],
            caption: ["table"],
            colgroup: ["table"],
            col: ["table", "colgroup"],
            tr: ["table", "tbody"],
            td: ["table", "tbody", "tr"],
            th: ["table", "tbody", "tr"]
        };
        let _detachedDoc = null;
        function detachedDoc() {
            return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
        }
        function readHTML(html) {
            let metas = /^(\s*<meta [^>]*>)*/.exec(html);
            if (metas)
                html = html.slice(metas[0].length);
            let elt = detachedDoc().createElement("div");
            let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
            if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
                html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
            elt.innerHTML = html;
            if (wrap)
                for (let i = 0; i < wrap.length; i++)
                    elt = elt.querySelector(wrap[i]) || elt;
            return elt;
        }
// Webkit browsers do some hard-to-predict replacement of regular
// spaces with non-breaking spaces when putting content on the
// clipboard. This tries to convert such non-breaking spaces (which
// will be wrapped in a plain span on Chrome, a span with class
// Apple-converted-space on Safari) back to regular spaces.
        function restoreReplacedSpaces(dom) {
            let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
            for (let i = 0; i < nodes.length; i++) {
                let node = nodes[i];
                if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
                    node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
            }
        }
        function addContext(slice, context) {
            if (!slice.size)
                return slice;
            let schema = slice.content.firstChild.type.schema, array;
            try {
                array = JSON.parse(context);
            }
            catch (e) {
                return slice;
            }
            let { content, openStart, openEnd } = slice;
            for (let i = array.length - 2; i >= 0; i -= 2) {
                let type = schema.nodes[array[i]];
                if (!type || type.hasRequiredAttrs())
                    break;
                content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(type.create(array[i + 1], content));
                openStart++;
                openEnd++;
            }
            return new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, openStart, openEnd);
        }

// A collection of DOM events that occur within the editor, and callback functions
// to invoke when the event fires.
        const handlers = {};
        const editHandlers = {};
        const passiveHandlers = { touchstart: true, touchmove: true };
        class InputState {
            constructor() {
                this.shiftKey = false;
                this.mouseDown = null;
                this.lastKeyCode = null;
                this.lastKeyCodeTime = 0;
                this.lastClick = { time: 0, x: 0, y: 0, type: "" };
                this.lastSelectionOrigin = null;
                this.lastSelectionTime = 0;
                this.lastIOSEnter = 0;
                this.lastIOSEnterFallbackTimeout = -1;
                this.lastFocus = 0;
                this.lastTouch = 0;
                this.lastAndroidDelete = 0;
                this.composing = false;
                this.composingTimeout = -1;
                this.compositionNodes = [];
                this.compositionEndedAt = -2e8;
                this.domChangeCount = 0;
                this.eventHandlers = Object.create(null);
                this.hideSelectionGuard = null;
            }
        }
        function initInput(view) {
            for (let event in handlers) {
                let handler = handlers[event];
                view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
                    if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                        (view.editable || !(event.type in editHandlers)))
                        handler(view, event);
                }, passiveHandlers[event] ? { passive: true } : undefined);
            }
            // On Safari, for reasons beyond my understanding, adding an input
            // event handler makes an issue where the composition vanishes when
            // you press enter go away.
            if (safari)
                view.dom.addEventListener("input", () => null);
            ensureListeners(view);
        }
        function setSelectionOrigin(view, origin) {
            view.input.lastSelectionOrigin = origin;
            view.input.lastSelectionTime = Date.now();
        }
        function destroyInput(view) {
            view.domObserver.stop();
            for (let type in view.input.eventHandlers)
                view.dom.removeEventListener(type, view.input.eventHandlers[type]);
            clearTimeout(view.input.composingTimeout);
            clearTimeout(view.input.lastIOSEnterFallbackTimeout);
        }
        function ensureListeners(view) {
            view.someProp("handleDOMEvents", currentHandlers => {
                for (let type in currentHandlers)
                    if (!view.input.eventHandlers[type])
                        view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
            });
        }
        function runCustomHandler(view, event) {
            return view.someProp("handleDOMEvents", handlers => {
                let handler = handlers[event.type];
                return handler ? handler(view, event) || event.defaultPrevented : false;
            });
        }
        function eventBelongsToView(view, event) {
            if (!event.bubbles)
                return true;
            if (event.defaultPrevented)
                return false;
            for (let node = event.target; node != view.dom; node = node.parentNode)
                if (!node || node.nodeType == 11 ||
                    (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
                    return false;
            return true;
        }
        function dispatchEvent(view, event) {
            if (!runCustomHandler(view, event) && handlers[event.type] &&
                (view.editable || !(event.type in editHandlers)))
                handlers[event.type](view, event);
        }
        editHandlers.keydown = (view, _event) => {
            let event = _event;
            view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
            if (inOrNearComposition(view, event))
                return;
            view.input.lastKeyCode = event.keyCode;
            view.input.lastKeyCodeTime = Date.now();
            // Suppress enter key events on Chrome Android, because those tend
            // to be part of a confused sequence of composition events fired,
            // and handling them eagerly tends to corrupt the input.
            if (android && chrome && event.keyCode == 13)
                return;
            if (event.keyCode != 229)
                view.domObserver.forceFlush();
            // On iOS, if we preventDefault enter key presses, the virtual
            // keyboard gets confused. So the hack here is to set a flag that
            // makes the DOM change code recognize that what just happens should
            // be replaced by whatever the Enter key handlers do.
            if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
                let now = Date.now();
                view.input.lastIOSEnter = now;
                view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                    if (view.input.lastIOSEnter == now) {
                        view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                        view.input.lastIOSEnter = 0;
                    }
                }, 200);
            }
            else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
                event.preventDefault();
            }
            else {
                setSelectionOrigin(view, "key");
            }
        };
        editHandlers.keyup = (view, event) => {
            if (event.keyCode == 16)
                view.input.shiftKey = false;
        };
        editHandlers.keypress = (view, _event) => {
            let event = _event;
            if (inOrNearComposition(view, event) || !event.charCode ||
                event.ctrlKey && !event.altKey || mac && event.metaKey)
                return;
            if (view.someProp("handleKeyPress", f => f(view, event))) {
                event.preventDefault();
                return;
            }
            let sel = view.state.selection;
            if (!(sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) || !sel.$from.sameParent(sel.$to)) {
                let text = String.fromCharCode(event.charCode);
                if (!view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
                    view.dispatch(view.state.tr.insertText(text).scrollIntoView());
                event.preventDefault();
            }
        };
        function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
        function isNear(event, click) {
            let dx = click.x - event.clientX, dy = click.y - event.clientY;
            return dx * dx + dy * dy < 100;
        }
        function runHandlerOnContext(view, propName, pos, inside, event) {
            if (inside == -1)
                return false;
            let $pos = view.state.doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
                    return true;
            }
            return false;
        }
        function updateSelection(view, selection, origin) {
            if (!view.focused)
                view.focus();
            let tr = view.state.tr.setSelection(selection);
            if (origin == "pointer")
                tr.setMeta("pointer", true);
            view.dispatch(tr);
        }
        function selectClickedLeaf(view, inside) {
            if (inside == -1)
                return false;
            let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
            if (node && node.isAtom && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                updateSelection(view, new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos), "pointer");
                return true;
            }
            return false;
        }
        function selectClickedNode(view, inside) {
            if (inside == -1)
                return false;
            let sel = view.state.selection, selectedNode, selectAt;
            if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection)
                selectedNode = sel.node;
            let $pos = view.state.doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
                if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node)) {
                    if (selectedNode && sel.$from.depth > 0 &&
                        i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                        selectAt = $pos.before(sel.$from.depth);
                    else
                        selectAt = $pos.before(i);
                    break;
                }
            }
            if (selectAt != null) {
                updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, selectAt), "pointer");
                return true;
            }
            else {
                return false;
            }
        }
        function handleSingleClick(view, pos, inside, event, selectNode) {
            return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
                view.someProp("handleClick", f => f(view, pos, event)) ||
                (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
        }
        function handleDoubleClick(view, pos, inside, event) {
            return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
                view.someProp("handleDoubleClick", f => f(view, pos, event));
        }
        function handleTripleClick(view, pos, inside, event) {
            return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
                view.someProp("handleTripleClick", f => f(view, pos, event)) ||
                defaultTripleClick(view, inside, event);
        }
        function defaultTripleClick(view, inside, event) {
            if (event.button != 0)
                return false;
            let doc = view.state.doc;
            if (inside == -1) {
                if (doc.inlineContent) {
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, 0, doc.content.size), "pointer");
                    return true;
                }
                return false;
            }
            let $pos = doc.resolve(inside);
            for (let i = $pos.depth + 1; i > 0; i--) {
                let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
                let nodePos = $pos.before(i);
                if (node.inlineContent)
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
                else if (prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))
                    updateSelection(view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(doc, nodePos), "pointer");
                else
                    continue;
                return true;
            }
        }
        function forceDOMFlush(view) {
            return endComposition(view);
        }
        const selectNodeModifier = mac ? "metaKey" : "ctrlKey";
        handlers.mousedown = (view, _event) => {
            let event = _event;
            view.input.shiftKey = event.shiftKey;
            let flushed = forceDOMFlush(view);
            let now = Date.now(), type = "singleClick";
            if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
                if (view.input.lastClick.type == "singleClick")
                    type = "doubleClick";
                else if (view.input.lastClick.type == "doubleClick")
                    type = "tripleClick";
            }
            view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
            let pos = view.posAtCoords(eventCoords(event));
            if (!pos)
                return;
            if (type == "singleClick") {
                if (view.input.mouseDown)
                    view.input.mouseDown.done();
                view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
            }
            else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
                event.preventDefault();
            }
            else {
                setSelectionOrigin(view, "pointer");
            }
        };
        class MouseDown {
            constructor(view, pos, event, flushed) {
                this.view = view;
                this.pos = pos;
                this.event = event;
                this.flushed = flushed;
                this.delayedSelectionSync = false;
                this.mightDrag = null;
                this.startDoc = view.state.doc;
                this.selectNode = !!event[selectNodeModifier];
                this.allowDefault = event.shiftKey;
                let targetNode, targetPos;
                if (pos.inside > -1) {
                    targetNode = view.state.doc.nodeAt(pos.inside);
                    targetPos = pos.inside;
                }
                else {
                    let $pos = view.state.doc.resolve(pos.pos);
                    targetNode = $pos.parent;
                    targetPos = $pos.depth ? $pos.before() : 0;
                }
                const target = flushed ? null : event.target;
                const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
                this.target = targetDesc ? targetDesc.dom : null;
                let { selection } = view.state;
                if (event.button == 0 &&
                    targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
                    selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && selection.from <= targetPos && selection.to > targetPos)
                    this.mightDrag = {
                        node: targetNode,
                        pos: targetPos,
                        addAttr: !!(this.target && !this.target.draggable),
                        setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
                    };
                if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
                    this.view.domObserver.stop();
                    if (this.mightDrag.addAttr)
                        this.target.draggable = true;
                    if (this.mightDrag.setUneditable)
                        setTimeout(() => {
                            if (this.view.input.mouseDown == this)
                                this.target.setAttribute("contentEditable", "false");
                        }, 20);
                    this.view.domObserver.start();
                }
                view.root.addEventListener("mouseup", this.up = this.up.bind(this));
                view.root.addEventListener("mousemove", this.move = this.move.bind(this));
                setSelectionOrigin(view, "pointer");
            }
            done() {
                this.view.root.removeEventListener("mouseup", this.up);
                this.view.root.removeEventListener("mousemove", this.move);
                if (this.mightDrag && this.target) {
                    this.view.domObserver.stop();
                    if (this.mightDrag.addAttr)
                        this.target.removeAttribute("draggable");
                    if (this.mightDrag.setUneditable)
                        this.target.removeAttribute("contentEditable");
                    this.view.domObserver.start();
                }
                if (this.delayedSelectionSync)
                    setTimeout(() => selectionToDOM(this.view));
                this.view.input.mouseDown = null;
            }
            up(event) {
                this.done();
                if (!this.view.dom.contains(event.target))
                    return;
                let pos = this.pos;
                if (this.view.state.doc != this.startDoc)
                    pos = this.view.posAtCoords(eventCoords(event));
                this.updateAllowDefault(event);
                if (this.allowDefault || !pos) {
                    setSelectionOrigin(this.view, "pointer");
                }
                else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
                    event.preventDefault();
                }
                else if (event.button == 0 &&
                    (this.flushed ||
                        // Safari ignores clicks on draggable elements
                        (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                        // Chrome will sometimes treat a node selection as a
                        // cursor, but still report that the node is selected
                        // when asked through getSelection. You'll then get a
                        // situation where clicking at the point where that
                        // (hidden) cursor is doesn't change the selection, and
                        // thus doesn't get a reaction from ProseMirror. This
                        // works around that.
                        (chrome && !this.view.state.selection.visible &&
                            Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
                    updateSelection(this.view, prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
                    event.preventDefault();
                }
                else {
                    setSelectionOrigin(this.view, "pointer");
                }
            }
            move(event) {
                this.updateAllowDefault(event);
                setSelectionOrigin(this.view, "pointer");
                if (event.buttons == 0)
                    this.done();
            }
            updateAllowDefault(event) {
                if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                    Math.abs(this.event.y - event.clientY) > 4))
                    this.allowDefault = true;
            }
        }
        handlers.touchstart = view => {
            view.input.lastTouch = Date.now();
            forceDOMFlush(view);
            setSelectionOrigin(view, "pointer");
        };
        handlers.touchmove = view => {
            view.input.lastTouch = Date.now();
            setSelectionOrigin(view, "pointer");
        };
        handlers.contextmenu = view => forceDOMFlush(view);
        function inOrNearComposition(view, event) {
            if (view.composing)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On Japanese input method editors (IMEs), the Enter key is used to confirm character
            // selection. On Safari, when Enter is pressed, compositionend and keydown events are
            // emitted. The keydown event triggers newline insertion, which we don't want.
            // This method returns true if the keydown event should be ignored.
            // We only ignore it once, as pressing Enter a second time *should* insert a newline.
            // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
            // This guards against the case where compositionend is triggered without the keyboard
            // (e.g. character confirmation may be done with the mouse), and keydown is triggered
            // afterwards- we wouldn't want to ignore the keydown event in this case.
            if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
                view.input.compositionEndedAt = -2e8;
                return true;
            }
            return false;
        }
// Drop active composition after 5 seconds of inactivity on Android
        const timeoutComposition = android ? 5000 : -1;
        editHandlers.compositionstart = editHandlers.compositionupdate = view => {
            if (!view.composing) {
                view.domObserver.flush();
                let { state } = view, $pos = state.selection.$from;
                if (state.selection.empty &&
                    (state.storedMarks ||
                        (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
                    // Need to wrap the cursor in mark nodes different from the ones in the DOM context
                    view.markCursor = view.state.storedMarks || $pos.marks();
                    endComposition(view, true);
                    view.markCursor = null;
                }
                else {
                    endComposition(view);
                    // In firefox, if the cursor is after but outside a marked node,
                    // the inserted text won't inherit the marks. So this moves it
                    // inside if necessary.
                    if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                        let sel = view.domSelection();
                        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                            let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                            if (!before)
                                break;
                            if (before.nodeType == 3) {
                                sel.collapse(before, before.nodeValue.length);
                                break;
                            }
                            else {
                                node = before;
                                offset = -1;
                            }
                        }
                    }
                }
                view.input.composing = true;
            }
            scheduleComposeEnd(view, timeoutComposition);
        };
        editHandlers.compositionend = (view, event) => {
            if (view.composing) {
                view.input.composing = false;
                view.input.compositionEndedAt = event.timeStamp;
                scheduleComposeEnd(view, 20);
            }
        };
        function scheduleComposeEnd(view, delay) {
            clearTimeout(view.input.composingTimeout);
            if (delay > -1)
                view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
        }
        function clearComposition(view) {
            if (view.composing) {
                view.input.composing = false;
                view.input.compositionEndedAt = timestampFromCustomEvent();
            }
            while (view.input.compositionNodes.length > 0)
                view.input.compositionNodes.pop().markParentsDirty();
        }
        function timestampFromCustomEvent() {
            let event = document.createEvent("Event");
            event.initEvent("event", true, true);
            return event.timeStamp;
        }
        /**
         @internal
         */
        function endComposition(view, forceUpdate = false) {
            if (android && view.domObserver.flushingSoon >= 0)
                return;
            view.domObserver.forceFlush();
            clearComposition(view);
            if (forceUpdate || view.docView && view.docView.dirty) {
                let sel = selectionFromDOM(view);
                if (sel && !sel.eq(view.state.selection))
                    view.dispatch(view.state.tr.setSelection(sel));
                else
                    view.updateState(view.state);
                return true;
            }
            return false;
        }
        function captureCopy(view, dom) {
            // The extra wrapper is somehow necessary on IE/Edge to prevent the
            // content from being mangled when it is put onto the clipboard
            if (!view.dom.parentNode)
                return;
            let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
            wrap.appendChild(dom);
            wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
            let sel = getSelection(), range = document.createRange();
            range.selectNodeContents(dom);
            // Done because IE will fire a selectionchange moving the selection
            // to its start when removeAllRanges is called and the editor still
            // has focus (which will mess up the editor's selection state).
            view.dom.blur();
            sel.removeAllRanges();
            sel.addRange(range);
            setTimeout(() => {
                if (wrap.parentNode)
                    wrap.parentNode.removeChild(wrap);
                view.focus();
            }, 50);
        }
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
        const brokenClipboardAPI = (ie && ie_version < 15) ||
            (ios && webkit_version < 604);
        handlers.copy = editHandlers.cut = (view, _event) => {
            let event = _event;
            let sel = view.state.selection, cut = event.type == "cut";
            if (sel.empty)
                return;
            // IE and Edge's clipboard interface is completely broken
            let data = brokenClipboardAPI ? null : event.clipboardData;
            let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
            if (data) {
                event.preventDefault();
                data.clearData();
                data.setData("text/html", dom.innerHTML);
                data.setData("text/plain", text);
            }
            else {
                captureCopy(view, dom);
            }
            if (cut)
                view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
        };
        function sliceSingleNode(slice) {
            return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
        }
        function capturePaste(view, event) {
            if (!view.dom.parentNode)
                return;
            let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
            let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
            if (!plainText)
                target.contentEditable = "true";
            target.style.cssText = "position: fixed; left: -10000px; top: 10px";
            target.focus();
            setTimeout(() => {
                view.focus();
                if (target.parentNode)
                    target.parentNode.removeChild(target);
                if (plainText)
                    doPaste(view, target.value, null, event);
                else
                    doPaste(view, target.textContent, target.innerHTML, event);
            }, 50);
        }
        function doPaste(view, text, html, event) {
            let slice = parseFromClipboard(view, text, html, view.input.shiftKey, view.state.selection.$from);
            if (view.someProp("handlePaste", f => f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty)))
                return true;
            if (!slice)
                return false;
            let singleNode = sliceSingleNode(slice);
            let tr = singleNode
                ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey)
                : view.state.tr.replaceSelection(slice);
            view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
            return true;
        }
        editHandlers.paste = (view, _event) => {
            let event = _event;
            // Handling paste from JavaScript during composition is very poorly
            // handled by browsers, so as a dodgy but preferable kludge, we just
            // let the browser do its native thing there, except on Android,
            // where the editor is almost always composing.
            if (view.composing && !android)
                return;
            let data = brokenClipboardAPI ? null : event.clipboardData;
            if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), event))
                event.preventDefault();
            else
                capturePaste(view, event);
        };
        class Dragging {
            constructor(slice, move) {
                this.slice = slice;
                this.move = move;
            }
        }
        const dragCopyModifier = mac ? "altKey" : "ctrlKey";
        handlers.dragstart = (view, _event) => {
            let event = _event;
            let mouseDown = view.input.mouseDown;
            if (mouseDown)
                mouseDown.done();
            if (!event.dataTransfer)
                return;
            let sel = view.state.selection;
            let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
            if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection ? sel.to - 1 : sel.to)) ;
            else if (mouseDown && mouseDown.mightDrag) {
                view.dispatch(view.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
            }
            else if (event.target && event.target.nodeType == 1) {
                let desc = view.docView.nearestDesc(event.target, true);
                if (desc && desc.node.type.spec.draggable && desc != view.docView)
                    view.dispatch(view.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(view.state.doc, desc.posBefore)));
            }
            let slice = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice);
            event.dataTransfer.clearData();
            event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
            // See https://github.com/ProseMirror/prosemirror/issues/1156
            event.dataTransfer.effectAllowed = "copyMove";
            if (!brokenClipboardAPI)
                event.dataTransfer.setData("text/plain", text);
            view.dragging = new Dragging(slice, !event[dragCopyModifier]);
        };
        handlers.dragend = view => {
            let dragging = view.dragging;
            window.setTimeout(() => {
                if (view.dragging == dragging)
                    view.dragging = null;
            }, 50);
        };
        editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
        editHandlers.drop = (view, _event) => {
            let event = _event;
            let dragging = view.dragging;
            view.dragging = null;
            if (!event.dataTransfer)
                return;
            let eventPos = view.posAtCoords(eventCoords(event));
            if (!eventPos)
                return;
            let $mouse = view.state.doc.resolve(eventPos.pos);
            let slice = dragging && dragging.slice;
            if (slice) {
                view.someProp("transformPasted", f => { slice = f(slice); });
            }
            else {
                slice = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
            }
            let move = !!(dragging && !event[dragCopyModifier]);
            if (view.someProp("handleDrop", f => f(view, event, slice || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice.empty, move))) {
                event.preventDefault();
                return;
            }
            if (!slice)
                return;
            event.preventDefault();
            let insertPos = slice ? (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_2__.dropPoint)(view.state.doc, $mouse.pos, slice) : $mouse.pos;
            if (insertPos == null)
                insertPos = $mouse.pos;
            let tr = view.state.tr;
            if (move)
                tr.deleteSelection();
            let pos = tr.mapping.map(insertPos);
            let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
            let beforeInsert = tr.doc;
            if (isNode)
                tr.replaceRangeWith(pos, pos, slice.content.firstChild);
            else
                tr.replaceRange(pos, pos, slice);
            if (tr.doc.eq(beforeInsert))
                return;
            let $pos = tr.doc.resolve(pos);
            if (isNode && prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(slice.content.firstChild) &&
                $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
                tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection($pos));
            }
            else {
                let end = tr.mapping.map(insertPos);
                tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
                tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
            }
            view.focus();
            view.dispatch(tr.setMeta("uiEvent", "drop"));
        };
        handlers.focus = view => {
            view.input.lastFocus = Date.now();
            if (!view.focused) {
                view.domObserver.stop();
                view.dom.classList.add("ProseMirror-focused");
                view.domObserver.start();
                view.focused = true;
                setTimeout(() => {
                    if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelection()))
                        selectionToDOM(view);
                }, 20);
            }
        };
        handlers.blur = (view, _event) => {
            let event = _event;
            if (view.focused) {
                view.domObserver.stop();
                view.dom.classList.remove("ProseMirror-focused");
                view.domObserver.start();
                if (event.relatedTarget && view.dom.contains(event.relatedTarget))
                    view.domObserver.currentSelection.clear();
                view.focused = false;
            }
        };
        handlers.beforeinput = (view, _event) => {
            let event = _event;
            // We should probably do more with beforeinput events, but support
            // is so spotty that I'm still waiting to see where they are going.
            // Very specific hack to deal with backspace sometimes failing on
            // Chrome Android when after an uneditable node.
            if (chrome && android && event.inputType == "deleteContentBackward") {
                view.domObserver.flushSoon();
                let { domChangeCount } = view.input;
                setTimeout(() => {
                    if (view.input.domChangeCount != domChangeCount)
                        return; // Event already had some effect
                    // This bug tends to close the virtual keyboard, so we refocus
                    view.dom.blur();
                    view.focus();
                    if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                        return;
                    let { $cursor } = view.state.selection;
                    // Crude approximation of backspace behavior when no command handled it
                    if ($cursor && $cursor.pos > 0)
                        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
                }, 50);
            }
        };
// Make sure all handlers get registered
        for (let prop in editHandlers)
            handlers[prop] = editHandlers[prop];

        function compareObjs(a, b) {
            if (a == b)
                return true;
            for (let p in a)
                if (a[p] !== b[p])
                    return false;
            for (let p in b)
                if (!(p in a))
                    return false;
            return true;
        }
        class WidgetType {
            constructor(toDOM, spec) {
                this.toDOM = toDOM;
                this.spec = spec || noSpec;
                this.side = this.spec.side || 0;
            }
            map(mapping, span, offset, oldOffset) {
                let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
                return deleted ? null : new Decoration(pos - offset, pos - offset, this);
            }
            valid() { return true; }
            eq(other) {
                return this == other ||
                    (other instanceof WidgetType &&
                        (this.spec.key && this.spec.key == other.spec.key ||
                            this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
            }
            destroy(node) {
                if (this.spec.destroy)
                    this.spec.destroy(node);
            }
        }
        class InlineType {
            constructor(attrs, spec) {
                this.attrs = attrs;
                this.spec = spec || noSpec;
            }
            map(mapping, span, offset, oldOffset) {
                let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
                let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
                return from >= to ? null : new Decoration(from, to, this);
            }
            valid(_, span) { return span.from < span.to; }
            eq(other) {
                return this == other ||
                    (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                        compareObjs(this.spec, other.spec));
            }
            static is(span) { return span.type instanceof InlineType; }
            destroy() { }
        }
        class NodeType {
            constructor(attrs, spec) {
                this.attrs = attrs;
                this.spec = spec || noSpec;
            }
            map(mapping, span, offset, oldOffset) {
                let from = mapping.mapResult(span.from + oldOffset, 1);
                if (from.deleted)
                    return null;
                let to = mapping.mapResult(span.to + oldOffset, -1);
                if (to.deleted || to.pos <= from.pos)
                    return null;
                return new Decoration(from.pos - offset, to.pos - offset, this);
            }
            valid(node, span) {
                let { index, offset } = node.content.findIndex(span.from), child;
                return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
            }
            eq(other) {
                return this == other ||
                    (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                        compareObjs(this.spec, other.spec));
            }
            destroy() { }
        }
        /**
         Decoration objects can be provided to the view through the
         [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
         several variants—see the static members of this class for details.
         */
        class Decoration {
            /**
             @internal
             */
            constructor(
                /**
                 The start position of the decoration.
                 */
                from,
                /**
                 The end position. Will be the same as `from` for [widget
                 decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
                 */
                to,
                /**
                 @internal
                 */
                type) {
                this.from = from;
                this.to = to;
                this.type = type;
            }
            /**
             @internal
             */
            copy(from, to) {
                return new Decoration(from, to, this.type);
            }
            /**
             @internal
             */
            eq(other, offset = 0) {
                return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
            }
            /**
             @internal
             */
            map(mapping, offset, oldOffset) {
                return this.type.map(mapping, this, offset, oldOffset);
            }
            /**
             Creates a widget decoration, which is a DOM node that's shown in
             the document at the given position. It is recommended that you
             delay rendering the widget by passing a function that will be
             called when the widget is actually drawn in a view, but you can
             also directly pass a DOM node. `getPos` can be used to find the
             widget's current document position.
             */
            static widget(pos, toDOM, spec) {
                return new Decoration(pos, pos, new WidgetType(toDOM, spec));
            }
            /**
             Creates an inline decoration, which adds the given attributes to
             each inline node between `from` and `to`.
             */
            static inline(from, to, attrs, spec) {
                return new Decoration(from, to, new InlineType(attrs, spec));
            }
            /**
             Creates a node decoration. `from` and `to` should point precisely
             before and after a node in the document. That node, and only that
             node, will receive the given attributes.
             */
            static node(from, to, attrs, spec) {
                return new Decoration(from, to, new NodeType(attrs, spec));
            }
            /**
             The spec provided when creating this decoration. Can be useful
             if you've stored extra information in that object.
             */
            get spec() { return this.type.spec; }
            /**
             @internal
             */
            get inline() { return this.type instanceof InlineType; }
        }
        const none = [], noSpec = {};
        /**
         A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
         a way that the drawing algorithm can efficiently use and compare
         them. This is a persistent data structure—it is not modified,
         updates create a new value.
         */
        class DecorationSet {
            /**
             @internal
             */
            constructor(local, children) {
                this.local = local.length ? local : none;
                this.children = children.length ? children : none;
            }
            /**
             Create a set of decorations, using the structure of the given
             document.
             */
            static create(doc, decorations) {
                return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
            }
            /**
             Find all decorations in this set which touch the given range
             (including decorations that start or end directly at the
             boundaries) and match the given predicate on their spec. When
             `start` and `end` are omitted, all decorations in the set are
             considered. When `predicate` isn't given, all decorations are
             assumed to match.
             */
            find(start, end, predicate) {
                let result = [];
                this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
                return result;
            }
            findInner(start, end, result, offset, predicate) {
                for (let i = 0; i < this.local.length; i++) {
                    let span = this.local[i];
                    if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                        result.push(span.copy(span.from + offset, span.to + offset));
                }
                for (let i = 0; i < this.children.length; i += 3) {
                    if (this.children[i] < end && this.children[i + 1] > start) {
                        let childOff = this.children[i] + 1;
                        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
                    }
                }
            }
            /**
             Map the set of decorations in response to a change in the
             document.
             */
            map(mapping, doc, options) {
                if (this == empty || mapping.maps.length == 0)
                    return this;
                return this.mapInner(mapping, doc, 0, 0, options || noSpec);
            }
            /**
             @internal
             */
            mapInner(mapping, node, offset, oldOffset, options) {
                let newLocal;
                for (let i = 0; i < this.local.length; i++) {
                    let mapped = this.local[i].map(mapping, offset, oldOffset);
                    if (mapped && mapped.type.valid(node, mapped))
                        (newLocal || (newLocal = [])).push(mapped);
                    else if (options.onRemove)
                        options.onRemove(this.local[i].spec);
                }
                if (this.children.length)
                    return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
                else
                    return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
            }
            /**
             Add the given array of decorations to the ones in the set,
             producing a new set. Needs access to the current document to
             create the appropriate tree structure.
             */
            add(doc, decorations) {
                if (!decorations.length)
                    return this;
                if (this == empty)
                    return DecorationSet.create(doc, decorations);
                return this.addInner(doc, decorations, 0);
            }
            addInner(doc, decorations, offset) {
                let children, childIndex = 0;
                doc.forEach((childNode, childOffset) => {
                    let baseOffset = childOffset + offset, found;
                    if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                        return;
                    if (!children)
                        children = this.children.slice();
                    while (childIndex < children.length && children[childIndex] < childOffset)
                        childIndex += 3;
                    if (children[childIndex] == childOffset)
                        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
                    else
                        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
                    childIndex += 3;
                });
                let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
                for (let i = 0; i < local.length; i++)
                    if (!local[i].type.valid(doc, local[i]))
                        local.splice(i--, 1);
                return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
            }
            /**
             Create a new set that contains the decorations in this set, minus
             the ones in the given array.
             */
            remove(decorations) {
                if (decorations.length == 0 || this == empty)
                    return this;
                return this.removeInner(decorations, 0);
            }
            removeInner(decorations, offset) {
                let children = this.children, local = this.local;
                for (let i = 0; i < children.length; i += 3) {
                    let found;
                    let from = children[i] + offset, to = children[i + 1] + offset;
                    for (let j = 0, span; j < decorations.length; j++)
                        if (span = decorations[j]) {
                            if (span.from > from && span.to < to) {
                                decorations[j] = null;
                                (found || (found = [])).push(span);
                            }
                        }
                    if (!found)
                        continue;
                    if (children == this.children)
                        children = this.children.slice();
                    let removed = children[i + 2].removeInner(found, from + 1);
                    if (removed != empty) {
                        children[i + 2] = removed;
                    }
                    else {
                        children.splice(i, 3);
                        i -= 3;
                    }
                }
                if (local.length)
                    for (let i = 0, span; i < decorations.length; i++)
                        if (span = decorations[i]) {
                            for (let j = 0; j < local.length; j++)
                                if (local[j].eq(span, offset)) {
                                    if (local == this.local)
                                        local = this.local.slice();
                                    local.splice(j--, 1);
                                }
                        }
                if (children == this.children && local == this.local)
                    return this;
                return local.length || children.length ? new DecorationSet(local, children) : empty;
            }
            /**
             @internal
             */
            forChild(offset, node) {
                if (this == empty)
                    return this;
                if (node.isLeaf)
                    return DecorationSet.empty;
                let child, local;
                for (let i = 0; i < this.children.length; i += 3)
                    if (this.children[i] >= offset) {
                        if (this.children[i] == offset)
                            child = this.children[i + 2];
                        break;
                    }
                let start = offset + 1, end = start + node.content.size;
                for (let i = 0; i < this.local.length; i++) {
                    let dec = this.local[i];
                    if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                        if (from < to)
                            (local || (local = [])).push(dec.copy(from, to));
                    }
                }
                if (local) {
                    let localSet = new DecorationSet(local.sort(byPos), none);
                    return child ? new DecorationGroup([localSet, child]) : localSet;
                }
                return child || empty;
            }
            /**
             @internal
             */
            eq(other) {
                if (this == other)
                    return true;
                if (!(other instanceof DecorationSet) ||
                    this.local.length != other.local.length ||
                    this.children.length != other.children.length)
                    return false;
                for (let i = 0; i < this.local.length; i++)
                    if (!this.local[i].eq(other.local[i]))
                        return false;
                for (let i = 0; i < this.children.length; i += 3)
                    if (this.children[i] != other.children[i] ||
                        this.children[i + 1] != other.children[i + 1] ||
                        !this.children[i + 2].eq(other.children[i + 2]))
                        return false;
                return true;
            }
            /**
             @internal
             */
            locals(node) {
                return removeOverlap(this.localsInner(node));
            }
            /**
             @internal
             */
            localsInner(node) {
                if (this == empty)
                    return none;
                if (node.inlineContent || !this.local.some(InlineType.is))
                    return this.local;
                let result = [];
                for (let i = 0; i < this.local.length; i++) {
                    if (!(this.local[i].type instanceof InlineType))
                        result.push(this.local[i]);
                }
                return result;
            }
        }
        /**
         The empty set of decorations.
         */
        DecorationSet.empty = new DecorationSet([], []);
        /**
         @internal
         */
        DecorationSet.removeOverlap = removeOverlap;
        const empty = DecorationSet.empty;
// An abstraction that allows the code dealing with decorations to
// treat multiple DecorationSet objects as if it were a single object
// with (a subset of) the same interface.
        class DecorationGroup {
            constructor(members) {
                this.members = members;
            }
            map(mapping, doc) {
                const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
                return DecorationGroup.from(mappedDecos);
            }
            forChild(offset, child) {
                if (child.isLeaf)
                    return DecorationSet.empty;
                let found = [];
                for (let i = 0; i < this.members.length; i++) {
                    let result = this.members[i].forChild(offset, child);
                    if (result == empty)
                        continue;
                    if (result instanceof DecorationGroup)
                        found = found.concat(result.members);
                    else
                        found.push(result);
                }
                return DecorationGroup.from(found);
            }
            eq(other) {
                if (!(other instanceof DecorationGroup) ||
                    other.members.length != this.members.length)
                    return false;
                for (let i = 0; i < this.members.length; i++)
                    if (!this.members[i].eq(other.members[i]))
                        return false;
                return true;
            }
            locals(node) {
                let result, sorted = true;
                for (let i = 0; i < this.members.length; i++) {
                    let locals = this.members[i].localsInner(node);
                    if (!locals.length)
                        continue;
                    if (!result) {
                        result = locals;
                    }
                    else {
                        if (sorted) {
                            result = result.slice();
                            sorted = false;
                        }
                        for (let j = 0; j < locals.length; j++)
                            result.push(locals[j]);
                    }
                }
                return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
            }
            // Create a group for the given array of decoration sets, or return
            // a single set when possible.
            static from(members) {
                switch (members.length) {
                    case 0: return empty;
                    case 1: return members[0];
                    default: return new DecorationGroup(members);
                }
            }
        }
        function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
            let children = oldChildren.slice();
            // Mark the children that are directly touched by changes, and
            // move those that are after the changes.
            for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
                let moved = 0;
                mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
                    let dSize = (newEnd - newStart) - (oldEnd - oldStart);
                    for (let i = 0; i < children.length; i += 3) {
                        let end = children[i + 1];
                        if (end < 0 || oldStart > end + baseOffset - moved)
                            continue;
                        let start = children[i] + baseOffset - moved;
                        if (oldEnd >= start) {
                            children[i + 1] = oldStart <= start ? -2 : -1;
                        }
                        else if (newStart >= offset && dSize) {
                            children[i] += dSize;
                            children[i + 1] += dSize;
                        }
                    }
                    moved += dSize;
                });
                baseOffset = mapping.maps[i].map(baseOffset, -1);
            }
            // Find the child nodes that still correspond to a single node,
            // recursively call mapInner on them and update their positions.
            let mustRebuild = false;
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] < 0) { // Touched nodes
                    if (children[i + 1] == -2) {
                        mustRebuild = true;
                        children[i + 1] = -1;
                        continue;
                    }
                    let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
                    if (fromLocal < 0 || fromLocal >= node.content.size) {
                        mustRebuild = true;
                        continue;
                    }
                    // Must read oldChildren because children was tagged with -1
                    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
                    let { index, offset: childOffset } = node.content.findIndex(fromLocal);
                    let childNode = node.maybeChild(index);
                    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                        let mapped = children[i + 2]
                            .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                        if (mapped != empty) {
                            children[i] = fromLocal;
                            children[i + 1] = toLocal;
                            children[i + 2] = mapped;
                        }
                        else {
                            children[i + 1] = -2;
                            mustRebuild = true;
                        }
                    }
                    else {
                        mustRebuild = true;
                    }
                }
            // Remaining children must be collected and rebuilt into the appropriate structure
            if (mustRebuild) {
                let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
                let built = buildTree(decorations, node, 0, options);
                newLocal = built.local;
                for (let i = 0; i < children.length; i += 3)
                    if (children[i + 1] < 0) {
                        children.splice(i, 3);
                        i -= 3;
                    }
                for (let i = 0, j = 0; i < built.children.length; i += 3) {
                    let from = built.children[i];
                    while (j < children.length && children[j] < from)
                        j += 3;
                    children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
                }
            }
            return new DecorationSet(newLocal.sort(byPos), children);
        }
        function moveSpans(spans, offset) {
            if (!offset || !spans.length)
                return spans;
            let result = [];
            for (let i = 0; i < spans.length; i++) {
                let span = spans[i];
                result.push(new Decoration(span.from + offset, span.to + offset, span.type));
            }
            return result;
        }
        function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
            // Gather all decorations from the remaining marked children
            function gather(set, oldOffset) {
                for (let i = 0; i < set.local.length; i++) {
                    let mapped = set.local[i].map(mapping, offset, oldOffset);
                    if (mapped)
                        decorations.push(mapped);
                    else if (options.onRemove)
                        options.onRemove(set.local[i].spec);
                }
                for (let i = 0; i < set.children.length; i += 3)
                    gather(set.children[i + 2], set.children[i] + oldOffset + 1);
            }
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] == -1)
                    gather(children[i + 2], oldChildren[i] + oldOffset + 1);
            return decorations;
        }
        function takeSpansForNode(spans, node, offset) {
            if (node.isLeaf)
                return null;
            let end = offset + node.nodeSize, found = null;
            for (let i = 0, span; i < spans.length; i++) {
                if ((span = spans[i]) && span.from > offset && span.to < end) {
                    (found || (found = [])).push(span);
                    spans[i] = null;
                }
            }
            return found;
        }
        function withoutNulls(array) {
            let result = [];
            for (let i = 0; i < array.length; i++)
                if (array[i] != null)
                    result.push(array[i]);
            return result;
        }
// Build up a tree that corresponds to a set of decorations. `offset`
// is a base offset that should be subtracted from the `from` and `to`
// positions in the spans (so that we don't have to allocate new spans
// for recursive calls).
        function buildTree(spans, node, offset, options) {
            let children = [], hasNulls = false;
            node.forEach((childNode, localStart) => {
                let found = takeSpansForNode(spans, childNode, localStart + offset);
                if (found) {
                    hasNulls = true;
                    let subtree = buildTree(found, childNode, offset + localStart + 1, options);
                    if (subtree != empty)
                        children.push(localStart, localStart + childNode.nodeSize, subtree);
                }
            });
            let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
            for (let i = 0; i < locals.length; i++)
                if (!locals[i].type.valid(node, locals[i])) {
                    if (options.onRemove)
                        options.onRemove(locals[i].spec);
                    locals.splice(i--, 1);
                }
            return locals.length || children.length ? new DecorationSet(locals, children) : empty;
        }
// Used to sort decorations so that ones with a low start position
// come first, and within a set with the same start position, those
// with an smaller end position come first.
        function byPos(a, b) {
            return a.from - b.from || a.to - b.to;
        }
// Scan a sorted array of decorations for partially overlapping spans,
// and split those so that only fully overlapping spans are left (to
// make subsequent rendering easier). Will return the input array if
// no partially overlapping spans are found (the common case).
        function removeOverlap(spans) {
            let working = spans;
            for (let i = 0; i < working.length - 1; i++) {
                let span = working[i];
                if (span.from != span.to)
                    for (let j = i + 1; j < working.length; j++) {
                        let next = working[j];
                        if (next.from == span.from) {
                            if (next.to != span.to) {
                                if (working == spans)
                                    working = spans.slice();
                                // Followed by a partially overlapping larger span. Split that
                                // span.
                                working[j] = next.copy(next.from, span.to);
                                insertAhead(working, j + 1, next.copy(span.to, next.to));
                            }
                            continue;
                        }
                        else {
                            if (next.from < span.to) {
                                if (working == spans)
                                    working = spans.slice();
                                // The end of this one overlaps with a subsequent span. Split
                                // this one.
                                working[i] = span.copy(span.from, next.from);
                                insertAhead(working, j, span.copy(next.from, span.to));
                            }
                            break;
                        }
                    }
            }
            return working;
        }
        function insertAhead(array, i, deco) {
            while (i < array.length && byPos(deco, array[i]) > 0)
                i++;
            array.splice(i, 0, deco);
        }
// Get the decorations associated with the current props of a view.
        function viewDecorations(view) {
            let found = [];
            view.someProp("decorations", f => {
                let result = f(view.state);
                if (result && result != empty)
                    found.push(result);
            });
            if (view.cursorWrapper)
                found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
            return DecorationGroup.from(found);
        }

        const observeOptions = {
            childList: true,
            characterData: true,
            characterDataOldValue: true,
            attributes: true,
            attributeOldValue: true,
            subtree: true
        };
// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
        const useCharData = ie && ie_version <= 11;
        class SelectionState {
            constructor() {
                this.anchorNode = null;
                this.anchorOffset = 0;
                this.focusNode = null;
                this.focusOffset = 0;
            }
            set(sel) {
                this.anchorNode = sel.anchorNode;
                this.anchorOffset = sel.anchorOffset;
                this.focusNode = sel.focusNode;
                this.focusOffset = sel.focusOffset;
            }
            clear() {
                this.anchorNode = this.focusNode = null;
            }
            eq(sel) {
                return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
                    sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
            }
        }
        class DOMObserver {
            constructor(view, handleDOMChange) {
                this.view = view;
                this.handleDOMChange = handleDOMChange;
                this.queue = [];
                this.flushingSoon = -1;
                this.observer = null;
                this.currentSelection = new SelectionState;
                this.onCharData = null;
                this.suppressingSelectionUpdates = false;
                this.observer = window.MutationObserver &&
                    new window.MutationObserver(mutations => {
                        for (let i = 0; i < mutations.length; i++)
                            this.queue.push(mutations[i]);
                        // IE11 will sometimes (on backspacing out a single character
                        // text node after a BR node) call the observer callback
                        // before actually updating the DOM, which will cause
                        // ProseMirror to miss the change (see #930)
                        if (ie && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                            m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                            this.flushSoon();
                        else
                            this.flush();
                    });
                if (useCharData) {
                    this.onCharData = e => {
                        this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                        this.flushSoon();
                    };
                }
                this.onSelectionChange = this.onSelectionChange.bind(this);
            }
            flushSoon() {
                if (this.flushingSoon < 0)
                    this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
            }
            forceFlush() {
                if (this.flushingSoon > -1) {
                    window.clearTimeout(this.flushingSoon);
                    this.flushingSoon = -1;
                    this.flush();
                }
            }
            start() {
                if (this.observer) {
                    this.observer.takeRecords();
                    this.observer.observe(this.view.dom, observeOptions);
                }
                if (this.onCharData)
                    this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
                this.connectSelection();
            }
            stop() {
                if (this.observer) {
                    let take = this.observer.takeRecords();
                    if (take.length) {
                        for (let i = 0; i < take.length; i++)
                            this.queue.push(take[i]);
                        window.setTimeout(() => this.flush(), 20);
                    }
                    this.observer.disconnect();
                }
                if (this.onCharData)
                    this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
                this.disconnectSelection();
            }
            connectSelection() {
                this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            }
            disconnectSelection() {
                this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            }
            suppressSelectionUpdates() {
                this.suppressingSelectionUpdates = true;
                setTimeout(() => this.suppressingSelectionUpdates = false, 50);
            }
            onSelectionChange() {
                if (!hasFocusAndSelection(this.view))
                    return;
                if (this.suppressingSelectionUpdates)
                    return selectionToDOM(this.view);
                // Deletions on IE11 fire their events in the wrong order, giving
                // us a selection change event before the DOM changes are
                // reported.
                if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
                    let sel = this.view.domSelection();
                    // Selection.isCollapsed isn't reliable on IE
                    if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                        return this.flushSoon();
                }
                this.flush();
            }
            setCurSelection() {
                this.currentSelection.set(this.view.domSelection());
            }
            ignoreSelectionChange(sel) {
                if (sel.rangeCount == 0)
                    return true;
                let container = sel.getRangeAt(0).commonAncestorContainer;
                let desc = this.view.docView.nearestDesc(container);
                if (desc && desc.ignoreMutation({
                    type: "selection",
                    target: container.nodeType == 3 ? container.parentNode : container
                })) {
                    this.setCurSelection();
                    return true;
                }
            }
            flush() {
                let { view } = this;
                if (!view.docView || this.flushingSoon > -1)
                    return;
                let mutations = this.observer ? this.observer.takeRecords() : [];
                if (this.queue.length) {
                    mutations = this.queue.concat(mutations);
                    this.queue.length = 0;
                }
                let sel = view.domSelection();
                let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
                let from = -1, to = -1, typeOver = false, added = [];
                if (view.editable) {
                    for (let i = 0; i < mutations.length; i++) {
                        let result = this.registerMutation(mutations[i], added);
                        if (result) {
                            from = from < 0 ? result.from : Math.min(result.from, from);
                            to = to < 0 ? result.to : Math.max(result.to, to);
                            if (result.typeOver)
                                typeOver = true;
                        }
                    }
                }
                if (gecko && added.length > 1) {
                    let brs = added.filter(n => n.nodeName == "BR");
                    if (brs.length == 2) {
                        let a = brs[0], b = brs[1];
                        if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                            b.remove();
                        else
                            a.remove();
                    }
                }
                let readSel = null;
                // If it looks like the browser has reset the selection to the
                // start of the document after focus, restore the selection from
                // the state
                if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
                    view.input.lastTouch < Date.now() - 300 &&
                    selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
                    readSel.eq(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(view.state.doc.resolve(0), 1))) {
                    view.input.lastFocus = 0;
                    selectionToDOM(view);
                    this.currentSelection.set(sel);
                    view.scrollToSelection();
                }
                else if (from > -1 || newSel) {
                    if (from > -1) {
                        view.docView.markDirty(from, to);
                        checkCSS(view);
                    }
                    this.handleDOMChange(from, to, typeOver, added);
                    if (view.docView && view.docView.dirty)
                        view.updateState(view.state);
                    else if (!this.currentSelection.eq(sel))
                        selectionToDOM(view);
                    this.currentSelection.set(sel);
                }
            }
            registerMutation(mut, added) {
                // Ignore mutations inside nodes that were already noted as inserted
                if (added.indexOf(mut.target) > -1)
                    return null;
                let desc = this.view.docView.nearestDesc(mut.target);
                if (mut.type == "attributes" &&
                    (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                        // Firefox sometimes fires spurious events for null/empty styles
                        (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
                    return null;
                if (!desc || desc.ignoreMutation(mut))
                    return null;
                if (mut.type == "childList") {
                    for (let i = 0; i < mut.addedNodes.length; i++)
                        added.push(mut.addedNodes[i]);
                    if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                        return { from: desc.posBefore, to: desc.posAfter };
                    let prev = mut.previousSibling, next = mut.nextSibling;
                    if (ie && ie_version <= 11 && mut.addedNodes.length) {
                        // IE11 gives us incorrect next/prev siblings for some
                        // insertions, so if there are added nodes, recompute those
                        for (let i = 0; i < mut.addedNodes.length; i++) {
                            let { previousSibling, nextSibling } = mut.addedNodes[i];
                            if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                                prev = previousSibling;
                            if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                                next = nextSibling;
                        }
                    }
                    let fromOffset = prev && prev.parentNode == mut.target
                        ? domIndex(prev) + 1 : 0;
                    let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
                    let toOffset = next && next.parentNode == mut.target
                        ? domIndex(next) : mut.target.childNodes.length;
                    let to = desc.localPosFromDOM(mut.target, toOffset, 1);
                    return { from, to };
                }
                else if (mut.type == "attributes") {
                    return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
                }
                else { // "characterData"
                    return {
                        from: desc.posAtStart,
                        to: desc.posAtEnd,
                        // An event was generated for a text change that didn't change
                        // any text. Mark the dom change to fall back to assuming the
                        // selection was typed over with an identical value if it can't
                        // find another change.
                        typeOver: mut.target.nodeValue == mut.oldValue
                    };
                }
            }
        }
        let cssChecked = new WeakMap();
        let cssCheckWarned = false;
        function checkCSS(view) {
            if (cssChecked.has(view))
                return;
            cssChecked.set(view, null);
            if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
                view.requiresGeckoHackNode = gecko;
                if (cssCheckWarned)
                    return;
                console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
                cssCheckWarned = true;
            }
        }

// Note that all referencing and parsing is done with the
// start-of-operation selection and document, since that's the one
// that the DOM represents. If any changes came in in the meantime,
// the modification is mapped over those before it is applied, in
// readDOMChange.
        function parseBetween(view, from_, to_) {
            let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
            let domSel = view.domSelection();
            let find;
            let anchor = domSel.anchorNode;
            if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
                find = [{ node: anchor, offset: domSel.anchorOffset }];
                if (!selectionCollapsed(domSel))
                    find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
            }
            // Work around issue in Chrome where backspacing sometimes replaces
            // the deleted content with a random BR node (issues #799, #831)
            if (chrome && view.input.lastKeyCode === 8) {
                for (let off = toOffset; off > fromOffset; off--) {
                    let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                    if (node.nodeName == "BR" && !desc) {
                        toOffset = off;
                        break;
                    }
                    if (!desc || desc.size)
                        break;
                }
            }
            let startDoc = view.state.doc;
            let parser = view.someProp("domParser") || prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser.fromSchema(view.state.schema);
            let $from = startDoc.resolve(from);
            let sel = null, doc = parser.parse(parent, {
                topNode: $from.parent,
                topMatch: $from.parent.contentMatchAt($from.index()),
                topOpen: true,
                from: fromOffset,
                to: toOffset,
                preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
                findPositions: find,
                ruleFromNode,
                context: $from
            });
            if (find && find[0].pos != null) {
                let anchor = find[0].pos, head = find[1] && find[1].pos;
                if (head == null)
                    head = anchor;
                sel = { anchor: anchor + from, head: head + from };
            }
            return { doc, sel, from, to };
        }
        function ruleFromNode(dom) {
            let desc = dom.pmViewDesc;
            if (desc) {
                return desc.parseRule();
            }
            else if (dom.nodeName == "BR" && dom.parentNode) {
                // Safari replaces the list item or table cell with a BR
                // directly in the list node (?!) if you delete the last
                // character in a list item or table cell (#708, #862)
                if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                    let skip = document.createElement("div");
                    skip.appendChild(document.createElement("li"));
                    return { skip };
                }
                else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                    return { ignore: true };
                }
            }
            else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
                return { ignore: true };
            }
            return null;
        }
        function readDOMChange(view, from, to, typeOver, addedNodes) {
            if (from < 0) {
                let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
                let newSel = selectionFromDOM(view, origin);
                if (newSel && !view.state.selection.eq(newSel)) {
                    let tr = view.state.tr.setSelection(newSel);
                    if (origin == "pointer")
                        tr.setMeta("pointer", true);
                    else if (origin == "key")
                        tr.scrollIntoView();
                    view.dispatch(tr);
                }
                return;
            }
            let $before = view.state.doc.resolve(from);
            let shared = $before.sharedDepth(to);
            from = $before.before(shared + 1);
            to = view.state.doc.resolve(to).after(shared + 1);
            let sel = view.state.selection;
            let parse = parseBetween(view, from, to);
            let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
            let preferredPos, preferredSide;
            // Prefer anchoring to end when Backspace is pressed
            if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
                preferredPos = view.state.selection.to;
                preferredSide = "end";
            }
            else {
                preferredPos = view.state.selection.from;
                preferredSide = "start";
            }
            view.input.lastKeyCode = null;
            let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
            if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
                addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P") &&
                (!change || change.endA >= change.endB) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
                view.input.lastIOSEnter = 0;
                return;
            }
            if (!change) {
                if (typeOver && sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
                    !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
                    change = { start: sel.from, endA: sel.to, endB: sel.to };
                }
                else {
                    if (parse.sel) {
                        let sel = resolveSelection(view, view.state.doc, parse.sel);
                        if (sel && !sel.eq(view.state.selection))
                            view.dispatch(view.state.tr.setSelection(sel));
                    }
                    return;
                }
            }
            // Chrome sometimes leaves the cursor before the inserted text when
            // composing after a cursor wrapper. This moves it forward.
            if (chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from &&
                parse.sel.head == parse.sel.anchor) {
                let size = change.endB - change.start;
                parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
            }
            view.input.domChangeCount++;
            // Handle the case where overwriting a selection by typing matches
            // the start or end of the selected content, creating a change
            // that's smaller than what was actually overwritten.
            if (view.state.selection.from < view.state.selection.to &&
                change.start == change.endB &&
                view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection) {
                if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
                    view.state.selection.from >= parse.from) {
                    change.start = view.state.selection.from;
                }
                else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
                    view.state.selection.to <= parse.to) {
                    change.endB += (view.state.selection.to - change.endA);
                    change.endA = view.state.selection.to;
                }
            }
            // IE11 will insert a non-breaking space _ahead_ of the space after
            // the cursor space when adding a space before another space. When
            // that happened, adjust the change to cover the space instead.
            if (ie && ie_version <= 11 && change.endB == change.start + 1 &&
                change.endA == change.start && change.start > parse.from &&
                parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
                change.start--;
                change.endA--;
                change.endB--;
            }
            let $from = parse.doc.resolveNoCache(change.start - parse.from);
            let $to = parse.doc.resolveNoCache(change.endB - parse.from);
            let $fromA = doc.resolve(change.start);
            let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
            let nextSel;
            // If this looks like the effect of pressing Enter (or was recorded
            // as being an iOS enter press), just dispatch an Enter key instead.
            if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
                        (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
                    (!inlineChange && $from.pos < parse.doc.content.size &&
                        (nextSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
                        nextSel.head == $to.pos)) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
                view.input.lastIOSEnter = 0;
                return;
            }
            // Same for backspace
            if (view.state.selection.anchor > change.start &&
                looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
                if (android && chrome)
                    view.domObserver.suppressSelectionUpdates(); // #820
                return;
            }
            // Chrome Android will occasionally, during composition, delete the
            // entire composition and then immediately insert it again. This is
            // used to detect that situation.
            if (chrome && android && change.endB == change.start)
                view.input.lastAndroidDelete = Date.now();
            // This tries to detect Android virtual keyboard
            // enter-and-pick-suggestion action. That sometimes (see issue
            // #1059) first fires a DOM mutation, before moving the selection to
            // the newly created block. And then, because ProseMirror cleans up
            // the DOM selection, it gives up moving the selection entirely,
            // leaving the cursor in the wrong place. When that happens, we drop
            // the new paragraph from the initial change, and fire a simulated
            // enter key afterwards.
            if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
                parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
                change.endB -= 2;
                $to = parse.doc.resolveNoCache(change.endB - parse.from);
                setTimeout(() => {
                    view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
                }, 20);
            }
            let chFrom = change.start, chTo = change.endA;
            let tr, storedMarks, markChange;
            if (inlineChange) {
                if ($from.pos == $to.pos) { // Deletion
                    // IE11 sometimes weirdly moves the DOM selection around after
                    // backspacing out the first element in a textblock
                    if (ie && ie_version <= 11 && $from.parentOffset == 0) {
                        view.domObserver.suppressSelectionUpdates();
                        setTimeout(() => selectionToDOM(view), 20);
                    }
                    tr = view.state.tr.delete(chFrom, chTo);
                    storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
                }
                else if ( // Adding or removing a mark
                    change.endA == change.endB &&
                    (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
                    tr = view.state.tr;
                    if (markChange.type == "add")
                        tr.addMark(chFrom, chTo, markChange.mark);
                    else
                        tr.removeMark(chFrom, chTo, markChange.mark);
                }
                else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                    // Both positions in the same text node -- simply insert text
                    let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                    if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                        return;
                    tr = view.state.tr.insertText(text, chFrom, chTo);
                }
            }
            if (!tr)
                tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
            if (parse.sel) {
                let sel = resolveSelection(view, tr.doc, parse.sel);
                // Chrome Android will sometimes, during composition, report the
                // selection in the wrong place. If it looks like that is
                // happening, don't update the selection.
                // Edge just doesn't move the cursor forward when you start typing
                // in an empty block or between br nodes.
                if (sel && !(chrome && android && view.composing && sel.empty &&
                    (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
                    (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
                    ie && sel.empty && sel.head == chFrom))
                    tr.setSelection(sel);
            }
            if (storedMarks)
                tr.ensureMarks(storedMarks);
            view.dispatch(tr.scrollIntoView());
        }
        function resolveSelection(view, doc, parsedSel) {
            if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
                return null;
            return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
        }
// Given two same-length, non-empty fragments of inline content,
// determine whether the first could be created from the second by
// removing or adding a single mark type.
        function isMarkChange(cur, prev) {
            let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
            let added = curMarks, removed = prevMarks, type, mark, update;
            for (let i = 0; i < prevMarks.length; i++)
                added = prevMarks[i].removeFromSet(added);
            for (let i = 0; i < curMarks.length; i++)
                removed = curMarks[i].removeFromSet(removed);
            if (added.length == 1 && removed.length == 0) {
                mark = added[0];
                type = "add";
                update = (node) => node.mark(mark.addToSet(node.marks));
            }
            else if (added.length == 0 && removed.length == 1) {
                mark = removed[0];
                type = "remove";
                update = (node) => node.mark(mark.removeFromSet(node.marks));
            }
            else {
                return null;
            }
            let updated = [];
            for (let i = 0; i < prev.childCount; i++)
                updated.push(update(prev.child(i)));
            if (prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(updated).eq(cur))
                return { mark, type };
        }
        function looksLikeJoin(old, start, end, $newStart, $newEnd) {
            if (!$newStart.parent.isTextblock ||
                // The content must have shrunk
                end - start <= $newEnd.pos - $newStart.pos ||
                // newEnd must point directly at or after the end of the block that newStart points into
                skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
                return false;
            let $start = old.resolve(start);
            // Start must be at the end of a block
            if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
                return false;
            let $next = old.resolve(skipClosingAndOpening($start, true, true));
            // The next textblock must start before end and end near it
            if (!$next.parent.isTextblock || $next.pos > end ||
                skipClosingAndOpening($next, true, false) < end)
                return false;
            // The fragments after the join point must match
            return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
        }
        function skipClosingAndOpening($pos, fromEnd, mayOpen) {
            let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
            while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
                depth--;
                end++;
                fromEnd = false;
            }
            if (mayOpen) {
                let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
                while (next && !next.isLeaf) {
                    next = next.firstChild;
                    end++;
                }
            }
            return end;
        }
        function findDiff(a, b, pos, preferredPos, preferredSide) {
            let start = a.findDiffStart(b, pos);
            if (start == null)
                return null;
            let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
            if (preferredSide == "end") {
                let adjust = Math.max(0, start - Math.min(endA, endB));
                preferredPos -= endA + adjust - start;
            }
            if (endA < start && a.size < b.size) {
                let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
                start -= move;
                endB = start + (endB - endA);
                endA = start;
            }
            else if (endB < start) {
                let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
                start -= move;
                endA = start + (endA - endB);
                endB = start;
            }
            return { start, endA, endB };
        }

        /**
         @internal
         */
        const __serializeForClipboard = serializeForClipboard;
        /**
         @internal
         */
        const __parseFromClipboard = parseFromClipboard;
        /**
         @internal
         */
        const __endComposition = endComposition;
        /**
         An editor view manages the DOM structure that represents an
         editable document. Its state and behavior are determined by its
         [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
         */
        class EditorView {
            /**
             Create a view. `place` may be a DOM node that the editor should
             be appended to, a function that will place it into the document,
             or an object whose `mount` property holds the node to use as the
             document container. If it is `null`, the editor will not be
             added to the document.
             */
            constructor(place, props) {
                this._root = null;
                /**
                 @internal
                 */
                this.focused = false;
                /**
                 Kludge used to work around a Chrome bug @internal
                 */
                this.trackWrites = null;
                this.mounted = false;
                /**
                 @internal
                 */
                this.markCursor = null;
                /**
                 @internal
                 */
                this.cursorWrapper = null;
                /**
                 @internal
                 */
                this.lastSelectedViewDesc = undefined;
                /**
                 @internal
                 */
                this.input = new InputState;
                this.prevDirectPlugins = [];
                this.pluginViews = [];
                /**
                 Holds `true` when a hack node is needed in Firefox to prevent the
                 [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
                 @internal
                 */
                this.requiresGeckoHackNode = false;
                /**
                 When editor content is being dragged, this object contains
                 information about the dragged slice and whether it is being
                 copied or moved. At any other time, it is null.
                 */
                this.dragging = null;
                this._props = props;
                this.state = props.state;
                this.directPlugins = props.plugins || [];
                this.directPlugins.forEach(checkStateComponent);
                this.dispatch = this.dispatch.bind(this);
                this.dom = (place && place.mount) || document.createElement("div");
                if (place) {
                    if (place.appendChild)
                        place.appendChild(this.dom);
                    else if (typeof place == "function")
                        place(this.dom);
                    else if (place.mount)
                        this.mounted = true;
                }
                this.editable = getEditable(this);
                updateCursorWrapper(this);
                this.nodeViews = buildNodeViews(this);
                this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
                this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
                this.domObserver.start();
                initInput(this);
                this.updatePluginViews();
            }
            /**
             Holds `true` when a
             [composition](https://w3c.github.io/uievents/#events-compositionevents)
             is active.
             */
            get composing() { return this.input.composing; }
            /**
             The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
             */
            get props() {
                if (this._props.state != this.state) {
                    let prev = this._props;
                    this._props = {};
                    for (let name in prev)
                        this._props[name] = prev[name];
                    this._props.state = this.state;
                }
                return this._props;
            }
            /**
             Update the view's props. Will immediately cause an update to
             the DOM.
             */
            update(props) {
                if (props.handleDOMEvents != this._props.handleDOMEvents)
                    ensureListeners(this);
                this._props = props;
                if (props.plugins) {
                    props.plugins.forEach(checkStateComponent);
                    this.directPlugins = props.plugins;
                }
                this.updateStateInner(props.state, true);
            }
            /**
             Update the view by updating existing props object with the object
             given as argument. Equivalent to `view.update(Object.assign({},
             view.props, props))`.
             */
            setProps(props) {
                let updated = {};
                for (let name in this._props)
                    updated[name] = this._props[name];
                updated.state = this.state;
                for (let name in props)
                    updated[name] = props[name];
                this.update(updated);
            }
            /**
             Update the editor's `state` prop, without touching any of the
             other props.
             */
            updateState(state) {
                this.updateStateInner(state, this.state.plugins != state.plugins);
            }
            updateStateInner(state, reconfigured) {
                let prev = this.state, redraw = false, updateSel = false;
                // When stored marks are added, stop composition, so that they can
                // be displayed.
                if (state.storedMarks && this.composing) {
                    clearComposition(this);
                    updateSel = true;
                }
                this.state = state;
                if (reconfigured) {
                    let nodeViews = buildNodeViews(this);
                    if (changedNodeViews(nodeViews, this.nodeViews)) {
                        this.nodeViews = nodeViews;
                        redraw = true;
                    }
                    ensureListeners(this);
                }
                this.editable = getEditable(this);
                updateCursorWrapper(this);
                let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
                let scroll = reconfigured ? "reset"
                    : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
                let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
                if (updateDoc || !state.selection.eq(prev.selection))
                    updateSel = true;
                let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
                if (updateSel) {
                    this.domObserver.stop();
                    // Work around an issue in Chrome, IE, and Edge where changing
                    // the DOM around an active selection puts it into a broken
                    // state where the thing the user sees differs from the
                    // selection reported by the Selection object (#710, #973,
                    // #1011, #1013, #1035).
                    let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing &&
                        !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
                    if (updateDoc) {
                        // If the node that the selection points into is written to,
                        // Chrome sometimes starts misreporting the selection, so this
                        // tracks that and forces a selection reset when our update
                        // did write to the node.
                        let chromeKludge = chrome ? (this.trackWrites = this.domSelection().focusNode) : null;
                        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                            this.docView.updateOuterDeco([]);
                            this.docView.destroy();
                            this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                        }
                        if (chromeKludge && !this.trackWrites)
                            forceSelUpdate = true;
                    }
                    // Work around for an issue where an update arriving right between
                    // a DOM selection change and the "selectionchange" event for it
                    // can cause a spurious DOM selection update, disrupting mouse
                    // drag selection.
                    if (forceSelUpdate ||
                        !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelection()) && anchorInRightPlace(this))) {
                        selectionToDOM(this, forceSelUpdate);
                    }
                    else {
                        syncNodeSelection(this, state.selection);
                        this.domObserver.setCurSelection();
                    }
                    this.domObserver.start();
                }
                this.updatePluginViews(prev);
                if (scroll == "reset") {
                    this.dom.scrollTop = 0;
                }
                else if (scroll == "to selection") {
                    this.scrollToSelection();
                }
                else if (oldScrollPos) {
                    resetScrollPos(oldScrollPos);
                }
            }
            /**
             @internal
             */
            scrollToSelection() {
                let startDOM = this.domSelection().focusNode;
                if (this.someProp("handleScrollToSelection", f => f(this))) ;
                else if (this.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {
                    let target = this.docView.domAfterPos(this.state.selection.from);
                    if (target.nodeType == 1)
                        scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
                }
                else {
                    scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
                }
            }
            destroyPluginViews() {
                let view;
                while (view = this.pluginViews.pop())
                    if (view.destroy)
                        view.destroy();
            }
            updatePluginViews(prevState) {
                if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
                    this.prevDirectPlugins = this.directPlugins;
                    this.destroyPluginViews();
                    for (let i = 0; i < this.directPlugins.length; i++) {
                        let plugin = this.directPlugins[i];
                        if (plugin.spec.view)
                            this.pluginViews.push(plugin.spec.view(this));
                    }
                    for (let i = 0; i < this.state.plugins.length; i++) {
                        let plugin = this.state.plugins[i];
                        if (plugin.spec.view)
                            this.pluginViews.push(plugin.spec.view(this));
                    }
                }
                else {
                    for (let i = 0; i < this.pluginViews.length; i++) {
                        let pluginView = this.pluginViews[i];
                        if (pluginView.update)
                            pluginView.update(this, prevState);
                    }
                }
            }
            someProp(propName, f) {
                let prop = this._props && this._props[propName], value;
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
                for (let i = 0; i < this.directPlugins.length; i++) {
                    let prop = this.directPlugins[i].props[propName];
                    if (prop != null && (value = f ? f(prop) : prop))
                        return value;
                }
                let plugins = this.state.plugins;
                if (plugins)
                    for (let i = 0; i < plugins.length; i++) {
                        let prop = plugins[i].props[propName];
                        if (prop != null && (value = f ? f(prop) : prop))
                            return value;
                    }
            }
            /**
             Query whether the view has focus.
             */
            hasFocus() {
                // Work around IE not handling focus correctly if resize handles are shown.
                // If the cursor is inside an element with resize handles, activeElement
                // will be that element instead of this.dom.
                if (ie) {
                    // If activeElement is within this.dom, and there are no other elements
                    // setting `contenteditable` to false in between, treat it as focused.
                    let node = this.root.activeElement;
                    if (node == this.dom)
                        return true;
                    if (!node || !this.dom.contains(node))
                        return false;
                    while (node && this.dom != node && this.dom.contains(node)) {
                        if (node.contentEditable == 'false')
                            return false;
                        node = node.parentElement;
                    }
                    return true;
                }
                return this.root.activeElement == this.dom;
            }
            /**
             Focus the editor.
             */
            focus() {
                this.domObserver.stop();
                if (this.editable)
                    focusPreventScroll(this.dom);
                selectionToDOM(this);
                this.domObserver.start();
            }
            /**
             Get the document root in which the editor exists. This will
             usually be the top-level `document`, but might be a [shadow
             DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
             root if the editor is inside one.
             */
            get root() {
                let cached = this._root;
                if (cached == null)
                    for (let search = this.dom.parentNode; search; search = search.parentNode) {
                        if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                            if (!search.getSelection)
                                Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                            return this._root = search;
                        }
                    }
                return cached || document;
            }
            /**
             Given a pair of viewport coordinates, return the document
             position that corresponds to them. May return null if the given
             coordinates aren't inside of the editor. When an object is
             returned, its `pos` property is the position nearest to the
             coordinates, and its `inside` property holds the position of the
             inner node that the position falls inside of, or -1 if it is at
             the top level, not in any node.
             */
            posAtCoords(coords) {
                return posAtCoords(this, coords);
            }
            /**
             Returns the viewport rectangle at a given document position.
             `left` and `right` will be the same number, as this returns a
             flat cursor-ish rectangle. If the position is between two things
             that aren't directly adjacent, `side` determines which element
             is used. When < 0, the element before the position is used,
             otherwise the element after.
             */
            coordsAtPos(pos, side = 1) {
                return coordsAtPos(this, pos, side);
            }
            /**
             Find the DOM position that corresponds to the given document
             position. When `side` is negative, find the position as close as
             possible to the content before the position. When positive,
             prefer positions close to the content after the position. When
             zero, prefer as shallow a position as possible.

             Note that you should **not** mutate the editor's internal DOM,
             only inspect it (and even that is usually not necessary).
             */
            domAtPos(pos, side = 0) {
                return this.docView.domFromPos(pos, side);
            }
            /**
             Find the DOM node that represents the document node after the
             given position. May return `null` when the position doesn't point
             in front of a node or if the node is inside an opaque node view.

             This is intended to be able to call things like
             `getBoundingClientRect` on that DOM node. Do **not** mutate the
             editor DOM directly, or add styling this way, since that will be
             immediately overriden by the editor as it redraws the node.
             */
            nodeDOM(pos) {
                let desc = this.docView.descAt(pos);
                return desc ? desc.nodeDOM : null;
            }
            /**
             Find the document position that corresponds to a given DOM
             position. (Whenever possible, it is preferable to inspect the
             document structure directly, rather than poking around in the
             DOM, but sometimes—for example when interpreting an event
             target—you don't have a choice.)

             The `bias` parameter can be used to influence which side of a DOM
             node to use when the position is inside a leaf node.
             */
            posAtDOM(node, offset, bias = -1) {
                let pos = this.docView.posFromDOM(node, offset, bias);
                if (pos == null)
                    throw new RangeError("DOM position not inside the editor");
                return pos;
            }
            /**
             Find out whether the selection is at the end of a textblock when
             moving in a given direction. When, for example, given `"left"`,
             it will return true if moving left from the current cursor
             position would leave that position's parent textblock. Will apply
             to the view's current state by default, but it is possible to
             pass a different state.
             */
            endOfTextblock(dir, state) {
                return endOfTextblock(this, state || this.state, dir);
            }
            /**
             Removes the editor from the DOM and destroys all [node
             views](https://prosemirror.net/docs/ref/#view.NodeView).
             */
            destroy() {
                if (!this.docView)
                    return;
                destroyInput(this);
                this.destroyPluginViews();
                if (this.mounted) {
                    this.docView.update(this.state.doc, [], viewDecorations(this), this);
                    this.dom.textContent = "";
                }
                else if (this.dom.parentNode) {
                    this.dom.parentNode.removeChild(this.dom);
                }
                this.docView.destroy();
                this.docView = null;
            }
            /**
             This is true when the view has been
             [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
             used anymore).
             */
            get isDestroyed() {
                return this.docView == null;
            }
            /**
             Used for testing.
             */
            dispatchEvent(event) {
                return dispatchEvent(this, event);
            }
            /**
             Dispatch a transaction. Will call
             [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
             when given, and otherwise defaults to applying the transaction to
             the current state and calling
             [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
             This method is bound to the view instance, so that it can be
             easily passed around.
             */
            dispatch(tr) {
                let dispatchTransaction = this._props.dispatchTransaction;
                if (dispatchTransaction)
                    dispatchTransaction.call(this, tr);
                else
                    this.updateState(this.state.apply(tr));
            }
            /**
             @internal
             */
            domSelection() {
                return this.root.getSelection();
            }
        }
        function computeDocDeco(view) {
            let attrs = Object.create(null);
            attrs.class = "ProseMirror";
            attrs.contenteditable = String(view.editable);
            attrs.translate = "no";
            view.someProp("attributes", value => {
                if (typeof value == "function")
                    value = value(view.state);
                if (value)
                    for (let attr in value) {
                        if (attr == "class")
                            attrs.class += " " + value[attr];
                        if (attr == "style") {
                            attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                        }
                        else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                            attrs[attr] = String(value[attr]);
                    }
            });
            return [Decoration.node(0, view.state.doc.content.size, attrs)];
        }
        function updateCursorWrapper(view) {
            if (view.markCursor) {
                let dom = document.createElement("img");
                dom.className = "ProseMirror-separator";
                dom.setAttribute("mark-placeholder", "true");
                dom.setAttribute("alt", "");
                view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
            }
            else {
                view.cursorWrapper = null;
            }
        }
        function getEditable(view) {
            return !view.someProp("editable", value => value(view.state) === false);
        }
        function selectionContextChanged(sel1, sel2) {
            let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
            return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
        }
        function buildNodeViews(view) {
            let result = Object.create(null);
            function add(obj) {
                for (let prop in obj)
                    if (!Object.prototype.hasOwnProperty.call(result, prop))
                        result[prop] = obj[prop];
            }
            view.someProp("nodeViews", add);
            view.someProp("markViews", add);
            return result;
        }
        function changedNodeViews(a, b) {
            let nA = 0, nB = 0;
            for (let prop in a) {
                if (a[prop] != b[prop])
                    return true;
                nA++;
            }
            for (let _ in b)
                nB++;
            return nA != nB;
        }
        function checkStateComponent(plugin) {
            if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
                throw new RangeError("Plugins passed directly to the view must not have a state component");
        }




        /***/ }),

    /***/ "./node_modules/ssr-window/ssr-window.esm.js":
    /*!***************************************************!*\
  !*** ./node_modules/ssr-window/ssr-window.esm.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "extend": () => (/* binding */ extend),
            /* harmony export */   "getDocument": () => (/* binding */ getDocument),
            /* harmony export */   "getWindow": () => (/* binding */ getWindow),
            /* harmony export */   "ssrDocument": () => (/* binding */ ssrDocument),
            /* harmony export */   "ssrWindow": () => (/* binding */ ssrWindow)
            /* harmony export */ });
        /**
         * SSR Window 4.0.2
         * Better handling for window object in SSR environment
         * https://github.com/nolimits4web/ssr-window
         *
         * Copyright 2021, Vladimir Kharlampidi
         *
         * Licensed under MIT
         *
         * Released on: December 13, 2021
         */
        /* eslint-disable no-param-reassign */
        function isObject(obj) {
            return (obj !== null &&
                typeof obj === 'object' &&
                'constructor' in obj &&
                obj.constructor === Object);
        }
        function extend(target = {}, src = {}) {
            Object.keys(src).forEach((key) => {
                if (typeof target[key] === 'undefined')
                    target[key] = src[key];
                else if (isObject(src[key]) &&
                    isObject(target[key]) &&
                    Object.keys(src[key]).length > 0) {
                    extend(target[key], src[key]);
                }
            });
        }

        const ssrDocument = {
            body: {},
            addEventListener() { },
            removeEventListener() { },
            activeElement: {
                blur() { },
                nodeName: '',
            },
            querySelector() {
                return null;
            },
            querySelectorAll() {
                return [];
            },
            getElementById() {
                return null;
            },
            createEvent() {
                return {
                    initEvent() { },
                };
            },
            createElement() {
                return {
                    children: [],
                    childNodes: [],
                    style: {},
                    setAttribute() { },
                    getElementsByTagName() {
                        return [];
                    },
                };
            },
            createElementNS() {
                return {};
            },
            importNode() {
                return null;
            },
            location: {
                hash: '',
                host: '',
                hostname: '',
                href: '',
                origin: '',
                pathname: '',
                protocol: '',
                search: '',
            },
        };
        function getDocument() {
            const doc = typeof document !== 'undefined' ? document : {};
            extend(doc, ssrDocument);
            return doc;
        }

        const ssrWindow = {
            document: ssrDocument,
            navigator: {
                userAgent: '',
            },
            location: {
                hash: '',
                host: '',
                hostname: '',
                href: '',
                origin: '',
                pathname: '',
                protocol: '',
                search: '',
            },
            history: {
                replaceState() { },
                pushState() { },
                go() { },
                back() { },
            },
            CustomEvent: function CustomEvent() {
                return this;
            },
            addEventListener() { },
            removeEventListener() { },
            getComputedStyle() {
                return {
                    getPropertyValue() {
                        return '';
                    },
                };
            },
            Image() { },
            Date() { },
            screen: {},
            setTimeout() { },
            clearTimeout() { },
            matchMedia() {
                return {};
            },
            requestAnimationFrame(callback) {
                if (typeof setTimeout === 'undefined') {
                    callback();
                    return null;
                }
                return setTimeout(callback, 0);
            },
            cancelAnimationFrame(id) {
                if (typeof setTimeout === 'undefined') {
                    return;
                }
                clearTimeout(id);
            },
        };
        function getWindow() {
            const win = typeof window !== 'undefined' ? window : {};
            extend(win, ssrWindow);
            return win;
        }




        /***/ }),

    /***/ "./node_modules/swiper/core/breakpoints/getBreakpoint.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/breakpoints/getBreakpoint.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getBreakpoint)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        function getBreakpoint(breakpoints, base = 'window', containerEl) {
            if (!breakpoints || base === 'container' && !containerEl) return undefined;
            let breakpoint = false;
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
            const points = Object.keys(breakpoints).map(point => {
                if (typeof point === 'string' && point.indexOf('@') === 0) {
                    const minRatio = parseFloat(point.substr(1));
                    const value = currentHeight * minRatio;
                    return {
                        value,
                        point
                    };
                }

                return {
                    value: point,
                    point
                };
            });
            points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));

            for (let i = 0; i < points.length; i += 1) {
                const {
                    point,
                    value
                } = points[i];

                if (base === 'window') {
                    if (window.matchMedia(`(min-width: ${value}px)`).matches) {
                        breakpoint = point;
                    }
                } else if (value <= containerEl.clientWidth) {
                    breakpoint = point;
                }
            }

            return breakpoint || 'max';
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/breakpoints/index.js":
    /*!*******************************************************!*\
  !*** ./node_modules/swiper/core/breakpoints/index.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _setBreakpoint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setBreakpoint.js */ "./node_modules/swiper/core/breakpoints/setBreakpoint.js");
        /* harmony import */ var _getBreakpoint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBreakpoint.js */ "./node_modules/swiper/core/breakpoints/getBreakpoint.js");


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            setBreakpoint: _setBreakpoint_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            getBreakpoint: _getBreakpoint_js__WEBPACK_IMPORTED_MODULE_1__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/breakpoints/setBreakpoint.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/breakpoints/setBreakpoint.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ setBreakpoint)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");


        const isGridEnabled = (swiper, params) => {
            return swiper.grid && params.grid && params.grid.rows > 1;
        };

        function setBreakpoint() {
            const swiper = this;
            const {
                activeIndex,
                initialized,
                loopedSlides = 0,
                params,
                $el
            } = swiper;
            const breakpoints = params.breakpoints;
            if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

            const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
            if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
            const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
            const breakpointParams = breakpointOnlyParams || swiper.originalParams;
            const wasMultiRow = isGridEnabled(swiper, params);
            const isMultiRow = isGridEnabled(swiper, breakpointParams);
            const wasEnabled = params.enabled;

            if (wasMultiRow && !isMultiRow) {
                $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);
                swiper.emitContainerClasses();
            } else if (!wasMultiRow && isMultiRow) {
                $el.addClass(`${params.containerModifierClass}grid`);

                if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {
                    $el.addClass(`${params.containerModifierClass}grid-column`);
                }

                swiper.emitContainerClasses();
            } // Toggle navigation, pagination, scrollbar


            ['navigation', 'pagination', 'scrollbar'].forEach(prop => {
                const wasModuleEnabled = params[prop] && params[prop].enabled;
                const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;

                if (wasModuleEnabled && !isModuleEnabled) {
                    swiper[prop].disable();
                }

                if (!wasModuleEnabled && isModuleEnabled) {
                    swiper[prop].enable();
                }
            });
            const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
            const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

            if (directionChanged && initialized) {
                swiper.changeDirection();
            }

            (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.extend)(swiper.params, breakpointParams);
            const isEnabled = swiper.params.enabled;
            Object.assign(swiper, {
                allowTouchMove: swiper.params.allowTouchMove,
                allowSlideNext: swiper.params.allowSlideNext,
                allowSlidePrev: swiper.params.allowSlidePrev
            });

            if (wasEnabled && !isEnabled) {
                swiper.disable();
            } else if (!wasEnabled && isEnabled) {
                swiper.enable();
            }

            swiper.currentBreakpoint = breakpoint;
            swiper.emit('_beforeBreakpoint', breakpointParams);

            if (needsReLoop && initialized) {
                swiper.loopDestroy();
                swiper.loopCreate();
                swiper.updateSlides();
                swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
            }

            swiper.emit('breakpoint', breakpointParams);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/check-overflow/index.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/core/check-overflow/index.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        function checkOverflow() {
            const swiper = this;
            const {
                isLocked: wasLocked,
                params
            } = swiper;
            const {
                slidesOffsetBefore
            } = params;

            if (slidesOffsetBefore) {
                const lastSlideIndex = swiper.slides.length - 1;
                const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
                swiper.isLocked = swiper.size > lastSlideRightEdge;
            } else {
                swiper.isLocked = swiper.snapGrid.length === 1;
            }

            if (params.allowSlideNext === true) {
                swiper.allowSlideNext = !swiper.isLocked;
            }

            if (params.allowSlidePrev === true) {
                swiper.allowSlidePrev = !swiper.isLocked;
            }

            if (wasLocked && wasLocked !== swiper.isLocked) {
                swiper.isEnd = false;
            }

            if (wasLocked !== swiper.isLocked) {
                swiper.emit(swiper.isLocked ? 'lock' : 'unlock');
            }
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            checkOverflow
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/classes/addClasses.js":
    /*!********************************************************!*\
  !*** ./node_modules/swiper/core/classes/addClasses.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ addClasses)
            /* harmony export */ });
        function prepareClasses(entries, prefix) {
            const resultClasses = [];
            entries.forEach(item => {
                if (typeof item === 'object') {
                    Object.keys(item).forEach(classNames => {
                        if (item[classNames]) {
                            resultClasses.push(prefix + classNames);
                        }
                    });
                } else if (typeof item === 'string') {
                    resultClasses.push(prefix + item);
                }
            });
            return resultClasses;
        }

        function addClasses() {
            const swiper = this;
            const {
                classNames,
                params,
                rtl,
                $el,
                device,
                support
            } = swiper; // prettier-ignore

            const suffixes = prepareClasses(['initialized', params.direction, {
                'pointer-events': !support.touch
            }, {
                'free-mode': swiper.params.freeMode && params.freeMode.enabled
            }, {
                'autoheight': params.autoHeight
            }, {
                'rtl': rtl
            }, {
                'grid': params.grid && params.grid.rows > 1
            }, {
                'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
            }, {
                'android': device.android
            }, {
                'ios': device.ios
            }, {
                'css-mode': params.cssMode
            }, {
                'centered': params.cssMode && params.centeredSlides
            }, {
                'watch-progress': params.watchSlidesProgress
            }], params.containerModifierClass);
            classNames.push(...suffixes);
            $el.addClass([...classNames].join(' '));
            swiper.emitContainerClasses();
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/classes/index.js":
    /*!***************************************************!*\
  !*** ./node_modules/swiper/core/classes/index.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _addClasses_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addClasses.js */ "./node_modules/swiper/core/classes/addClasses.js");
        /* harmony import */ var _removeClasses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./removeClasses.js */ "./node_modules/swiper/core/classes/removeClasses.js");


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            addClasses: _addClasses_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            removeClasses: _removeClasses_js__WEBPACK_IMPORTED_MODULE_1__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/classes/removeClasses.js":
    /*!***********************************************************!*\
  !*** ./node_modules/swiper/core/classes/removeClasses.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ removeClasses)
            /* harmony export */ });
        function removeClasses() {
            const swiper = this;
            const {
                $el,
                classNames
            } = swiper;
            $el.removeClass(classNames.join(' '));
            swiper.emitContainerClasses();
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/core.js":
    /*!******************************************!*\
  !*** ./node_modules/swiper/core/core.js ***!
  \******************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* harmony import */ var _shared_get_support_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/get-support.js */ "./node_modules/swiper/shared/get-support.js");
        /* harmony import */ var _shared_get_device_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/get-device.js */ "./node_modules/swiper/shared/get-device.js");
        /* harmony import */ var _shared_get_browser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/get-browser.js */ "./node_modules/swiper/shared/get-browser.js");
        /* harmony import */ var _modules_resize_resize_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/resize/resize.js */ "./node_modules/swiper/core/modules/resize/resize.js");
        /* harmony import */ var _modules_observer_observer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/observer/observer.js */ "./node_modules/swiper/core/modules/observer/observer.js");
        /* harmony import */ var _events_emitter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./events-emitter.js */ "./node_modules/swiper/core/events-emitter.js");
        /* harmony import */ var _update_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./update/index.js */ "./node_modules/swiper/core/update/index.js");
        /* harmony import */ var _translate_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./translate/index.js */ "./node_modules/swiper/core/translate/index.js");
        /* harmony import */ var _transition_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transition/index.js */ "./node_modules/swiper/core/transition/index.js");
        /* harmony import */ var _slide_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./slide/index.js */ "./node_modules/swiper/core/slide/index.js");
        /* harmony import */ var _loop_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./loop/index.js */ "./node_modules/swiper/core/loop/index.js");
        /* harmony import */ var _grab_cursor_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./grab-cursor/index.js */ "./node_modules/swiper/core/grab-cursor/index.js");
        /* harmony import */ var _events_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./events/index.js */ "./node_modules/swiper/core/events/index.js");
        /* harmony import */ var _breakpoints_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./breakpoints/index.js */ "./node_modules/swiper/core/breakpoints/index.js");
        /* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./classes/index.js */ "./node_modules/swiper/core/classes/index.js");
        /* harmony import */ var _images_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./images/index.js */ "./node_modules/swiper/core/images/index.js");
        /* harmony import */ var _check_overflow_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./check-overflow/index.js */ "./node_modules/swiper/core/check-overflow/index.js");
        /* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./defaults.js */ "./node_modules/swiper/core/defaults.js");
        /* harmony import */ var _moduleExtendParams_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./moduleExtendParams.js */ "./node_modules/swiper/core/moduleExtendParams.js");
        /* eslint no-param-reassign: "off" */






















        const prototypes = {
            eventsEmitter: _events_emitter_js__WEBPACK_IMPORTED_MODULE_8__["default"],
            update: _update_index_js__WEBPACK_IMPORTED_MODULE_9__["default"],
            translate: _translate_index_js__WEBPACK_IMPORTED_MODULE_10__["default"],
            transition: _transition_index_js__WEBPACK_IMPORTED_MODULE_11__["default"],
            slide: _slide_index_js__WEBPACK_IMPORTED_MODULE_12__["default"],
            loop: _loop_index_js__WEBPACK_IMPORTED_MODULE_13__["default"],
            grabCursor: _grab_cursor_index_js__WEBPACK_IMPORTED_MODULE_14__["default"],
            events: _events_index_js__WEBPACK_IMPORTED_MODULE_15__["default"],
            breakpoints: _breakpoints_index_js__WEBPACK_IMPORTED_MODULE_16__["default"],
            checkOverflow: _check_overflow_index_js__WEBPACK_IMPORTED_MODULE_19__["default"],
            classes: _classes_index_js__WEBPACK_IMPORTED_MODULE_17__["default"],
            images: _images_index_js__WEBPACK_IMPORTED_MODULE_18__["default"]
        };
        const extendedDefaults = {};

        class Swiper {
            constructor(...args) {
                let el;
                let params;

                if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
                    params = args[0];
                } else {
                    [el, params] = args;
                }

                if (!params) params = {};
                params = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, params);
                if (el && !params.el) params.el = el;

                if (params.el && (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.el).length > 1) {
                    const swipers = [];
                    (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.el).each(containerEl => {
                        const newParams = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, params, {
                            el: containerEl
                        });
                        swipers.push(new Swiper(newParams));
                    }); // eslint-disable-next-line no-constructor-return

                    return swipers;
                } // Swiper Instance


                const swiper = this;
                swiper.__swiper__ = true;
                swiper.support = (0,_shared_get_support_js__WEBPACK_IMPORTED_MODULE_3__.getSupport)();
                swiper.device = (0,_shared_get_device_js__WEBPACK_IMPORTED_MODULE_4__.getDevice)({
                    userAgent: params.userAgent
                });
                swiper.browser = (0,_shared_get_browser_js__WEBPACK_IMPORTED_MODULE_5__.getBrowser)();
                swiper.eventsListeners = {};
                swiper.eventsAnyListeners = [];
                swiper.modules = [...swiper.__modules__];

                if (params.modules && Array.isArray(params.modules)) {
                    swiper.modules.push(...params.modules);
                }

                const allModulesParams = {};
                swiper.modules.forEach(mod => {
                    mod({
                        swiper,
                        extendParams: (0,_moduleExtendParams_js__WEBPACK_IMPORTED_MODULE_21__["default"])(params, allModulesParams),
                        on: swiper.on.bind(swiper),
                        once: swiper.once.bind(swiper),
                        off: swiper.off.bind(swiper),
                        emit: swiper.emit.bind(swiper)
                    });
                }); // Extend defaults with modules params

                const swiperParams = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, _defaults_js__WEBPACK_IMPORTED_MODULE_20__["default"], allModulesParams); // Extend defaults with passed params

                swiper.params = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, swiperParams, extendedDefaults, params);
                swiper.originalParams = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, swiper.params);
                swiper.passedParams = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)({}, params); // add event listeners

                if (swiper.params && swiper.params.on) {
                    Object.keys(swiper.params.on).forEach(eventName => {
                        swiper.on(eventName, swiper.params.on[eventName]);
                    });
                }

                if (swiper.params && swiper.params.onAny) {
                    swiper.onAny(swiper.params.onAny);
                } // Save Dom lib


                swiper.$ = _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"]; // Extend Swiper

                Object.assign(swiper, {
                    enabled: swiper.params.enabled,
                    el,
                    // Classes
                    classNames: [],
                    // Slides
                    slides: (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(),
                    slidesGrid: [],
                    snapGrid: [],
                    slidesSizesGrid: [],

                    // isDirection
                    isHorizontal() {
                        return swiper.params.direction === 'horizontal';
                    },

                    isVertical() {
                        return swiper.params.direction === 'vertical';
                    },

                    // Indexes
                    activeIndex: 0,
                    realIndex: 0,
                    //
                    isBeginning: true,
                    isEnd: false,
                    // Props
                    translate: 0,
                    previousTranslate: 0,
                    progress: 0,
                    velocity: 0,
                    animating: false,
                    // Locks
                    allowSlideNext: swiper.params.allowSlideNext,
                    allowSlidePrev: swiper.params.allowSlidePrev,
                    // Touch Events
                    touchEvents: function touchEvents() {
                        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
                        const desktop = ['pointerdown', 'pointermove', 'pointerup'];
                        swiper.touchEventsTouch = {
                            start: touch[0],
                            move: touch[1],
                            end: touch[2],
                            cancel: touch[3]
                        };
                        swiper.touchEventsDesktop = {
                            start: desktop[0],
                            move: desktop[1],
                            end: desktop[2]
                        };
                        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
                    }(),
                    touchEventsData: {
                        isTouched: undefined,
                        isMoved: undefined,
                        allowTouchCallbacks: undefined,
                        touchStartTime: undefined,
                        isScrolling: undefined,
                        currentTranslate: undefined,
                        startTranslate: undefined,
                        allowThresholdMove: undefined,
                        // Form elements to match
                        focusableElements: swiper.params.focusableElements,
                        // Last click time
                        lastClickTime: (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)(),
                        clickTimeout: undefined,
                        // Velocities
                        velocities: [],
                        allowMomentumBounce: undefined,
                        isTouchEvent: undefined,
                        startMoving: undefined
                    },
                    // Clicks
                    allowClick: true,
                    // Touches
                    allowTouchMove: swiper.params.allowTouchMove,
                    touches: {
                        startX: 0,
                        startY: 0,
                        currentX: 0,
                        currentY: 0,
                        diff: 0
                    },
                    // Images
                    imagesToLoad: [],
                    imagesLoaded: 0
                });
                swiper.emit('_swiper'); // Init

                if (swiper.params.init) {
                    swiper.init();
                } // Return app instance
                // eslint-disable-next-line no-constructor-return


                return swiper;
            }

            enable() {
                const swiper = this;
                if (swiper.enabled) return;
                swiper.enabled = true;

                if (swiper.params.grabCursor) {
                    swiper.setGrabCursor();
                }

                swiper.emit('enable');
            }

            disable() {
                const swiper = this;
                if (!swiper.enabled) return;
                swiper.enabled = false;

                if (swiper.params.grabCursor) {
                    swiper.unsetGrabCursor();
                }

                swiper.emit('disable');
            }

            setProgress(progress, speed) {
                const swiper = this;
                progress = Math.min(Math.max(progress, 0), 1);
                const min = swiper.minTranslate();
                const max = swiper.maxTranslate();
                const current = (max - min) * progress + min;
                swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }

            emitContainerClasses() {
                const swiper = this;
                if (!swiper.params._emitClasses || !swiper.el) return;
                const cls = swiper.el.className.split(' ').filter(className => {
                    return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
                });
                swiper.emit('_containerClasses', cls.join(' '));
            }

            getSlideClasses(slideEl) {
                const swiper = this;
                if (swiper.destroyed) return '';
                return slideEl.className.split(' ').filter(className => {
                    return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
                }).join(' ');
            }

            emitSlidesClasses() {
                const swiper = this;
                if (!swiper.params._emitClasses || !swiper.el) return;
                const updates = [];
                swiper.slides.each(slideEl => {
                    const classNames = swiper.getSlideClasses(slideEl);
                    updates.push({
                        slideEl,
                        classNames
                    });
                    swiper.emit('_slideClass', slideEl, classNames);
                });
                swiper.emit('_slideClasses', updates);
            }

            slidesPerViewDynamic(view = 'current', exact = false) {
                const swiper = this;
                const {
                    params,
                    slides,
                    slidesGrid,
                    slidesSizesGrid,
                    size: swiperSize,
                    activeIndex
                } = swiper;
                let spv = 1;

                if (params.centeredSlides) {
                    let slideSize = slides[activeIndex].swiperSlideSize;
                    let breakLoop;

                    for (let i = activeIndex + 1; i < slides.length; i += 1) {
                        if (slides[i] && !breakLoop) {
                            slideSize += slides[i].swiperSlideSize;
                            spv += 1;
                            if (slideSize > swiperSize) breakLoop = true;
                        }
                    }

                    for (let i = activeIndex - 1; i >= 0; i -= 1) {
                        if (slides[i] && !breakLoop) {
                            slideSize += slides[i].swiperSlideSize;
                            spv += 1;
                            if (slideSize > swiperSize) breakLoop = true;
                        }
                    }
                } else {
                    // eslint-disable-next-line
                    if (view === 'current') {
                        for (let i = activeIndex + 1; i < slides.length; i += 1) {
                            const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;

                            if (slideInView) {
                                spv += 1;
                            }
                        }
                    } else {
                        // previous
                        for (let i = activeIndex - 1; i >= 0; i -= 1) {
                            const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;

                            if (slideInView) {
                                spv += 1;
                            }
                        }
                    }
                }

                return spv;
            }

            update() {
                const swiper = this;
                if (!swiper || swiper.destroyed) return;
                const {
                    snapGrid,
                    params
                } = swiper; // Breakpoints

                if (params.breakpoints) {
                    swiper.setBreakpoint();
                }

                swiper.updateSize();
                swiper.updateSlides();
                swiper.updateProgress();
                swiper.updateSlidesClasses();

                function setTranslate() {
                    const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
                    const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
                    swiper.setTranslate(newTranslate);
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                }

                let translated;

                if (swiper.params.freeMode && swiper.params.freeMode.enabled) {
                    setTranslate();

                    if (swiper.params.autoHeight) {
                        swiper.updateAutoHeight();
                    }
                } else {
                    if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
                        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
                    } else {
                        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
                    }

                    if (!translated) {
                        setTranslate();
                    }
                }

                if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
                    swiper.checkOverflow();
                }

                swiper.emit('update');
            }

            changeDirection(newDirection, needUpdate = true) {
                const swiper = this;
                const currentDirection = swiper.params.direction;

                if (!newDirection) {
                    // eslint-disable-next-line
                    newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
                }

                if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
                    return swiper;
                }

                swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);
                swiper.emitContainerClasses();
                swiper.params.direction = newDirection;
                swiper.slides.each(slideEl => {
                    if (newDirection === 'vertical') {
                        slideEl.style.width = '';
                    } else {
                        slideEl.style.height = '';
                    }
                });
                swiper.emit('changeDirection');
                if (needUpdate) swiper.update();
                return swiper;
            }

            changeLanguageDirection(direction) {
                const swiper = this;
                if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;
                swiper.rtl = direction === 'rtl';
                swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;

                if (swiper.rtl) {
                    swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);
                    swiper.el.dir = 'rtl';
                } else {
                    swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);
                    swiper.el.dir = 'ltr';
                }

                swiper.update();
            }

            mount(el) {
                const swiper = this;
                if (swiper.mounted) return true; // Find el

                const $el = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el || swiper.params.el);
                el = $el[0];

                if (!el) {
                    return false;
                }

                el.swiper = swiper;

                const getWrapperSelector = () => {
                    return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;
                };

                const getWrapper = () => {
                    if (el && el.shadowRoot && el.shadowRoot.querySelector) {
                        const res = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items

                        res.children = options => $el.children(options);

                        return res;
                    }

                    if (!$el.children) {
                        return (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])($el).children(getWrapperSelector());
                    }

                    return $el.children(getWrapperSelector());
                }; // Find Wrapper


                let $wrapperEl = getWrapper();

                if ($wrapperEl.length === 0 && swiper.params.createElements) {
                    const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
                    const wrapper = document.createElement('div');
                    $wrapperEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(wrapper);
                    wrapper.className = swiper.params.wrapperClass;
                    $el.append(wrapper);
                    $el.children(`.${swiper.params.slideClass}`).each(slideEl => {
                        $wrapperEl.append(slideEl);
                    });
                }

                Object.assign(swiper, {
                    $el,
                    el,
                    $wrapperEl,
                    wrapperEl: $wrapperEl[0],
                    mounted: true,
                    // RTL
                    rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
                    rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
                    wrongRTL: $wrapperEl.css('display') === '-webkit-box'
                });
                return true;
            }

            init(el) {
                const swiper = this;
                if (swiper.initialized) return swiper;
                const mounted = swiper.mount(el);
                if (mounted === false) return swiper;
                swiper.emit('beforeInit'); // Set breakpoint

                if (swiper.params.breakpoints) {
                    swiper.setBreakpoint();
                } // Add Classes


                swiper.addClasses(); // Create loop

                if (swiper.params.loop) {
                    swiper.loopCreate();
                } // Update size


                swiper.updateSize(); // Update slides

                swiper.updateSlides();

                if (swiper.params.watchOverflow) {
                    swiper.checkOverflow();
                } // Set Grab Cursor


                if (swiper.params.grabCursor && swiper.enabled) {
                    swiper.setGrabCursor();
                }

                if (swiper.params.preloadImages) {
                    swiper.preloadImages();
                } // Slide To Initial Slide


                if (swiper.params.loop) {
                    swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
                } else {
                    swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
                } // Attach events


                swiper.attachEvents(); // Init Flag

                swiper.initialized = true; // Emit

                swiper.emit('init');
                swiper.emit('afterInit');
                return swiper;
            }

            destroy(deleteInstance = true, cleanStyles = true) {
                const swiper = this;
                const {
                    params,
                    $el,
                    $wrapperEl,
                    slides
                } = swiper;

                if (typeof swiper.params === 'undefined' || swiper.destroyed) {
                    return null;
                }

                swiper.emit('beforeDestroy'); // Init Flag

                swiper.initialized = false; // Detach events

                swiper.detachEvents(); // Destroy loop

                if (params.loop) {
                    swiper.loopDestroy();
                } // Cleanup styles


                if (cleanStyles) {
                    swiper.removeClasses();
                    $el.removeAttr('style');
                    $wrapperEl.removeAttr('style');

                    if (slides && slides.length) {
                        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
                    }
                }

                swiper.emit('destroy'); // Detach emitter events

                Object.keys(swiper.eventsListeners).forEach(eventName => {
                    swiper.off(eventName);
                });

                if (deleteInstance !== false) {
                    swiper.$el[0].swiper = null;
                    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.deleteProps)(swiper);
                }

                swiper.destroyed = true;
                return null;
            }

            static extendDefaults(newDefaults) {
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.extend)(extendedDefaults, newDefaults);
            }

            static get extendedDefaults() {
                return extendedDefaults;
            }

            static get defaults() {
                return _defaults_js__WEBPACK_IMPORTED_MODULE_20__["default"];
            }

            static installModule(mod) {
                if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];
                const modules = Swiper.prototype.__modules__;

                if (typeof mod === 'function' && modules.indexOf(mod) < 0) {
                    modules.push(mod);
                }
            }

            static use(module) {
                if (Array.isArray(module)) {
                    module.forEach(m => Swiper.installModule(m));
                    return Swiper;
                }

                Swiper.installModule(module);
                return Swiper;
            }

        }

        Object.keys(prototypes).forEach(prototypeGroup => {
            Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {
                Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
            });
        });
        Swiper.use([_modules_resize_resize_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modules_observer_observer_js__WEBPACK_IMPORTED_MODULE_7__["default"]]);
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Swiper);

        /***/ }),

    /***/ "./node_modules/swiper/core/defaults.js":
    /*!**********************************************!*\
  !*** ./node_modules/swiper/core/defaults.js ***!
  \**********************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            init: true,
            direction: 'horizontal',
            touchEventsTarget: 'wrapper',
            initialSlide: 0,
            speed: 300,
            cssMode: false,
            updateOnWindowResize: true,
            resizeObserver: true,
            nested: false,
            createElements: false,
            enabled: true,
            focusableElements: 'input, select, option, textarea, button, video, label',
            // Overrides
            width: null,
            height: null,
            //
            preventInteractionOnTransition: false,
            // ssr
            userAgent: null,
            url: null,
            // To support iOS's swipe-to-go-back gesture (when being used in-app).
            edgeSwipeDetection: false,
            edgeSwipeThreshold: 20,
            // Autoheight
            autoHeight: false,
            // Set wrapper width
            setWrapperSize: false,
            // Virtual Translate
            virtualTranslate: false,
            // Effects
            effect: 'slide',
            // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
            // Breakpoints
            breakpoints: undefined,
            breakpointsBase: 'window',
            // Slides grid
            spaceBetween: 0,
            slidesPerView: 1,
            slidesPerGroup: 1,
            slidesPerGroupSkip: 0,
            slidesPerGroupAuto: false,
            centeredSlides: false,
            centeredSlidesBounds: false,
            slidesOffsetBefore: 0,
            // in px
            slidesOffsetAfter: 0,
            // in px
            normalizeSlideIndex: true,
            centerInsufficientSlides: false,
            // Disable swiper and hide navigation when container not overflow
            watchOverflow: true,
            // Round length
            roundLengths: false,
            // Touches
            touchRatio: 1,
            touchAngle: 45,
            simulateTouch: true,
            shortSwipes: true,
            longSwipes: true,
            longSwipesRatio: 0.5,
            longSwipesMs: 300,
            followFinger: true,
            allowTouchMove: true,
            threshold: 0,
            touchMoveStopPropagation: false,
            touchStartPreventDefault: true,
            touchStartForcePreventDefault: false,
            touchReleaseOnEdges: false,
            // Unique Navigation Elements
            uniqueNavElements: true,
            // Resistance
            resistance: true,
            resistanceRatio: 0.85,
            // Progress
            watchSlidesProgress: false,
            // Cursor
            grabCursor: false,
            // Clicks
            preventClicks: true,
            preventClicksPropagation: true,
            slideToClickedSlide: false,
            // Images
            preloadImages: true,
            updateOnImagesReady: true,
            // loop
            loop: false,
            loopAdditionalSlides: 0,
            loopedSlides: null,
            loopedSlidesLimit: true,
            loopFillGroupWithBlank: false,
            loopPreventsSlide: true,
            // rewind
            rewind: false,
            // Swiping/no swiping
            allowSlidePrev: true,
            allowSlideNext: true,
            swipeHandler: null,
            // '.swipe-handler',
            noSwiping: true,
            noSwipingClass: 'swiper-no-swiping',
            noSwipingSelector: null,
            // Passive Listeners
            passiveListeners: true,
            maxBackfaceHiddenSlides: 10,
            // NS
            containerModifierClass: 'swiper-',
            // NEW
            slideClass: 'swiper-slide',
            slideBlankClass: 'swiper-slide-invisible-blank',
            slideActiveClass: 'swiper-slide-active',
            slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
            slideVisibleClass: 'swiper-slide-visible',
            slideDuplicateClass: 'swiper-slide-duplicate',
            slideNextClass: 'swiper-slide-next',
            slideDuplicateNextClass: 'swiper-slide-duplicate-next',
            slidePrevClass: 'swiper-slide-prev',
            slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
            wrapperClass: 'swiper-wrapper',
            // Callbacks
            runCallbacksOnInit: true,
            // Internals
            _emitClasses: false
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/events-emitter.js":
    /*!****************************************************!*\
  !*** ./node_modules/swiper/core/events-emitter.js ***!
  \****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* eslint-disable no-underscore-dangle */
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            on(events, handler, priority) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (typeof handler !== 'function') return self;
                const method = priority ? 'unshift' : 'push';
                events.split(' ').forEach(event => {
                    if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
                    self.eventsListeners[event][method](handler);
                });
                return self;
            },

            once(events, handler, priority) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (typeof handler !== 'function') return self;

                function onceHandler(...args) {
                    self.off(events, onceHandler);

                    if (onceHandler.__emitterProxy) {
                        delete onceHandler.__emitterProxy;
                    }

                    handler.apply(self, args);
                }

                onceHandler.__emitterProxy = handler;
                return self.on(events, onceHandler, priority);
            },

            onAny(handler, priority) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (typeof handler !== 'function') return self;
                const method = priority ? 'unshift' : 'push';

                if (self.eventsAnyListeners.indexOf(handler) < 0) {
                    self.eventsAnyListeners[method](handler);
                }

                return self;
            },

            offAny(handler) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (!self.eventsAnyListeners) return self;
                const index = self.eventsAnyListeners.indexOf(handler);

                if (index >= 0) {
                    self.eventsAnyListeners.splice(index, 1);
                }

                return self;
            },

            off(events, handler) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (!self.eventsListeners) return self;
                events.split(' ').forEach(event => {
                    if (typeof handler === 'undefined') {
                        self.eventsListeners[event] = [];
                    } else if (self.eventsListeners[event]) {
                        self.eventsListeners[event].forEach((eventHandler, index) => {
                            if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
                                self.eventsListeners[event].splice(index, 1);
                            }
                        });
                    }
                });
                return self;
            },

            emit(...args) {
                const self = this;
                if (!self.eventsListeners || self.destroyed) return self;
                if (!self.eventsListeners) return self;
                let events;
                let data;
                let context;

                if (typeof args[0] === 'string' || Array.isArray(args[0])) {
                    events = args[0];
                    data = args.slice(1, args.length);
                    context = self;
                } else {
                    events = args[0].events;
                    data = args[0].data;
                    context = args[0].context || self;
                }

                data.unshift(context);
                const eventsArray = Array.isArray(events) ? events : events.split(' ');
                eventsArray.forEach(event => {
                    if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
                        self.eventsAnyListeners.forEach(eventHandler => {
                            eventHandler.apply(context, [event, ...data]);
                        });
                    }

                    if (self.eventsListeners && self.eventsListeners[event]) {
                        self.eventsListeners[event].forEach(eventHandler => {
                            eventHandler.apply(context, data);
                        });
                    }
                });
                return self;
            }

        });

        /***/ }),

    /***/ "./node_modules/swiper/core/events/index.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/core/events/index.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _onTouchStart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onTouchStart.js */ "./node_modules/swiper/core/events/onTouchStart.js");
        /* harmony import */ var _onTouchMove_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./onTouchMove.js */ "./node_modules/swiper/core/events/onTouchMove.js");
        /* harmony import */ var _onTouchEnd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onTouchEnd.js */ "./node_modules/swiper/core/events/onTouchEnd.js");
        /* harmony import */ var _onResize_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onResize.js */ "./node_modules/swiper/core/events/onResize.js");
        /* harmony import */ var _onClick_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./onClick.js */ "./node_modules/swiper/core/events/onClick.js");
        /* harmony import */ var _onScroll_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./onScroll.js */ "./node_modules/swiper/core/events/onScroll.js");







        let dummyEventAttached = false;

        function dummyEventListener() {}

        const events = (swiper, method) => {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const {
                params,
                touchEvents,
                el,
                wrapperEl,
                device,
                support
            } = swiper;
            const capture = !!params.nested;
            const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';
            const swiperMethod = method; // Touch Events

            if (!support.touch) {
                el[domMethod](touchEvents.start, swiper.onTouchStart, false);
                document[domMethod](touchEvents.move, swiper.onTouchMove, capture);
                document[domMethod](touchEvents.end, swiper.onTouchEnd, false);
            } else {
                const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
                    passive: true,
                    capture: false
                } : false;
                el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);
                el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
                    passive: false,
                    capture
                } : capture);
                el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);

                if (touchEvents.cancel) {
                    el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);
                }
            } // Prevent Links Clicks


            if (params.preventClicks || params.preventClicksPropagation) {
                el[domMethod]('click', swiper.onClick, true);
            }

            if (params.cssMode) {
                wrapperEl[domMethod]('scroll', swiper.onScroll);
            } // Resize handler


            if (params.updateOnWindowResize) {
                swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize_js__WEBPACK_IMPORTED_MODULE_4__["default"], true);
            } else {
                swiper[swiperMethod]('observerUpdate', _onResize_js__WEBPACK_IMPORTED_MODULE_4__["default"], true);
            }
        };

        function attachEvents() {
            const swiper = this;
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const {
                params,
                support
            } = swiper;
            swiper.onTouchStart = _onTouchStart_js__WEBPACK_IMPORTED_MODULE_1__["default"].bind(swiper);
            swiper.onTouchMove = _onTouchMove_js__WEBPACK_IMPORTED_MODULE_2__["default"].bind(swiper);
            swiper.onTouchEnd = _onTouchEnd_js__WEBPACK_IMPORTED_MODULE_3__["default"].bind(swiper);

            if (params.cssMode) {
                swiper.onScroll = _onScroll_js__WEBPACK_IMPORTED_MODULE_6__["default"].bind(swiper);
            }

            swiper.onClick = _onClick_js__WEBPACK_IMPORTED_MODULE_5__["default"].bind(swiper);

            if (support.touch && !dummyEventAttached) {
                document.addEventListener('touchstart', dummyEventListener);
                dummyEventAttached = true;
            }

            events(swiper, 'on');
        }

        function detachEvents() {
            const swiper = this;
            events(swiper, 'off');
        }

        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            attachEvents,
            detachEvents
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onClick.js":
    /*!****************************************************!*\
  !*** ./node_modules/swiper/core/events/onClick.js ***!
  \****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onClick)
            /* harmony export */ });
        function onClick(e) {
            const swiper = this;
            if (!swiper.enabled) return;

            if (!swiper.allowClick) {
                if (swiper.params.preventClicks) e.preventDefault();

                if (swiper.params.preventClicksPropagation && swiper.animating) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                }
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onResize.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/events/onResize.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onResize)
            /* harmony export */ });
        function onResize() {
            const swiper = this;
            const {
                params,
                el
            } = swiper;
            if (el && el.offsetWidth === 0) return; // Breakpoints

            if (params.breakpoints) {
                swiper.setBreakpoint();
            } // Save locks


            const {
                allowSlideNext,
                allowSlidePrev,
                snapGrid
            } = swiper; // Disable locks on resize

            swiper.allowSlideNext = true;
            swiper.allowSlidePrev = true;
            swiper.updateSize();
            swiper.updateSlides();
            swiper.updateSlidesClasses();

            if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
                swiper.slideTo(swiper.slides.length - 1, 0, false, true);
            } else {
                swiper.slideTo(swiper.activeIndex, 0, false, true);
            }

            if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
                swiper.autoplay.run();
            } // Return locks after resize


            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;

            if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
                swiper.checkOverflow();
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onScroll.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/events/onScroll.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onScroll)
            /* harmony export */ });
        function onScroll() {
            const swiper = this;
            const {
                wrapperEl,
                rtlTranslate,
                enabled
            } = swiper;
            if (!enabled) return;
            swiper.previousTranslate = swiper.translate;

            if (swiper.isHorizontal()) {
                swiper.translate = -wrapperEl.scrollLeft;
            } else {
                swiper.translate = -wrapperEl.scrollTop;
            } // eslint-disable-next-line


            if (swiper.translate === 0) swiper.translate = 0;
            swiper.updateActiveIndex();
            swiper.updateSlidesClasses();
            let newProgress;
            const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

            if (translatesDiff === 0) {
                newProgress = 0;
            } else {
                newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
            }

            if (newProgress !== swiper.progress) {
                swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
            }

            swiper.emit('setTranslate', swiper.translate, false);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onTouchEnd.js":
    /*!*******************************************************!*\
  !*** ./node_modules/swiper/core/events/onTouchEnd.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onTouchEnd)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function onTouchEnd(event) {
            const swiper = this;
            const data = swiper.touchEventsData;
            const {
                params,
                touches,
                rtlTranslate: rtl,
                slidesGrid,
                enabled
            } = swiper;
            if (!enabled) return;
            let e = event;
            if (e.originalEvent) e = e.originalEvent;

            if (data.allowTouchCallbacks) {
                swiper.emit('touchEnd', e);
            }

            data.allowTouchCallbacks = false;

            if (!data.isTouched) {
                if (data.isMoved && params.grabCursor) {
                    swiper.setGrabCursor(false);
                }

                data.isMoved = false;
                data.startMoving = false;
                return;
            } // Return Grab Cursor


            if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
                swiper.setGrabCursor(false);
            } // Time diff


            const touchEndTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.now)();
            const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

            if (swiper.allowClick) {
                const pathTree = e.path || e.composedPath && e.composedPath();
                swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);
                swiper.emit('tap click', e);

                if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
                    swiper.emit('doubleTap doubleClick', e);
                }
            }

            data.lastClickTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.now)();
            (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
                if (!swiper.destroyed) swiper.allowClick = true;
            });

            if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
                data.isTouched = false;
                data.isMoved = false;
                data.startMoving = false;
                return;
            }

            data.isTouched = false;
            data.isMoved = false;
            data.startMoving = false;
            let currentPos;

            if (params.followFinger) {
                currentPos = rtl ? swiper.translate : -swiper.translate;
            } else {
                currentPos = -data.currentTranslate;
            }

            if (params.cssMode) {
                return;
            }

            if (swiper.params.freeMode && params.freeMode.enabled) {
                swiper.freeMode.onTouchEnd({
                    currentPos
                });
                return;
            } // Find current slide


            let stopIndex = 0;
            let groupSize = swiper.slidesSizesGrid[0];

            for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
                const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

                if (typeof slidesGrid[i + increment] !== 'undefined') {
                    if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {
                        stopIndex = i;
                        groupSize = slidesGrid[i + increment] - slidesGrid[i];
                    }
                } else if (currentPos >= slidesGrid[i]) {
                    stopIndex = i;
                    groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
                }
            }

            let rewindFirstIndex = null;
            let rewindLastIndex = null;

            if (params.rewind) {
                if (swiper.isBeginning) {
                    rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
                } else if (swiper.isEnd) {
                    rewindFirstIndex = 0;
                }
            } // Find current slide size


            const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
            const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

            if (timeDiff > params.longSwipesMs) {
                // Long touches
                if (!params.longSwipes) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }

                if (swiper.swipeDirection === 'next') {
                    if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);
                }

                if (swiper.swipeDirection === 'prev') {
                    if (ratio > 1 - params.longSwipesRatio) {
                        swiper.slideTo(stopIndex + increment);
                    } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {
                        swiper.slideTo(rewindLastIndex);
                    } else {
                        swiper.slideTo(stopIndex);
                    }
                }
            } else {
                // Short swipes
                if (!params.shortSwipes) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }

                const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

                if (!isNavButtonTarget) {
                    if (swiper.swipeDirection === 'next') {
                        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);
                    }

                    if (swiper.swipeDirection === 'prev') {
                        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);
                    }
                } else if (e.target === swiper.navigation.nextEl) {
                    swiper.slideTo(stopIndex + increment);
                } else {
                    swiper.slideTo(stopIndex);
                }
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onTouchMove.js":
    /*!********************************************************!*\
  !*** ./node_modules/swiper/core/events/onTouchMove.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onTouchMove)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");



        function onTouchMove(event) {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const swiper = this;
            const data = swiper.touchEventsData;
            const {
                params,
                touches,
                rtlTranslate: rtl,
                enabled
            } = swiper;
            if (!enabled) return;
            let e = event;
            if (e.originalEvent) e = e.originalEvent;

            if (!data.isTouched) {
                if (data.startMoving && data.isScrolling) {
                    swiper.emit('touchMoveOpposite', e);
                }

                return;
            }

            if (data.isTouchEvent && e.type !== 'touchmove') return;
            const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
            const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
            const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

            if (e.preventedByNestedSwiper) {
                touches.startX = pageX;
                touches.startY = pageY;
                return;
            }

            if (!swiper.allowTouchMove) {
                if (!(0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).is(data.focusableElements)) {
                    swiper.allowClick = false;
                }

                if (data.isTouched) {
                    Object.assign(touches, {
                        startX: pageX,
                        startY: pageY,
                        currentX: pageX,
                        currentY: pageY
                    });
                    data.touchStartTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)();
                }

                return;
            }

            if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
                if (swiper.isVertical()) {
                    // Vertical
                    if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
                        data.isTouched = false;
                        data.isMoved = false;
                        return;
                    }
                } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
                    return;
                }
            }

            if (data.isTouchEvent && document.activeElement) {
                if (e.target === document.activeElement && (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).is(data.focusableElements)) {
                    data.isMoved = true;
                    swiper.allowClick = false;
                    return;
                }
            }

            if (data.allowTouchCallbacks) {
                swiper.emit('touchMove', e);
            }

            if (e.targetTouches && e.targetTouches.length > 1) return;
            touches.currentX = pageX;
            touches.currentY = pageY;
            const diffX = touches.currentX - touches.startX;
            const diffY = touches.currentY - touches.startY;
            if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;

            if (typeof data.isScrolling === 'undefined') {
                let touchAngle;

                if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
                    data.isScrolling = false;
                } else {
                    // eslint-disable-next-line
                    if (diffX * diffX + diffY * diffY >= 25) {
                        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
                        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
                    }
                }
            }

            if (data.isScrolling) {
                swiper.emit('touchMoveOpposite', e);
            }

            if (typeof data.startMoving === 'undefined') {
                if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
                    data.startMoving = true;
                }
            }

            if (data.isScrolling) {
                data.isTouched = false;
                return;
            }

            if (!data.startMoving) {
                return;
            }

            swiper.allowClick = false;

            if (!params.cssMode && e.cancelable) {
                e.preventDefault();
            }

            if (params.touchMoveStopPropagation && !params.nested) {
                e.stopPropagation();
            }

            if (!data.isMoved) {
                if (params.loop && !params.cssMode) {
                    swiper.loopFix();
                }

                data.startTranslate = swiper.getTranslate();
                swiper.setTransition(0);

                if (swiper.animating) {
                    swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
                }

                data.allowMomentumBounce = false; // Grab Cursor

                if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
                    swiper.setGrabCursor(true);
                }

                swiper.emit('sliderFirstMove', e);
            }

            swiper.emit('sliderMove', e);
            data.isMoved = true;
            let diff = swiper.isHorizontal() ? diffX : diffY;
            touches.diff = diff;
            diff *= params.touchRatio;
            if (rtl) diff = -diff;
            swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
            data.currentTranslate = diff + data.startTranslate;
            let disableParentSwiper = true;
            let resistanceRatio = params.resistanceRatio;

            if (params.touchReleaseOnEdges) {
                resistanceRatio = 0;
            }

            if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
                disableParentSwiper = false;
                if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;
            } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
                disableParentSwiper = false;
                if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;
            }

            if (disableParentSwiper) {
                e.preventedByNestedSwiper = true;
            } // Directions locks


            if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
                data.currentTranslate = data.startTranslate;
            }

            if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
                data.currentTranslate = data.startTranslate;
            }

            if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
                data.currentTranslate = data.startTranslate;
            } // Threshold


            if (params.threshold > 0) {
                if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
                    if (!data.allowThresholdMove) {
                        data.allowThresholdMove = true;
                        touches.startX = touches.currentX;
                        touches.startY = touches.currentY;
                        data.currentTranslate = data.startTranslate;
                        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
                        return;
                    }
                } else {
                    data.currentTranslate = data.startTranslate;
                    return;
                }
            }

            if (!params.followFinger || params.cssMode) return; // Update active index in free mode

            if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }

            if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {
                swiper.freeMode.onTouchMove();
            } // Update progress


            swiper.updateProgress(data.currentTranslate); // Update translate

            swiper.setTranslate(data.currentTranslate);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/events/onTouchStart.js":
    /*!*********************************************************!*\
  !*** ./node_modules/swiper/core/events/onTouchStart.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ onTouchStart)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");


        // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd

        function closestElement(selector, base = this) {
            function __closestFrom(el) {
                if (!el || el === (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)() || el === (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)()) return null;
                if (el.assignedSlot) el = el.assignedSlot;
                const found = el.closest(selector);

                if (!found && !el.getRootNode) {
                    return null;
                }

                return found || __closestFrom(el.getRootNode().host);
            }

            return __closestFrom(base);
        }

        function onTouchStart(event) {
            const swiper = this;
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const data = swiper.touchEventsData;
            const {
                params,
                touches,
                enabled
            } = swiper;
            if (!enabled) return;

            if (swiper.animating && params.preventInteractionOnTransition) {
                return;
            }

            if (!swiper.animating && params.cssMode && params.loop) {
                swiper.loopFix();
            }

            let e = event;
            if (e.originalEvent) e = e.originalEvent;
            let $targetEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target);

            if (params.touchEventsTarget === 'wrapper') {
                if (!$targetEl.closest(swiper.wrapperEl).length) return;
            }

            data.isTouchEvent = e.type === 'touchstart';
            if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
            if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
            if (data.isTouched && data.isMoved) return; // change target el for shadow root component

            const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== ''; // eslint-disable-next-line

            const eventPath = event.composedPath ? event.composedPath() : event.path;

            if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {
                $targetEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(eventPath[0]);
            }

            const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;
            const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element

            if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {
                swiper.allowClick = true;
                return;
            }

            if (params.swipeHandler) {
                if (!$targetEl.closest(params.swipeHandler)[0]) return;
            }

            touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
            touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
            const startX = touches.currentX;
            const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

            const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
            const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

            if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
                if (edgeSwipeDetection === 'prevent') {
                    event.preventDefault();
                } else {
                    return;
                }
            }

            Object.assign(data, {
                isTouched: true,
                isMoved: false,
                allowTouchCallbacks: true,
                isScrolling: undefined,
                startMoving: undefined
            });
            touches.startX = startX;
            touches.startY = startY;
            data.touchStartTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)();
            swiper.allowClick = true;
            swiper.updateSize();
            swiper.swipeDirection = undefined;
            if (params.threshold > 0) data.allowThresholdMove = false;

            if (e.type !== 'touchstart') {
                let preventDefault = true;

                if ($targetEl.is(data.focusableElements)) {
                    preventDefault = false;

                    if ($targetEl[0].nodeName === 'SELECT') {
                        data.isTouched = false;
                    }
                }

                if (document.activeElement && (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {
                    document.activeElement.blur();
                }

                const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

                if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
                    e.preventDefault();
                }
            }

            if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {
                swiper.freeMode.onTouchStart();
            }

            swiper.emit('touchStart', e);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/grab-cursor/index.js":
    /*!*******************************************************!*\
  !*** ./node_modules/swiper/core/grab-cursor/index.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _setGrabCursor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setGrabCursor.js */ "./node_modules/swiper/core/grab-cursor/setGrabCursor.js");
        /* harmony import */ var _unsetGrabCursor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unsetGrabCursor.js */ "./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js");


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            setGrabCursor: _setGrabCursor_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            unsetGrabCursor: _unsetGrabCursor_js__WEBPACK_IMPORTED_MODULE_1__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/grab-cursor/setGrabCursor.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/grab-cursor/setGrabCursor.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ setGrabCursor)
            /* harmony export */ });
        function setGrabCursor(moving) {
            const swiper = this;
            if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
            const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;
            el.style.cursor = 'move';
            el.style.cursor = moving ? 'grabbing' : 'grab';
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ unsetGrabCursor)
            /* harmony export */ });
        function unsetGrabCursor() {
            const swiper = this;

            if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
                return;
            }

            swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/images/index.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/core/images/index.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _loadImage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadImage.js */ "./node_modules/swiper/core/images/loadImage.js");
        /* harmony import */ var _preloadImages_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./preloadImages.js */ "./node_modules/swiper/core/images/preloadImages.js");


        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            loadImage: _loadImage_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            preloadImages: _preloadImages_js__WEBPACK_IMPORTED_MODULE_1__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/images/loadImage.js":
    /*!******************************************************!*\
  !*** ./node_modules/swiper/core/images/loadImage.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ loadImage)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let image;

            function onReady() {
                if (callback) callback();
            }

            const isPicture = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(imageEl).parent('picture')[0];

            if (!isPicture && (!imageEl.complete || !checkForComplete)) {
                if (src) {
                    image = new window.Image();
                    image.onload = onReady;
                    image.onerror = onReady;

                    if (sizes) {
                        image.sizes = sizes;
                    }

                    if (srcset) {
                        image.srcset = srcset;
                    }

                    if (src) {
                        image.src = src;
                    }
                } else {
                    onReady();
                }
            } else {
                // image already loaded...
                onReady();
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/images/preloadImages.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/core/images/preloadImages.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ preloadImages)
            /* harmony export */ });
        function preloadImages() {
            const swiper = this;
            swiper.imagesToLoad = swiper.$el.find('img');

            function onReady() {
                if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
                if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

                if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
                    if (swiper.params.updateOnImagesReady) swiper.update();
                    swiper.emit('imagesReady');
                }
            }

            for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {
                const imageEl = swiper.imagesToLoad[i];
                swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/loop/index.js":
    /*!************************************************!*\
  !*** ./node_modules/swiper/core/loop/index.js ***!
  \************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _loopCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loopCreate.js */ "./node_modules/swiper/core/loop/loopCreate.js");
        /* harmony import */ var _loopFix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loopFix.js */ "./node_modules/swiper/core/loop/loopFix.js");
        /* harmony import */ var _loopDestroy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loopDestroy.js */ "./node_modules/swiper/core/loop/loopDestroy.js");



        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            loopCreate: _loopCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            loopFix: _loopFix_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            loopDestroy: _loopDestroy_js__WEBPACK_IMPORTED_MODULE_2__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/loop/loopCreate.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/loop/loopCreate.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ loopCreate)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function loopCreate() {
            const swiper = this;
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const {
                params,
                $wrapperEl
            } = swiper; // Remove duplicated slides

            const $selector = $wrapperEl.children().length > 0 ? (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])($wrapperEl.children()[0].parentNode) : $wrapperEl;
            $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();
            let slides = $selector.children(`.${params.slideClass}`);

            if (params.loopFillGroupWithBlank) {
                const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

                if (blankSlidesNum !== params.slidesPerGroup) {
                    for (let i = 0; i < blankSlidesNum; i += 1) {
                        const blankNode = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);
                        $selector.append(blankNode);
                    }

                    slides = $selector.children(`.${params.slideClass}`);
                }
            }

            if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
            swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
            swiper.loopedSlides += params.loopAdditionalSlides;

            if (swiper.loopedSlides > slides.length && swiper.params.loopedSlidesLimit) {
                swiper.loopedSlides = slides.length;
            }

            const prependSlides = [];
            const appendSlides = [];
            slides.each((el, index) => {
                const slide = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el);
                slide.attr('data-swiper-slide-index', index);
            });

            for (let i = 0; i < swiper.loopedSlides; i += 1) {
                const index = i - Math.floor(i / slides.length) * slides.length;
                appendSlides.push(slides.eq(index)[0]);
                prependSlides.unshift(slides.eq(slides.length - index - 1)[0]);
            }

            for (let i = 0; i < appendSlides.length; i += 1) {
                $selector.append((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
            }

            for (let i = prependSlides.length - 1; i >= 0; i -= 1) {
                $selector.prepend((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/loop/loopDestroy.js":
    /*!******************************************************!*\
  !*** ./node_modules/swiper/core/loop/loopDestroy.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ loopDestroy)
            /* harmony export */ });
        function loopDestroy() {
            const swiper = this;
            const {
                $wrapperEl,
                params,
                slides
            } = swiper;
            $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();
            slides.removeAttr('data-swiper-slide-index');
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/loop/loopFix.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/core/loop/loopFix.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ loopFix)
            /* harmony export */ });
        function loopFix() {
            const swiper = this;
            swiper.emit('beforeLoopFix');
            const {
                activeIndex,
                slides,
                loopedSlides,
                allowSlidePrev,
                allowSlideNext,
                snapGrid,
                rtlTranslate: rtl
            } = swiper;
            let newIndex;
            swiper.allowSlidePrev = true;
            swiper.allowSlideNext = true;
            const snapTranslate = -snapGrid[activeIndex];
            const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

            if (activeIndex < loopedSlides) {
                newIndex = slides.length - loopedSlides * 3 + activeIndex;
                newIndex += loopedSlides;
                const slideChanged = swiper.slideTo(newIndex, 0, false, true);

                if (slideChanged && diff !== 0) {
                    swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
                }
            } else if (activeIndex >= slides.length - loopedSlides) {
                // Fix For Positive Oversliding
                newIndex = -slides.length + activeIndex + loopedSlides;
                newIndex += loopedSlides;
                const slideChanged = swiper.slideTo(newIndex, 0, false, true);

                if (slideChanged && diff !== 0) {
                    swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
                }
            }

            swiper.allowSlidePrev = allowSlidePrev;
            swiper.allowSlideNext = allowSlideNext;
            swiper.emit('loopFix');
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/moduleExtendParams.js":
    /*!********************************************************!*\
  !*** ./node_modules/swiper/core/moduleExtendParams.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ moduleExtendParams)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function moduleExtendParams(params, allModulesParams) {
            return function extendParams(obj = {}) {
                const moduleParamName = Object.keys(obj)[0];
                const moduleParams = obj[moduleParamName];

                if (typeof moduleParams !== 'object' || moduleParams === null) {
                    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.extend)(allModulesParams, obj);
                    return;
                }

                if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
                    params[moduleParamName] = {
                        auto: true
                    };
                }

                if (!(moduleParamName in params && 'enabled' in moduleParams)) {
                    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.extend)(allModulesParams, obj);
                    return;
                }

                if (params[moduleParamName] === true) {
                    params[moduleParamName] = {
                        enabled: true
                    };
                }

                if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
                    params[moduleParamName].enabled = true;
                }

                if (!params[moduleParamName]) params[moduleParamName] = {
                    enabled: false
                };
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.extend)(allModulesParams, obj);
            };
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/modules/observer/observer.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/modules/observer/observer.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Observer)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        function Observer({
                              swiper,
                              extendParams,
                              on,
                              emit
                          }) {
            const observers = [];
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

            const attach = (target, options = {}) => {
                const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
                const observer = new ObserverFunc(mutations => {
                    // The observerUpdate event should only be triggered
                    // once despite the number of mutations.  Additional
                    // triggers are redundant and are very costly
                    if (mutations.length === 1) {
                        emit('observerUpdate', mutations[0]);
                        return;
                    }

                    const observerUpdate = function observerUpdate() {
                        emit('observerUpdate', mutations[0]);
                    };

                    if (window.requestAnimationFrame) {
                        window.requestAnimationFrame(observerUpdate);
                    } else {
                        window.setTimeout(observerUpdate, 0);
                    }
                });
                observer.observe(target, {
                    attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
                    childList: typeof options.childList === 'undefined' ? true : options.childList,
                    characterData: typeof options.characterData === 'undefined' ? true : options.characterData
                });
                observers.push(observer);
            };

            const init = () => {
                if (!swiper.params.observer) return;

                if (swiper.params.observeParents) {
                    const containerParents = swiper.$el.parents();

                    for (let i = 0; i < containerParents.length; i += 1) {
                        attach(containerParents[i]);
                    }
                } // Observe container


                attach(swiper.$el[0], {
                    childList: swiper.params.observeSlideChildren
                }); // Observe wrapper

                attach(swiper.$wrapperEl[0], {
                    attributes: false
                });
            };

            const destroy = () => {
                observers.forEach(observer => {
                    observer.disconnect();
                });
                observers.splice(0, observers.length);
            };

            extendParams({
                observer: false,
                observeParents: false,
                observeSlideChildren: false
            });
            on('init', init);
            on('destroy', destroy);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/modules/resize/resize.js":
    /*!***********************************************************!*\
  !*** ./node_modules/swiper/core/modules/resize/resize.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Resize)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        function Resize({
                            swiper,
                            on,
                            emit
                        }) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let observer = null;
            let animationFrame = null;

            const resizeHandler = () => {
                if (!swiper || swiper.destroyed || !swiper.initialized) return;
                emit('beforeResize');
                emit('resize');
            };

            const createObserver = () => {
                if (!swiper || swiper.destroyed || !swiper.initialized) return;
                observer = new ResizeObserver(entries => {
                    animationFrame = window.requestAnimationFrame(() => {
                        const {
                            width,
                            height
                        } = swiper;
                        let newWidth = width;
                        let newHeight = height;
                        entries.forEach(({
                                             contentBoxSize,
                                             contentRect,
                                             target
                                         }) => {
                            if (target && target !== swiper.el) return;
                            newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
                            newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
                        });

                        if (newWidth !== width || newHeight !== height) {
                            resizeHandler();
                        }
                    });
                });
                observer.observe(swiper.el);
            };

            const removeObserver = () => {
                if (animationFrame) {
                    window.cancelAnimationFrame(animationFrame);
                }

                if (observer && observer.unobserve && swiper.el) {
                    observer.unobserve(swiper.el);
                    observer = null;
                }
            };

            const orientationChangeHandler = () => {
                if (!swiper || swiper.destroyed || !swiper.initialized) return;
                emit('orientationchange');
            };

            on('init', () => {
                if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {
                    createObserver();
                    return;
                }

                window.addEventListener('resize', resizeHandler);
                window.addEventListener('orientationchange', orientationChangeHandler);
            });
            on('destroy', () => {
                removeObserver();
                window.removeEventListener('resize', resizeHandler);
                window.removeEventListener('orientationchange', orientationChangeHandler);
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/index.js":
    /*!*************************************************!*\
  !*** ./node_modules/swiper/core/slide/index.js ***!
  \*************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _slideTo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./slideTo.js */ "./node_modules/swiper/core/slide/slideTo.js");
        /* harmony import */ var _slideToLoop_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./slideToLoop.js */ "./node_modules/swiper/core/slide/slideToLoop.js");
        /* harmony import */ var _slideNext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slideNext.js */ "./node_modules/swiper/core/slide/slideNext.js");
        /* harmony import */ var _slidePrev_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slidePrev.js */ "./node_modules/swiper/core/slide/slidePrev.js");
        /* harmony import */ var _slideReset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slideReset.js */ "./node_modules/swiper/core/slide/slideReset.js");
        /* harmony import */ var _slideToClosest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./slideToClosest.js */ "./node_modules/swiper/core/slide/slideToClosest.js");
        /* harmony import */ var _slideToClickedSlide_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./slideToClickedSlide.js */ "./node_modules/swiper/core/slide/slideToClickedSlide.js");







        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            slideTo: _slideTo_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            slideToLoop: _slideToLoop_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            slideNext: _slideNext_js__WEBPACK_IMPORTED_MODULE_2__["default"],
            slidePrev: _slidePrev_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            slideReset: _slideReset_js__WEBPACK_IMPORTED_MODULE_4__["default"],
            slideToClosest: _slideToClosest_js__WEBPACK_IMPORTED_MODULE_5__["default"],
            slideToClickedSlide: _slideToClickedSlide_js__WEBPACK_IMPORTED_MODULE_6__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideNext.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideNext.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideNext)
            /* harmony export */ });
        /* eslint no-unused-vars: "off" */
        function slideNext(speed = this.params.speed, runCallbacks = true, internal) {
            const swiper = this;
            const {
                animating,
                enabled,
                params
            } = swiper;
            if (!enabled) return swiper;
            let perGroup = params.slidesPerGroup;

            if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
                perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);
            }

            const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;

            if (params.loop) {
                if (animating && params.loopPreventsSlide) return false;
                swiper.loopFix(); // eslint-disable-next-line

                swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            }

            if (params.rewind && swiper.isEnd) {
                return swiper.slideTo(0, speed, runCallbacks, internal);
            }

            return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slidePrev.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/slide/slidePrev.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slidePrev)
            /* harmony export */ });
        /* eslint no-unused-vars: "off" */
        function slidePrev(speed = this.params.speed, runCallbacks = true, internal) {
            const swiper = this;
            const {
                params,
                animating,
                snapGrid,
                slidesGrid,
                rtlTranslate,
                enabled
            } = swiper;
            if (!enabled) return swiper;

            if (params.loop) {
                if (animating && params.loopPreventsSlide) return false;
                swiper.loopFix(); // eslint-disable-next-line

                swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            }

            const translate = rtlTranslate ? swiper.translate : -swiper.translate;

            function normalize(val) {
                if (val < 0) return -Math.floor(Math.abs(val));
                return Math.floor(val);
            }

            const normalizedTranslate = normalize(translate);
            const normalizedSnapGrid = snapGrid.map(val => normalize(val));
            let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

            if (typeof prevSnap === 'undefined' && params.cssMode) {
                let prevSnapIndex;
                snapGrid.forEach((snap, snapIndex) => {
                    if (normalizedTranslate >= snap) {
                        // prevSnap = snap;
                        prevSnapIndex = snapIndex;
                    }
                });

                if (typeof prevSnapIndex !== 'undefined') {
                    prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
                }
            }

            let prevIndex = 0;

            if (typeof prevSnap !== 'undefined') {
                prevIndex = slidesGrid.indexOf(prevSnap);
                if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;

                if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
                    prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;
                    prevIndex = Math.max(prevIndex, 0);
                }
            }

            if (params.rewind && swiper.isBeginning) {
                const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
                return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
            }

            return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideReset.js":
    /*!******************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideReset.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideReset)
            /* harmony export */ });
        /* eslint no-unused-vars: "off" */
        function slideReset(speed = this.params.speed, runCallbacks = true, internal) {
            const swiper = this;
            return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideTo.js":
    /*!***************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideTo.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideTo)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function slideTo(index = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {
            if (typeof index !== 'number' && typeof index !== 'string') {
                throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);
            }

            if (typeof index === 'string') {
                /**
                 * The `index` argument converted from `string` to `number`.
                 * @type {number}
                 */
                const indexAsNumber = parseInt(index, 10);
                /**
                 * Determines whether the `index` argument is a valid `number`
                 * after being converted from the `string` type.
                 * @type {boolean}
                 */

                const isValidNumber = isFinite(indexAsNumber);

                if (!isValidNumber) {
                    throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);
                } // Knowing that the converted `index` is a valid number,
                // we can update the original argument's value.


                index = indexAsNumber;
            }

            const swiper = this;
            let slideIndex = index;
            if (slideIndex < 0) slideIndex = 0;
            const {
                params,
                snapGrid,
                slidesGrid,
                previousIndex,
                activeIndex,
                rtlTranslate: rtl,
                wrapperEl,
                enabled
            } = swiper;

            if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
                return false;
            }

            const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
            let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
            if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
            const translate = -snapGrid[snapIndex]; // Normalize slideIndex

            if (params.normalizeSlideIndex) {
                for (let i = 0; i < slidesGrid.length; i += 1) {
                    const normalizedTranslate = -Math.floor(translate * 100);
                    const normalizedGrid = Math.floor(slidesGrid[i] * 100);
                    const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

                    if (typeof slidesGrid[i + 1] !== 'undefined') {
                        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {
                            slideIndex = i;
                        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {
                            slideIndex = i + 1;
                        }
                    } else if (normalizedTranslate >= normalizedGrid) {
                        slideIndex = i;
                    }
                }
            } // Directions locks


            if (swiper.initialized && slideIndex !== activeIndex) {
                if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
                    return false;
                }

                if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
                    if ((activeIndex || 0) !== slideIndex) return false;
                }
            }

            if (slideIndex !== (previousIndex || 0) && runCallbacks) {
                swiper.emit('beforeSlideChangeStart');
            } // Update progress


            swiper.updateProgress(translate);
            let direction;
            if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

            if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
                swiper.updateActiveIndex(slideIndex); // Update Height

                if (params.autoHeight) {
                    swiper.updateAutoHeight();
                }

                swiper.updateSlidesClasses();

                if (params.effect !== 'slide') {
                    swiper.setTranslate(translate);
                }

                if (direction !== 'reset') {
                    swiper.transitionStart(runCallbacks, direction);
                    swiper.transitionEnd(runCallbacks, direction);
                }

                return false;
            }

            if (params.cssMode) {
                const isH = swiper.isHorizontal();
                const t = rtl ? translate : -translate;

                if (speed === 0) {
                    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

                    if (isVirtual) {
                        swiper.wrapperEl.style.scrollSnapType = 'none';
                        swiper._immediateVirtual = true;
                    }

                    wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;

                    if (isVirtual) {
                        requestAnimationFrame(() => {
                            swiper.wrapperEl.style.scrollSnapType = '';
                            swiper._swiperImmediateVirtual = false;
                        });
                    }
                } else {
                    if (!swiper.support.smoothScroll) {
                        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.animateCSSModeScroll)({
                            swiper,
                            targetPosition: t,
                            side: isH ? 'left' : 'top'
                        });
                        return true;
                    }

                    wrapperEl.scrollTo({
                        [isH ? 'left' : 'top']: t,
                        behavior: 'smooth'
                    });
                }

                return true;
            }

            swiper.setTransition(speed);
            swiper.setTranslate(translate);
            swiper.updateActiveIndex(slideIndex);
            swiper.updateSlidesClasses();
            swiper.emit('beforeTransitionStart', speed, internal);
            swiper.transitionStart(runCallbacks, direction);

            if (speed === 0) {
                swiper.transitionEnd(runCallbacks, direction);
            } else if (!swiper.animating) {
                swiper.animating = true;

                if (!swiper.onSlideToWrapperTransitionEnd) {
                    swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
                        if (!swiper || swiper.destroyed) return;
                        if (e.target !== this) return;
                        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
                        swiper.onSlideToWrapperTransitionEnd = null;
                        delete swiper.onSlideToWrapperTransitionEnd;
                        swiper.transitionEnd(runCallbacks, direction);
                    };
                }

                swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
                swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
            }

            return true;
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideToClickedSlide.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideToClickedSlide.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideToClickedSlide)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");


        function slideToClickedSlide() {
            const swiper = this;
            const {
                params,
                $wrapperEl
            } = swiper;
            const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
            let slideToIndex = swiper.clickedIndex;
            let realIndex;

            if (params.loop) {
                if (swiper.animating) return;
                realIndex = parseInt((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

                if (params.centeredSlides) {
                    if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
                        swiper.loopFix();
                        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`).eq(0).index();
                        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {
                            swiper.slideTo(slideToIndex);
                        });
                    } else {
                        swiper.slideTo(slideToIndex);
                    }
                } else if (slideToIndex > swiper.slides.length - slidesPerView) {
                    swiper.loopFix();
                    slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`).eq(0).index();
                    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {
                        swiper.slideTo(slideToIndex);
                    });
                } else {
                    swiper.slideTo(slideToIndex);
                }
            } else {
                swiper.slideTo(slideToIndex);
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideToClosest.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideToClosest.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideToClosest)
            /* harmony export */ });
        /* eslint no-unused-vars: "off" */
        function slideToClosest(speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {
            const swiper = this;
            let index = swiper.activeIndex;
            const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
            const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
            const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

            if (translate >= swiper.snapGrid[snapIndex]) {
                // The current translate is on or after the current snap index, so the choice
                // is between the current index and the one after it.
                const currentSnap = swiper.snapGrid[snapIndex];
                const nextSnap = swiper.snapGrid[snapIndex + 1];

                if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
                    index += swiper.params.slidesPerGroup;
                }
            } else {
                // The current translate is before the current snap index, so the choice
                // is between the current index and the one before it.
                const prevSnap = swiper.snapGrid[snapIndex - 1];
                const currentSnap = swiper.snapGrid[snapIndex];

                if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {
                    index -= swiper.params.slidesPerGroup;
                }
            }

            index = Math.max(index, 0);
            index = Math.min(index, swiper.slidesGrid.length - 1);
            return swiper.slideTo(index, speed, runCallbacks, internal);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/slide/slideToLoop.js":
    /*!*******************************************************!*\
  !*** ./node_modules/swiper/core/slide/slideToLoop.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ slideToLoop)
            /* harmony export */ });
        function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {
            if (typeof index === 'string') {
                /**
                 * The `index` argument converted from `string` to `number`.
                 * @type {number}
                 */
                const indexAsNumber = parseInt(index, 10);
                /**
                 * Determines whether the `index` argument is a valid `number`
                 * after being converted from the `string` type.
                 * @type {boolean}
                 */

                const isValidNumber = isFinite(indexAsNumber);

                if (!isValidNumber) {
                    throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);
                } // Knowing that the converted `index` is a valid number,
                // we can update the original argument's value.


                index = indexAsNumber;
            }

            const swiper = this;
            let newIndex = index;

            if (swiper.params.loop) {
                newIndex += swiper.loopedSlides;
            }

            return swiper.slideTo(newIndex, speed, runCallbacks, internal);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/transition/index.js":
    /*!******************************************************!*\
  !*** ./node_modules/swiper/core/transition/index.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _setTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setTransition.js */ "./node_modules/swiper/core/transition/setTransition.js");
        /* harmony import */ var _transitionStart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transitionStart.js */ "./node_modules/swiper/core/transition/transitionStart.js");
        /* harmony import */ var _transitionEnd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transitionEnd.js */ "./node_modules/swiper/core/transition/transitionEnd.js");



        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            setTransition: _setTransition_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            transitionStart: _transitionStart_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            transitionEnd: _transitionEnd_js__WEBPACK_IMPORTED_MODULE_2__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/transition/setTransition.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/core/transition/setTransition.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ setTransition)
            /* harmony export */ });
        function setTransition(duration, byController) {
            const swiper = this;

            if (!swiper.params.cssMode) {
                swiper.$wrapperEl.transition(duration);
            }

            swiper.emit('setTransition', duration, byController);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/transition/transitionEmit.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/transition/transitionEmit.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ transitionEmit)
            /* harmony export */ });
        function transitionEmit({
                                    swiper,
                                    runCallbacks,
                                    direction,
                                    step
                                }) {
            const {
                activeIndex,
                previousIndex
            } = swiper;
            let dir = direction;

            if (!dir) {
                if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
            }

            swiper.emit(`transition${step}`);

            if (runCallbacks && activeIndex !== previousIndex) {
                if (dir === 'reset') {
                    swiper.emit(`slideResetTransition${step}`);
                    return;
                }

                swiper.emit(`slideChangeTransition${step}`);

                if (dir === 'next') {
                    swiper.emit(`slideNextTransition${step}`);
                } else {
                    swiper.emit(`slidePrevTransition${step}`);
                }
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/transition/transitionEnd.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/core/transition/transitionEnd.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ transitionEnd)
            /* harmony export */ });
        /* harmony import */ var _transitionEmit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transitionEmit.js */ "./node_modules/swiper/core/transition/transitionEmit.js");

        function transitionEnd(runCallbacks = true, direction) {
            const swiper = this;
            const {
                params
            } = swiper;
            swiper.animating = false;
            if (params.cssMode) return;
            swiper.setTransition(0);
            (0,_transitionEmit_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
                swiper,
                runCallbacks,
                direction,
                step: 'End'
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/transition/transitionStart.js":
    /*!****************************************************************!*\
  !*** ./node_modules/swiper/core/transition/transitionStart.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ transitionStart)
            /* harmony export */ });
        /* harmony import */ var _transitionEmit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transitionEmit.js */ "./node_modules/swiper/core/transition/transitionEmit.js");

        function transitionStart(runCallbacks = true, direction) {
            const swiper = this;
            const {
                params
            } = swiper;
            if (params.cssMode) return;

            if (params.autoHeight) {
                swiper.updateAutoHeight();
            }

            (0,_transitionEmit_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
                swiper,
                runCallbacks,
                direction,
                step: 'Start'
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/getTranslate.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/core/translate/getTranslate.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ getSwiperTranslate)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function getSwiperTranslate(axis = this.isHorizontal() ? 'x' : 'y') {
            const swiper = this;
            const {
                params,
                rtlTranslate: rtl,
                translate,
                $wrapperEl
            } = swiper;

            if (params.virtualTranslate) {
                return rtl ? -translate : translate;
            }

            if (params.cssMode) {
                return translate;
            }

            let currentTranslate = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.getTranslate)($wrapperEl[0], axis);
            if (rtl) currentTranslate = -currentTranslate;
            return currentTranslate || 0;
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/index.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/core/translate/index.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _getTranslate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getTranslate.js */ "./node_modules/swiper/core/translate/getTranslate.js");
        /* harmony import */ var _setTranslate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setTranslate.js */ "./node_modules/swiper/core/translate/setTranslate.js");
        /* harmony import */ var _minTranslate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./minTranslate.js */ "./node_modules/swiper/core/translate/minTranslate.js");
        /* harmony import */ var _maxTranslate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./maxTranslate.js */ "./node_modules/swiper/core/translate/maxTranslate.js");
        /* harmony import */ var _translateTo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./translateTo.js */ "./node_modules/swiper/core/translate/translateTo.js");





        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            getTranslate: _getTranslate_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            setTranslate: _setTranslate_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            minTranslate: _minTranslate_js__WEBPACK_IMPORTED_MODULE_2__["default"],
            maxTranslate: _maxTranslate_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            translateTo: _translateTo_js__WEBPACK_IMPORTED_MODULE_4__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/maxTranslate.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/core/translate/maxTranslate.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ maxTranslate)
            /* harmony export */ });
        function maxTranslate() {
            return -this.snapGrid[this.snapGrid.length - 1];
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/minTranslate.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/core/translate/minTranslate.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ minTranslate)
            /* harmony export */ });
        function minTranslate() {
            return -this.snapGrid[0];
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/setTranslate.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/core/translate/setTranslate.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ setTranslate)
            /* harmony export */ });
        function setTranslate(translate, byController) {
            const swiper = this;
            const {
                rtlTranslate: rtl,
                params,
                $wrapperEl,
                wrapperEl,
                progress
            } = swiper;
            let x = 0;
            let y = 0;
            const z = 0;

            if (swiper.isHorizontal()) {
                x = rtl ? -translate : translate;
            } else {
                y = translate;
            }

            if (params.roundLengths) {
                x = Math.floor(x);
                y = Math.floor(y);
            }

            if (params.cssMode) {
                wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
            } else if (!params.virtualTranslate) {
                $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);
            }

            swiper.previousTranslate = swiper.translate;
            swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

            let newProgress;
            const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

            if (translatesDiff === 0) {
                newProgress = 0;
            } else {
                newProgress = (translate - swiper.minTranslate()) / translatesDiff;
            }

            if (newProgress !== progress) {
                swiper.updateProgress(translate);
            }

            swiper.emit('setTranslate', swiper.translate, byController);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/translate/translateTo.js":
    /*!***********************************************************!*\
  !*** ./node_modules/swiper/core/translate/translateTo.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ translateTo)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {
            const swiper = this;
            const {
                params,
                wrapperEl
            } = swiper;

            if (swiper.animating && params.preventInteractionOnTransition) {
                return false;
            }

            const minTranslate = swiper.minTranslate();
            const maxTranslate = swiper.maxTranslate();
            let newTranslate;
            if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

            swiper.updateProgress(newTranslate);

            if (params.cssMode) {
                const isH = swiper.isHorizontal();

                if (speed === 0) {
                    wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
                } else {
                    if (!swiper.support.smoothScroll) {
                        (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.animateCSSModeScroll)({
                            swiper,
                            targetPosition: -newTranslate,
                            side: isH ? 'left' : 'top'
                        });
                        return true;
                    }

                    wrapperEl.scrollTo({
                        [isH ? 'left' : 'top']: -newTranslate,
                        behavior: 'smooth'
                    });
                }

                return true;
            }

            if (speed === 0) {
                swiper.setTransition(0);
                swiper.setTranslate(newTranslate);

                if (runCallbacks) {
                    swiper.emit('beforeTransitionStart', speed, internal);
                    swiper.emit('transitionEnd');
                }
            } else {
                swiper.setTransition(speed);
                swiper.setTranslate(newTranslate);

                if (runCallbacks) {
                    swiper.emit('beforeTransitionStart', speed, internal);
                    swiper.emit('transitionStart');
                }

                if (!swiper.animating) {
                    swiper.animating = true;

                    if (!swiper.onTranslateToWrapperTransitionEnd) {
                        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
                            if (!swiper || swiper.destroyed) return;
                            if (e.target !== this) return;
                            swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
                            swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
                            swiper.onTranslateToWrapperTransitionEnd = null;
                            delete swiper.onTranslateToWrapperTransitionEnd;

                            if (runCallbacks) {
                                swiper.emit('transitionEnd');
                            }
                        };
                    }

                    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
                    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
                }
            }

            return true;
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/index.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/core/update/index.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var _updateSize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./updateSize.js */ "./node_modules/swiper/core/update/updateSize.js");
        /* harmony import */ var _updateSlides_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./updateSlides.js */ "./node_modules/swiper/core/update/updateSlides.js");
        /* harmony import */ var _updateAutoHeight_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./updateAutoHeight.js */ "./node_modules/swiper/core/update/updateAutoHeight.js");
        /* harmony import */ var _updateSlidesOffset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./updateSlidesOffset.js */ "./node_modules/swiper/core/update/updateSlidesOffset.js");
        /* harmony import */ var _updateSlidesProgress_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./updateSlidesProgress.js */ "./node_modules/swiper/core/update/updateSlidesProgress.js");
        /* harmony import */ var _updateProgress_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./updateProgress.js */ "./node_modules/swiper/core/update/updateProgress.js");
        /* harmony import */ var _updateSlidesClasses_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./updateSlidesClasses.js */ "./node_modules/swiper/core/update/updateSlidesClasses.js");
        /* harmony import */ var _updateActiveIndex_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./updateActiveIndex.js */ "./node_modules/swiper/core/update/updateActiveIndex.js");
        /* harmony import */ var _updateClickedSlide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./updateClickedSlide.js */ "./node_modules/swiper/core/update/updateClickedSlide.js");









        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
            updateSize: _updateSize_js__WEBPACK_IMPORTED_MODULE_0__["default"],
            updateSlides: _updateSlides_js__WEBPACK_IMPORTED_MODULE_1__["default"],
            updateAutoHeight: _updateAutoHeight_js__WEBPACK_IMPORTED_MODULE_2__["default"],
            updateSlidesOffset: _updateSlidesOffset_js__WEBPACK_IMPORTED_MODULE_3__["default"],
            updateSlidesProgress: _updateSlidesProgress_js__WEBPACK_IMPORTED_MODULE_4__["default"],
            updateProgress: _updateProgress_js__WEBPACK_IMPORTED_MODULE_5__["default"],
            updateSlidesClasses: _updateSlidesClasses_js__WEBPACK_IMPORTED_MODULE_6__["default"],
            updateActiveIndex: _updateActiveIndex_js__WEBPACK_IMPORTED_MODULE_7__["default"],
            updateClickedSlide: _updateClickedSlide_js__WEBPACK_IMPORTED_MODULE_8__["default"]
        });

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateActiveIndex.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateActiveIndex.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateActiveIndex)
            /* harmony export */ });
        function updateActiveIndex(newActiveIndex) {
            const swiper = this;
            const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
            const {
                slidesGrid,
                snapGrid,
                params,
                activeIndex: previousIndex,
                realIndex: previousRealIndex,
                snapIndex: previousSnapIndex
            } = swiper;
            let activeIndex = newActiveIndex;
            let snapIndex;

            if (typeof activeIndex === 'undefined') {
                for (let i = 0; i < slidesGrid.length; i += 1) {
                    if (typeof slidesGrid[i + 1] !== 'undefined') {
                        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
                            activeIndex = i;
                        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
                            activeIndex = i + 1;
                        }
                    } else if (translate >= slidesGrid[i]) {
                        activeIndex = i;
                    }
                } // Normalize slideIndex


                if (params.normalizeSlideIndex) {
                    if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
                }
            }

            if (snapGrid.indexOf(translate) >= 0) {
                snapIndex = snapGrid.indexOf(translate);
            } else {
                const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
                snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
            }

            if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

            if (activeIndex === previousIndex) {
                if (snapIndex !== previousSnapIndex) {
                    swiper.snapIndex = snapIndex;
                    swiper.emit('snapIndexChange');
                }

                return;
            } // Get real index


            const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
            Object.assign(swiper, {
                snapIndex,
                realIndex,
                previousIndex,
                activeIndex
            });
            swiper.emit('activeIndexChange');
            swiper.emit('snapIndexChange');

            if (previousRealIndex !== realIndex) {
                swiper.emit('realIndexChange');
            }

            if (swiper.initialized || swiper.params.runCallbacksOnInit) {
                swiper.emit('slideChange');
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateAutoHeight.js":
    /*!*************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateAutoHeight.js ***!
  \*************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateAutoHeight)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");

        function updateAutoHeight(speed) {
            const swiper = this;
            const activeSlides = [];
            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
            let newHeight = 0;
            let i;

            if (typeof speed === 'number') {
                swiper.setTransition(speed);
            } else if (speed === true) {
                swiper.setTransition(swiper.params.speed);
            }

            const getSlideByIndex = index => {
                if (isVirtual) {
                    return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];
                }

                return swiper.slides.eq(index)[0];
            }; // Find slides currently in view


            if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
                if (swiper.params.centeredSlides) {
                    (swiper.visibleSlides || (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])([])).each(slide => {
                        activeSlides.push(slide);
                    });
                } else {
                    for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
                        const index = swiper.activeIndex + i;
                        if (index > swiper.slides.length && !isVirtual) break;
                        activeSlides.push(getSlideByIndex(index));
                    }
                }
            } else {
                activeSlides.push(getSlideByIndex(swiper.activeIndex));
            } // Find new height from highest slide in view


            for (i = 0; i < activeSlides.length; i += 1) {
                if (typeof activeSlides[i] !== 'undefined') {
                    const height = activeSlides[i].offsetHeight;
                    newHeight = height > newHeight ? height : newHeight;
                }
            } // Update Height


            if (newHeight || newHeight === 0) swiper.$wrapperEl.css('height', `${newHeight}px`);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateClickedSlide.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateClickedSlide.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateClickedSlide)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");

        function updateClickedSlide(e) {
            const swiper = this;
            const params = swiper.params;
            const slide = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(e).closest(`.${params.slideClass}`)[0];
            let slideFound = false;
            let slideIndex;

            if (slide) {
                for (let i = 0; i < swiper.slides.length; i += 1) {
                    if (swiper.slides[i] === slide) {
                        slideFound = true;
                        slideIndex = i;
                        break;
                    }
                }
            }

            if (slide && slideFound) {
                swiper.clickedSlide = slide;

                if (swiper.virtual && swiper.params.virtual.enabled) {
                    swiper.clickedIndex = parseInt((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(slide).attr('data-swiper-slide-index'), 10);
                } else {
                    swiper.clickedIndex = slideIndex;
                }
            } else {
                swiper.clickedSlide = undefined;
                swiper.clickedIndex = undefined;
                return;
            }

            if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
                swiper.slideToClickedSlide();
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateProgress.js":
    /*!***********************************************************!*\
  !*** ./node_modules/swiper/core/update/updateProgress.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateProgress)
            /* harmony export */ });
        function updateProgress(translate) {
            const swiper = this;

            if (typeof translate === 'undefined') {
                const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

                translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
            }

            const params = swiper.params;
            const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
            let {
                progress,
                isBeginning,
                isEnd
            } = swiper;
            const wasBeginning = isBeginning;
            const wasEnd = isEnd;

            if (translatesDiff === 0) {
                progress = 0;
                isBeginning = true;
                isEnd = true;
            } else {
                progress = (translate - swiper.minTranslate()) / translatesDiff;
                isBeginning = progress <= 0;
                isEnd = progress >= 1;
            }

            Object.assign(swiper, {
                progress,
                isBeginning,
                isEnd
            });
            if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

            if (isBeginning && !wasBeginning) {
                swiper.emit('reachBeginning toEdge');
            }

            if (isEnd && !wasEnd) {
                swiper.emit('reachEnd toEdge');
            }

            if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
                swiper.emit('fromEdge');
            }

            swiper.emit('progress', progress);
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateSize.js":
    /*!*******************************************************!*\
  !*** ./node_modules/swiper/core/update/updateSize.js ***!
  \*******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateSize)
            /* harmony export */ });
        function updateSize() {
            const swiper = this;
            let width;
            let height;
            const $el = swiper.$el;

            if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
                width = swiper.params.width;
            } else {
                width = $el[0].clientWidth;
            }

            if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
                height = swiper.params.height;
            } else {
                height = $el[0].clientHeight;
            }

            if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
                return;
            } // Subtract paddings


            width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
            height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
            if (Number.isNaN(width)) width = 0;
            if (Number.isNaN(height)) height = 0;
            Object.assign(swiper, {
                width,
                height,
                size: swiper.isHorizontal() ? width : height
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateSlides.js":
    /*!*********************************************************!*\
  !*** ./node_modules/swiper/core/update/updateSlides.js ***!
  \*********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateSlides)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function updateSlides() {
            const swiper = this;

            function getDirectionLabel(property) {
                if (swiper.isHorizontal()) {
                    return property;
                } // prettier-ignore


                return {
                    'width': 'height',
                    'margin-top': 'margin-left',
                    'margin-bottom ': 'margin-right',
                    'margin-left': 'margin-top',
                    'margin-right': 'margin-bottom',
                    'padding-left': 'padding-top',
                    'padding-right': 'padding-bottom',
                    'marginRight': 'marginBottom'
                }[property];
            }

            function getDirectionPropertyValue(node, label) {
                return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
            }

            const params = swiper.params;
            const {
                $wrapperEl,
                size: swiperSize,
                rtlTranslate: rtl,
                wrongRTL
            } = swiper;
            const isVirtual = swiper.virtual && params.virtual.enabled;
            const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
            const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);
            const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
            let snapGrid = [];
            const slidesGrid = [];
            const slidesSizesGrid = [];
            let offsetBefore = params.slidesOffsetBefore;

            if (typeof offsetBefore === 'function') {
                offsetBefore = params.slidesOffsetBefore.call(swiper);
            }

            let offsetAfter = params.slidesOffsetAfter;

            if (typeof offsetAfter === 'function') {
                offsetAfter = params.slidesOffsetAfter.call(swiper);
            }

            const previousSnapGridLength = swiper.snapGrid.length;
            const previousSlidesGridLength = swiper.slidesGrid.length;
            let spaceBetween = params.spaceBetween;
            let slidePosition = -offsetBefore;
            let prevSlideSize = 0;
            let index = 0;

            if (typeof swiperSize === 'undefined') {
                return;
            }

            if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
                spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
            }

            swiper.virtualSize = -spaceBetween; // reset margins

            if (rtl) slides.css({
                marginLeft: '',
                marginBottom: '',
                marginTop: ''
            });else slides.css({
                marginRight: '',
                marginBottom: '',
                marginTop: ''
            }); // reset cssMode offsets

            if (params.centeredSlides && params.cssMode) {
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-before', '');
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-after', '');
            }

            const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;

            if (gridEnabled) {
                swiper.grid.initSlides(slidesLength);
            } // Calc slides


            let slideSize;
            const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {
                return typeof params.breakpoints[key].slidesPerView !== 'undefined';
            }).length > 0;

            for (let i = 0; i < slidesLength; i += 1) {
                slideSize = 0;
                const slide = slides.eq(i);

                if (gridEnabled) {
                    swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);
                }

                if (slide.css('display') === 'none') continue; // eslint-disable-line

                if (params.slidesPerView === 'auto') {
                    if (shouldResetSlideSize) {
                        slides[i].style[getDirectionLabel('width')] = ``;
                    }

                    const slideStyles = getComputedStyle(slide[0]);
                    const currentTransform = slide[0].style.transform;
                    const currentWebKitTransform = slide[0].style.webkitTransform;

                    if (currentTransform) {
                        slide[0].style.transform = 'none';
                    }

                    if (currentWebKitTransform) {
                        slide[0].style.webkitTransform = 'none';
                    }

                    if (params.roundLengths) {
                        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
                    } else {
                        // eslint-disable-next-line
                        const width = getDirectionPropertyValue(slideStyles, 'width');
                        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
                        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
                        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
                        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
                        const boxSizing = slideStyles.getPropertyValue('box-sizing');

                        if (boxSizing && boxSizing === 'border-box') {
                            slideSize = width + marginLeft + marginRight;
                        } else {
                            const {
                                clientWidth,
                                offsetWidth
                            } = slide[0];
                            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
                        }
                    }

                    if (currentTransform) {
                        slide[0].style.transform = currentTransform;
                    }

                    if (currentWebKitTransform) {
                        slide[0].style.webkitTransform = currentWebKitTransform;
                    }

                    if (params.roundLengths) slideSize = Math.floor(slideSize);
                } else {
                    slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
                    if (params.roundLengths) slideSize = Math.floor(slideSize);

                    if (slides[i]) {
                        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;
                    }
                }

                if (slides[i]) {
                    slides[i].swiperSlideSize = slideSize;
                }

                slidesSizesGrid.push(slideSize);

                if (params.centeredSlides) {
                    slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
                    if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
                    if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
                    if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
                    if (params.roundLengths) slidePosition = Math.floor(slidePosition);
                    if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
                    slidesGrid.push(slidePosition);
                } else {
                    if (params.roundLengths) slidePosition = Math.floor(slidePosition);
                    if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
                    slidesGrid.push(slidePosition);
                    slidePosition = slidePosition + slideSize + spaceBetween;
                }

                swiper.virtualSize += slideSize + spaceBetween;
                prevSlideSize = slideSize;
                index += 1;
            }

            swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;

            if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
                $wrapperEl.css({
                    width: `${swiper.virtualSize + params.spaceBetween}px`
                });
            }

            if (params.setWrapperSize) {
                $wrapperEl.css({
                    [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`
                });
            }

            if (gridEnabled) {
                swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);
            } // Remove last grid elements depending on width


            if (!params.centeredSlides) {
                const newSlidesGrid = [];

                for (let i = 0; i < snapGrid.length; i += 1) {
                    let slidesGridItem = snapGrid[i];
                    if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);

                    if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
                        newSlidesGrid.push(slidesGridItem);
                    }
                }

                snapGrid = newSlidesGrid;

                if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
                    snapGrid.push(swiper.virtualSize - swiperSize);
                }
            }

            if (snapGrid.length === 0) snapGrid = [0];

            if (params.spaceBetween !== 0) {
                const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
                slides.filter((_, slideIndex) => {
                    if (!params.cssMode) return true;

                    if (slideIndex === slides.length - 1) {
                        return false;
                    }

                    return true;
                }).css({
                    [key]: `${spaceBetween}px`
                });
            }

            if (params.centeredSlides && params.centeredSlidesBounds) {
                let allSlidesSize = 0;
                slidesSizesGrid.forEach(slideSizeValue => {
                    allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
                });
                allSlidesSize -= params.spaceBetween;
                const maxSnap = allSlidesSize - swiperSize;
                snapGrid = snapGrid.map(snap => {
                    if (snap < 0) return -offsetBefore;
                    if (snap > maxSnap) return maxSnap + offsetAfter;
                    return snap;
                });
            }

            if (params.centerInsufficientSlides) {
                let allSlidesSize = 0;
                slidesSizesGrid.forEach(slideSizeValue => {
                    allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
                });
                allSlidesSize -= params.spaceBetween;

                if (allSlidesSize < swiperSize) {
                    const allSlidesOffset = (swiperSize - allSlidesSize) / 2;
                    snapGrid.forEach((snap, snapIndex) => {
                        snapGrid[snapIndex] = snap - allSlidesOffset;
                    });
                    slidesGrid.forEach((snap, snapIndex) => {
                        slidesGrid[snapIndex] = snap + allSlidesOffset;
                    });
                }
            }

            Object.assign(swiper, {
                slides,
                snapGrid,
                slidesGrid,
                slidesSizesGrid
            });

            if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);
                (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.setCSSProperty)(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);
                const addToSnapGrid = -swiper.snapGrid[0];
                const addToSlidesGrid = -swiper.slidesGrid[0];
                swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);
                swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);
            }

            if (slidesLength !== previousSlidesLength) {
                swiper.emit('slidesLengthChange');
            }

            if (snapGrid.length !== previousSnapGridLength) {
                if (swiper.params.watchOverflow) swiper.checkOverflow();
                swiper.emit('snapGridLengthChange');
            }

            if (slidesGrid.length !== previousSlidesGridLength) {
                swiper.emit('slidesGridLengthChange');
            }

            if (params.watchSlidesProgress) {
                swiper.updateSlidesOffset();
            }

            if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {
                const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;
                const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);

                if (slidesLength <= params.maxBackfaceHiddenSlides) {
                    if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);
                } else if (hasClassBackfaceClassAdded) {
                    swiper.$el.removeClass(backFaceHiddenClass);
                }
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateSlidesClasses.js":
    /*!****************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateSlidesClasses.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateSlidesClasses)
            /* harmony export */ });
        function updateSlidesClasses() {
            const swiper = this;
            const {
                slides,
                params,
                $wrapperEl,
                activeIndex,
                realIndex
            } = swiper;
            const isVirtual = swiper.virtual && params.virtual.enabled;
            slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);
            let activeSlide;

            if (isVirtual) {
                activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index="${activeIndex}"]`);
            } else {
                activeSlide = slides.eq(activeIndex);
            } // Active classes


            activeSlide.addClass(params.slideActiveClass);

            if (params.loop) {
                // Duplicate to all looped slides
                if (activeSlide.hasClass(params.slideDuplicateClass)) {
                    $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${realIndex}"]`).addClass(params.slideDuplicateActiveClass);
                } else {
                    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${realIndex}"]`).addClass(params.slideDuplicateActiveClass);
                }
            } // Next Slide


            let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);

            if (params.loop && nextSlide.length === 0) {
                nextSlide = slides.eq(0);
                nextSlide.addClass(params.slideNextClass);
            } // Prev Slide


            let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);

            if (params.loop && prevSlide.length === 0) {
                prevSlide = slides.eq(-1);
                prevSlide.addClass(params.slidePrevClass);
            }

            if (params.loop) {
                // Duplicate to all looped slides
                if (nextSlide.hasClass(params.slideDuplicateClass)) {
                    $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`).addClass(params.slideDuplicateNextClass);
                } else {
                    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`).addClass(params.slideDuplicateNextClass);
                }

                if (prevSlide.hasClass(params.slideDuplicateClass)) {
                    $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`).addClass(params.slideDuplicatePrevClass);
                } else {
                    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`).addClass(params.slideDuplicatePrevClass);
                }
            }

            swiper.emitSlidesClasses();
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateSlidesOffset.js":
    /*!***************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateSlidesOffset.js ***!
  \***************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateSlidesOffset)
            /* harmony export */ });
        function updateSlidesOffset() {
            const swiper = this;
            const slides = swiper.slides;

            for (let i = 0; i < slides.length; i += 1) {
                slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/core/update/updateSlidesProgress.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/swiper/core/update/updateSlidesProgress.js ***!
  \*****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ updateSlidesProgress)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");

        function updateSlidesProgress(translate = this && this.translate || 0) {
            const swiper = this;
            const params = swiper.params;
            const {
                slides,
                rtlTranslate: rtl,
                snapGrid
            } = swiper;
            if (slides.length === 0) return;
            if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
            let offsetCenter = -translate;
            if (rtl) offsetCenter = translate; // Visible Slides

            slides.removeClass(params.slideVisibleClass);
            swiper.visibleSlidesIndexes = [];
            swiper.visibleSlides = [];

            for (let i = 0; i < slides.length; i += 1) {
                const slide = slides[i];
                let slideOffset = slide.swiperSlideOffset;

                if (params.cssMode && params.centeredSlides) {
                    slideOffset -= slides[0].swiperSlideOffset;
                }

                const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);
                const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);
                const slideBefore = -(offsetCenter - slideOffset);
                const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
                const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

                if (isVisible) {
                    swiper.visibleSlides.push(slide);
                    swiper.visibleSlidesIndexes.push(i);
                    slides.eq(i).addClass(params.slideVisibleClass);
                }

                slide.progress = rtl ? -slideProgress : slideProgress;
                slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
            }

            swiper.visibleSlides = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.visibleSlides);
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/a11y/a11y.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/a11y/a11y.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ A11y)
            /* harmony export */ });
        /* harmony import */ var _shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/classes-to-selector.js */ "./node_modules/swiper/shared/classes-to-selector.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function A11y({
                          swiper,
                          extendParams,
                          on
                      }) {
            extendParams({
                a11y: {
                    enabled: true,
                    notificationClass: 'swiper-notification',
                    prevSlideMessage: 'Previous slide',
                    nextSlideMessage: 'Next slide',
                    firstSlideMessage: 'This is the first slide',
                    lastSlideMessage: 'This is the last slide',
                    paginationBulletMessage: 'Go to slide {{index}}',
                    slideLabelMessage: '{{index}} / {{slidesLength}}',
                    containerMessage: null,
                    containerRoleDescriptionMessage: null,
                    itemRoleDescriptionMessage: null,
                    slideRole: 'group',
                    id: null
                }
            });
            swiper.a11y = {
                clicked: false
            };
            let liveRegion = null;

            function notify(message) {
                const notification = liveRegion;
                if (notification.length === 0) return;
                notification.html('');
                notification.html(message);
            }

            function getRandomNumber(size = 16) {
                const randomChar = () => Math.round(16 * Math.random()).toString(16);

                return 'x'.repeat(size).replace(/x/g, randomChar);
            }

            function makeElFocusable($el) {
                $el.attr('tabIndex', '0');
            }

            function makeElNotFocusable($el) {
                $el.attr('tabIndex', '-1');
            }

            function addElRole($el, role) {
                $el.attr('role', role);
            }

            function addElRoleDescription($el, description) {
                $el.attr('aria-roledescription', description);
            }

            function addElControls($el, controls) {
                $el.attr('aria-controls', controls);
            }

            function addElLabel($el, label) {
                $el.attr('aria-label', label);
            }

            function addElId($el, id) {
                $el.attr('id', id);
            }

            function addElLive($el, live) {
                $el.attr('aria-live', live);
            }

            function disableEl($el) {
                $el.attr('aria-disabled', true);
            }

            function enableEl($el) {
                $el.attr('aria-disabled', false);
            }

            function onEnterOrSpaceKey(e) {
                if (e.keyCode !== 13 && e.keyCode !== 32) return;
                const params = swiper.params.a11y;
                const $targetEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target);

                if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
                    if (!(swiper.isEnd && !swiper.params.loop)) {
                        swiper.slideNext();
                    }

                    if (swiper.isEnd) {
                        notify(params.lastSlideMessage);
                    } else {
                        notify(params.nextSlideMessage);
                    }
                }

                if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
                    if (!(swiper.isBeginning && !swiper.params.loop)) {
                        swiper.slidePrev();
                    }

                    if (swiper.isBeginning) {
                        notify(params.firstSlideMessage);
                    } else {
                        notify(params.prevSlideMessage);
                    }
                }

                if (swiper.pagination && $targetEl.is((0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.params.pagination.bulletClass))) {
                    $targetEl[0].click();
                }
            }

            function updateNavigation() {
                if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;
                const {
                    $nextEl,
                    $prevEl
                } = swiper.navigation;

                if ($prevEl && $prevEl.length > 0) {
                    if (swiper.isBeginning) {
                        disableEl($prevEl);
                        makeElNotFocusable($prevEl);
                    } else {
                        enableEl($prevEl);
                        makeElFocusable($prevEl);
                    }
                }

                if ($nextEl && $nextEl.length > 0) {
                    if (swiper.isEnd) {
                        disableEl($nextEl);
                        makeElNotFocusable($nextEl);
                    } else {
                        enableEl($nextEl);
                        makeElFocusable($nextEl);
                    }
                }
            }

            function hasPagination() {
                return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;
            }

            function hasClickablePagination() {
                return hasPagination() && swiper.params.pagination.clickable;
            }

            function updatePagination() {
                const params = swiper.params.a11y;
                if (!hasPagination()) return;
                swiper.pagination.bullets.each(bulletEl => {
                    const $bulletEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(bulletEl);

                    if (swiper.params.pagination.clickable) {
                        makeElFocusable($bulletEl);

                        if (!swiper.params.pagination.renderBullet) {
                            addElRole($bulletEl, 'button');
                            addElLabel($bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, $bulletEl.index() + 1));
                        }
                    }

                    if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {
                        $bulletEl.attr('aria-current', 'true');
                    } else {
                        $bulletEl.removeAttr('aria-current');
                    }
                });
            }

            const initNavEl = ($el, wrapperId, message) => {
                makeElFocusable($el);

                if ($el[0].tagName !== 'BUTTON') {
                    addElRole($el, 'button');
                    $el.on('keydown', onEnterOrSpaceKey);
                }

                addElLabel($el, message);
                addElControls($el, wrapperId);
            };

            const handlePointerDown = () => {
                swiper.a11y.clicked = true;
            };

            const handlePointerUp = () => {
                swiper.a11y.clicked = false;
            };

            const handleFocus = e => {
                if (swiper.a11y.clicked) return;
                const slideEl = e.target.closest(`.${swiper.params.slideClass}`);
                if (!slideEl || !swiper.slides.includes(slideEl)) return;
                const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;
                const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);
                if (isActive || isVisible) return;

                if (swiper.isHorizontal()) {
                    swiper.el.scrollLeft = 0;
                } else {
                    swiper.el.scrollTop = 0;
                }

                swiper.slideTo(swiper.slides.indexOf(slideEl), 0);
            };

            const initSlides = () => {
                const params = swiper.params.a11y;

                if (params.itemRoleDescriptionMessage) {
                    addElRoleDescription((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.slides), params.itemRoleDescriptionMessage);
                }

                if (params.slideRole) {
                    addElRole((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.slides), params.slideRole);
                }

                const slidesLength = swiper.params.loop ? swiper.slides.filter(el => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;

                if (params.slideLabelMessage) {
                    swiper.slides.each((slideEl, index) => {
                        const $slideEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(slideEl);
                        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr('data-swiper-slide-index'), 10) : index;
                        const ariaLabelMessage = params.slideLabelMessage.replace(/\{\{index\}\}/, slideIndex + 1).replace(/\{\{slidesLength\}\}/, slidesLength);
                        addElLabel($slideEl, ariaLabelMessage);
                    });
                }
            };

            const init = () => {
                const params = swiper.params.a11y;
                swiper.$el.append(liveRegion); // Container

                const $containerEl = swiper.$el;

                if (params.containerRoleDescriptionMessage) {
                    addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);
                }

                if (params.containerMessage) {
                    addElLabel($containerEl, params.containerMessage);
                } // Wrapper


                const $wrapperEl = swiper.$wrapperEl;
                const wrapperId = params.id || $wrapperEl.attr('id') || `swiper-wrapper-${getRandomNumber(16)}`;
                const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';
                addElId($wrapperEl, wrapperId);
                addElLive($wrapperEl, live); // Slide

                initSlides(); // Navigation

                let $nextEl;
                let $prevEl;

                if (swiper.navigation && swiper.navigation.$nextEl) {
                    $nextEl = swiper.navigation.$nextEl;
                }

                if (swiper.navigation && swiper.navigation.$prevEl) {
                    $prevEl = swiper.navigation.$prevEl;
                }

                if ($nextEl && $nextEl.length) {
                    initNavEl($nextEl, wrapperId, params.nextSlideMessage);
                }

                if ($prevEl && $prevEl.length) {
                    initNavEl($prevEl, wrapperId, params.prevSlideMessage);
                } // Pagination


                if (hasClickablePagination()) {
                    swiper.pagination.$el.on('keydown', (0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);
                } // Tab focus


                swiper.$el.on('focus', handleFocus, true);
                swiper.$el.on('pointerdown', handlePointerDown, true);
                swiper.$el.on('pointerup', handlePointerUp, true);
            };

            function destroy() {
                if (liveRegion && liveRegion.length > 0) liveRegion.remove();
                let $nextEl;
                let $prevEl;

                if (swiper.navigation && swiper.navigation.$nextEl) {
                    $nextEl = swiper.navigation.$nextEl;
                }

                if (swiper.navigation && swiper.navigation.$prevEl) {
                    $prevEl = swiper.navigation.$prevEl;
                }

                if ($nextEl) {
                    $nextEl.off('keydown', onEnterOrSpaceKey);
                }

                if ($prevEl) {
                    $prevEl.off('keydown', onEnterOrSpaceKey);
                } // Pagination


                if (hasClickablePagination()) {
                    swiper.pagination.$el.off('keydown', (0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);
                } // Tab focus


                swiper.$el.off('focus', handleFocus, true);
                swiper.$el.off('pointerdown', handlePointerDown, true);
                swiper.$el.off('pointerup', handlePointerUp, true);
            }

            on('beforeInit', () => {
                liveRegion = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(`<span class="${swiper.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`);
            });
            on('afterInit', () => {
                if (!swiper.params.a11y.enabled) return;
                init();
            });
            on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {
                if (!swiper.params.a11y.enabled) return;
                initSlides();
            });
            on('fromEdge toEdge afterInit lock unlock', () => {
                if (!swiper.params.a11y.enabled) return;
                updateNavigation();
            });
            on('paginationUpdate', () => {
                if (!swiper.params.a11y.enabled) return;
                updatePagination();
            });
            on('destroy', () => {
                if (!swiper.params.a11y.enabled) return;
                destroy();
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/autoplay/autoplay.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay/autoplay.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Autoplay)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* eslint no-underscore-dangle: "off" */

        /* eslint no-use-before-define: "off" */


        function Autoplay({
                              swiper,
                              extendParams,
                              on,
                              emit
                          }) {
            let timeout;
            swiper.autoplay = {
                running: false,
                paused: false
            };
            extendParams({
                autoplay: {
                    enabled: false,
                    delay: 3000,
                    waitForTransition: true,
                    disableOnInteraction: true,
                    stopOnLastSlide: false,
                    reverseDirection: false,
                    pauseOnMouseEnter: false
                }
            });

            function run() {
                if (!swiper.size) {
                    swiper.autoplay.running = false;
                    swiper.autoplay.paused = false;
                    return;
                }

                const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
                let delay = swiper.params.autoplay.delay;

                if ($activeSlideEl.attr('data-swiper-autoplay')) {
                    delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
                }

                clearTimeout(timeout);
                timeout = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {
                    let autoplayResult;

                    if (swiper.params.autoplay.reverseDirection) {
                        if (swiper.params.loop) {
                            swiper.loopFix();
                            autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
                            emit('autoplay');
                        } else if (!swiper.isBeginning) {
                            autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
                            emit('autoplay');
                        } else if (!swiper.params.autoplay.stopOnLastSlide) {
                            autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
                            emit('autoplay');
                        } else {
                            stop();
                        }
                    } else if (swiper.params.loop) {
                        swiper.loopFix();
                        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
                        emit('autoplay');
                    } else if (!swiper.isEnd) {
                        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
                        emit('autoplay');
                    } else if (!swiper.params.autoplay.stopOnLastSlide) {
                        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);
                        emit('autoplay');
                    } else {
                        stop();
                    }

                    if (swiper.params.cssMode && swiper.autoplay.running) run();else if (autoplayResult === false) {
                        run();
                    }
                }, delay);
            }

            function start() {
                if (typeof timeout !== 'undefined') return false;
                if (swiper.autoplay.running) return false;
                swiper.autoplay.running = true;
                emit('autoplayStart');
                run();
                return true;
            }

            function stop() {
                if (!swiper.autoplay.running) return false;
                if (typeof timeout === 'undefined') return false;

                if (timeout) {
                    clearTimeout(timeout);
                    timeout = undefined;
                }

                swiper.autoplay.running = false;
                emit('autoplayStop');
                return true;
            }

            function pause(speed) {
                if (!swiper.autoplay.running) return;
                if (swiper.autoplay.paused) return;
                if (timeout) clearTimeout(timeout);
                swiper.autoplay.paused = true;

                if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
                    swiper.autoplay.paused = false;
                    run();
                } else {
                    ['transitionend', 'webkitTransitionEnd'].forEach(event => {
                        swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);
                    });
                }
            }

            function onVisibilityChange() {
                const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();

                if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
                    pause();
                }

                if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
                    run();
                    swiper.autoplay.paused = false;
                }
            }

            function onTransitionEnd(e) {
                if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
                if (e.target !== swiper.$wrapperEl[0]) return;
                ['transitionend', 'webkitTransitionEnd'].forEach(event => {
                    swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);
                });
                swiper.autoplay.paused = false;

                if (!swiper.autoplay.running) {
                    stop();
                } else {
                    run();
                }
            }

            function onMouseEnter() {
                if (swiper.params.autoplay.disableOnInteraction) {
                    stop();
                } else {
                    emit('autoplayPause');
                    pause();
                }

                ['transitionend', 'webkitTransitionEnd'].forEach(event => {
                    swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);
                });
            }

            function onMouseLeave() {
                if (swiper.params.autoplay.disableOnInteraction) {
                    return;
                }

                swiper.autoplay.paused = false;
                emit('autoplayResume');
                run();
            }

            function attachMouseEvents() {
                if (swiper.params.autoplay.pauseOnMouseEnter) {
                    swiper.$el.on('mouseenter', onMouseEnter);
                    swiper.$el.on('mouseleave', onMouseLeave);
                }
            }

            function detachMouseEvents() {
                swiper.$el.off('mouseenter', onMouseEnter);
                swiper.$el.off('mouseleave', onMouseLeave);
            }

            on('init', () => {
                if (swiper.params.autoplay.enabled) {
                    start();
                    const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
                    document.addEventListener('visibilitychange', onVisibilityChange);
                    attachMouseEvents();
                }
            });
            on('beforeTransitionStart', (_s, speed, internal) => {
                if (swiper.autoplay.running) {
                    if (internal || !swiper.params.autoplay.disableOnInteraction) {
                        swiper.autoplay.pause(speed);
                    } else {
                        stop();
                    }
                }
            });
            on('sliderFirstMove', () => {
                if (swiper.autoplay.running) {
                    if (swiper.params.autoplay.disableOnInteraction) {
                        stop();
                    } else {
                        pause();
                    }
                }
            });
            on('touchEnd', () => {
                if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
                    run();
                }
            });
            on('destroy', () => {
                detachMouseEvents();

                if (swiper.autoplay.running) {
                    stop();
                }

                const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
                document.removeEventListener('visibilitychange', onVisibilityChange);
            });
            Object.assign(swiper.autoplay, {
                pause,
                run,
                start,
                stop
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/controller/controller.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/modules/controller/controller.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Controller)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* eslint no-bitwise: ["error", { "allow": [">>"] }] */

        function Controller({
                                swiper,
                                extendParams,
                                on
                            }) {
            extendParams({
                controller: {
                    control: undefined,
                    inverse: false,
                    by: 'slide' // or 'container'

                }
            });
            swiper.controller = {
                control: undefined
            };

            function LinearSpline(x, y) {
                const binarySearch = function search() {
                    let maxIndex;
                    let minIndex;
                    let guess;
                    return (array, val) => {
                        minIndex = -1;
                        maxIndex = array.length;

                        while (maxIndex - minIndex > 1) {
                            guess = maxIndex + minIndex >> 1;

                            if (array[guess] <= val) {
                                minIndex = guess;
                            } else {
                                maxIndex = guess;
                            }
                        }

                        return maxIndex;
                    };
                }();

                this.x = x;
                this.y = y;
                this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
                // (x1,y1) is the known point before given value,
                // (x3,y3) is the known point after given value.

                let i1;
                let i3;

                this.interpolate = function interpolate(x2) {
                    if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):

                    i3 = binarySearch(this.x, x2);
                    i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
                    // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

                    return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
                };

                return this;
            } // xxx: for now i will just save one spline function to to


            function getInterpolateFunction(c) {
                if (!swiper.controller.spline) {
                    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);
                }
            }

            function setTranslate(_t, byController) {
                const controlled = swiper.controller.control;
                let multiplier;
                let controlledTranslate;
                const Swiper = swiper.constructor;

                function setControlledTranslate(c) {
                    // this will create an Interpolate function based on the snapGrids
                    // x is the Grid of the scrolled scroller and y will be the controlled scroller
                    // it makes sense to create this only once and recall it for the interpolation
                    // the function does a lot of value caching for performance
                    const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

                    if (swiper.params.controller.by === 'slide') {
                        getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
                        // but it did not work out

                        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
                    }

                    if (!controlledTranslate || swiper.params.controller.by === 'container') {
                        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
                        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
                    }

                    if (swiper.params.controller.inverse) {
                        controlledTranslate = c.maxTranslate() - controlledTranslate;
                    }

                    c.updateProgress(controlledTranslate);
                    c.setTranslate(controlledTranslate, swiper);
                    c.updateActiveIndex();
                    c.updateSlidesClasses();
                }

                if (Array.isArray(controlled)) {
                    for (let i = 0; i < controlled.length; i += 1) {
                        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                            setControlledTranslate(controlled[i]);
                        }
                    }
                } else if (controlled instanceof Swiper && byController !== controlled) {
                    setControlledTranslate(controlled);
                }
            }

            function setTransition(duration, byController) {
                const Swiper = swiper.constructor;
                const controlled = swiper.controller.control;
                let i;

                function setControlledTransition(c) {
                    c.setTransition(duration, swiper);

                    if (duration !== 0) {
                        c.transitionStart();

                        if (c.params.autoHeight) {
                            (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
                                c.updateAutoHeight();
                            });
                        }

                        c.$wrapperEl.transitionEnd(() => {
                            if (!controlled) return;

                            if (c.params.loop && swiper.params.controller.by === 'slide') {
                                c.loopFix();
                            }

                            c.transitionEnd();
                        });
                    }
                }

                if (Array.isArray(controlled)) {
                    for (i = 0; i < controlled.length; i += 1) {
                        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
                            setControlledTransition(controlled[i]);
                        }
                    }
                } else if (controlled instanceof Swiper && byController !== controlled) {
                    setControlledTransition(controlled);
                }
            }

            function removeSpline() {
                if (!swiper.controller.control) return;

                if (swiper.controller.spline) {
                    swiper.controller.spline = undefined;
                    delete swiper.controller.spline;
                }
            }

            on('beforeInit', () => {
                swiper.controller.control = swiper.params.controller.control;
            });
            on('update', () => {
                removeSpline();
            });
            on('resize', () => {
                removeSpline();
            });
            on('observerUpdate', () => {
                removeSpline();
            });
            on('setTranslate', (_s, translate, byController) => {
                if (!swiper.controller.control) return;
                swiper.controller.setTranslate(translate, byController);
            });
            on('setTransition', (_s, duration, byController) => {
                if (!swiper.controller.control) return;
                swiper.controller.setTransition(duration, byController);
            });
            Object.assign(swiper.controller, {
                setTranslate,
                setTransition
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-cards/effect-cards.js":
    /*!******************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards/effect-cards.js ***!
  \******************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectCards)
            /* harmony export */ });
        /* harmony import */ var _shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/create-shadow.js */ "./node_modules/swiper/shared/create-shadow.js");
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");
        /* harmony import */ var _shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/effect-target.js */ "./node_modules/swiper/shared/effect-target.js");
        /* harmony import */ var _shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/effect-virtual-transition-end.js */ "./node_modules/swiper/shared/effect-virtual-transition-end.js");




        function EffectCards({
                                 swiper,
                                 extendParams,
                                 on
                             }) {
            extendParams({
                cardsEffect: {
                    slideShadows: true,
                    transformEl: null,
                    rotate: true,
                    perSlideRotate: 2,
                    perSlideOffset: 8
                }
            });

            const setTranslate = () => {
                const {
                    slides,
                    activeIndex
                } = swiper;
                const params = swiper.params.cardsEffect;
                const {
                    startTranslate,
                    isTouched
                } = swiper.touchEventsData;
                const currentTranslate = swiper.translate;

                for (let i = 0; i < slides.length; i += 1) {
                    const $slideEl = slides.eq(i);
                    const slideProgress = $slideEl[0].progress;
                    const progress = Math.min(Math.max(slideProgress, -4), 4);
                    let offset = $slideEl[0].swiperSlideOffset;

                    if (swiper.params.centeredSlides && !swiper.params.cssMode) {
                        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);
                    }

                    if (swiper.params.centeredSlides && swiper.params.cssMode) {
                        offset -= slides[0].swiperSlideOffset;
                    }

                    let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;
                    let tY = 0;
                    const tZ = -100 * Math.abs(progress);
                    let scale = 1;
                    let rotate = -params.perSlideRotate * progress;
                    let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;
                    const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;
                    const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;
                    const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;

                    if (isSwipeToNext || isSwipeToPrev) {
                        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;
                        rotate += -28 * progress * subProgress;
                        scale += -0.5 * subProgress;
                        tXAdd += 96 * subProgress;
                        tY = `${-25 * subProgress * Math.abs(progress)}%`;
                    }

                    if (progress < 0) {
                        // next
                        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;
                    } else if (progress > 0) {
                        // prev
                        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;
                    } else {
                        tX = `${tX}px`;
                    }

                    if (!swiper.isHorizontal()) {
                        const prevY = tY;
                        tY = tX;
                        tX = prevY;
                    }

                    const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;
                    const transform = `
        translate3d(${tX}, ${tY}, ${tZ}px)
        rotateZ(${params.rotate ? rotate : 0}deg)
        scale(${scaleString})
      `;

                    if (params.slideShadows) {
                        // Set shadows
                        let $shadowEl = $slideEl.find('.swiper-slide-shadow');

                        if ($shadowEl.length === 0) {
                            $shadowEl = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, $slideEl);
                        }

                        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);
                    }

                    $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
                    const $targetEl = (0,_shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__["default"])(params, $slideEl);
                    $targetEl.transform(transform);
                }
            };

            const setTransition = duration => {
                const {
                    transformEl
                } = swiper.params.cardsEffect;
                const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;
                $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);
                (0,_shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
                    swiper,
                    duration,
                    transformEl
                });
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
                effect: 'cards',
                swiper,
                on,
                setTranslate,
                setTransition,
                perspective: () => true,
                overwriteParams: () => ({
                    watchSlidesProgress: true,
                    virtualTranslate: !swiper.params.cssMode
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-coverflow/effect-coverflow.js":
    /*!**************************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow/effect-coverflow.js ***!
  \**************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectCoverflow)
            /* harmony export */ });
        /* harmony import */ var _shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/create-shadow.js */ "./node_modules/swiper/shared/create-shadow.js");
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");
        /* harmony import */ var _shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/effect-target.js */ "./node_modules/swiper/shared/effect-target.js");



        function EffectCoverflow({
                                     swiper,
                                     extendParams,
                                     on
                                 }) {
            extendParams({
                coverflowEffect: {
                    rotate: 50,
                    stretch: 0,
                    depth: 100,
                    scale: 1,
                    modifier: 1,
                    slideShadows: true,
                    transformEl: null
                }
            });

            const setTranslate = () => {
                const {
                    width: swiperWidth,
                    height: swiperHeight,
                    slides,
                    slidesSizesGrid
                } = swiper;
                const params = swiper.params.coverflowEffect;
                const isHorizontal = swiper.isHorizontal();
                const transform = swiper.translate;
                const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
                const rotate = isHorizontal ? params.rotate : -params.rotate;
                const translate = params.depth; // Each slide offset from center

                for (let i = 0, length = slides.length; i < length; i += 1) {
                    const $slideEl = slides.eq(i);
                    const slideSize = slidesSizesGrid[i];
                    const slideOffset = $slideEl[0].swiperSlideOffset;
                    const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;
                    const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;
                    let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
                    let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0

                    let translateZ = -translate * Math.abs(offsetMultiplier);
                    let stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders

                    if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
                        stretch = parseFloat(params.stretch) / 100 * slideSize;
                    }

                    let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
                    let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
                    let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values

                    if (Math.abs(translateX) < 0.001) translateX = 0;
                    if (Math.abs(translateY) < 0.001) translateY = 0;
                    if (Math.abs(translateZ) < 0.001) translateZ = 0;
                    if (Math.abs(rotateY) < 0.001) rotateY = 0;
                    if (Math.abs(rotateX) < 0.001) rotateX = 0;
                    if (Math.abs(scale) < 0.001) scale = 0;
                    const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;
                    const $targetEl = (0,_shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__["default"])(params, $slideEl);
                    $targetEl.transform(slideTransform);
                    $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;

                    if (params.slideShadows) {
                        // Set shadows
                        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                        if ($shadowBeforeEl.length === 0) {
                            $shadowBeforeEl = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, $slideEl, isHorizontal ? 'left' : 'top');
                        }

                        if ($shadowAfterEl.length === 0) {
                            $shadowAfterEl = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, $slideEl, isHorizontal ? 'right' : 'bottom');
                        }

                        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
                        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
                    }
                }
            };

            const setTransition = duration => {
                const {
                    transformEl
                } = swiper.params.coverflowEffect;
                const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;
                $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
                effect: 'coverflow',
                swiper,
                on,
                setTranslate,
                setTransition,
                perspective: () => true,
                overwriteParams: () => ({
                    watchSlidesProgress: true
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-creative/effect-creative.js":
    /*!************************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative/effect-creative.js ***!
  \************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectCreative)
            /* harmony export */ });
        /* harmony import */ var _shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/create-shadow.js */ "./node_modules/swiper/shared/create-shadow.js");
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");
        /* harmony import */ var _shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/effect-target.js */ "./node_modules/swiper/shared/effect-target.js");
        /* harmony import */ var _shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/effect-virtual-transition-end.js */ "./node_modules/swiper/shared/effect-virtual-transition-end.js");




        function EffectCreative({
                                    swiper,
                                    extendParams,
                                    on
                                }) {
            extendParams({
                creativeEffect: {
                    transformEl: null,
                    limitProgress: 1,
                    shadowPerProgress: false,
                    progressMultiplier: 1,
                    perspective: true,
                    prev: {
                        translate: [0, 0, 0],
                        rotate: [0, 0, 0],
                        opacity: 1,
                        scale: 1
                    },
                    next: {
                        translate: [0, 0, 0],
                        rotate: [0, 0, 0],
                        opacity: 1,
                        scale: 1
                    }
                }
            });

            const getTranslateValue = value => {
                if (typeof value === 'string') return value;
                return `${value}px`;
            };

            const setTranslate = () => {
                const {
                    slides,
                    $wrapperEl,
                    slidesSizesGrid
                } = swiper;
                const params = swiper.params.creativeEffect;
                const {
                    progressMultiplier: multiplier
                } = params;
                const isCenteredSlides = swiper.params.centeredSlides;

                if (isCenteredSlides) {
                    const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;
                    $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);
                }

                for (let i = 0; i < slides.length; i += 1) {
                    const $slideEl = slides.eq(i);
                    const slideProgress = $slideEl[0].progress;
                    const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);
                    let originalProgress = progress;

                    if (!isCenteredSlides) {
                        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);
                    }

                    const offset = $slideEl[0].swiperSlideOffset;
                    const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];
                    const r = [0, 0, 0];
                    let custom = false;

                    if (!swiper.isHorizontal()) {
                        t[1] = t[0];
                        t[0] = 0;
                    }

                    let data = {
                        translate: [0, 0, 0],
                        rotate: [0, 0, 0],
                        scale: 1,
                        opacity: 1
                    };

                    if (progress < 0) {
                        data = params.next;
                        custom = true;
                    } else if (progress > 0) {
                        data = params.prev;
                        custom = true;
                    } // set translate


                    t.forEach((value, index) => {
                        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;
                    }); // set rotates

                    r.forEach((value, index) => {
                        r[index] = data.rotate[index] * Math.abs(progress * multiplier);
                    });
                    $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
                    const translateString = t.join(', ');
                    const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;
                    const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;
                    const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;
                    const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`; // Set shadows

                    if (custom && data.shadow || !custom) {
                        let $shadowEl = $slideEl.children('.swiper-slide-shadow');

                        if ($shadowEl.length === 0 && data.shadow) {
                            $shadowEl = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, $slideEl);
                        }

                        if ($shadowEl.length) {
                            const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;
                            $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);
                        }
                    }

                    const $targetEl = (0,_shared_effect_target_js__WEBPACK_IMPORTED_MODULE_2__["default"])(params, $slideEl);
                    $targetEl.transform(transform).css({
                        opacity: opacityString
                    });

                    if (data.origin) {
                        $targetEl.css('transform-origin', data.origin);
                    }
                }
            };

            const setTransition = duration => {
                const {
                    transformEl
                } = swiper.params.creativeEffect;
                const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;
                $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);
                (0,_shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
                    swiper,
                    duration,
                    transformEl,
                    allSlides: true
                });
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
                effect: 'creative',
                swiper,
                on,
                setTranslate,
                setTransition,
                perspective: () => swiper.params.creativeEffect.perspective,
                overwriteParams: () => ({
                    watchSlidesProgress: true,
                    virtualTranslate: !swiper.params.cssMode
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-cube/effect-cube.js":
    /*!****************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube/effect-cube.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectCube)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");


        function EffectCube({
                                swiper,
                                extendParams,
                                on
                            }) {
            extendParams({
                cubeEffect: {
                    slideShadows: true,
                    shadow: true,
                    shadowOffset: 20,
                    shadowScale: 0.94
                }
            });

            const createSlideShadows = ($slideEl, progress, isHorizontal) => {
                let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                if (shadowBefore.length === 0) {
                    shadowBefore = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}"></div>`);
                    $slideEl.append(shadowBefore);
                }

                if (shadowAfter.length === 0) {
                    shadowAfter = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}"></div>`);
                    $slideEl.append(shadowAfter);
                }

                if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
                if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
            };

            const recreateShadows = () => {
                // create new ones
                const isHorizontal = swiper.isHorizontal();
                swiper.slides.each(slideEl => {
                    const progress = Math.max(Math.min(slideEl.progress, 1), -1);
                    createSlideShadows((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl), progress, isHorizontal);
                });
            };

            const setTranslate = () => {
                const {
                    $el,
                    $wrapperEl,
                    slides,
                    width: swiperWidth,
                    height: swiperHeight,
                    rtlTranslate: rtl,
                    size: swiperSize,
                    browser
                } = swiper;
                const params = swiper.params.cubeEffect;
                const isHorizontal = swiper.isHorizontal();
                const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
                let wrapperRotate = 0;
                let $cubeShadowEl;

                if (params.shadow) {
                    if (isHorizontal) {
                        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');

                        if ($cubeShadowEl.length === 0) {
                            $cubeShadowEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="swiper-cube-shadow"></div>');
                            $wrapperEl.append($cubeShadowEl);
                        }

                        $cubeShadowEl.css({
                            height: `${swiperWidth}px`
                        });
                    } else {
                        $cubeShadowEl = $el.find('.swiper-cube-shadow');

                        if ($cubeShadowEl.length === 0) {
                            $cubeShadowEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])('<div class="swiper-cube-shadow"></div>');
                            $el.append($cubeShadowEl);
                        }
                    }
                }

                for (let i = 0; i < slides.length; i += 1) {
                    const $slideEl = slides.eq(i);
                    let slideIndex = i;

                    if (isVirtual) {
                        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
                    }

                    let slideAngle = slideIndex * 90;
                    let round = Math.floor(slideAngle / 360);

                    if (rtl) {
                        slideAngle = -slideAngle;
                        round = Math.floor(-slideAngle / 360);
                    }

                    const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                    let tx = 0;
                    let ty = 0;
                    let tz = 0;

                    if (slideIndex % 4 === 0) {
                        tx = -round * 4 * swiperSize;
                        tz = 0;
                    } else if ((slideIndex - 1) % 4 === 0) {
                        tx = 0;
                        tz = -round * 4 * swiperSize;
                    } else if ((slideIndex - 2) % 4 === 0) {
                        tx = swiperSize + round * 4 * swiperSize;
                        tz = swiperSize;
                    } else if ((slideIndex - 3) % 4 === 0) {
                        tx = -swiperSize;
                        tz = 3 * swiperSize + swiperSize * 4 * round;
                    }

                    if (rtl) {
                        tx = -tx;
                    }

                    if (!isHorizontal) {
                        ty = tx;
                        tx = 0;
                    }

                    const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;

                    if (progress <= 1 && progress > -1) {
                        wrapperRotate = slideIndex * 90 + progress * 90;
                        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
                    }

                    $slideEl.transform(transform);

                    if (params.slideShadows) {
                        createSlideShadows($slideEl, progress, isHorizontal);
                    }
                }

                $wrapperEl.css({
                    '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,
                    'transform-origin': `50% 50% -${swiperSize / 2}px`
                });

                if (params.shadow) {
                    if (isHorizontal) {
                        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);
                    } else {
                        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
                        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
                        const scale1 = params.shadowScale;
                        const scale2 = params.shadowScale / multiplier;
                        const offset = params.shadowOffset;
                        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);
                    }
                }

                const zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;
                $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);
                $wrapperEl[0].style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);
            };

            const setTransition = duration => {
                const {
                    $el,
                    slides
                } = swiper;
                slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

                if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
                    $el.find('.swiper-cube-shadow').transition(duration);
                }
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
                effect: 'cube',
                swiper,
                on,
                setTranslate,
                setTransition,
                recreateShadows,
                getEffectParams: () => swiper.params.cubeEffect,
                perspective: () => true,
                overwriteParams: () => ({
                    slidesPerView: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    resistanceRatio: 0,
                    spaceBetween: 0,
                    centeredSlides: false,
                    virtualTranslate: true
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-fade/effect-fade.js":
    /*!****************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade/effect-fade.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectFade)
            /* harmony export */ });
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");
        /* harmony import */ var _shared_effect_target_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/effect-target.js */ "./node_modules/swiper/shared/effect-target.js");
        /* harmony import */ var _shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/effect-virtual-transition-end.js */ "./node_modules/swiper/shared/effect-virtual-transition-end.js");



        function EffectFade({
                                swiper,
                                extendParams,
                                on
                            }) {
            extendParams({
                fadeEffect: {
                    crossFade: false,
                    transformEl: null
                }
            });

            const setTranslate = () => {
                const {
                    slides
                } = swiper;
                const params = swiper.params.fadeEffect;

                for (let i = 0; i < slides.length; i += 1) {
                    const $slideEl = swiper.slides.eq(i);
                    const offset = $slideEl[0].swiperSlideOffset;
                    let tx = -offset;
                    if (!swiper.params.virtualTranslate) tx -= swiper.translate;
                    let ty = 0;

                    if (!swiper.isHorizontal()) {
                        ty = tx;
                        tx = 0;
                    }

                    const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
                    const $targetEl = (0,_shared_effect_target_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params, $slideEl);
                    $targetEl.css({
                        opacity: slideOpacity
                    }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);
                }
            };

            const setTransition = duration => {
                const {
                    transformEl
                } = swiper.params.fadeEffect;
                const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;
                $transitionElements.transition(duration);
                (0,_shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_2__["default"])({
                    swiper,
                    duration,
                    transformEl,
                    allSlides: true
                });
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
                effect: 'fade',
                swiper,
                on,
                setTranslate,
                setTransition,
                overwriteParams: () => ({
                    slidesPerView: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: !swiper.params.cssMode
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/effect-flip/effect-flip.js":
    /*!****************************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip/effect-flip.js ***!
  \****************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ EffectFlip)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/create-shadow.js */ "./node_modules/swiper/shared/create-shadow.js");
        /* harmony import */ var _shared_effect_init_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/effect-init.js */ "./node_modules/swiper/shared/effect-init.js");
        /* harmony import */ var _shared_effect_target_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/effect-target.js */ "./node_modules/swiper/shared/effect-target.js");
        /* harmony import */ var _shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/effect-virtual-transition-end.js */ "./node_modules/swiper/shared/effect-virtual-transition-end.js");





        function EffectFlip({
                                swiper,
                                extendParams,
                                on
                            }) {
            extendParams({
                flipEffect: {
                    slideShadows: true,
                    limitRotation: true,
                    transformEl: null
                }
            });

            const createSlideShadows = ($slideEl, progress, params) => {
                let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
                let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

                if (shadowBefore.length === 0) {
                    shadowBefore = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params, $slideEl, swiper.isHorizontal() ? 'left' : 'top');
                }

                if (shadowAfter.length === 0) {
                    shadowAfter = (0,_shared_create_shadow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params, $slideEl, swiper.isHorizontal() ? 'right' : 'bottom');
                }

                if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
                if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
            };

            const recreateShadows = () => {
                // Set shadows
                const params = swiper.params.flipEffect;
                swiper.slides.each(slideEl => {
                    const $slideEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl);
                    let progress = $slideEl[0].progress;

                    if (swiper.params.flipEffect.limitRotation) {
                        progress = Math.max(Math.min(slideEl.progress, 1), -1);
                    }

                    createSlideShadows($slideEl, progress, params);
                });
            };

            const setTranslate = () => {
                const {
                    slides,
                    rtlTranslate: rtl
                } = swiper;
                const params = swiper.params.flipEffect;

                for (let i = 0; i < slides.length; i += 1) {
                    const $slideEl = slides.eq(i);
                    let progress = $slideEl[0].progress;

                    if (swiper.params.flipEffect.limitRotation) {
                        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
                    }

                    const offset = $slideEl[0].swiperSlideOffset;
                    const rotate = -180 * progress;
                    let rotateY = rotate;
                    let rotateX = 0;
                    let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;
                    let ty = 0;

                    if (!swiper.isHorizontal()) {
                        ty = tx;
                        tx = 0;
                        rotateX = -rotateY;
                        rotateY = 0;
                    } else if (rtl) {
                        rotateY = -rotateY;
                    }

                    $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

                    if (params.slideShadows) {
                        createSlideShadows($slideEl, progress, params);
                    }

                    const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
                    const $targetEl = (0,_shared_effect_target_js__WEBPACK_IMPORTED_MODULE_3__["default"])(params, $slideEl);
                    $targetEl.transform(transform);
                }
            };

            const setTransition = duration => {
                const {
                    transformEl
                } = swiper.params.flipEffect;
                const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;
                $transitionElements.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
                (0,_shared_effect_virtual_transition_end_js__WEBPACK_IMPORTED_MODULE_4__["default"])({
                    swiper,
                    duration,
                    transformEl
                });
            };

            (0,_shared_effect_init_js__WEBPACK_IMPORTED_MODULE_2__["default"])({
                effect: 'flip',
                swiper,
                on,
                setTranslate,
                setTransition,
                recreateShadows,
                getEffectParams: () => swiper.params.flipEffect,
                perspective: () => true,
                overwriteParams: () => ({
                    slidesPerView: 1,
                    slidesPerGroup: 1,
                    watchSlidesProgress: true,
                    spaceBetween: 0,
                    virtualTranslate: !swiper.params.cssMode
                })
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/free-mode/free-mode.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode/free-mode.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ freeMode)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");

        function freeMode({
                              swiper,
                              extendParams,
                              emit,
                              once
                          }) {
            extendParams({
                freeMode: {
                    enabled: false,
                    momentum: true,
                    momentumRatio: 1,
                    momentumBounce: true,
                    momentumBounceRatio: 1,
                    momentumVelocityRatio: 1,
                    sticky: false,
                    minimumVelocity: 0.02
                }
            });

            function onTouchStart() {
                const translate = swiper.getTranslate();
                swiper.setTranslate(translate);
                swiper.setTransition(0);
                swiper.touchEventsData.velocities.length = 0;
                swiper.freeMode.onTouchEnd({
                    currentPos: swiper.rtl ? swiper.translate : -swiper.translate
                });
            }

            function onTouchMove() {
                const {
                    touchEventsData: data,
                    touches
                } = swiper; // Velocity

                if (data.velocities.length === 0) {
                    data.velocities.push({
                        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
                        time: data.touchStartTime
                    });
                }

                data.velocities.push({
                    position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
                    time: (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.now)()
                });
            }

            function onTouchEnd({
                                    currentPos
                                }) {
                const {
                    params,
                    $wrapperEl,
                    rtlTranslate: rtl,
                    snapGrid,
                    touchEventsData: data
                } = swiper; // Time diff

                const touchEndTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.now)();
                const timeDiff = touchEndTime - data.touchStartTime;

                if (currentPos < -swiper.minTranslate()) {
                    swiper.slideTo(swiper.activeIndex);
                    return;
                }

                if (currentPos > -swiper.maxTranslate()) {
                    if (swiper.slides.length < snapGrid.length) {
                        swiper.slideTo(snapGrid.length - 1);
                    } else {
                        swiper.slideTo(swiper.slides.length - 1);
                    }

                    return;
                }

                if (params.freeMode.momentum) {
                    if (data.velocities.length > 1) {
                        const lastMoveEvent = data.velocities.pop();
                        const velocityEvent = data.velocities.pop();
                        const distance = lastMoveEvent.position - velocityEvent.position;
                        const time = lastMoveEvent.time - velocityEvent.time;
                        swiper.velocity = distance / time;
                        swiper.velocity /= 2;

                        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {
                            swiper.velocity = 0;
                        } // this implies that the user stopped moving a finger then released.
                        // There would be no events with distance zero, so the last event is stale.


                        if (time > 150 || (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.now)() - lastMoveEvent.time > 300) {
                            swiper.velocity = 0;
                        }
                    } else {
                        swiper.velocity = 0;
                    }

                    swiper.velocity *= params.freeMode.momentumVelocityRatio;
                    data.velocities.length = 0;
                    let momentumDuration = 1000 * params.freeMode.momentumRatio;
                    const momentumDistance = swiper.velocity * momentumDuration;
                    let newPosition = swiper.translate + momentumDistance;
                    if (rtl) newPosition = -newPosition;
                    let doBounce = false;
                    let afterBouncePosition;
                    const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;
                    let needsLoopFix;

                    if (newPosition < swiper.maxTranslate()) {
                        if (params.freeMode.momentumBounce) {
                            if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                                newPosition = swiper.maxTranslate() - bounceAmount;
                            }

                            afterBouncePosition = swiper.maxTranslate();
                            doBounce = true;
                            data.allowMomentumBounce = true;
                        } else {
                            newPosition = swiper.maxTranslate();
                        }

                        if (params.loop && params.centeredSlides) needsLoopFix = true;
                    } else if (newPosition > swiper.minTranslate()) {
                        if (params.freeMode.momentumBounce) {
                            if (newPosition - swiper.minTranslate() > bounceAmount) {
                                newPosition = swiper.minTranslate() + bounceAmount;
                            }

                            afterBouncePosition = swiper.minTranslate();
                            doBounce = true;
                            data.allowMomentumBounce = true;
                        } else {
                            newPosition = swiper.minTranslate();
                        }

                        if (params.loop && params.centeredSlides) needsLoopFix = true;
                    } else if (params.freeMode.sticky) {
                        let nextSlide;

                        for (let j = 0; j < snapGrid.length; j += 1) {
                            if (snapGrid[j] > -newPosition) {
                                nextSlide = j;
                                break;
                            }
                        }

                        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
                            newPosition = snapGrid[nextSlide];
                        } else {
                            newPosition = snapGrid[nextSlide - 1];
                        }

                        newPosition = -newPosition;
                    }

                    if (needsLoopFix) {
                        once('transitionEnd', () => {
                            swiper.loopFix();
                        });
                    } // Fix duration


                    if (swiper.velocity !== 0) {
                        if (rtl) {
                            momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
                        } else {
                            momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
                        }

                        if (params.freeMode.sticky) {
                            // If freeMode.sticky is active and the user ends a swipe with a slow-velocity
                            // event, then durations can be 20+ seconds to slide one (or zero!) slides.
                            // It's easy to see this when simulating touch with mouse events. To fix this,
                            // limit single-slide swipes to the default slide duration. This also has the
                            // nice side effect of matching slide speed if the user stopped moving before
                            // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
                            // For faster swipes, also apply limits (albeit higher ones).
                            const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
                            const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

                            if (moveDistance < currentSlideSize) {
                                momentumDuration = params.speed;
                            } else if (moveDistance < 2 * currentSlideSize) {
                                momentumDuration = params.speed * 1.5;
                            } else {
                                momentumDuration = params.speed * 2.5;
                            }
                        }
                    } else if (params.freeMode.sticky) {
                        swiper.slideToClosest();
                        return;
                    }

                    if (params.freeMode.momentumBounce && doBounce) {
                        swiper.updateProgress(afterBouncePosition);
                        swiper.setTransition(momentumDuration);
                        swiper.setTranslate(newPosition);
                        swiper.transitionStart(true, swiper.swipeDirection);
                        swiper.animating = true;
                        $wrapperEl.transitionEnd(() => {
                            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
                            emit('momentumBounce');
                            swiper.setTransition(params.speed);
                            setTimeout(() => {
                                swiper.setTranslate(afterBouncePosition);
                                $wrapperEl.transitionEnd(() => {
                                    if (!swiper || swiper.destroyed) return;
                                    swiper.transitionEnd();
                                });
                            }, 0);
                        });
                    } else if (swiper.velocity) {
                        emit('_freeModeNoMomentumRelease');
                        swiper.updateProgress(newPosition);
                        swiper.setTransition(momentumDuration);
                        swiper.setTranslate(newPosition);
                        swiper.transitionStart(true, swiper.swipeDirection);

                        if (!swiper.animating) {
                            swiper.animating = true;
                            $wrapperEl.transitionEnd(() => {
                                if (!swiper || swiper.destroyed) return;
                                swiper.transitionEnd();
                            });
                        }
                    } else {
                        swiper.updateProgress(newPosition);
                    }

                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                } else if (params.freeMode.sticky) {
                    swiper.slideToClosest();
                    return;
                } else if (params.freeMode) {
                    emit('_freeModeNoMomentumRelease');
                }

                if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {
                    swiper.updateProgress();
                    swiper.updateActiveIndex();
                    swiper.updateSlidesClasses();
                }
            }

            Object.assign(swiper, {
                freeMode: {
                    onTouchStart,
                    onTouchMove,
                    onTouchEnd
                }
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/grid/grid.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/grid/grid.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Grid)
            /* harmony export */ });
        function Grid({
                          swiper,
                          extendParams
                      }) {
            extendParams({
                grid: {
                    rows: 1,
                    fill: 'column'
                }
            });
            let slidesNumberEvenToRows;
            let slidesPerRow;
            let numFullColumns;

            const initSlides = slidesLength => {
                const {
                    slidesPerView
                } = swiper.params;
                const {
                    rows,
                    fill
                } = swiper.params.grid;
                slidesPerRow = slidesNumberEvenToRows / rows;
                numFullColumns = Math.floor(slidesLength / rows);

                if (Math.floor(slidesLength / rows) === slidesLength / rows) {
                    slidesNumberEvenToRows = slidesLength;
                } else {
                    slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;
                }

                if (slidesPerView !== 'auto' && fill === 'row') {
                    slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);
                }
            };

            const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {
                const {
                    slidesPerGroup,
                    spaceBetween
                } = swiper.params;
                const {
                    rows,
                    fill
                } = swiper.params.grid; // Set slides order

                let newSlideOrderIndex;
                let column;
                let row;

                if (fill === 'row' && slidesPerGroup > 1) {
                    const groupIndex = Math.floor(i / (slidesPerGroup * rows));
                    const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;
                    const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);
                    row = Math.floor(slideIndexInGroup / columnsInGroup);
                    column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;
                    newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;
                    slide.css({
                        '-webkit-order': newSlideOrderIndex,
                        order: newSlideOrderIndex
                    });
                } else if (fill === 'column') {
                    column = Math.floor(i / rows);
                    row = i - column * rows;

                    if (column > numFullColumns || column === numFullColumns && row === rows - 1) {
                        row += 1;

                        if (row >= rows) {
                            row = 0;
                            column += 1;
                        }
                    }
                } else {
                    row = Math.floor(i / slidesPerRow);
                    column = i - row * slidesPerRow;
                }

                slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');
            };

            const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {
                const {
                    spaceBetween,
                    centeredSlides,
                    roundLengths
                } = swiper.params;
                const {
                    rows
                } = swiper.params.grid;
                swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;
                swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;
                swiper.$wrapperEl.css({
                    [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`
                });

                if (centeredSlides) {
                    snapGrid.splice(0, snapGrid.length);
                    const newSlidesGrid = [];

                    for (let i = 0; i < snapGrid.length; i += 1) {
                        let slidesGridItem = snapGrid[i];
                        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);
                        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
                    }

                    snapGrid.push(...newSlidesGrid);
                }
            };

            swiper.grid = {
                initSlides,
                updateSlide,
                updateWrapperSize
            };
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/hash-navigation/hash-navigation.js":
    /*!************************************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation/hash-navigation.js ***!
  \************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ HashNavigation)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function HashNavigation({
                                    swiper,
                                    extendParams,
                                    emit,
                                    on
                                }) {
            let initialized = false;
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            extendParams({
                hashNavigation: {
                    enabled: false,
                    replaceState: false,
                    watchState: false
                }
            });

            const onHashChange = () => {
                emit('hashChange');
                const newHash = document.location.hash.replace('#', '');
                const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');

                if (newHash !== activeSlideHash) {
                    const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash="${newHash}"]`).index();
                    if (typeof newIndex === 'undefined') return;
                    swiper.slideTo(newIndex);
                }
            };

            const setHash = () => {
                if (!initialized || !swiper.params.hashNavigation.enabled) return;

                if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {
                    window.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || '');
                    emit('hashSet');
                } else {
                    const slide = swiper.slides.eq(swiper.activeIndex);
                    const hash = slide.attr('data-hash') || slide.attr('data-history');
                    document.location.hash = hash || '';
                    emit('hashSet');
                }
            };

            const init = () => {
                if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
                initialized = true;
                const hash = document.location.hash.replace('#', '');

                if (hash) {
                    const speed = 0;

                    for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
                        const slide = swiper.slides.eq(i);
                        const slideHash = slide.attr('data-hash') || slide.attr('data-history');

                        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                            const index = slide.index();
                            swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
                        }
                    }
                }

                if (swiper.params.hashNavigation.watchState) {
                    (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(window).on('hashchange', onHashChange);
                }
            };

            const destroy = () => {
                if (swiper.params.hashNavigation.watchState) {
                    (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(window).off('hashchange', onHashChange);
                }
            };

            on('init', () => {
                if (swiper.params.hashNavigation.enabled) {
                    init();
                }
            });
            on('destroy', () => {
                if (swiper.params.hashNavigation.enabled) {
                    destroy();
                }
            });
            on('transitionEnd _freeModeNoMomentumRelease', () => {
                if (initialized) {
                    setHash();
                }
            });
            on('slideChange', () => {
                if (initialized && swiper.params.cssMode) {
                    setHash();
                }
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/history/history.js":
    /*!********************************************************!*\
  !*** ./node_modules/swiper/modules/history/history.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ History)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        function History({
                             swiper,
                             extendParams,
                             on
                         }) {
            extendParams({
                history: {
                    enabled: false,
                    root: '',
                    replaceState: false,
                    key: 'slides',
                    keepQuery: false
                }
            });
            let initialized = false;
            let paths = {};

            const slugify = text => {
                return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
            };

            const getPathValues = urlOverride => {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
                let location;

                if (urlOverride) {
                    location = new URL(urlOverride);
                } else {
                    location = window.location;
                }

                const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');
                const total = pathArray.length;
                const key = pathArray[total - 2];
                const value = pathArray[total - 1];
                return {
                    key,
                    value
                };
            };

            const setHistory = (key, index) => {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
                if (!initialized || !swiper.params.history.enabled) return;
                let location;

                if (swiper.params.url) {
                    location = new URL(swiper.params.url);
                } else {
                    location = window.location;
                }

                const slide = swiper.slides.eq(index);
                let value = slugify(slide.attr('data-history'));

                if (swiper.params.history.root.length > 0) {
                    let root = swiper.params.history.root;
                    if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);
                    value = `${root}/${key}/${value}`;
                } else if (!location.pathname.includes(key)) {
                    value = `${key}/${value}`;
                }

                if (swiper.params.history.keepQuery) {
                    value += location.search;
                }

                const currentState = window.history.state;

                if (currentState && currentState.value === value) {
                    return;
                }

                if (swiper.params.history.replaceState) {
                    window.history.replaceState({
                        value
                    }, null, value);
                } else {
                    window.history.pushState({
                        value
                    }, null, value);
                }
            };

            const scrollToSlide = (speed, value, runCallbacks) => {
                if (value) {
                    for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
                        const slide = swiper.slides.eq(i);
                        const slideHistory = slugify(slide.attr('data-history'));

                        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
                            const index = slide.index();
                            swiper.slideTo(index, speed, runCallbacks);
                        }
                    }
                } else {
                    swiper.slideTo(0, speed, runCallbacks);
                }
            };

            const setHistoryPopState = () => {
                paths = getPathValues(swiper.params.url);
                scrollToSlide(swiper.params.speed, paths.value, false);
            };

            const init = () => {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
                if (!swiper.params.history) return;

                if (!window.history || !window.history.pushState) {
                    swiper.params.history.enabled = false;
                    swiper.params.hashNavigation.enabled = true;
                    return;
                }

                initialized = true;
                paths = getPathValues(swiper.params.url);
                if (!paths.key && !paths.value) return;
                scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);

                if (!swiper.params.history.replaceState) {
                    window.addEventListener('popstate', setHistoryPopState);
                }
            };

            const destroy = () => {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

                if (!swiper.params.history.replaceState) {
                    window.removeEventListener('popstate', setHistoryPopState);
                }
            };

            on('init', () => {
                if (swiper.params.history.enabled) {
                    init();
                }
            });
            on('destroy', () => {
                if (swiper.params.history.enabled) {
                    destroy();
                }
            });
            on('transitionEnd _freeModeNoMomentumRelease', () => {
                if (initialized) {
                    setHistory(swiper.params.history.key, swiper.activeIndex);
                }
            });
            on('slideChange', () => {
                if (initialized && swiper.params.cssMode) {
                    setHistory(swiper.params.history.key, swiper.activeIndex);
                }
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/keyboard/keyboard.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard/keyboard.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Keyboard)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* eslint-disable consistent-return */


        function Keyboard({
                              swiper,
                              extendParams,
                              on,
                              emit
                          }) {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            swiper.keyboard = {
                enabled: false
            };
            extendParams({
                keyboard: {
                    enabled: false,
                    onlyInViewport: true,
                    pageUpDown: true
                }
            });

            function handle(event) {
                if (!swiper.enabled) return;
                const {
                    rtlTranslate: rtl
                } = swiper;
                let e = event;
                if (e.originalEvent) e = e.originalEvent; // jquery fix

                const kc = e.keyCode || e.charCode;
                const pageUpDown = swiper.params.keyboard.pageUpDown;
                const isPageUp = pageUpDown && kc === 33;
                const isPageDown = pageUpDown && kc === 34;
                const isArrowLeft = kc === 37;
                const isArrowRight = kc === 39;
                const isArrowUp = kc === 38;
                const isArrowDown = kc === 40; // Directions locks

                if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
                    return false;
                }

                if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
                    return false;
                }

                if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
                    return undefined;
                }

                if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
                    return undefined;
                }

                if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
                    let inView = false; // Check that swiper should be inside of visible area of window

                    if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {
                        return undefined;
                    }

                    const $el = swiper.$el;
                    const swiperWidth = $el[0].clientWidth;
                    const swiperHeight = $el[0].clientHeight;
                    const windowWidth = window.innerWidth;
                    const windowHeight = window.innerHeight;
                    const swiperOffset = swiper.$el.offset();
                    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
                    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];

                    for (let i = 0; i < swiperCoord.length; i += 1) {
                        const point = swiperCoord[i];

                        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
                            if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

                            inView = true;
                        }
                    }

                    if (!inView) return undefined;
                }

                if (swiper.isHorizontal()) {
                    if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
                        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
                    }

                    if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();
                    if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();
                } else {
                    if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
                        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
                    }

                    if (isPageDown || isArrowDown) swiper.slideNext();
                    if (isPageUp || isArrowUp) swiper.slidePrev();
                }

                emit('keyPress', kc);
                return undefined;
            }

            function enable() {
                if (swiper.keyboard.enabled) return;
                (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(document).on('keydown', handle);
                swiper.keyboard.enabled = true;
            }

            function disable() {
                if (!swiper.keyboard.enabled) return;
                (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(document).off('keydown', handle);
                swiper.keyboard.enabled = false;
            }

            on('init', () => {
                if (swiper.params.keyboard.enabled) {
                    enable();
                }
            });
            on('destroy', () => {
                if (swiper.keyboard.enabled) {
                    disable();
                }
            });
            Object.assign(swiper.keyboard, {
                enable,
                disable
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/lazy/lazy.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/lazy/lazy.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Lazy)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function Lazy({
                          swiper,
                          extendParams,
                          on,
                          emit
                      }) {
            extendParams({
                lazy: {
                    checkInView: false,
                    enabled: false,
                    loadPrevNext: false,
                    loadPrevNextAmount: 1,
                    loadOnTransitionStart: false,
                    scrollingElement: '',
                    elementClass: 'swiper-lazy',
                    loadingClass: 'swiper-lazy-loading',
                    loadedClass: 'swiper-lazy-loaded',
                    preloaderClass: 'swiper-lazy-preloader'
                }
            });
            swiper.lazy = {};
            let scrollHandlerAttached = false;
            let initialImageLoaded = false;

            function loadInSlide(index, loadInDuplicate = true) {
                const params = swiper.params.lazy;
                if (typeof index === 'undefined') return;
                if (swiper.slides.length === 0) return;
                const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
                const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index="${index}"]`) : swiper.slides.eq(index);
                const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);

                if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
                    $images.push($slideEl[0]);
                }

                if ($images.length === 0) return;
                $images.each(imageEl => {
                    const $imageEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(imageEl);
                    $imageEl.addClass(params.loadingClass);
                    const background = $imageEl.attr('data-background');
                    const src = $imageEl.attr('data-src');
                    const srcset = $imageEl.attr('data-srcset');
                    const sizes = $imageEl.attr('data-sizes');
                    const $pictureEl = $imageEl.parent('picture');
                    swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {
                        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;

                        if (background) {
                            $imageEl.css('background-image', `url("${background}")`);
                            $imageEl.removeAttr('data-background');
                        } else {
                            if (srcset) {
                                $imageEl.attr('srcset', srcset);
                                $imageEl.removeAttr('data-srcset');
                            }

                            if (sizes) {
                                $imageEl.attr('sizes', sizes);
                                $imageEl.removeAttr('data-sizes');
                            }

                            if ($pictureEl.length) {
                                $pictureEl.children('source').each(sourceEl => {
                                    const $source = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(sourceEl);

                                    if ($source.attr('data-srcset')) {
                                        $source.attr('srcset', $source.attr('data-srcset'));
                                        $source.removeAttr('data-srcset');
                                    }
                                });
                            }

                            if (src) {
                                $imageEl.attr('src', src);
                                $imageEl.removeAttr('data-src');
                            }
                        }

                        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
                        $slideEl.find(`.${params.preloaderClass}`).remove();

                        if (swiper.params.loop && loadInDuplicate) {
                            const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

                            if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
                                const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index="${slideOriginalIndex}"]:not(.${swiper.params.slideDuplicateClass})`);
                                loadInSlide(originalSlide.index(), false);
                            } else {
                                const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index="${slideOriginalIndex}"]`);
                                loadInSlide(duplicatedSlide.index(), false);
                            }
                        }

                        emit('lazyImageReady', $slideEl[0], $imageEl[0]);

                        if (swiper.params.autoHeight) {
                            swiper.updateAutoHeight();
                        }
                    });
                    emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
                });
            }

            function load() {
                const {
                    $wrapperEl,
                    params: swiperParams,
                    slides,
                    activeIndex
                } = swiper;
                const isVirtual = swiper.virtual && swiperParams.virtual.enabled;
                const params = swiperParams.lazy;
                let slidesPerView = swiperParams.slidesPerView;

                if (slidesPerView === 'auto') {
                    slidesPerView = 0;
                }

                function slideExist(index) {
                    if (isVirtual) {
                        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index="${index}"]`).length) {
                            return true;
                        }
                    } else if (slides[index]) return true;

                    return false;
                }

                function slideIndex(slideEl) {
                    if (isVirtual) {
                        return (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(slideEl).attr('data-swiper-slide-index');
                    }

                    return (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(slideEl).index();
                }

                if (!initialImageLoaded) initialImageLoaded = true;

                if (swiper.params.watchSlidesProgress) {
                    $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each(slideEl => {
                        const index = isVirtual ? (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(slideEl).attr('data-swiper-slide-index') : (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(slideEl).index();
                        loadInSlide(index);
                    });
                } else if (slidesPerView > 1) {
                    for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
                        if (slideExist(i)) loadInSlide(i);
                    }
                } else {
                    loadInSlide(activeIndex);
                }

                if (params.loadPrevNext) {
                    if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
                        const amount = params.loadPrevNextAmount;
                        const spv = Math.ceil(slidesPerView);
                        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
                        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

                        for (let i = activeIndex + spv; i < maxIndex; i += 1) {
                            if (slideExist(i)) loadInSlide(i);
                        } // Prev Slides


                        for (let i = minIndex; i < activeIndex; i += 1) {
                            if (slideExist(i)) loadInSlide(i);
                        }
                    } else {
                        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);
                        if (nextSlide.length > 0) loadInSlide(slideIndex(nextSlide));
                        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);
                        if (prevSlide.length > 0) loadInSlide(slideIndex(prevSlide));
                    }
                }
            }

            function checkInViewOnLoad() {
                const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
                if (!swiper || swiper.destroyed) return;
                const $scrollElement = swiper.params.lazy.scrollingElement ? (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.lazy.scrollingElement) : (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(window);
                const isWindow = $scrollElement[0] === window;
                const scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;
                const scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;
                const swiperOffset = swiper.$el.offset();
                const {
                    rtlTranslate: rtl
                } = swiper;
                let inView = false;
                if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
                const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

                for (let i = 0; i < swiperCoord.length; i += 1) {
                    const point = swiperCoord[i];

                    if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {
                        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

                        inView = true;
                    }
                }

                const passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {
                    passive: true,
                    capture: false
                } : false;

                if (inView) {
                    load();
                    $scrollElement.off('scroll', checkInViewOnLoad, passiveListener);
                } else if (!scrollHandlerAttached) {
                    scrollHandlerAttached = true;
                    $scrollElement.on('scroll', checkInViewOnLoad, passiveListener);
                }
            }

            on('beforeInit', () => {
                if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
                    swiper.params.preloadImages = false;
                }
            });
            on('init', () => {
                if (swiper.params.lazy.enabled) {
                    if (swiper.params.lazy.checkInView) {
                        checkInViewOnLoad();
                    } else {
                        load();
                    }
                }
            });
            on('scroll', () => {
                if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {
                    load();
                }
            });
            on('scrollbarDragMove resize _freeModeNoMomentumRelease', () => {
                if (swiper.params.lazy.enabled) {
                    if (swiper.params.lazy.checkInView) {
                        checkInViewOnLoad();
                    } else {
                        load();
                    }
                }
            });
            on('transitionStart', () => {
                if (swiper.params.lazy.enabled) {
                    if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {
                        if (swiper.params.lazy.checkInView) {
                            checkInViewOnLoad();
                        } else {
                            load();
                        }
                    }
                }
            });
            on('transitionEnd', () => {
                if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
                    if (swiper.params.lazy.checkInView) {
                        checkInViewOnLoad();
                    } else {
                        load();
                    }
                }
            });
            on('slideChange', () => {
                const {
                    lazy,
                    cssMode,
                    watchSlidesProgress,
                    touchReleaseOnEdges,
                    resistanceRatio
                } = swiper.params;

                if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {
                    load();
                }
            });
            on('destroy', () => {
                if (!swiper.$el) return;
                swiper.$el.find(`.${swiper.params.lazy.loadingClass}`).removeClass(swiper.params.lazy.loadingClass);
            });
            Object.assign(swiper.lazy, {
                load,
                loadInSlide
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/manipulation.js":
    /*!******************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/manipulation.js ***!
  \******************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Manipulation)
            /* harmony export */ });
        /* harmony import */ var _methods_appendSlide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods/appendSlide.js */ "./node_modules/swiper/modules/manipulation/methods/appendSlide.js");
        /* harmony import */ var _methods_prependSlide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods/prependSlide.js */ "./node_modules/swiper/modules/manipulation/methods/prependSlide.js");
        /* harmony import */ var _methods_addSlide_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/addSlide.js */ "./node_modules/swiper/modules/manipulation/methods/addSlide.js");
        /* harmony import */ var _methods_removeSlide_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods/removeSlide.js */ "./node_modules/swiper/modules/manipulation/methods/removeSlide.js");
        /* harmony import */ var _methods_removeAllSlides_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./methods/removeAllSlides.js */ "./node_modules/swiper/modules/manipulation/methods/removeAllSlides.js");





        function Manipulation({
                                  swiper
                              }) {
            Object.assign(swiper, {
                appendSlide: _methods_appendSlide_js__WEBPACK_IMPORTED_MODULE_0__["default"].bind(swiper),
                prependSlide: _methods_prependSlide_js__WEBPACK_IMPORTED_MODULE_1__["default"].bind(swiper),
                addSlide: _methods_addSlide_js__WEBPACK_IMPORTED_MODULE_2__["default"].bind(swiper),
                removeSlide: _methods_removeSlide_js__WEBPACK_IMPORTED_MODULE_3__["default"].bind(swiper),
                removeAllSlides: _methods_removeAllSlides_js__WEBPACK_IMPORTED_MODULE_4__["default"].bind(swiper)
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/methods/addSlide.js":
    /*!**********************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/methods/addSlide.js ***!
  \**********************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ addSlide)
            /* harmony export */ });
        function addSlide(index, slides) {
            const swiper = this;
            const {
                $wrapperEl,
                params,
                activeIndex
            } = swiper;
            let activeIndexBuffer = activeIndex;

            if (params.loop) {
                activeIndexBuffer -= swiper.loopedSlides;
                swiper.loopDestroy();
                swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
            }

            const baseLength = swiper.slides.length;

            if (index <= 0) {
                swiper.prependSlide(slides);
                return;
            }

            if (index >= baseLength) {
                swiper.appendSlide(slides);
                return;
            }

            let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
            const slidesBuffer = [];

            for (let i = baseLength - 1; i >= index; i -= 1) {
                const currentSlide = swiper.slides.eq(i);
                currentSlide.remove();
                slidesBuffer.unshift(currentSlide);
            }

            if (typeof slides === 'object' && 'length' in slides) {
                for (let i = 0; i < slides.length; i += 1) {
                    if (slides[i]) $wrapperEl.append(slides[i]);
                }

                newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
            } else {
                $wrapperEl.append(slides);
            }

            for (let i = 0; i < slidesBuffer.length; i += 1) {
                $wrapperEl.append(slidesBuffer[i]);
            }

            if (params.loop) {
                swiper.loopCreate();
            }

            if (!params.observer) {
                swiper.update();
            }

            if (params.loop) {
                swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
            } else {
                swiper.slideTo(newActiveIndex, 0, false);
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/methods/appendSlide.js":
    /*!*************************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/methods/appendSlide.js ***!
  \*************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ appendSlide)
            /* harmony export */ });
        function appendSlide(slides) {
            const swiper = this;
            const {
                $wrapperEl,
                params
            } = swiper;

            if (params.loop) {
                swiper.loopDestroy();
            }

            if (typeof slides === 'object' && 'length' in slides) {
                for (let i = 0; i < slides.length; i += 1) {
                    if (slides[i]) $wrapperEl.append(slides[i]);
                }
            } else {
                $wrapperEl.append(slides);
            }

            if (params.loop) {
                swiper.loopCreate();
            }

            if (!params.observer) {
                swiper.update();
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/methods/prependSlide.js":
    /*!**************************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/methods/prependSlide.js ***!
  \**************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ prependSlide)
            /* harmony export */ });
        function prependSlide(slides) {
            const swiper = this;
            const {
                params,
                $wrapperEl,
                activeIndex
            } = swiper;

            if (params.loop) {
                swiper.loopDestroy();
            }

            let newActiveIndex = activeIndex + 1;

            if (typeof slides === 'object' && 'length' in slides) {
                for (let i = 0; i < slides.length; i += 1) {
                    if (slides[i]) $wrapperEl.prepend(slides[i]);
                }

                newActiveIndex = activeIndex + slides.length;
            } else {
                $wrapperEl.prepend(slides);
            }

            if (params.loop) {
                swiper.loopCreate();
            }

            if (!params.observer) {
                swiper.update();
            }

            swiper.slideTo(newActiveIndex, 0, false);
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/methods/removeAllSlides.js":
    /*!*****************************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/methods/removeAllSlides.js ***!
  \*****************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ removeAllSlides)
            /* harmony export */ });
        function removeAllSlides() {
            const swiper = this;
            const slidesIndexes = [];

            for (let i = 0; i < swiper.slides.length; i += 1) {
                slidesIndexes.push(i);
            }

            swiper.removeSlide(slidesIndexes);
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/manipulation/methods/removeSlide.js":
    /*!*************************************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation/methods/removeSlide.js ***!
  \*************************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ removeSlide)
            /* harmony export */ });
        function removeSlide(slidesIndexes) {
            const swiper = this;
            const {
                params,
                $wrapperEl,
                activeIndex
            } = swiper;
            let activeIndexBuffer = activeIndex;

            if (params.loop) {
                activeIndexBuffer -= swiper.loopedSlides;
                swiper.loopDestroy();
                swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
            }

            let newActiveIndex = activeIndexBuffer;
            let indexToRemove;

            if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
                for (let i = 0; i < slidesIndexes.length; i += 1) {
                    indexToRemove = slidesIndexes[i];
                    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
                    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
                }

                newActiveIndex = Math.max(newActiveIndex, 0);
            } else {
                indexToRemove = slidesIndexes;
                if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
                if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
                newActiveIndex = Math.max(newActiveIndex, 0);
            }

            if (params.loop) {
                swiper.loopCreate();
            }

            if (!params.observer) {
                swiper.update();
            }

            if (params.loop) {
                swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
            } else {
                swiper.slideTo(newActiveIndex, 0, false);
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/mousewheel/mousewheel.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel/mousewheel.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Mousewheel)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* eslint-disable consistent-return */



        function Mousewheel({
                                swiper,
                                extendParams,
                                on,
                                emit
                            }) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            extendParams({
                mousewheel: {
                    enabled: false,
                    releaseOnEdges: false,
                    invert: false,
                    forceToAxis: false,
                    sensitivity: 1,
                    eventsTarget: 'container',
                    thresholdDelta: null,
                    thresholdTime: null
                }
            });
            swiper.mousewheel = {
                enabled: false
            };
            let timeout;
            let lastScrollTime = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)();
            let lastEventBeforeSnap;
            const recentWheelEvents = [];

            function normalize(e) {
                // Reasonable defaults
                const PIXEL_STEP = 10;
                const LINE_HEIGHT = 40;
                const PAGE_HEIGHT = 800;
                let sX = 0;
                let sY = 0; // spinX, spinY

                let pX = 0;
                let pY = 0; // pixelX, pixelY
                // Legacy

                if ('detail' in e) {
                    sY = e.detail;
                }

                if ('wheelDelta' in e) {
                    sY = -e.wheelDelta / 120;
                }

                if ('wheelDeltaY' in e) {
                    sY = -e.wheelDeltaY / 120;
                }

                if ('wheelDeltaX' in e) {
                    sX = -e.wheelDeltaX / 120;
                } // side scrolling on FF with DOMMouseScroll


                if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
                    sX = sY;
                    sY = 0;
                }

                pX = sX * PIXEL_STEP;
                pY = sY * PIXEL_STEP;

                if ('deltaY' in e) {
                    pY = e.deltaY;
                }

                if ('deltaX' in e) {
                    pX = e.deltaX;
                }

                if (e.shiftKey && !pX) {
                    // if user scrolls with shift he wants horizontal scroll
                    pX = pY;
                    pY = 0;
                }

                if ((pX || pY) && e.deltaMode) {
                    if (e.deltaMode === 1) {
                        // delta in LINE units
                        pX *= LINE_HEIGHT;
                        pY *= LINE_HEIGHT;
                    } else {
                        // delta in PAGE units
                        pX *= PAGE_HEIGHT;
                        pY *= PAGE_HEIGHT;
                    }
                } // Fall-back if spin cannot be determined


                if (pX && !sX) {
                    sX = pX < 1 ? -1 : 1;
                }

                if (pY && !sY) {
                    sY = pY < 1 ? -1 : 1;
                }

                return {
                    spinX: sX,
                    spinY: sY,
                    pixelX: pX,
                    pixelY: pY
                };
            }

            function handleMouseEnter() {
                if (!swiper.enabled) return;
                swiper.mouseEntered = true;
            }

            function handleMouseLeave() {
                if (!swiper.enabled) return;
                swiper.mouseEntered = false;
            }

            function animateSlider(newEvent) {
                if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {
                    // Prevent if delta of wheel scroll delta is below configured threshold
                    return false;
                }

                if (swiper.params.mousewheel.thresholdTime && (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {
                    // Prevent if time between scrolls is below configured threshold
                    return false;
                } // If the movement is NOT big enough and
                // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
                //   Don't go any further (avoid insignificant scroll movement).


                if (newEvent.delta >= 6 && (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)() - lastScrollTime < 60) {
                    // Return false as a default
                    return true;
                } // If user is scrolling towards the end:
                //   If the slider hasn't hit the latest slide or
                //   if the slider is a loop and
                //   if the slider isn't moving right now:
                //     Go to next slide and
                //     emit a scroll event.
                // Else (the user is scrolling towards the beginning) and
                // if the slider hasn't hit the first slide or
                // if the slider is a loop and
                // if the slider isn't moving right now:
                //   Go to prev slide and
                //   emit a scroll event.


                if (newEvent.direction < 0) {
                    if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                        swiper.slideNext();
                        emit('scroll', newEvent.raw);
                    }
                } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
                    swiper.slidePrev();
                    emit('scroll', newEvent.raw);
                } // If you got here is because an animation has been triggered so store the current time


                lastScrollTime = new window.Date().getTime(); // Return false as a default

                return false;
            }

            function releaseScroll(newEvent) {
                const params = swiper.params.mousewheel;

                if (newEvent.direction < 0) {
                    if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
                        // Return true to animate scroll on edges
                        return true;
                    }
                } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
                    // Return true to animate scroll on edges
                    return true;
                }

                return false;
            }

            function handle(event) {
                let e = event;
                let disableParentSwiper = true;
                if (!swiper.enabled) return;
                const params = swiper.params.mousewheel;

                if (swiper.params.cssMode) {
                    e.preventDefault();
                }

                let target = swiper.$el;

                if (swiper.params.mousewheel.eventsTarget !== 'container') {
                    target = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.mousewheel.eventsTarget);
                }

                if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;
                if (e.originalEvent) e = e.originalEvent; // jquery fix

                let delta = 0;
                const rtlFactor = swiper.rtlTranslate ? -1 : 1;
                const data = normalize(e);

                if (params.forceToAxis) {
                    if (swiper.isHorizontal()) {
                        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;
                    } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;
                } else {
                    delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
                }

                if (delta === 0) return true;
                if (params.invert) delta = -delta; // Get the scroll positions

                let positions = swiper.getTranslate() + delta * params.sensitivity;
                if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();
                if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:
                //     the disableParentSwiper will be true.
                // When loop is false:
                //     if the scroll positions is not on edge,
                //     then the disableParentSwiper will be true.
                //     if the scroll on edge positions,
                //     then the disableParentSwiper will be false.

                disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());
                if (disableParentSwiper && swiper.params.nested) e.stopPropagation();

                if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {
                    // Register the new event in a variable which stores the relevant data
                    const newEvent = {
                        time: (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)(),
                        delta: Math.abs(delta),
                        direction: Math.sign(delta),
                        raw: event
                    }; // Keep the most recent events

                    if (recentWheelEvents.length >= 2) {
                        recentWheelEvents.shift(); // only store the last N events
                    }

                    const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
                    recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:
                    //   If direction has changed or
                    //   if the scroll is quicker than the previous one:
                    //     Animate the slider.
                    // Else (this is the first time the wheel is moved):
                    //     Animate the slider.

                    if (prevEvent) {
                        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
                            animateSlider(newEvent);
                        }
                    } else {
                        animateSlider(newEvent);
                    } // If it's time to release the scroll:
                    //   Return now so you don't hit the preventDefault.


                    if (releaseScroll(newEvent)) {
                        return true;
                    }
                } else {
                    // Freemode or scrollContainer:
                    // If we recently snapped after a momentum scroll, then ignore wheel events
                    // to give time for the deceleration to finish. Stop ignoring after 500 msecs
                    // or if it's a new scroll (larger delta or inverse sign as last event before
                    // an end-of-momentum snap).
                    const newEvent = {
                        time: (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.now)(),
                        delta: Math.abs(delta),
                        direction: Math.sign(delta)
                    };
                    const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;

                    if (!ignoreWheelEvents) {
                        lastEventBeforeSnap = undefined;

                        if (swiper.params.loop) {
                            swiper.loopFix();
                        }

                        let position = swiper.getTranslate() + delta * params.sensitivity;
                        const wasBeginning = swiper.isBeginning;
                        const wasEnd = swiper.isEnd;
                        if (position >= swiper.minTranslate()) position = swiper.minTranslate();
                        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
                        swiper.setTransition(0);
                        swiper.setTranslate(position);
                        swiper.updateProgress();
                        swiper.updateActiveIndex();
                        swiper.updateSlidesClasses();

                        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
                            swiper.updateSlidesClasses();
                        }

                        if (swiper.params.freeMode.sticky) {
                            // When wheel scrolling starts with sticky (aka snap) enabled, then detect
                            // the end of a momentum scroll by storing recent (N=15?) wheel events.
                            // 1. do all N events have decreasing or same (absolute value) delta?
                            // 2. did all N events arrive in the last M (M=500?) msecs?
                            // 3. does the earliest event have an (absolute value) delta that's
                            //    at least P (P=1?) larger than the most recent event's delta?
                            // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
                            // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
                            // Snap immediately and ignore remaining wheel events in this scroll.
                            // See comment above for "remaining wheel events in this scroll" determination.
                            // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
                            clearTimeout(timeout);
                            timeout = undefined;

                            if (recentWheelEvents.length >= 15) {
                                recentWheelEvents.shift(); // only store the last N events
                            }

                            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
                            const firstEvent = recentWheelEvents[0];
                            recentWheelEvents.push(newEvent);

                            if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {
                                // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
                                recentWheelEvents.splice(0);
                            } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {
                                // We're at the end of the deceleration of a momentum scroll, so there's no need
                                // to wait for more events. Snap ASAP on the next tick.
                                // Also, because there's some remaining momentum we'll bias the snap in the
                                // direction of the ongoing scroll because it's better UX for the scroll to snap
                                // in the same direction as the scroll instead of reversing to snap.  Therefore,
                                // if it's already scrolled more than 20% in the current direction, keep going.
                                const snapToThreshold = delta > 0 ? 0.8 : 0.2;
                                lastEventBeforeSnap = newEvent;
                                recentWheelEvents.splice(0);
                                timeout = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.nextTick)(() => {
                                    swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
                                }, 0); // no delay; move on next tick
                            }

                            if (!timeout) {
                                // if we get here, then we haven't detected the end of a momentum scroll, so
                                // we'll consider a scroll "complete" when there haven't been any wheel events
                                // for 500ms.
                                timeout = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.nextTick)(() => {
                                    const snapToThreshold = 0.5;
                                    lastEventBeforeSnap = newEvent;
                                    recentWheelEvents.splice(0);
                                    swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
                                }, 500);
                            }
                        } // Emit event


                        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay

                        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions

                        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
                    }
                }

                if (e.preventDefault) e.preventDefault();else e.returnValue = false;
                return false;
            }

            function events(method) {
                let target = swiper.$el;

                if (swiper.params.mousewheel.eventsTarget !== 'container') {
                    target = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(swiper.params.mousewheel.eventsTarget);
                }

                target[method]('mouseenter', handleMouseEnter);
                target[method]('mouseleave', handleMouseLeave);
                target[method]('wheel', handle);
            }

            function enable() {
                if (swiper.params.cssMode) {
                    swiper.wrapperEl.removeEventListener('wheel', handle);
                    return true;
                }

                if (swiper.mousewheel.enabled) return false;
                events('on');
                swiper.mousewheel.enabled = true;
                return true;
            }

            function disable() {
                if (swiper.params.cssMode) {
                    swiper.wrapperEl.addEventListener(event, handle);
                    return true;
                }

                if (!swiper.mousewheel.enabled) return false;
                events('off');
                swiper.mousewheel.enabled = false;
                return true;
            }

            on('init', () => {
                if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
                    disable();
                }

                if (swiper.params.mousewheel.enabled) enable();
            });
            on('destroy', () => {
                if (swiper.params.cssMode) {
                    enable();
                }

                if (swiper.mousewheel.enabled) disable();
            });
            Object.assign(swiper.mousewheel, {
                enable,
                disable
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/navigation/navigation.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/modules/navigation/navigation.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Navigation)
            /* harmony export */ });
        /* harmony import */ var _shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/create-element-if-not-defined.js */ "./node_modules/swiper/shared/create-element-if-not-defined.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function Navigation({
                                swiper,
                                extendParams,
                                on,
                                emit
                            }) {
            extendParams({
                navigation: {
                    nextEl: null,
                    prevEl: null,
                    hideOnClick: false,
                    disabledClass: 'swiper-button-disabled',
                    hiddenClass: 'swiper-button-hidden',
                    lockClass: 'swiper-button-lock',
                    navigationDisabledClass: 'swiper-navigation-disabled'
                }
            });
            swiper.navigation = {
                nextEl: null,
                $nextEl: null,
                prevEl: null,
                $prevEl: null
            };

            function getEl(el) {
                let $el;

                if (el) {
                    $el = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el);

                    if (swiper.params.uniqueNavElements && typeof el === 'string' && $el.length > 1 && swiper.$el.find(el).length === 1) {
                        $el = swiper.$el.find(el);
                    }
                }

                return $el;
            }

            function toggleEl($el, disabled) {
                const params = swiper.params.navigation;

                if ($el && $el.length > 0) {
                    $el[disabled ? 'addClass' : 'removeClass'](params.disabledClass);
                    if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;

                    if (swiper.params.watchOverflow && swiper.enabled) {
                        $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
                    }
                }
            }

            function update() {
                // Update Navigation Buttons
                if (swiper.params.loop) return;
                const {
                    $nextEl,
                    $prevEl
                } = swiper.navigation;
                toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);
                toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);
            }

            function onPrevClick(e) {
                e.preventDefault();
                if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;
                swiper.slidePrev();
                emit('navigationPrev');
            }

            function onNextClick(e) {
                e.preventDefault();
                if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;
                swiper.slideNext();
                emit('navigationNext');
            }

            function init() {
                const params = swiper.params.navigation;
                swiper.params.navigation = (0,_shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_0__["default"])(swiper, swiper.originalParams.navigation, swiper.params.navigation, {
                    nextEl: 'swiper-button-next',
                    prevEl: 'swiper-button-prev'
                });
                if (!(params.nextEl || params.prevEl)) return;
                const $nextEl = getEl(params.nextEl);
                const $prevEl = getEl(params.prevEl);

                if ($nextEl && $nextEl.length > 0) {
                    $nextEl.on('click', onNextClick);
                }

                if ($prevEl && $prevEl.length > 0) {
                    $prevEl.on('click', onPrevClick);
                }

                Object.assign(swiper.navigation, {
                    $nextEl,
                    nextEl: $nextEl && $nextEl[0],
                    $prevEl,
                    prevEl: $prevEl && $prevEl[0]
                });

                if (!swiper.enabled) {
                    if ($nextEl) $nextEl.addClass(params.lockClass);
                    if ($prevEl) $prevEl.addClass(params.lockClass);
                }
            }

            function destroy() {
                const {
                    $nextEl,
                    $prevEl
                } = swiper.navigation;

                if ($nextEl && $nextEl.length) {
                    $nextEl.off('click', onNextClick);
                    $nextEl.removeClass(swiper.params.navigation.disabledClass);
                }

                if ($prevEl && $prevEl.length) {
                    $prevEl.off('click', onPrevClick);
                    $prevEl.removeClass(swiper.params.navigation.disabledClass);
                }
            }

            on('init', () => {
                if (swiper.params.navigation.enabled === false) {
                    // eslint-disable-next-line
                    disable();
                } else {
                    init();
                    update();
                }
            });
            on('toEdge fromEdge lock unlock', () => {
                update();
            });
            on('destroy', () => {
                destroy();
            });
            on('enable disable', () => {
                const {
                    $nextEl,
                    $prevEl
                } = swiper.navigation;

                if ($nextEl) {
                    $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
                }

                if ($prevEl) {
                    $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
                }
            });
            on('click', (_s, e) => {
                const {
                    $nextEl,
                    $prevEl
                } = swiper.navigation;
                const targetEl = e.target;

                if (swiper.params.navigation.hideOnClick && !(0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(targetEl).is($prevEl) && !(0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(targetEl).is($nextEl)) {
                    if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
                    let isHidden;

                    if ($nextEl) {
                        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
                    } else if ($prevEl) {
                        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
                    }

                    if (isHidden === true) {
                        emit('navigationShow');
                    } else {
                        emit('navigationHide');
                    }

                    if ($nextEl) {
                        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }

                    if ($prevEl) {
                        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
                    }
                }
            });

            const enable = () => {
                swiper.$el.removeClass(swiper.params.navigation.navigationDisabledClass);
                init();
                update();
            };

            const disable = () => {
                swiper.$el.addClass(swiper.params.navigation.navigationDisabledClass);
                destroy();
            };

            Object.assign(swiper.navigation, {
                enable,
                disable,
                update,
                init,
                destroy
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/pagination/pagination.js":
    /*!**************************************************************!*\
  !*** ./node_modules/swiper/modules/pagination/pagination.js ***!
  \**************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Pagination)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/classes-to-selector.js */ "./node_modules/swiper/shared/classes-to-selector.js");
        /* harmony import */ var _shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/create-element-if-not-defined.js */ "./node_modules/swiper/shared/create-element-if-not-defined.js");



        function Pagination({
                                swiper,
                                extendParams,
                                on,
                                emit
                            }) {
            const pfx = 'swiper-pagination';
            extendParams({
                pagination: {
                    el: null,
                    bulletElement: 'span',
                    clickable: false,
                    hideOnClick: false,
                    renderBullet: null,
                    renderProgressbar: null,
                    renderFraction: null,
                    renderCustom: null,
                    progressbarOpposite: false,
                    type: 'bullets',
                    // 'bullets' or 'progressbar' or 'fraction' or 'custom'
                    dynamicBullets: false,
                    dynamicMainBullets: 1,
                    formatFractionCurrent: number => number,
                    formatFractionTotal: number => number,
                    bulletClass: `${pfx}-bullet`,
                    bulletActiveClass: `${pfx}-bullet-active`,
                    modifierClass: `${pfx}-`,
                    currentClass: `${pfx}-current`,
                    totalClass: `${pfx}-total`,
                    hiddenClass: `${pfx}-hidden`,
                    progressbarFillClass: `${pfx}-progressbar-fill`,
                    progressbarOppositeClass: `${pfx}-progressbar-opposite`,
                    clickableClass: `${pfx}-clickable`,
                    lockClass: `${pfx}-lock`,
                    horizontalClass: `${pfx}-horizontal`,
                    verticalClass: `${pfx}-vertical`,
                    paginationDisabledClass: `${pfx}-disabled`
                }
            });
            swiper.pagination = {
                el: null,
                $el: null,
                bullets: []
            };
            let bulletSize;
            let dynamicBulletIndex = 0;

            function isPaginationDisabled() {
                return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;
            }

            function setSideBullets($bulletEl, position) {
                const {
                    bulletActiveClass
                } = swiper.params.pagination;
                $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);
            }

            function update() {
                // Render || Update Pagination bullets/items
                const rtl = swiper.rtl;
                const params = swiper.params.pagination;
                if (isPaginationDisabled()) return;
                const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
                const $el = swiper.pagination.$el; // Current/Total

                let current;
                const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

                if (swiper.params.loop) {
                    current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

                    if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
                        current -= slidesLength - swiper.loopedSlides * 2;
                    }

                    if (current > total - 1) current -= total;
                    if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
                } else if (typeof swiper.snapIndex !== 'undefined') {
                    current = swiper.snapIndex;
                } else {
                    current = swiper.activeIndex || 0;
                } // Types


                if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
                    const bullets = swiper.pagination.bullets;
                    let firstIndex;
                    let lastIndex;
                    let midIndex;

                    if (params.dynamicBullets) {
                        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
                        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${bulletSize * (params.dynamicMainBullets + 4)}px`);

                        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
                            dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);

                            if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
                                dynamicBulletIndex = params.dynamicMainBullets - 1;
                            } else if (dynamicBulletIndex < 0) {
                                dynamicBulletIndex = 0;
                            }
                        }

                        firstIndex = Math.max(current - dynamicBulletIndex, 0);
                        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
                        midIndex = (lastIndex + firstIndex) / 2;
                    }

                    bullets.removeClass(['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`).join(' '));

                    if ($el.length > 1) {
                        bullets.each(bullet => {
                            const $bullet = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bullet);
                            const bulletIndex = $bullet.index();

                            if (bulletIndex === current) {
                                $bullet.addClass(params.bulletActiveClass);
                            }

                            if (params.dynamicBullets) {
                                if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                                    $bullet.addClass(`${params.bulletActiveClass}-main`);
                                }

                                if (bulletIndex === firstIndex) {
                                    setSideBullets($bullet, 'prev');
                                }

                                if (bulletIndex === lastIndex) {
                                    setSideBullets($bullet, 'next');
                                }
                            }
                        });
                    } else {
                        const $bullet = bullets.eq(current);
                        const bulletIndex = $bullet.index();
                        $bullet.addClass(params.bulletActiveClass);

                        if (params.dynamicBullets) {
                            const $firstDisplayedBullet = bullets.eq(firstIndex);
                            const $lastDisplayedBullet = bullets.eq(lastIndex);

                            for (let i = firstIndex; i <= lastIndex; i += 1) {
                                bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);
                            }

                            if (swiper.params.loop) {
                                if (bulletIndex >= bullets.length) {
                                    for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {
                                        bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);
                                    }

                                    bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);
                                } else {
                                    setSideBullets($firstDisplayedBullet, 'prev');
                                    setSideBullets($lastDisplayedBullet, 'next');
                                }
                            } else {
                                setSideBullets($firstDisplayedBullet, 'prev');
                                setSideBullets($lastDisplayedBullet, 'next');
                            }
                        }
                    }

                    if (params.dynamicBullets) {
                        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
                        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;
                        const offsetProp = rtl ? 'right' : 'left';
                        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);
                    }
                }

                if (params.type === 'fraction') {
                    $el.find((0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.currentClass)).text(params.formatFractionCurrent(current + 1));
                    $el.find((0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.totalClass)).text(params.formatFractionTotal(total));
                }

                if (params.type === 'progressbar') {
                    let progressbarDirection;

                    if (params.progressbarOpposite) {
                        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
                    } else {
                        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
                    }

                    const scale = (current + 1) / total;
                    let scaleX = 1;
                    let scaleY = 1;

                    if (progressbarDirection === 'horizontal') {
                        scaleX = scale;
                    } else {
                        scaleY = scale;
                    }

                    $el.find((0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);
                }

                if (params.type === 'custom' && params.renderCustom) {
                    $el.html(params.renderCustom(swiper, current + 1, total));
                    emit('paginationRender', $el[0]);
                } else {
                    emit('paginationUpdate', $el[0]);
                }

                if (swiper.params.watchOverflow && swiper.enabled) {
                    $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
                }
            }

            function render() {
                // Render Container
                const params = swiper.params.pagination;
                if (isPaginationDisabled()) return;
                const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
                const $el = swiper.pagination.$el;
                let paginationHTML = '';

                if (params.type === 'bullets') {
                    let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

                    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {
                        numberOfBullets = slidesLength;
                    }

                    for (let i = 0; i < numberOfBullets; i += 1) {
                        if (params.renderBullet) {
                            paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
                        } else {
                            paginationHTML += `<${params.bulletElement} class="${params.bulletClass}"></${params.bulletElement}>`;
                        }
                    }

                    $el.html(paginationHTML);
                    swiper.pagination.bullets = $el.find((0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.bulletClass));
                }

                if (params.type === 'fraction') {
                    if (params.renderFraction) {
                        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
                    } else {
                        paginationHTML = `<span class="${params.currentClass}"></span>` + ' / ' + `<span class="${params.totalClass}"></span>`;
                    }

                    $el.html(paginationHTML);
                }

                if (params.type === 'progressbar') {
                    if (params.renderProgressbar) {
                        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
                    } else {
                        paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
                    }

                    $el.html(paginationHTML);
                }

                if (params.type !== 'custom') {
                    emit('paginationRender', swiper.pagination.$el[0]);
                }
            }

            function init() {
                swiper.params.pagination = (0,_shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_2__["default"])(swiper, swiper.originalParams.pagination, swiper.params.pagination, {
                    el: 'swiper-pagination'
                });
                const params = swiper.params.pagination;
                if (!params.el) return;
                let $el = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params.el);
                if ($el.length === 0) return;

                if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
                    $el = swiper.$el.find(params.el); // check if it belongs to another nested Swiper

                    if ($el.length > 1) {
                        $el = $el.filter(el => {
                            if ((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(el).parents('.swiper')[0] !== swiper.el) return false;
                            return true;
                        });
                    }
                }

                if (params.type === 'bullets' && params.clickable) {
                    $el.addClass(params.clickableClass);
                }

                $el.addClass(params.modifierClass + params.type);
                $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);

                if (params.type === 'bullets' && params.dynamicBullets) {
                    $el.addClass(`${params.modifierClass}${params.type}-dynamic`);
                    dynamicBulletIndex = 0;

                    if (params.dynamicMainBullets < 1) {
                        params.dynamicMainBullets = 1;
                    }
                }

                if (params.type === 'progressbar' && params.progressbarOpposite) {
                    $el.addClass(params.progressbarOppositeClass);
                }

                if (params.clickable) {
                    $el.on('click', (0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.bulletClass), function onClick(e) {
                        e.preventDefault();
                        let index = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this).index() * swiper.params.slidesPerGroup;
                        if (swiper.params.loop) index += swiper.loopedSlides;
                        swiper.slideTo(index);
                    });
                }

                Object.assign(swiper.pagination, {
                    $el,
                    el: $el[0]
                });

                if (!swiper.enabled) {
                    $el.addClass(params.lockClass);
                }
            }

            function destroy() {
                const params = swiper.params.pagination;
                if (isPaginationDisabled()) return;
                const $el = swiper.pagination.$el;
                $el.removeClass(params.hiddenClass);
                $el.removeClass(params.modifierClass + params.type);
                $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
                if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

                if (params.clickable) {
                    $el.off('click', (0,_shared_classes_to_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.bulletClass));
                }
            }

            on('init', () => {
                if (swiper.params.pagination.enabled === false) {
                    // eslint-disable-next-line
                    disable();
                } else {
                    init();
                    render();
                    update();
                }
            });
            on('activeIndexChange', () => {
                if (swiper.params.loop) {
                    update();
                } else if (typeof swiper.snapIndex === 'undefined') {
                    update();
                }
            });
            on('snapIndexChange', () => {
                if (!swiper.params.loop) {
                    update();
                }
            });
            on('slidesLengthChange', () => {
                if (swiper.params.loop) {
                    render();
                    update();
                }
            });
            on('snapGridLengthChange', () => {
                if (!swiper.params.loop) {
                    render();
                    update();
                }
            });
            on('destroy', () => {
                destroy();
            });
            on('enable disable', () => {
                const {
                    $el
                } = swiper.pagination;

                if ($el) {
                    $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
                }
            });
            on('lock unlock', () => {
                update();
            });
            on('click', (_s, e) => {
                const targetEl = e.target;
                const {
                    $el
                } = swiper.pagination;

                if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el && $el.length > 0 && !(0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
                    if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
                    const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);

                    if (isHidden === true) {
                        emit('paginationShow');
                    } else {
                        emit('paginationHide');
                    }

                    $el.toggleClass(swiper.params.pagination.hiddenClass);
                }
            });

            const enable = () => {
                swiper.$el.removeClass(swiper.params.pagination.paginationDisabledClass);

                if (swiper.pagination.$el) {
                    swiper.pagination.$el.removeClass(swiper.params.pagination.paginationDisabledClass);
                }

                init();
                render();
                update();
            };

            const disable = () => {
                swiper.$el.addClass(swiper.params.pagination.paginationDisabledClass);

                if (swiper.pagination.$el) {
                    swiper.pagination.$el.addClass(swiper.params.pagination.paginationDisabledClass);
                }

                destroy();
            };

            Object.assign(swiper.pagination, {
                enable,
                disable,
                render,
                update,
                init,
                destroy
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/parallax/parallax.js":
    /*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/parallax/parallax.js ***!
  \**********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Parallax)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");

        function Parallax({
                              swiper,
                              extendParams,
                              on
                          }) {
            extendParams({
                parallax: {
                    enabled: false
                }
            });

            const setTransform = (el, progress) => {
                const {
                    rtl
                } = swiper;
                const $el = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(el);
                const rtlFactor = rtl ? -1 : 1;
                const p = $el.attr('data-swiper-parallax') || '0';
                let x = $el.attr('data-swiper-parallax-x');
                let y = $el.attr('data-swiper-parallax-y');
                const scale = $el.attr('data-swiper-parallax-scale');
                const opacity = $el.attr('data-swiper-parallax-opacity');

                if (x || y) {
                    x = x || '0';
                    y = y || '0';
                } else if (swiper.isHorizontal()) {
                    x = p;
                    y = '0';
                } else {
                    y = p;
                    x = '0';
                }

                if (x.indexOf('%') >= 0) {
                    x = `${parseInt(x, 10) * progress * rtlFactor}%`;
                } else {
                    x = `${x * progress * rtlFactor}px`;
                }

                if (y.indexOf('%') >= 0) {
                    y = `${parseInt(y, 10) * progress}%`;
                } else {
                    y = `${y * progress}px`;
                }

                if (typeof opacity !== 'undefined' && opacity !== null) {
                    const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
                    $el[0].style.opacity = currentOpacity;
                }

                if (typeof scale === 'undefined' || scale === null) {
                    $el.transform(`translate3d(${x}, ${y}, 0px)`);
                } else {
                    const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
                    $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);
                }
            };

            const setTranslate = () => {
                const {
                    $el,
                    slides,
                    progress,
                    snapGrid
                } = swiper;
                $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {
                    setTransform(el, progress);
                });
                slides.each((slideEl, slideIndex) => {
                    let slideProgress = slideEl.progress;

                    if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
                        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
                    }

                    slideProgress = Math.min(Math.max(slideProgress, -1), 1);
                    (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(el => {
                        setTransform(el, slideProgress);
                    });
                });
            };

            const setTransition = (duration = swiper.params.speed) => {
                const {
                    $el
                } = swiper;
                $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(parallaxEl => {
                    const $parallaxEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(parallaxEl);
                    let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
                    if (duration === 0) parallaxDuration = 0;
                    $parallaxEl.transition(parallaxDuration);
                });
            };

            on('beforeInit', () => {
                if (!swiper.params.parallax.enabled) return;
                swiper.params.watchSlidesProgress = true;
                swiper.originalParams.watchSlidesProgress = true;
            });
            on('init', () => {
                if (!swiper.params.parallax.enabled) return;
                setTranslate();
            });
            on('setTranslate', () => {
                if (!swiper.params.parallax.enabled) return;
                setTranslate();
            });
            on('setTransition', (_swiper, duration) => {
                if (!swiper.params.parallax.enabled) return;
                setTransition(duration);
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/scrollbar/scrollbar.js":
    /*!************************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar/scrollbar.js ***!
  \************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Scrollbar)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* harmony import */ var _shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/create-element-if-not-defined.js */ "./node_modules/swiper/shared/create-element-if-not-defined.js");




        function Scrollbar({
                               swiper,
                               extendParams,
                               on,
                               emit
                           }) {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            let isTouched = false;
            let timeout = null;
            let dragTimeout = null;
            let dragStartPos;
            let dragSize;
            let trackSize;
            let divider;
            extendParams({
                scrollbar: {
                    el: null,
                    dragSize: 'auto',
                    hide: false,
                    draggable: false,
                    snapOnRelease: true,
                    lockClass: 'swiper-scrollbar-lock',
                    dragClass: 'swiper-scrollbar-drag',
                    scrollbarDisabledClass: 'swiper-scrollbar-disabled',
                    horizontalClass: `swiper-scrollbar-horizontal`,
                    verticalClass: `swiper-scrollbar-vertical`
                }
            });
            swiper.scrollbar = {
                el: null,
                dragEl: null,
                $el: null,
                $dragEl: null
            };

            function setTranslate() {
                if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
                const {
                    scrollbar,
                    rtlTranslate: rtl,
                    progress
                } = swiper;
                const {
                    $dragEl,
                    $el
                } = scrollbar;
                const params = swiper.params.scrollbar;
                let newSize = dragSize;
                let newPos = (trackSize - dragSize) * progress;

                if (rtl) {
                    newPos = -newPos;

                    if (newPos > 0) {
                        newSize = dragSize - newPos;
                        newPos = 0;
                    } else if (-newPos + dragSize > trackSize) {
                        newSize = trackSize + newPos;
                    }
                } else if (newPos < 0) {
                    newSize = dragSize + newPos;
                    newPos = 0;
                } else if (newPos + dragSize > trackSize) {
                    newSize = trackSize - newPos;
                }

                if (swiper.isHorizontal()) {
                    $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);
                    $dragEl[0].style.width = `${newSize}px`;
                } else {
                    $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);
                    $dragEl[0].style.height = `${newSize}px`;
                }

                if (params.hide) {
                    clearTimeout(timeout);
                    $el[0].style.opacity = 1;
                    timeout = setTimeout(() => {
                        $el[0].style.opacity = 0;
                        $el.transition(400);
                    }, 1000);
                }
            }

            function setTransition(duration) {
                if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
                swiper.scrollbar.$dragEl.transition(duration);
            }

            function updateSize() {
                if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
                const {
                    scrollbar
                } = swiper;
                const {
                    $dragEl,
                    $el
                } = scrollbar;
                $dragEl[0].style.width = '';
                $dragEl[0].style.height = '';
                trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
                divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));

                if (swiper.params.scrollbar.dragSize === 'auto') {
                    dragSize = trackSize * divider;
                } else {
                    dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
                }

                if (swiper.isHorizontal()) {
                    $dragEl[0].style.width = `${dragSize}px`;
                } else {
                    $dragEl[0].style.height = `${dragSize}px`;
                }

                if (divider >= 1) {
                    $el[0].style.display = 'none';
                } else {
                    $el[0].style.display = '';
                }

                if (swiper.params.scrollbar.hide) {
                    $el[0].style.opacity = 0;
                }

                if (swiper.params.watchOverflow && swiper.enabled) {
                    scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
                }
            }

            function getPointerPosition(e) {
                if (swiper.isHorizontal()) {
                    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;
                }

                return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;
            }

            function setDragPosition(e) {
                const {
                    scrollbar,
                    rtlTranslate: rtl
                } = swiper;
                const {
                    $el
                } = scrollbar;
                let positionRatio;
                positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
                positionRatio = Math.max(Math.min(positionRatio, 1), 0);

                if (rtl) {
                    positionRatio = 1 - positionRatio;
                }

                const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
                swiper.updateProgress(position);
                swiper.setTranslate(position);
                swiper.updateActiveIndex();
                swiper.updateSlidesClasses();
            }

            function onDragStart(e) {
                const params = swiper.params.scrollbar;
                const {
                    scrollbar,
                    $wrapperEl
                } = swiper;
                const {
                    $el,
                    $dragEl
                } = scrollbar;
                isTouched = true;
                dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
                e.preventDefault();
                e.stopPropagation();
                $wrapperEl.transition(100);
                $dragEl.transition(100);
                setDragPosition(e);
                clearTimeout(dragTimeout);
                $el.transition(0);

                if (params.hide) {
                    $el.css('opacity', 1);
                }

                if (swiper.params.cssMode) {
                    swiper.$wrapperEl.css('scroll-snap-type', 'none');
                }

                emit('scrollbarDragStart', e);
            }

            function onDragMove(e) {
                const {
                    scrollbar,
                    $wrapperEl
                } = swiper;
                const {
                    $el,
                    $dragEl
                } = scrollbar;
                if (!isTouched) return;
                if (e.preventDefault) e.preventDefault();else e.returnValue = false;
                setDragPosition(e);
                $wrapperEl.transition(0);
                $el.transition(0);
                $dragEl.transition(0);
                emit('scrollbarDragMove', e);
            }

            function onDragEnd(e) {
                const params = swiper.params.scrollbar;
                const {
                    scrollbar,
                    $wrapperEl
                } = swiper;
                const {
                    $el
                } = scrollbar;
                if (!isTouched) return;
                isTouched = false;

                if (swiper.params.cssMode) {
                    swiper.$wrapperEl.css('scroll-snap-type', '');
                    $wrapperEl.transition('');
                }

                if (params.hide) {
                    clearTimeout(dragTimeout);
                    dragTimeout = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.nextTick)(() => {
                        $el.css('opacity', 0);
                        $el.transition(400);
                    }, 1000);
                }

                emit('scrollbarDragEnd', e);

                if (params.snapOnRelease) {
                    swiper.slideToClosest();
                }
            }

            function events(method) {
                const {
                    scrollbar,
                    touchEventsTouch,
                    touchEventsDesktop,
                    params,
                    support
                } = swiper;
                const $el = scrollbar.$el;
                if (!$el) return;
                const target = $el[0];
                const activeListener = support.passiveListener && params.passiveListeners ? {
                    passive: false,
                    capture: false
                } : false;
                const passiveListener = support.passiveListener && params.passiveListeners ? {
                    passive: true,
                    capture: false
                } : false;
                if (!target) return;
                const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';

                if (!support.touch) {
                    target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);
                    document[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);
                    document[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);
                } else {
                    target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);
                    target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);
                    target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);
                }
            }

            function enableDraggable() {
                if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
                events('on');
            }

            function disableDraggable() {
                if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
                events('off');
            }

            function init() {
                const {
                    scrollbar,
                    $el: $swiperEl
                } = swiper;
                swiper.params.scrollbar = (0,_shared_create_element_if_not_defined_js__WEBPACK_IMPORTED_MODULE_3__["default"])(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {
                    el: 'swiper-scrollbar'
                });
                const params = swiper.params.scrollbar;
                if (!params.el) return;
                let $el = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(params.el);

                if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
                    $el = $swiperEl.find(params.el);
                }

                $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
                let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);

                if ($dragEl.length === 0) {
                    $dragEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(`<div class="${swiper.params.scrollbar.dragClass}"></div>`);
                    $el.append($dragEl);
                }

                Object.assign(scrollbar, {
                    $el,
                    el: $el[0],
                    $dragEl,
                    dragEl: $dragEl[0]
                });

                if (params.draggable) {
                    enableDraggable();
                }

                if ($el) {
                    $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
                }
            }

            function destroy() {
                const params = swiper.params.scrollbar;
                const $el = swiper.scrollbar.$el;

                if ($el) {
                    $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
                }

                disableDraggable();
            }

            on('init', () => {
                if (swiper.params.scrollbar.enabled === false) {
                    // eslint-disable-next-line
                    disable();
                } else {
                    init();
                    updateSize();
                    setTranslate();
                }
            });
            on('update resize observerUpdate lock unlock', () => {
                updateSize();
            });
            on('setTranslate', () => {
                setTranslate();
            });
            on('setTransition', (_s, duration) => {
                setTransition(duration);
            });
            on('enable disable', () => {
                const {
                    $el
                } = swiper.scrollbar;

                if ($el) {
                    $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
                }
            });
            on('destroy', () => {
                destroy();
            });

            const enable = () => {
                swiper.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);

                if (swiper.scrollbar.$el) {
                    swiper.scrollbar.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);
                }

                init();
                updateSize();
                setTranslate();
            };

            const disable = () => {
                swiper.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);

                if (swiper.scrollbar.$el) {
                    swiper.scrollbar.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);
                }

                destroy();
            };

            Object.assign(swiper.scrollbar, {
                enable,
                disable,
                updateSize,
                setTranslate,
                init,
                destroy
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/thumbs/thumbs.js":
    /*!******************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs/thumbs.js ***!
  \******************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Thumb)
            /* harmony export */ });
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");


        function Thumb({
                           swiper,
                           extendParams,
                           on
                       }) {
            extendParams({
                thumbs: {
                    swiper: null,
                    multipleActiveThumbs: true,
                    autoScrollOffset: 0,
                    slideThumbActiveClass: 'swiper-slide-thumb-active',
                    thumbsContainerClass: 'swiper-thumbs'
                }
            });
            let initialized = false;
            let swiperCreated = false;
            swiper.thumbs = {
                swiper: null
            };

            function onThumbClick() {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper || thumbsSwiper.destroyed) return;
                const clickedIndex = thumbsSwiper.clickedIndex;
                const clickedSlide = thumbsSwiper.clickedSlide;
                if (clickedSlide && (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
                if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
                let slideToIndex;

                if (thumbsSwiper.params.loop) {
                    slideToIndex = parseInt((0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
                } else {
                    slideToIndex = clickedIndex;
                }

                if (swiper.params.loop) {
                    let currentIndex = swiper.activeIndex;

                    if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
                        swiper.loopFix(); // eslint-disable-next-line

                        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
                        currentIndex = swiper.activeIndex;
                    }

                    const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
                    const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
                    if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;
                }

                swiper.slideTo(slideToIndex);
            }

            function init() {
                const {
                    thumbs: thumbsParams
                } = swiper.params;
                if (initialized) return false;
                initialized = true;
                const SwiperClass = swiper.constructor;

                if (thumbsParams.swiper instanceof SwiperClass) {
                    swiper.thumbs.swiper = thumbsParams.swiper;
                    Object.assign(swiper.thumbs.swiper.originalParams, {
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    });
                    Object.assign(swiper.thumbs.swiper.params, {
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    });
                } else if ((0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(thumbsParams.swiper)) {
                    const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);
                    Object.assign(thumbsSwiperParams, {
                        watchSlidesProgress: true,
                        slideToClickedSlide: false
                    });
                    swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);
                    swiperCreated = true;
                }

                swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
                swiper.thumbs.swiper.on('tap', onThumbClick);
                return true;
            }

            function update(initial) {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper || thumbsSwiper.destroyed) return;
                const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView; // Activate thumbs

                let thumbsToActivate = 1;
                const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

                if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
                    thumbsToActivate = swiper.params.slidesPerView;
                }

                if (!swiper.params.thumbs.multipleActiveThumbs) {
                    thumbsToActivate = 1;
                }

                thumbsToActivate = Math.floor(thumbsToActivate);
                thumbsSwiper.slides.removeClass(thumbActiveClass);

                if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
                    for (let i = 0; i < thumbsToActivate; i += 1) {
                        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index="${swiper.realIndex + i}"]`).addClass(thumbActiveClass);
                    }
                } else {
                    for (let i = 0; i < thumbsToActivate; i += 1) {
                        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);
                    }
                }

                const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
                const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;

                if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
                    let currentThumbsIndex = thumbsSwiper.activeIndex;
                    let newThumbsIndex;
                    let direction;

                    if (thumbsSwiper.params.loop) {
                        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
                            thumbsSwiper.loopFix(); // eslint-disable-next-line

                            thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
                            currentThumbsIndex = thumbsSwiper.activeIndex;
                        } // Find actual thumbs index to slide to


                        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0).index();
                        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0).index();

                        if (typeof prevThumbsIndex === 'undefined') {
                            newThumbsIndex = nextThumbsIndex;
                        } else if (typeof nextThumbsIndex === 'undefined') {
                            newThumbsIndex = prevThumbsIndex;
                        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {
                            newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;
                        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {
                            newThumbsIndex = nextThumbsIndex;
                        } else {
                            newThumbsIndex = prevThumbsIndex;
                        }

                        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
                    } else {
                        newThumbsIndex = swiper.realIndex;
                        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
                    }

                    if (useOffset) {
                        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
                    }

                    if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
                        if (thumbsSwiper.params.centeredSlides) {
                            if (newThumbsIndex > currentThumbsIndex) {
                                newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
                            } else {
                                newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
                            }
                        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;
                        }

                        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
                    }
                }
            }

            on('beforeInit', () => {
                const {
                    thumbs
                } = swiper.params;
                if (!thumbs || !thumbs.swiper) return;
                init();
                update(true);
            });
            on('slideChange update resize observerUpdate', () => {
                update();
            });
            on('setTransition', (_s, duration) => {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper || thumbsSwiper.destroyed) return;
                thumbsSwiper.setTransition(duration);
            });
            on('beforeDestroy', () => {
                const thumbsSwiper = swiper.thumbs.swiper;
                if (!thumbsSwiper || thumbsSwiper.destroyed) return;

                if (swiperCreated) {
                    thumbsSwiper.destroy();
                }
            });
            Object.assign(swiper.thumbs, {
                init,
                update
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/virtual/virtual.js":
    /*!********************************************************!*\
  !*** ./node_modules/swiper/modules/virtual/virtual.js ***!
  \********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Virtual)
            /* harmony export */ });
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");


        function Virtual({
                             swiper,
                             extendParams,
                             on,
                             emit
                         }) {
            extendParams({
                virtual: {
                    enabled: false,
                    slides: [],
                    cache: true,
                    renderSlide: null,
                    renderExternal: null,
                    renderExternalUpdate: true,
                    addSlidesBefore: 0,
                    addSlidesAfter: 0
                }
            });
            let cssModeTimeout;
            swiper.virtual = {
                cache: {},
                from: undefined,
                to: undefined,
                slides: [],
                offset: 0,
                slidesGrid: []
            };

            function renderSlide(slide, index) {
                const params = swiper.params.virtual;

                if (params.cache && swiper.virtual.cache[index]) {
                    return swiper.virtual.cache[index];
                }

                const $slideEl = params.renderSlide ? (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params.renderSlide.call(swiper, slide, index)) : (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(`<div class="${swiper.params.slideClass}" data-swiper-slide-index="${index}">${slide}</div>`);
                if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
                if (params.cache) swiper.virtual.cache[index] = $slideEl;
                return $slideEl;
            }

            function update(force) {
                const {
                    slidesPerView,
                    slidesPerGroup,
                    centeredSlides
                } = swiper.params;
                const {
                    addSlidesBefore,
                    addSlidesAfter
                } = swiper.params.virtual;
                const {
                    from: previousFrom,
                    to: previousTo,
                    slides,
                    slidesGrid: previousSlidesGrid,
                    offset: previousOffset
                } = swiper.virtual;

                if (!swiper.params.cssMode) {
                    swiper.updateActiveIndex();
                }

                const activeIndex = swiper.activeIndex || 0;
                let offsetProp;
                if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
                let slidesAfter;
                let slidesBefore;

                if (centeredSlides) {
                    slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
                    slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
                } else {
                    slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
                    slidesBefore = slidesPerGroup + addSlidesBefore;
                }

                const from = Math.max((activeIndex || 0) - slidesBefore, 0);
                const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
                const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
                Object.assign(swiper.virtual, {
                    from,
                    to,
                    offset,
                    slidesGrid: swiper.slidesGrid
                });

                function onRendered() {
                    swiper.updateSlides();
                    swiper.updateProgress();
                    swiper.updateSlidesClasses();

                    if (swiper.lazy && swiper.params.lazy.enabled) {
                        swiper.lazy.load();
                    }

                    emit('virtualUpdate');
                }

                if (previousFrom === from && previousTo === to && !force) {
                    if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
                        swiper.slides.css(offsetProp, `${offset}px`);
                    }

                    swiper.updateProgress();
                    emit('virtualUpdate');
                    return;
                }

                if (swiper.params.virtual.renderExternal) {
                    swiper.params.virtual.renderExternal.call(swiper, {
                        offset,
                        from,
                        to,
                        slides: function getSlides() {
                            const slidesToRender = [];

                            for (let i = from; i <= to; i += 1) {
                                slidesToRender.push(slides[i]);
                            }

                            return slidesToRender;
                        }()
                    });

                    if (swiper.params.virtual.renderExternalUpdate) {
                        onRendered();
                    } else {
                        emit('virtualUpdate');
                    }

                    return;
                }

                const prependIndexes = [];
                const appendIndexes = [];

                if (force) {
                    swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();
                } else {
                    for (let i = previousFrom; i <= previousTo; i += 1) {
                        if (i < from || i > to) {
                            swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index="${i}"]`).remove();
                        }
                    }
                }

                for (let i = 0; i < slides.length; i += 1) {
                    if (i >= from && i <= to) {
                        if (typeof previousTo === 'undefined' || force) {
                            appendIndexes.push(i);
                        } else {
                            if (i > previousTo) appendIndexes.push(i);
                            if (i < previousFrom) prependIndexes.push(i);
                        }
                    }
                }

                appendIndexes.forEach(index => {
                    swiper.$wrapperEl.append(renderSlide(slides[index], index));
                });
                prependIndexes.sort((a, b) => b - a).forEach(index => {
                    swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
                });
                swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);
                onRendered();
            }

            function appendSlide(slides) {
                if (typeof slides === 'object' && 'length' in slides) {
                    for (let i = 0; i < slides.length; i += 1) {
                        if (slides[i]) swiper.virtual.slides.push(slides[i]);
                    }
                } else {
                    swiper.virtual.slides.push(slides);
                }

                update(true);
            }

            function prependSlide(slides) {
                const activeIndex = swiper.activeIndex;
                let newActiveIndex = activeIndex + 1;
                let numberOfNewSlides = 1;

                if (Array.isArray(slides)) {
                    for (let i = 0; i < slides.length; i += 1) {
                        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
                    }

                    newActiveIndex = activeIndex + slides.length;
                    numberOfNewSlides = slides.length;
                } else {
                    swiper.virtual.slides.unshift(slides);
                }

                if (swiper.params.virtual.cache) {
                    const cache = swiper.virtual.cache;
                    const newCache = {};
                    Object.keys(cache).forEach(cachedIndex => {
                        const $cachedEl = cache[cachedIndex];
                        const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');

                        if (cachedElIndex) {
                            $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);
                        }

                        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;
                    });
                    swiper.virtual.cache = newCache;
                }

                update(true);
                swiper.slideTo(newActiveIndex, 0);
            }

            function removeSlide(slidesIndexes) {
                if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
                let activeIndex = swiper.activeIndex;

                if (Array.isArray(slidesIndexes)) {
                    for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
                        swiper.virtual.slides.splice(slidesIndexes[i], 1);

                        if (swiper.params.virtual.cache) {
                            delete swiper.virtual.cache[slidesIndexes[i]];
                        }

                        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
                        activeIndex = Math.max(activeIndex, 0);
                    }
                } else {
                    swiper.virtual.slides.splice(slidesIndexes, 1);

                    if (swiper.params.virtual.cache) {
                        delete swiper.virtual.cache[slidesIndexes];
                    }

                    if (slidesIndexes < activeIndex) activeIndex -= 1;
                    activeIndex = Math.max(activeIndex, 0);
                }

                update(true);
                swiper.slideTo(activeIndex, 0);
            }

            function removeAllSlides() {
                swiper.virtual.slides = [];

                if (swiper.params.virtual.cache) {
                    swiper.virtual.cache = {};
                }

                update(true);
                swiper.slideTo(0, 0);
            }

            on('beforeInit', () => {
                if (!swiper.params.virtual.enabled) return;
                swiper.virtual.slides = swiper.params.virtual.slides;
                swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);
                swiper.params.watchSlidesProgress = true;
                swiper.originalParams.watchSlidesProgress = true;

                if (!swiper.params.initialSlide) {
                    update();
                }
            });
            on('setTranslate', () => {
                if (!swiper.params.virtual.enabled) return;

                if (swiper.params.cssMode && !swiper._immediateVirtual) {
                    clearTimeout(cssModeTimeout);
                    cssModeTimeout = setTimeout(() => {
                        update();
                    }, 100);
                } else {
                    update();
                }
            });
            on('init update resize', () => {
                if (!swiper.params.virtual.enabled) return;

                if (swiper.params.cssMode) {
                    (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_1__.setCSSProperty)(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);
                }
            });
            Object.assign(swiper.virtual, {
                appendSlide,
                prependSlide,
                removeSlide,
                removeAllSlides,
                update
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/modules/zoom/zoom.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/modules/zoom/zoom.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ Zoom)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _shared_dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/dom.js */ "./node_modules/swiper/shared/dom.js");
        /* harmony import */ var _shared_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/utils.js */ "./node_modules/swiper/shared/utils.js");



        function Zoom({
                          swiper,
                          extendParams,
                          on,
                          emit
                      }) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            extendParams({
                zoom: {
                    enabled: false,
                    maxRatio: 3,
                    minRatio: 1,
                    toggle: true,
                    containerClass: 'swiper-zoom-container',
                    zoomedSlideClass: 'swiper-slide-zoomed'
                }
            });
            swiper.zoom = {
                enabled: false
            };
            let currentScale = 1;
            let isScaling = false;
            let gesturesEnabled;
            let fakeGestureTouched;
            let fakeGestureMoved;
            const gesture = {
                $slideEl: undefined,
                slideWidth: undefined,
                slideHeight: undefined,
                $imageEl: undefined,
                $imageWrapEl: undefined,
                maxRatio: 3
            };
            const image = {
                isTouched: undefined,
                isMoved: undefined,
                currentX: undefined,
                currentY: undefined,
                minX: undefined,
                minY: undefined,
                maxX: undefined,
                maxY: undefined,
                width: undefined,
                height: undefined,
                startX: undefined,
                startY: undefined,
                touchesStart: {},
                touchesCurrent: {}
            };
            const velocity = {
                x: undefined,
                y: undefined,
                prevPositionX: undefined,
                prevPositionY: undefined,
                prevTime: undefined
            };
            let scale = 1;
            Object.defineProperty(swiper.zoom, 'scale', {
                get() {
                    return scale;
                },

                set(value) {
                    if (scale !== value) {
                        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : undefined;
                        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : undefined;
                        emit('zoomChange', value, imageEl, slideEl);
                    }

                    scale = value;
                }

            });

            function getDistanceBetweenTouches(e) {
                if (e.targetTouches.length < 2) return 1;
                const x1 = e.targetTouches[0].pageX;
                const y1 = e.targetTouches[0].pageY;
                const x2 = e.targetTouches[1].pageX;
                const y2 = e.targetTouches[1].pageY;
                const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
                return distance;
            } // Events


            function onGestureStart(e) {
                const support = swiper.support;
                const params = swiper.params.zoom;
                fakeGestureTouched = false;
                fakeGestureMoved = false;

                if (!support.gestures) {
                    if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {
                        return;
                    }

                    fakeGestureTouched = true;
                    gesture.scaleStart = getDistanceBetweenTouches(e);
                }

                if (!gesture.$slideEl || !gesture.$slideEl.length) {
                    gesture.$slideEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).closest(`.${swiper.params.slideClass}`);
                    if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                    gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);
                    gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
                    gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

                    if (gesture.$imageWrapEl.length === 0) {
                        gesture.$imageEl = undefined;
                        return;
                    }
                }

                if (gesture.$imageEl) {
                    gesture.$imageEl.transition(0);
                }

                isScaling = true;
            }

            function onGestureChange(e) {
                const support = swiper.support;
                const params = swiper.params.zoom;
                const zoom = swiper.zoom;

                if (!support.gestures) {
                    if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {
                        return;
                    }

                    fakeGestureMoved = true;
                    gesture.scaleMove = getDistanceBetweenTouches(e);
                }

                if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
                    if (e.type === 'gesturechange') onGestureStart(e);
                    return;
                }

                if (support.gestures) {
                    zoom.scale = e.scale * currentScale;
                } else {
                    zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;
                }

                if (zoom.scale > gesture.maxRatio) {
                    zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;
                }

                if (zoom.scale < params.minRatio) {
                    zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;
                }

                gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);
            }

            function onGestureEnd(e) {
                const device = swiper.device;
                const support = swiper.support;
                const params = swiper.params.zoom;
                const zoom = swiper.zoom;

                if (!support.gestures) {
                    if (!fakeGestureTouched || !fakeGestureMoved) {
                        return;
                    }

                    if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {
                        return;
                    }

                    fakeGestureTouched = false;
                    fakeGestureMoved = false;
                }

                if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
                zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
                gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
                currentScale = zoom.scale;
                isScaling = false;
                if (zoom.scale === 1) gesture.$slideEl = undefined;
            }

            function onTouchStart(e) {
                const device = swiper.device;
                if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
                if (image.isTouched) return;
                if (device.android && e.cancelable) e.preventDefault();
                image.isTouched = true;
                image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
                image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
            }

            function onTouchMove(e) {
                const zoom = swiper.zoom;
                if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
                swiper.allowClick = false;
                if (!image.isTouched || !gesture.$slideEl) return;

                if (!image.isMoved) {
                    image.width = gesture.$imageEl[0].offsetWidth;
                    image.height = gesture.$imageEl[0].offsetHeight;
                    image.startX = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTranslate)(gesture.$imageWrapEl[0], 'x') || 0;
                    image.startY = (0,_shared_utils_js__WEBPACK_IMPORTED_MODULE_2__.getTranslate)(gesture.$imageWrapEl[0], 'y') || 0;
                    gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
                    gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
                    gesture.$imageWrapEl.transition(0);
                } // Define if we need image drag


                const scaledWidth = image.width * zoom.scale;
                const scaledHeight = image.height * zoom.scale;
                if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;
                image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
                image.maxX = -image.minX;
                image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
                image.maxY = -image.minY;
                image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
                image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

                if (!image.isMoved && !isScaling) {
                    if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
                        image.isTouched = false;
                        return;
                    }

                    if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
                        image.isTouched = false;
                        return;
                    }
                }

                if (e.cancelable) {
                    e.preventDefault();
                }

                e.stopPropagation();
                image.isMoved = true;
                image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;
                image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;

                if (image.currentX < image.minX) {
                    image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;
                }

                if (image.currentX > image.maxX) {
                    image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;
                }

                if (image.currentY < image.minY) {
                    image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;
                }

                if (image.currentY > image.maxY) {
                    image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;
                } // Velocity


                if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
                if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
                if (!velocity.prevTime) velocity.prevTime = Date.now();
                velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
                velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
                if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
                if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
                velocity.prevPositionX = image.touchesCurrent.x;
                velocity.prevPositionY = image.touchesCurrent.y;
                velocity.prevTime = Date.now();
                gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
            }

            function onTouchEnd() {
                const zoom = swiper.zoom;
                if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

                if (!image.isTouched || !image.isMoved) {
                    image.isTouched = false;
                    image.isMoved = false;
                    return;
                }

                image.isTouched = false;
                image.isMoved = false;
                let momentumDurationX = 300;
                let momentumDurationY = 300;
                const momentumDistanceX = velocity.x * momentumDurationX;
                const newPositionX = image.currentX + momentumDistanceX;
                const momentumDistanceY = velocity.y * momentumDurationY;
                const newPositionY = image.currentY + momentumDistanceY; // Fix duration

                if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
                if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
                const momentumDuration = Math.max(momentumDurationX, momentumDurationY);
                image.currentX = newPositionX;
                image.currentY = newPositionY; // Define if we need image drag

                const scaledWidth = image.width * zoom.scale;
                const scaledHeight = image.height * zoom.scale;
                image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
                image.maxX = -image.minX;
                image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
                image.maxY = -image.minY;
                image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
                image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
                gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
            }

            function onTransitionEnd() {
                const zoom = swiper.zoom;

                if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
                    if (gesture.$imageEl) {
                        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
                    }

                    if (gesture.$imageWrapEl) {
                        gesture.$imageWrapEl.transform('translate3d(0,0,0)');
                    }

                    zoom.scale = 1;
                    currentScale = 1;
                    gesture.$slideEl = undefined;
                    gesture.$imageEl = undefined;
                    gesture.$imageWrapEl = undefined;
                }
            }

            function zoomIn(e) {
                const zoom = swiper.zoom;
                const params = swiper.params.zoom;

                if (!gesture.$slideEl) {
                    if (e && e.target) {
                        gesture.$slideEl = (0,_shared_dom_js__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).closest(`.${swiper.params.slideClass}`);
                    }

                    if (!gesture.$slideEl) {
                        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
                            gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);
                        } else {
                            gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                        }
                    }

                    gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);
                    gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
                }

                if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;

                if (swiper.params.cssMode) {
                    swiper.wrapperEl.style.overflow = 'hidden';
                    swiper.wrapperEl.style.touchAction = 'none';
                }

                gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);
                let touchX;
                let touchY;
                let offsetX;
                let offsetY;
                let diffX;
                let diffY;
                let translateX;
                let translateY;
                let imageWidth;
                let imageHeight;
                let scaledWidth;
                let scaledHeight;
                let translateMinX;
                let translateMinY;
                let translateMaxX;
                let translateMaxY;
                let slideWidth;
                let slideHeight;

                if (typeof image.touchesStart.x === 'undefined' && e) {
                    touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
                    touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
                } else {
                    touchX = image.touchesStart.x;
                    touchY = image.touchesStart.y;
                }

                zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
                currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

                if (e) {
                    slideWidth = gesture.$slideEl[0].offsetWidth;
                    slideHeight = gesture.$slideEl[0].offsetHeight;
                    offsetX = gesture.$slideEl.offset().left + window.scrollX;
                    offsetY = gesture.$slideEl.offset().top + window.scrollY;
                    diffX = offsetX + slideWidth / 2 - touchX;
                    diffY = offsetY + slideHeight / 2 - touchY;
                    imageWidth = gesture.$imageEl[0].offsetWidth;
                    imageHeight = gesture.$imageEl[0].offsetHeight;
                    scaledWidth = imageWidth * zoom.scale;
                    scaledHeight = imageHeight * zoom.scale;
                    translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
                    translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
                    translateMaxX = -translateMinX;
                    translateMaxY = -translateMinY;
                    translateX = diffX * zoom.scale;
                    translateY = diffY * zoom.scale;

                    if (translateX < translateMinX) {
                        translateX = translateMinX;
                    }

                    if (translateX > translateMaxX) {
                        translateX = translateMaxX;
                    }

                    if (translateY < translateMinY) {
                        translateY = translateMinY;
                    }

                    if (translateY > translateMaxY) {
                        translateY = translateMaxY;
                    }
                } else {
                    translateX = 0;
                    translateY = 0;
                }

                gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);
                gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
            }

            function zoomOut() {
                const zoom = swiper.zoom;
                const params = swiper.params.zoom;

                if (!gesture.$slideEl) {
                    if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
                        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);
                    } else {
                        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
                    }

                    gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find('picture, img, svg, canvas, .swiper-zoom-target').eq(0);
                    gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
                }

                if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;

                if (swiper.params.cssMode) {
                    swiper.wrapperEl.style.overflow = '';
                    swiper.wrapperEl.style.touchAction = '';
                }

                zoom.scale = 1;
                currentScale = 1;
                gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
                gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
                gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);
                gesture.$slideEl = undefined;
            } // Toggle Zoom


            function zoomToggle(e) {
                const zoom = swiper.zoom;

                if (zoom.scale && zoom.scale !== 1) {
                    // Zoom Out
                    zoomOut();
                } else {
                    // Zoom In
                    zoomIn(e);
                }
            }

            function getListeners() {
                const support = swiper.support;
                const passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {
                    passive: true,
                    capture: false
                } : false;
                const activeListenerWithCapture = support.passiveListener ? {
                    passive: false,
                    capture: true
                } : true;
                return {
                    passiveListener,
                    activeListenerWithCapture
                };
            }

            function getSlideSelector() {
                return `.${swiper.params.slideClass}`;
            }

            function toggleGestures(method) {
                const {
                    passiveListener
                } = getListeners();
                const slideSelector = getSlideSelector();
                swiper.$wrapperEl[method]('gesturestart', slideSelector, onGestureStart, passiveListener);
                swiper.$wrapperEl[method]('gesturechange', slideSelector, onGestureChange, passiveListener);
                swiper.$wrapperEl[method]('gestureend', slideSelector, onGestureEnd, passiveListener);
            }

            function enableGestures() {
                if (gesturesEnabled) return;
                gesturesEnabled = true;
                toggleGestures('on');
            }

            function disableGestures() {
                if (!gesturesEnabled) return;
                gesturesEnabled = false;
                toggleGestures('off');
            } // Attach/Detach Events


            function enable() {
                const zoom = swiper.zoom;
                if (zoom.enabled) return;
                zoom.enabled = true;
                const support = swiper.support;
                const {
                    passiveListener,
                    activeListenerWithCapture
                } = getListeners();
                const slideSelector = getSlideSelector(); // Scale image

                if (support.gestures) {
                    swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);
                    swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);
                } else if (swiper.touchEvents.start === 'touchstart') {
                    swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);
                    swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);
                    swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);

                    if (swiper.touchEvents.cancel) {
                        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);
                    }
                } // Move image


                swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);
            }

            function disable() {
                const zoom = swiper.zoom;
                if (!zoom.enabled) return;
                const support = swiper.support;
                zoom.enabled = false;
                const {
                    passiveListener,
                    activeListenerWithCapture
                } = getListeners();
                const slideSelector = getSlideSelector(); // Scale image

                if (support.gestures) {
                    swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);
                    swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);
                } else if (swiper.touchEvents.start === 'touchstart') {
                    swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);
                    swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);
                    swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);

                    if (swiper.touchEvents.cancel) {
                        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);
                    }
                } // Move image


                swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove, activeListenerWithCapture);
            }

            on('init', () => {
                if (swiper.params.zoom.enabled) {
                    enable();
                }
            });
            on('destroy', () => {
                disable();
            });
            on('touchStart', (_s, e) => {
                if (!swiper.zoom.enabled) return;
                onTouchStart(e);
            });
            on('touchEnd', (_s, e) => {
                if (!swiper.zoom.enabled) return;
                onTouchEnd(e);
            });
            on('doubleTap', (_s, e) => {
                if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
                    zoomToggle(e);
                }
            });
            on('transitionEnd', () => {
                if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
                    onTransitionEnd();
                }
            });
            on('slideChange', () => {
                if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
                    onTransitionEnd();
                }
            });
            Object.assign(swiper.zoom, {
                enable,
                disable,
                in: zoomIn,
                out: zoomOut,
                toggle: zoomToggle
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/classes-to-selector.js":
    /*!***********************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.js ***!
  \***********************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ classesToSelector)
            /* harmony export */ });
        function classesToSelector(classes = '') {
            return `.${classes.trim().replace(/([\.:!\/])/g, '\\$1') // eslint-disable-line
                .replace(/ /g, '.')}`;
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/create-element-if-not-defined.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ createElementIfNotDefined)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        function createElementIfNotDefined(swiper, originalParams, params, checkProps) {
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();

            if (swiper.params.createElements) {
                Object.keys(checkProps).forEach(key => {
                    if (!params[key] && params.auto === true) {
                        let element = swiper.$el.children(`.${checkProps[key]}`)[0];

                        if (!element) {
                            element = document.createElement('div');
                            element.className = checkProps[key];
                            swiper.$el.append(element);
                        }

                        params[key] = element;
                        originalParams[key] = element;
                    }
                });
            }

            return params;
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/create-shadow.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ createShadow)
            /* harmony export */ });
        /* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "./node_modules/swiper/shared/dom.js");

        function createShadow(params, $slideEl, side) {
            const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;
            const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;
            let $shadowEl = $shadowContainer.children(`.${shadowClass}`);

            if (!$shadowEl.length) {
                $shadowEl = (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__["default"])(`<div class="swiper-slide-shadow${side ? `-${side}` : ''}"></div>`);
                $shadowContainer.append($shadowEl);
            }

            return $shadowEl;
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/dom.js":
    /*!*******************************************!*\
  !*** ./node_modules/swiper/shared/dom.js ***!
  \*******************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
            /* harmony export */ });
        /* harmony import */ var dom7__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom7 */ "./node_modules/dom7/dom7.esm.js");

        const Methods = {
            addClass: dom7__WEBPACK_IMPORTED_MODULE_0__.addClass,
            removeClass: dom7__WEBPACK_IMPORTED_MODULE_0__.removeClass,
            hasClass: dom7__WEBPACK_IMPORTED_MODULE_0__.hasClass,
            toggleClass: dom7__WEBPACK_IMPORTED_MODULE_0__.toggleClass,
            attr: dom7__WEBPACK_IMPORTED_MODULE_0__.attr,
            removeAttr: dom7__WEBPACK_IMPORTED_MODULE_0__.removeAttr,
            transform: dom7__WEBPACK_IMPORTED_MODULE_0__.transform,
            transition: dom7__WEBPACK_IMPORTED_MODULE_0__.transition,
            on: dom7__WEBPACK_IMPORTED_MODULE_0__.on,
            off: dom7__WEBPACK_IMPORTED_MODULE_0__.off,
            trigger: dom7__WEBPACK_IMPORTED_MODULE_0__.trigger,
            transitionEnd: dom7__WEBPACK_IMPORTED_MODULE_0__.transitionEnd,
            outerWidth: dom7__WEBPACK_IMPORTED_MODULE_0__.outerWidth,
            outerHeight: dom7__WEBPACK_IMPORTED_MODULE_0__.outerHeight,
            styles: dom7__WEBPACK_IMPORTED_MODULE_0__.styles,
            offset: dom7__WEBPACK_IMPORTED_MODULE_0__.offset,
            css: dom7__WEBPACK_IMPORTED_MODULE_0__.css,
            each: dom7__WEBPACK_IMPORTED_MODULE_0__.each,
            html: dom7__WEBPACK_IMPORTED_MODULE_0__.html,
            text: dom7__WEBPACK_IMPORTED_MODULE_0__.text,
            is: dom7__WEBPACK_IMPORTED_MODULE_0__.is,
            index: dom7__WEBPACK_IMPORTED_MODULE_0__.index,
            eq: dom7__WEBPACK_IMPORTED_MODULE_0__.eq,
            append: dom7__WEBPACK_IMPORTED_MODULE_0__.append,
            prepend: dom7__WEBPACK_IMPORTED_MODULE_0__.prepend,
            next: dom7__WEBPACK_IMPORTED_MODULE_0__.next,
            nextAll: dom7__WEBPACK_IMPORTED_MODULE_0__.nextAll,
            prev: dom7__WEBPACK_IMPORTED_MODULE_0__.prev,
            prevAll: dom7__WEBPACK_IMPORTED_MODULE_0__.prevAll,
            parent: dom7__WEBPACK_IMPORTED_MODULE_0__.parent,
            parents: dom7__WEBPACK_IMPORTED_MODULE_0__.parents,
            closest: dom7__WEBPACK_IMPORTED_MODULE_0__.closest,
            find: dom7__WEBPACK_IMPORTED_MODULE_0__.find,
            children: dom7__WEBPACK_IMPORTED_MODULE_0__.children,
            filter: dom7__WEBPACK_IMPORTED_MODULE_0__.filter,
            remove: dom7__WEBPACK_IMPORTED_MODULE_0__.remove
        };
        Object.keys(Methods).forEach(methodName => {
            Object.defineProperty(dom7__WEBPACK_IMPORTED_MODULE_0__.$.fn, methodName, {
                value: Methods[methodName],
                writable: true
            });
        });
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dom7__WEBPACK_IMPORTED_MODULE_0__.$);

        /***/ }),

    /***/ "./node_modules/swiper/shared/effect-init.js":
    /*!***************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ effectInit)
            /* harmony export */ });
        function effectInit(params) {
            const {
                effect,
                swiper,
                on,
                setTranslate,
                setTransition,
                overwriteParams,
                perspective,
                recreateShadows,
                getEffectParams
            } = params;
            on('beforeInit', () => {
                if (swiper.params.effect !== effect) return;
                swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);

                if (perspective && perspective()) {
                    swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
                }

                const overwriteParamsResult = overwriteParams ? overwriteParams() : {};
                Object.assign(swiper.params, overwriteParamsResult);
                Object.assign(swiper.originalParams, overwriteParamsResult);
            });
            on('setTranslate', () => {
                if (swiper.params.effect !== effect) return;
                setTranslate();
            });
            on('setTransition', (_s, duration) => {
                if (swiper.params.effect !== effect) return;
                setTransition(duration);
            });
            on('transitionEnd', () => {
                if (swiper.params.effect !== effect) return;

                if (recreateShadows) {
                    if (!getEffectParams || !getEffectParams().slideShadows) return; // remove shadows

                    swiper.slides.each(slideEl => {
                        const $slideEl = swiper.$(slideEl);
                        $slideEl.find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').remove();
                    }); // create new one

                    recreateShadows();
                }
            });
            let requireUpdateOnVirtual;
            on('virtualUpdate', () => {
                if (swiper.params.effect !== effect) return;

                if (!swiper.slides.length) {
                    requireUpdateOnVirtual = true;
                }

                requestAnimationFrame(() => {
                    if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {
                        setTranslate();
                        requireUpdateOnVirtual = false;
                    }
                });
            });
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/effect-target.js":
    /*!*****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.js ***!
  \*****************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ effectTarget)
            /* harmony export */ });
        function effectTarget(effectParams, $slideEl) {
            if (effectParams.transformEl) {
                return $slideEl.find(effectParams.transformEl).css({
                    'backface-visibility': 'hidden',
                    '-webkit-backface-visibility': 'hidden'
                });
            }

            return $slideEl;
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/effect-virtual-transition-end.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.js ***!
  \*********************************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "default": () => (/* binding */ effectVirtualTransitionEnd)
            /* harmony export */ });
        function effectVirtualTransitionEnd({
                                                swiper,
                                                duration,
                                                transformEl,
                                                allSlides
                                            }) {
            const {
                slides,
                activeIndex,
                $wrapperEl
            } = swiper;

            if (swiper.params.virtualTranslate && duration !== 0) {
                let eventTriggered = false;
                let $transitionEndTarget;

                if (allSlides) {
                    $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;
                } else {
                    $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);
                }

                $transitionEndTarget.transitionEnd(() => {
                    if (eventTriggered) return;
                    if (!swiper || swiper.destroyed) return;
                    eventTriggered = true;
                    swiper.animating = false;
                    const triggerEvents = ['webkitTransitionEnd', 'transitionend'];

                    for (let i = 0; i < triggerEvents.length; i += 1) {
                        $wrapperEl.trigger(triggerEvents[i]);
                    }
                });
            }
        }

        /***/ }),

    /***/ "./node_modules/swiper/shared/get-browser.js":
    /*!***************************************************!*\
  !*** ./node_modules/swiper/shared/get-browser.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "getBrowser": () => (/* binding */ getBrowser)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        let browser;

        function calcBrowser() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();

            function isSafari() {
                const ua = window.navigator.userAgent.toLowerCase();
                return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
            }

            return {
                isSafari: isSafari(),
                isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
            };
        }

        function getBrowser() {
            if (!browser) {
                browser = calcBrowser();
            }

            return browser;
        }



        /***/ }),

    /***/ "./node_modules/swiper/shared/get-device.js":
    /*!**************************************************!*\
  !*** ./node_modules/swiper/shared/get-device.js ***!
  \**************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "getDevice": () => (/* binding */ getDevice)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");
        /* harmony import */ var _get_support_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-support.js */ "./node_modules/swiper/shared/get-support.js");


        let deviceCached;

        function calcDevice({
                                userAgent
                            } = {}) {
            const support = (0,_get_support_js__WEBPACK_IMPORTED_MODULE_1__.getSupport)();
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const platform = window.navigator.platform;
            const ua = userAgent || window.navigator.userAgent;
            const device = {
                ios: false,
                android: false
            };
            const screenWidth = window.screen.width;
            const screenHeight = window.screen.height;
            const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

            let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
            const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
            const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
            const windows = platform === 'Win32';
            let macos = platform === 'MacIntel'; // iPadOs 13 fix

            const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

            if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {
                ipad = ua.match(/(Version)\/([\d.]+)/);
                if (!ipad) ipad = [0, 1, '13_0_0'];
                macos = false;
            } // Android


            if (android && !windows) {
                device.os = 'android';
                device.android = true;
            }

            if (ipad || iphone || ipod) {
                device.os = 'ios';
                device.ios = true;
            } // Export object


            return device;
        }

        function getDevice(overrides = {}) {
            if (!deviceCached) {
                deviceCached = calcDevice(overrides);
            }

            return deviceCached;
        }



        /***/ }),

    /***/ "./node_modules/swiper/shared/get-support.js":
    /*!***************************************************!*\
  !*** ./node_modules/swiper/shared/get-support.js ***!
  \***************************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "getSupport": () => (/* binding */ getSupport)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");

        let support;

        function calcSupport() {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();
            return {
                smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,
                touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
                passiveListener: function checkPassiveListener() {
                    let supportsPassive = false;

                    try {
                        const opts = Object.defineProperty({}, 'passive', {
                            // eslint-disable-next-line
                            get() {
                                supportsPassive = true;
                            }

                        });
                        window.addEventListener('testPassiveListener', null, opts);
                    } catch (e) {// No support
                    }

                    return supportsPassive;
                }(),
                gestures: function checkGestures() {
                    return 'ongesturestart' in window;
                }()
            };
        }

        function getSupport() {
            if (!support) {
                support = calcSupport();
            }

            return support;
        }



        /***/ }),

    /***/ "./node_modules/swiper/shared/utils.js":
    /*!*********************************************!*\
  !*** ./node_modules/swiper/shared/utils.js ***!
  \*********************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "animateCSSModeScroll": () => (/* binding */ animateCSSModeScroll),
            /* harmony export */   "deleteProps": () => (/* binding */ deleteProps),
            /* harmony export */   "extend": () => (/* binding */ extend),
            /* harmony export */   "getComputedStyle": () => (/* binding */ getComputedStyle),
            /* harmony export */   "getTranslate": () => (/* binding */ getTranslate),
            /* harmony export */   "isObject": () => (/* binding */ isObject),
            /* harmony export */   "nextTick": () => (/* binding */ nextTick),
            /* harmony export */   "now": () => (/* binding */ now),
            /* harmony export */   "setCSSProperty": () => (/* binding */ setCSSProperty)
            /* harmony export */ });
        /* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/ssr-window.esm.js");


        function deleteProps(obj) {
            const object = obj;
            Object.keys(object).forEach(key => {
                try {
                    object[key] = null;
                } catch (e) {// no getter for object
                }

                try {
                    delete object[key];
                } catch (e) {// something got wrong
                }
            });
        }

        function nextTick(callback, delay = 0) {
            return setTimeout(callback, delay);
        }

        function now() {
            return Date.now();
        }

        function getComputedStyle(el) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let style;

            if (window.getComputedStyle) {
                style = window.getComputedStyle(el, null);
            }

            if (!style && el.currentStyle) {
                style = el.currentStyle;
            }

            if (!style) {
                style = el.style;
            }

            return style;
        }

        function getTranslate(el, axis = 'x') {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            let matrix;
            let curTransform;
            let transformMatrix;
            const curStyle = getComputedStyle(el, null);

            if (window.WebKitCSSMatrix) {
                curTransform = curStyle.transform || curStyle.webkitTransform;

                if (curTransform.split(',').length > 6) {
                    curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');
                } // Some old versions of Webkit choke when 'none' is passed; pass
                // empty string instead in this case


                transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
            } else {
                transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
                matrix = transformMatrix.toString().split(',');
            }

            if (axis === 'x') {
                // Latest Chrome and webkits Fix
                if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
                else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
                else curTransform = parseFloat(matrix[4]);
            }

            if (axis === 'y') {
                // Latest Chrome and webkits Fix
                if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
                else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
                else curTransform = parseFloat(matrix[5]);
            }

            return curTransform || 0;
        }

        function isObject(o) {
            return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
        }

        function isNode(node) {
            // eslint-disable-next-line
            if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {
                return node instanceof HTMLElement;
            }

            return node && (node.nodeType === 1 || node.nodeType === 11);
        }

        function extend(...args) {
            const to = Object(args[0]);
            const noExtend = ['__proto__', 'constructor', 'prototype'];

            for (let i = 1; i < args.length; i += 1) {
                const nextSource = args[i];

                if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {
                    const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);

                    for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
                        const nextKey = keysArray[nextIndex];
                        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

                        if (desc !== undefined && desc.enumerable) {
                            if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                                if (nextSource[nextKey].__swiper__) {
                                    to[nextKey] = nextSource[nextKey];
                                } else {
                                    extend(to[nextKey], nextSource[nextKey]);
                                }
                            } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
                                to[nextKey] = {};

                                if (nextSource[nextKey].__swiper__) {
                                    to[nextKey] = nextSource[nextKey];
                                } else {
                                    extend(to[nextKey], nextSource[nextKey]);
                                }
                            } else {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                }
            }

            return to;
        }

        function setCSSProperty(el, varName, varValue) {
            el.style.setProperty(varName, varValue);
        }

        function animateCSSModeScroll({
                                          swiper,
                                          targetPosition,
                                          side
                                      }) {
            const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();
            const startPosition = -swiper.translate;
            let startTime = null;
            let time;
            const duration = swiper.params.speed;
            swiper.wrapperEl.style.scrollSnapType = 'none';
            window.cancelAnimationFrame(swiper.cssModeFrameID);
            const dir = targetPosition > startPosition ? 'next' : 'prev';

            const isOutOfBound = (current, target) => {
                return dir === 'next' && current >= target || dir === 'prev' && current <= target;
            };

            const animate = () => {
                time = new Date().getTime();

                if (startTime === null) {
                    startTime = time;
                }

                const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
                const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
                let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);

                if (isOutOfBound(currentPosition, targetPosition)) {
                    currentPosition = targetPosition;
                }

                swiper.wrapperEl.scrollTo({
                    [side]: currentPosition
                });

                if (isOutOfBound(currentPosition, targetPosition)) {
                    swiper.wrapperEl.style.overflow = 'hidden';
                    swiper.wrapperEl.style.scrollSnapType = '';
                    setTimeout(() => {
                        swiper.wrapperEl.style.overflow = '';
                        swiper.wrapperEl.scrollTo({
                            [side]: currentPosition
                        });
                    });
                    window.cancelAnimationFrame(swiper.cssModeFrameID);
                    return;
                }

                swiper.cssModeFrameID = window.requestAnimationFrame(animate);
            };

            animate();
        }



        /***/ }),

    /***/ "./node_modules/swiper/swiper.esm.js":
    /*!*******************************************!*\
  !*** ./node_modules/swiper/swiper.esm.js ***!
  \*******************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "A11y": () => (/* reexport safe */ _modules_a11y_a11y_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
            /* harmony export */   "Autoplay": () => (/* reexport safe */ _modules_autoplay_autoplay_js__WEBPACK_IMPORTED_MODULE_14__["default"]),
            /* harmony export */   "Controller": () => (/* reexport safe */ _modules_controller_controller_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
            /* harmony export */   "EffectCards": () => (/* reexport safe */ _modules_effect_cards_effect_cards_js__WEBPACK_IMPORTED_MODULE_24__["default"]),
            /* harmony export */   "EffectCoverflow": () => (/* reexport safe */ _modules_effect_coverflow_effect_coverflow_js__WEBPACK_IMPORTED_MODULE_22__["default"]),
            /* harmony export */   "EffectCreative": () => (/* reexport safe */ _modules_effect_creative_effect_creative_js__WEBPACK_IMPORTED_MODULE_23__["default"]),
            /* harmony export */   "EffectCube": () => (/* reexport safe */ _modules_effect_cube_effect_cube_js__WEBPACK_IMPORTED_MODULE_20__["default"]),
            /* harmony export */   "EffectFade": () => (/* reexport safe */ _modules_effect_fade_effect_fade_js__WEBPACK_IMPORTED_MODULE_19__["default"]),
            /* harmony export */   "EffectFlip": () => (/* reexport safe */ _modules_effect_flip_effect_flip_js__WEBPACK_IMPORTED_MODULE_21__["default"]),
            /* harmony export */   "FreeMode": () => (/* reexport safe */ _modules_free_mode_free_mode_js__WEBPACK_IMPORTED_MODULE_16__["default"]),
            /* harmony export */   "Grid": () => (/* reexport safe */ _modules_grid_grid_js__WEBPACK_IMPORTED_MODULE_17__["default"]),
            /* harmony export */   "HashNavigation": () => (/* reexport safe */ _modules_hash_navigation_hash_navigation_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
            /* harmony export */   "History": () => (/* reexport safe */ _modules_history_history_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
            /* harmony export */   "Keyboard": () => (/* reexport safe */ _modules_keyboard_keyboard_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
            /* harmony export */   "Lazy": () => (/* reexport safe */ _modules_lazy_lazy_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
            /* harmony export */   "Manipulation": () => (/* reexport safe */ _modules_manipulation_manipulation_js__WEBPACK_IMPORTED_MODULE_18__["default"]),
            /* harmony export */   "Mousewheel": () => (/* reexport safe */ _modules_mousewheel_mousewheel_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
            /* harmony export */   "Navigation": () => (/* reexport safe */ _modules_navigation_navigation_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
            /* harmony export */   "Pagination": () => (/* reexport safe */ _modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
            /* harmony export */   "Parallax": () => (/* reexport safe */ _modules_parallax_parallax_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
            /* harmony export */   "Scrollbar": () => (/* reexport safe */ _modules_scrollbar_scrollbar_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
            /* harmony export */   "Swiper": () => (/* reexport safe */ _core_core_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
            /* harmony export */   "Thumbs": () => (/* reexport safe */ _modules_thumbs_thumbs_js__WEBPACK_IMPORTED_MODULE_15__["default"]),
            /* harmony export */   "Virtual": () => (/* reexport safe */ _modules_virtual_virtual_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
            /* harmony export */   "Zoom": () => (/* reexport safe */ _modules_zoom_zoom_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
            /* harmony export */   "default": () => (/* reexport safe */ _core_core_js__WEBPACK_IMPORTED_MODULE_0__["default"])
            /* harmony export */ });
        /* harmony import */ var _core_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/core.js */ "./node_modules/swiper/core/core.js");
        /* harmony import */ var _modules_virtual_virtual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/virtual/virtual.js */ "./node_modules/swiper/modules/virtual/virtual.js");
        /* harmony import */ var _modules_keyboard_keyboard_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/keyboard/keyboard.js */ "./node_modules/swiper/modules/keyboard/keyboard.js");
        /* harmony import */ var _modules_mousewheel_mousewheel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/mousewheel/mousewheel.js */ "./node_modules/swiper/modules/mousewheel/mousewheel.js");
        /* harmony import */ var _modules_navigation_navigation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/navigation/navigation.js */ "./node_modules/swiper/modules/navigation/navigation.js");
        /* harmony import */ var _modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/pagination/pagination.js */ "./node_modules/swiper/modules/pagination/pagination.js");
        /* harmony import */ var _modules_scrollbar_scrollbar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/scrollbar/scrollbar.js */ "./node_modules/swiper/modules/scrollbar/scrollbar.js");
        /* harmony import */ var _modules_parallax_parallax_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/parallax/parallax.js */ "./node_modules/swiper/modules/parallax/parallax.js");
        /* harmony import */ var _modules_zoom_zoom_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/zoom/zoom.js */ "./node_modules/swiper/modules/zoom/zoom.js");
        /* harmony import */ var _modules_lazy_lazy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/lazy/lazy.js */ "./node_modules/swiper/modules/lazy/lazy.js");
        /* harmony import */ var _modules_controller_controller_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/controller/controller.js */ "./node_modules/swiper/modules/controller/controller.js");
        /* harmony import */ var _modules_a11y_a11y_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/a11y/a11y.js */ "./node_modules/swiper/modules/a11y/a11y.js");
        /* harmony import */ var _modules_history_history_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/history/history.js */ "./node_modules/swiper/modules/history/history.js");
        /* harmony import */ var _modules_hash_navigation_hash_navigation_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/hash-navigation/hash-navigation.js */ "./node_modules/swiper/modules/hash-navigation/hash-navigation.js");
        /* harmony import */ var _modules_autoplay_autoplay_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/autoplay/autoplay.js */ "./node_modules/swiper/modules/autoplay/autoplay.js");
        /* harmony import */ var _modules_thumbs_thumbs_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/thumbs/thumbs.js */ "./node_modules/swiper/modules/thumbs/thumbs.js");
        /* harmony import */ var _modules_free_mode_free_mode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modules/free-mode/free-mode.js */ "./node_modules/swiper/modules/free-mode/free-mode.js");
        /* harmony import */ var _modules_grid_grid_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modules/grid/grid.js */ "./node_modules/swiper/modules/grid/grid.js");
        /* harmony import */ var _modules_manipulation_manipulation_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/manipulation/manipulation.js */ "./node_modules/swiper/modules/manipulation/manipulation.js");
        /* harmony import */ var _modules_effect_fade_effect_fade_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./modules/effect-fade/effect-fade.js */ "./node_modules/swiper/modules/effect-fade/effect-fade.js");
        /* harmony import */ var _modules_effect_cube_effect_cube_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./modules/effect-cube/effect-cube.js */ "./node_modules/swiper/modules/effect-cube/effect-cube.js");
        /* harmony import */ var _modules_effect_flip_effect_flip_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./modules/effect-flip/effect-flip.js */ "./node_modules/swiper/modules/effect-flip/effect-flip.js");
        /* harmony import */ var _modules_effect_coverflow_effect_coverflow_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modules/effect-coverflow/effect-coverflow.js */ "./node_modules/swiper/modules/effect-coverflow/effect-coverflow.js");
        /* harmony import */ var _modules_effect_creative_effect_creative_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./modules/effect-creative/effect-creative.js */ "./node_modules/swiper/modules/effect-creative/effect-creative.js");
        /* harmony import */ var _modules_effect_cards_effect_cards_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./modules/effect-cards/effect-cards.js */ "./node_modules/swiper/modules/effect-cards/effect-cards.js");
        /**
         * Swiper 8.4.2
         * Most modern mobile touch slider and framework with hardware accelerated transitions
         * https://swiperjs.com
         *
         * Copyright 2014-2022 Vladimir Kharlampidi
         *
         * Released under the MIT License
         *
         * Released on: September 15, 2022
         */



























        /***/ }),

    /***/ "./node_modules/w3c-keyname/index.es.js":
    /*!**********************************************!*\
  !*** ./node_modules/w3c-keyname/index.es.js ***!
  \**********************************************/
    /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export */ __webpack_require__.d(__webpack_exports__, {
            /* harmony export */   "base": () => (/* binding */ base),
            /* harmony export */   "keyName": () => (/* binding */ keyName),
            /* harmony export */   "shift": () => (/* binding */ shift)
            /* harmony export */ });
        var base = {
            8: "Backspace",
            9: "Tab",
            10: "Enter",
            12: "NumLock",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            44: "PrintScreen",
            45: "Insert",
            46: "Delete",
            59: ";",
            61: "=",
            91: "Meta",
            92: "Meta",
            106: "*",
            107: "+",
            108: ",",
            109: "-",
            110: ".",
            111: "/",
            144: "NumLock",
            145: "ScrollLock",
            160: "Shift",
            161: "Shift",
            162: "Control",
            163: "Control",
            164: "Alt",
            165: "Alt",
            173: "-",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'"
        }

        var shift = {
            48: ")",
            49: "!",
            50: "@",
            51: "#",
            52: "$",
            53: "%",
            54: "^",
            55: "&",
            56: "*",
            57: "(",
            59: ":",
            61: "+",
            173: "_",
            186: ":",
            187: "+",
            188: "<",
            189: "_",
            190: ">",
            191: "?",
            192: "~",
            219: "{",
            220: "|",
            221: "}",
            222: "\""
        }

        var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent)
        var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent)
        var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform)
        var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent)
        var brokenModifierNames = mac || chrome && +chrome[1] < 57

// Fill in the digit keys
        for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)

// The function keys
        for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i

// And the alphabetic keys
        for (var i = 65; i <= 90; i++) {
            base[i] = String.fromCharCode(i + 32)
            shift[i] = String.fromCharCode(i)
        }

// For each code that doesn't have a shift-equivalent, copy the base name
        for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]

        function keyName(event) {
            var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
                ie && event.shiftKey && event.key && event.key.length == 1 ||
                event.key == "Unidentified"
            var name = (!ignoreKey && event.key) ||
                (event.shiftKey ? shift : base)[event.keyCode] ||
                event.key || "Unidentified"
            // Edge sometimes produces wrong names (Issue #3)
            if (name == "Esc") name = "Escape"
            if (name == "Del") name = "Delete"
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
            if (name == "Left") name = "ArrowLeft"
            if (name == "Up") name = "ArrowUp"
            if (name == "Right") name = "ArrowRight"
            if (name == "Down") name = "ArrowDown"
            return name
        }


        /***/ }),

    /***/ "./node_modules/axios/package.json":
    /*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
    /***/ ((module) => {

        "use strict";
        module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

        /***/ })

}]);
//# sourceMappingURL=vendor.js.map